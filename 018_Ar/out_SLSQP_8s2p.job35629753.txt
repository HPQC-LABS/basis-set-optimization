created virtual environment CPython3.10.2.final.0-64 in 596ms
  creator CPython3Posix(dest=/localscratch/nike.35629753.0/ENV, clear=True, no_vcs_ignore=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/nike/.local/share/virtualenv)
    added seed packages: pip==22.3.1, setuptools==67.3.3, wheel==0.38.4+computecanada
  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: pip in /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages (22.3.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pip-23.0+computecanada-py3-none-any.whl
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 22.3.1
    Uninstalling pip-22.3.1:
      Successfully uninstalled pip-22.3.1
Successfully installed pip-23.0+computecanada
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /home/nike/pyscf_ad/dist/pyscf-2.1.1+ad-cp310-cp310-linux_x86_64.whl
Processing /home/nike/properties_ad/dist/pyscf_properties-0.1.0+ad-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/absl_py-1.4.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/contourpy-1.0.7+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/fonttools-4.39.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/h5py-3.8.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jax-0.4.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/jaxlib-0.4.2+cuda11.cudnn82.computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jaxopt-0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/kiwisolver-1.4.4+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/matplotlib-3.7.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.24.2+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/opt_einsum-3.3.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/packaging-23.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/Pillow-9.4.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.9+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyscfad-0.1.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.10.1+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.5.0+computecanada-py3-none-any.whl
Installing collected packages: typing_extensions, six, pyparsing, Pillow, packaging, numpy, kiwisolver, fonttools, cycler, absl_py, scipy, python-dateutil, opt-einsum, h5py, contourpy, pyscf, matplotlib, jaxlib, pyscf-properties, jax, jaxopt, pyscfad
Successfully installed Pillow-9.4.0+computecanada absl_py-1.4.0+computecanada contourpy-1.0.7+computecanada cycler-0.11.0+computecanada fonttools-4.39.0+computecanada h5py-3.8.0+computecanada jax-0.4.2+computecanada jaxlib-0.4.2+cuda11.cudnn82.computecanada jaxopt-0.6+computecanada kiwisolver-1.4.4+computecanada matplotlib-3.7.0+computecanada numpy-1.24.2+computecanada opt-einsum-3.3.0+computecanada packaging-23.0+computecanada pyparsing-3.0.9+computecanada pyscf-2.1.1+ad pyscf-properties-0.1.0+ad pyscfad-0.1.2+computecanada python-dateutil-2.8.2+computecanada scipy-1.10.1+computecanada six-1.16.0+computecanada typing_extensions-4.5.0+computecanada
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:26 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466227        1
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984662266622, 1.0]], [0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466227]
bas 1, expnt(s) = [18354.96165567]
bas 2, expnt(s) = [2232.15693733]
bas 3, expnt(s) = [457.77843089]
bas 4, expnt(s) = [121.89136989]
bas 5, expnt(s) = [37.61846071]
bas 6, expnt(s) = [4.74115623]
bas 7, expnt(s) = [0.39118886]
bas 8, expnt(s) = [8.59867023]
bas 9, expnt(s) = [0.49085158]
CPU time:         1.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215694e+03 8.20462183e+02 4.57778431e+02 2.50038289e+02
 1.21891370e+02 9.26818604e+01 3.76184607e+01 3.83765377e+01
 4.74115623e+00 8.11761078e+00 3.91188864e-01 1.24969746e+00
 8.59867023e+00 4.29559679e+01 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974823747614
cond(S) = 85.75421286475894
E1 = -689.1240990212627  E_coul = 184.9158354836871
init E= -504.208263537576
    CPU time for initialize scf      0.77 sec, wall time      0.18 sec
  HOMO = -0.680897892440812  LUMO = 85.12420479463
  mo_energy =
[-1.21647808e+02 -1.32805714e+01 -7.62156318e+00 -7.62156318e+00
 -7.62156318e+00 -1.65065003e+00 -6.80897892e-01 -6.80897892e-01
 -6.80897892e-01  8.51242048e+01  6.73510837e+02  3.71290592e+03
  1.58584875e+04  5.42637006e+04]
E1 = -706.5761183222054  E_coul = 198.94318665567403
cycle= 1 E= -507.632931666531  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.26 sec, wall time      0.26 sec
diis-norm(errvec)=0.44121
diis-c [-0.1946662  1.       ]
  HOMO = -0.236291724805195  LUMO = 86.4565846340352
  mo_energy =
[-1.20260499e+02 -1.22525980e+01 -6.65322298e+00 -6.65322298e+00
 -6.65322298e+00 -1.16344208e+00 -2.36291725e-01 -2.36291725e-01
 -2.36291725e-01  8.64565846e+01  6.74881714e+02  3.71416897e+03
  1.58596370e+04  5.42647699e+04]
E1 = -706.5447071764535  E_coul = 198.91134803520163
cycle= 2 E= -507.633359141252  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.09 sec, wall time      0.09 sec
diis-norm(errvec)=0.00512401
diis-c [-2.62439115e-05  2.44254160e-04  9.99755746e-01]
  HOMO = -0.236466623929498  LUMO = 86.4530681532525
  mo_energy =
[-1.20269128e+02 -1.22537844e+01 -6.65506104e+00 -6.65506104e+00
 -6.65506104e+00 -1.16350671e+00 -2.36466624e-01 -2.36466624e-01
 -2.36466624e-01  8.64530682e+01  6.74871195e+02  3.71415345e+03
  1.58596189e+04  5.42647505e+04]
E1 = -706.5442680035893  E_coul = 198.91090875264447
cycle= 3 E= -507.633359250945  delta_E= -1.1e-07  |g|= 9.79e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133477
diis-c [-4.01009294e-10  3.36385843e-05 -2.62432993e-02  1.02620966e+00]
  HOMO = -0.236468962392688  LUMO = 86.453020889845
  mo_energy =
[-1.20269247e+02 -1.22538011e+01 -6.65508933e+00 -6.65508933e+00
 -6.65508933e+00 -1.16350741e+00 -2.36468962e-01 -2.36468962e-01
 -2.36468962e-01  8.64530209e+01  6.74871070e+02  3.71415329e+03
  1.58596187e+04  5.42647504e+04]
E1 = -706.5442604540574  E_coul = 198.91090120306947
cycle= 4 E= -507.633359250988  delta_E= -4.31e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5442604540574  E_coul = 198.91090120306947
  HOMO = -0.236468946114552  LUMO = 86.4530212279458
  mo_energy =
[-1.20269246e+02 -1.22538009e+01 -6.65508917e+00 -6.65508917e+00
 -6.65508917e+00 -1.16350741e+00 -2.36468946e-01 -2.36468946e-01
 -2.36468946e-01  8.64530212e+01  6.74871071e+02  3.71415329e+03
  1.58596187e+04  5.42647504e+04]
E1 = -706.5442604910445  E_coul = 198.9109012400567
Extra cycle  E= -507.633359250988  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      1.15 sec, wall time      0.56 sec
exp = [7.34198466e+03 1.83549617e+04 2.23215694e+03 4.57778431e+02
 1.21891370e+02 3.76184607e+01 4.74115623e+00 3.91188864e-01
 8.59867023e+00 4.90851581e-01]
E = -507.63335925098784
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466227        1
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984662266622, 1.0]], [0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466227]
bas 1, expnt(s) = [18354.96165567]
bas 2, expnt(s) = [2232.15693733]
bas 3, expnt(s) = [457.77843089]
bas 4, expnt(s) = [121.89136989]
bas 5, expnt(s) = [37.61846071]
bas 6, expnt(s) = [4.74115623]
bas 7, expnt(s) = [0.39118886]
bas 8, expnt(s) = [8.59867023]
bas 9, expnt(s) = [0.49085158]
CPU time:         2.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215694e+03 8.20462183e+02 4.57778431e+02 2.50038289e+02
 1.21891370e+02 9.26818604e+01 3.76184607e+01 3.83765377e+01
 4.74115623e+00 8.11761078e+00 3.91188864e-01 1.24969746e+00
 8.59867023e+00 4.29559679e+01 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974823747614
cond(S) = 85.75421286475894
E1 = -689.1240990212627  E_coul = 184.9158354836871
init E= -504.208263537576
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680897892440812  LUMO = 85.12420479463
  mo_energy =
[-1.21647808e+02 -1.32805714e+01 -7.62156318e+00 -7.62156318e+00
 -7.62156318e+00 -1.65065003e+00 -6.80897892e-01 -6.80897892e-01
 -6.80897892e-01  8.51242048e+01  6.73510837e+02  3.71290592e+03
  1.58584875e+04  5.42637006e+04]
E1 = -706.5761183222054  E_coul = 198.94318665567403
cycle= 1 E= -507.632931666531  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.44121
diis-c [-0.1946662  1.       ]
  HOMO = -0.236291724805195  LUMO = 86.4565846340352
  mo_energy =
[-1.20260499e+02 -1.22525980e+01 -6.65322298e+00 -6.65322298e+00
 -6.65322298e+00 -1.16344208e+00 -2.36291725e-01 -2.36291725e-01
 -2.36291725e-01  8.64565846e+01  6.74881714e+02  3.71416897e+03
  1.58596370e+04  5.42647699e+04]
E1 = -706.5447071764535  E_coul = 198.91134803520163
cycle= 2 E= -507.633359141252  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00512401
diis-c [-2.62439115e-05  2.44254160e-04  9.99755746e-01]
  HOMO = -0.236466623929498  LUMO = 86.4530681532525
  mo_energy =
[-1.20269128e+02 -1.22537844e+01 -6.65506104e+00 -6.65506104e+00
 -6.65506104e+00 -1.16350671e+00 -2.36466624e-01 -2.36466624e-01
 -2.36466624e-01  8.64530682e+01  6.74871195e+02  3.71415345e+03
  1.58596189e+04  5.42647505e+04]
E1 = -706.5442680035893  E_coul = 198.91090875264447
cycle= 3 E= -507.633359250945  delta_E= -1.1e-07  |g|= 9.79e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133477
diis-c [-4.01009294e-10  3.36385843e-05 -2.62432993e-02  1.02620966e+00]
  HOMO = -0.236468962392688  LUMO = 86.453020889845
  mo_energy =
[-1.20269247e+02 -1.22538011e+01 -6.65508933e+00 -6.65508933e+00
 -6.65508933e+00 -1.16350741e+00 -2.36468962e-01 -2.36468962e-01
 -2.36468962e-01  8.64530209e+01  6.74871070e+02  3.71415329e+03
  1.58596187e+04  5.42647504e+04]
E1 = -706.5442604540574  E_coul = 198.91090120306947
cycle= 4 E= -507.633359250988  delta_E= -4.31e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5442604540574  E_coul = 198.91090120306947
  HOMO = -0.236468946114552  LUMO = 86.4530212279458
  mo_energy =
[-1.20269246e+02 -1.22538009e+01 -6.65508917e+00 -6.65508917e+00
 -6.65508917e+00 -1.16350741e+00 -2.36468946e-01 -2.36468946e-01
 -2.36468946e-01  8.64530212e+01  6.74871071e+02  3.71415329e+03
  1.58596187e+04  5.42647504e+04]
E1 = -706.5442604910445  E_coul = 198.9109012400567
Extra cycle  E= -507.633359250988  delta_E= 1.14e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.75421286475894
E1 = -706.5442604910445  E_coul = 198.9109012400567
init E= -507.633359250988
    CPU time for initialize scf      2.94 sec, wall time      0.28 sec
  HOMO = -0.236468945924173  LUMO = 86.4530212320742
  mo_energy =
[-1.20269246e+02 -1.22538009e+01 -6.65508916e+00 -6.65508916e+00
 -6.65508916e+00 -1.16350741e+00 -2.36468946e-01 -2.36468946e-01
 -2.36468946e-01  8.64530212e+01  6.74871071e+02  3.71415329e+03
  1.58596187e+04  5.42647504e+04]
E1 = -706.5442604916041  E_coul = 198.91090124061648
cycle= 1 E= -507.633359250988  delta_E= 2.27e-13  |g|= 1.3e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5442604916041  E_coul = 198.91090124061648
  HOMO = -0.236468945921487  LUMO = 86.4530212321325
  mo_energy =
[-1.20269246e+02 -1.22538009e+01 -6.65508916e+00 -6.65508916e+00
 -6.65508916e+00 -1.16350741e+00 -2.36468946e-01 -2.36468946e-01
 -2.36468946e-01  8.64530212e+01  6.74871071e+02  3.71415329e+03
  1.58596187e+04  5.42647504e+04]
E1 = -706.5442604916136  E_coul = 198.91090124062615
Extra cycle  E= -507.633359250987  delta_E= 1.14e-13  |g|= 1.49e-11  |ddm|= 4.53e-12
    CPU time for scf_cycle      3.99 sec, wall time      1.17 sec
exp = [7.34198466e+03 1.83549617e+04 2.23215694e+03 4.57778431e+02
 1.21891370e+02 3.76184607e+01 4.74115623e+00 3.91188864e-01
 8.59867023e+00 4.90851581e-01]
grad_E = [-5.69014133e-07 -1.51713059e-06  1.08840498e-04 -4.25414947e-04
  9.14717721e-04 -1.18654970e-03 -1.83503703e-04  9.42437495e-05
 -8.45083689e-05 -3.61008649e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466284        1
[INPUT] 0    0    [1    /1   ]  18354.9616572        1
[INPUT] 0    0    [1    /1   ]  2232.15682849        1
[INPUT] 0    0    [1    /1   ]  457.778856301        1
[INPUT] 0    0    [1    /1   ]  121.89045517         1
[INPUT] 0    0    [1    /1   ]  37.6196472643        1
[INPUT] 0    0    [1    /1   ]  4.74133973119        1
[INPUT] 0    0    [1    /1   ]  0.391094620251       1
[INPUT] 1    0    [1    /1   ]  8.59875474084        1
[INPUT] 1    0    [1    /1   ]  0.490887681728       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984662835636, 1.0]], [0, [18354.961657183685, 1.0]], [0, [2232.156828485197, 1.0]], [0, [457.77885630102196, 1.0]], [0, [121.89045516985469, 1.0]], [0, [37.619647264312064, 1.0]], [0, [4.741339731192676, 1.0]], [0, [0.3910946202506853, 1.0]], [1, [8.598754740838295, 1.0]], [1, [0.49088768172837016, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466284]
bas 1, expnt(s) = [18354.96165718]
bas 2, expnt(s) = [2232.15682849]
bas 3, expnt(s) = [457.7788563]
bas 4, expnt(s) = [121.89045517]
bas 5, expnt(s) = [37.61964726]
bas 6, expnt(s) = [4.74133973]
bas 7, expnt(s) = [0.39109462]
bas 8, expnt(s) = [8.59875474]
bas 9, expnt(s) = [0.49088768]
CPU time:        11.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215683e+03 8.20462153e+02 4.57778856e+02 2.50038464e+02
 1.21890455e+02 9.26813387e+01 3.76196473e+01 3.83774455e+01
 4.74133973e+00 8.11784641e+00 3.91094620e-01 1.24947165e+00
 8.59875474e+00 4.29564957e+01 4.90887682e-01 1.19870429e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319936186260918
cond(S) = 85.75492052148412
E1 = -689.1245040127653  E_coul = 184.91617249589348
init E= -504.208331516872
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680897916709679  LUMO = 85.126788238284
  mo_energy =
[-1.21647708e+02 -1.32805469e+01 -7.62156172e+00 -7.62156172e+00
 -7.62156172e+00 -1.65062187e+00 -6.80897917e-01 -6.80897917e-01
 -6.80897917e-01  8.51267882e+01  6.73513652e+02  3.71290843e+03
  1.58584897e+04  5.42637026e+04]
E1 = -706.5771153425111  E_coul = 198.9441812537224
cycle= 1 E= -507.632934088789  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.441216
diis-c [-0.1946717  1.       ]
  HOMO = -0.236257289319976  LUMO = 86.459232983817
  mo_energy =
[-1.20260323e+02 -1.22525294e+01 -6.65318041e+00 -6.65318041e+00
 -6.65318041e+00 -1.16342152e+00 -2.36257289e-01 -2.36257289e-01
 -2.36257289e-01  8.64592330e+01  6.74884616e+02  3.71417158e+03
  1.58596394e+04  5.42647721e+04]
E1 = -706.5457076444785  E_coul = 198.9123461342461
cycle= 2 E= -507.633361510232  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00512324
diis-c [-2.62360184e-05  2.43978150e-04  9.99756022e-01]
  HOMO = -0.236432196803138  LUMO = 86.4557169143995
  mo_energy =
[-1.20268951e+02 -1.22537157e+01 -6.65501826e+00 -6.65501826e+00
 -6.65501826e+00 -1.16348613e+00 -2.36432197e-01 -2.36432197e-01
 -2.36432197e-01  8.64557169e+01  6.74874098e+02  3.71415606e+03
  1.58596213e+04  5.42647527e+04]
E1 = -706.5452685301099  E_coul = 198.91190691020793
cycle= 3 E= -507.633361619902  delta_E= -1.1e-07  |g|= 9.79e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133457
diis-c [-4.00960850e-10  3.36475001e-05 -2.62431437e-02  1.02620950e+00]
  HOMO = -0.236434535236055  LUMO = 86.455669658477
  mo_energy =
[-1.20269070e+02 -1.22537323e+01 -6.65504654e+00 -6.65504654e+00
 -6.65504654e+00 -1.16348684e+00 -2.36434535e-01 -2.36434535e-01
 -2.36434535e-01  8.64556697e+01  6.74873974e+02  3.71415590e+03
  1.58596211e+04  5.42647525e+04]
E1 = -706.5452609818005  E_coul = 198.91189936185586
cycle= 4 E= -507.633361619945  delta_E= -4.27e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5452609818005  E_coul = 198.91189936185586
  HOMO = -0.236434518958582  LUMO = 86.455669996508
  mo_energy =
[-1.20269069e+02 -1.22537322e+01 -6.65504638e+00 -6.65504638e+00
 -6.65504638e+00 -1.16348683e+00 -2.36434519e-01 -2.36434519e-01
 -2.36434519e-01  8.64556700e+01  6.74873975e+02  3.71415591e+03
  1.58596211e+04  5.42647525e+04]
E1 = -706.5452610187813  E_coul = 198.9118993988361
Extra cycle  E= -507.633361619945  delta_E= -4.55e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34198466e+03 1.83549617e+04 2.23215683e+03 4.57778856e+02
 1.21890455e+02 3.76196473e+01 4.74133973e+00 3.91094620e-01
 8.59875474e+00 4.90887682e-01]
E = -507.63336161994516
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466284        1
[INPUT] 0    0    [1    /1   ]  18354.9616572        1
[INPUT] 0    0    [1    /1   ]  2232.15682849        1
[INPUT] 0    0    [1    /1   ]  457.778856301        1
[INPUT] 0    0    [1    /1   ]  121.89045517         1
[INPUT] 0    0    [1    /1   ]  37.6196472643        1
[INPUT] 0    0    [1    /1   ]  4.74133973119        1
[INPUT] 0    0    [1    /1   ]  0.391094620251       1
[INPUT] 1    0    [1    /1   ]  8.59875474084        1
[INPUT] 1    0    [1    /1   ]  0.490887681728       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984662835636, 1.0]], [0, [18354.961657183685, 1.0]], [0, [2232.156828485197, 1.0]], [0, [457.77885630102196, 1.0]], [0, [121.89045516985469, 1.0]], [0, [37.619647264312064, 1.0]], [0, [4.741339731192676, 1.0]], [0, [0.3910946202506853, 1.0]], [1, [8.598754740838295, 1.0]], [1, [0.49088768172837016, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466284]
bas 1, expnt(s) = [18354.96165718]
bas 2, expnt(s) = [2232.15682849]
bas 3, expnt(s) = [457.7788563]
bas 4, expnt(s) = [121.89045517]
bas 5, expnt(s) = [37.61964726]
bas 6, expnt(s) = [4.74133973]
bas 7, expnt(s) = [0.39109462]
bas 8, expnt(s) = [8.59875474]
bas 9, expnt(s) = [0.49088768]
CPU time:        12.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215683e+03 8.20462153e+02 4.57778856e+02 2.50038464e+02
 1.21890455e+02 9.26813387e+01 3.76196473e+01 3.83774455e+01
 4.74133973e+00 8.11784641e+00 3.91094620e-01 1.24947165e+00
 8.59875474e+00 4.29564957e+01 4.90887682e-01 1.19870429e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319936186260918
cond(S) = 85.75492052148412
E1 = -689.1245040127653  E_coul = 184.91617249589348
init E= -504.208331516872
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680897916709679  LUMO = 85.126788238284
  mo_energy =
[-1.21647708e+02 -1.32805469e+01 -7.62156172e+00 -7.62156172e+00
 -7.62156172e+00 -1.65062187e+00 -6.80897917e-01 -6.80897917e-01
 -6.80897917e-01  8.51267882e+01  6.73513652e+02  3.71290843e+03
  1.58584897e+04  5.42637026e+04]
E1 = -706.5771153425111  E_coul = 198.9441812537224
cycle= 1 E= -507.632934088789  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441216
diis-c [-0.1946717  1.       ]
  HOMO = -0.236257289319976  LUMO = 86.459232983817
  mo_energy =
[-1.20260323e+02 -1.22525294e+01 -6.65318041e+00 -6.65318041e+00
 -6.65318041e+00 -1.16342152e+00 -2.36257289e-01 -2.36257289e-01
 -2.36257289e-01  8.64592330e+01  6.74884616e+02  3.71417158e+03
  1.58596394e+04  5.42647721e+04]
E1 = -706.5457076444785  E_coul = 198.9123461342461
cycle= 2 E= -507.633361510232  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00512324
diis-c [-2.62360184e-05  2.43978150e-04  9.99756022e-01]
  HOMO = -0.236432196803138  LUMO = 86.4557169143995
  mo_energy =
[-1.20268951e+02 -1.22537157e+01 -6.65501826e+00 -6.65501826e+00
 -6.65501826e+00 -1.16348613e+00 -2.36432197e-01 -2.36432197e-01
 -2.36432197e-01  8.64557169e+01  6.74874098e+02  3.71415606e+03
  1.58596213e+04  5.42647527e+04]
E1 = -706.5452685301099  E_coul = 198.91190691020793
cycle= 3 E= -507.633361619902  delta_E= -1.1e-07  |g|= 9.79e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133457
diis-c [-4.00960850e-10  3.36475001e-05 -2.62431437e-02  1.02620950e+00]
  HOMO = -0.236434535236055  LUMO = 86.455669658477
  mo_energy =
[-1.20269070e+02 -1.22537323e+01 -6.65504654e+00 -6.65504654e+00
 -6.65504654e+00 -1.16348684e+00 -2.36434535e-01 -2.36434535e-01
 -2.36434535e-01  8.64556697e+01  6.74873974e+02  3.71415590e+03
  1.58596211e+04  5.42647525e+04]
E1 = -706.5452609818005  E_coul = 198.91189936185586
cycle= 4 E= -507.633361619945  delta_E= -4.27e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5452609818005  E_coul = 198.91189936185586
  HOMO = -0.236434518958582  LUMO = 86.455669996508
  mo_energy =
[-1.20269069e+02 -1.22537322e+01 -6.65504638e+00 -6.65504638e+00
 -6.65504638e+00 -1.16348683e+00 -2.36434519e-01 -2.36434519e-01
 -2.36434519e-01  8.64556700e+01  6.74873975e+02  3.71415591e+03
  1.58596211e+04  5.42647525e+04]
E1 = -706.5452610187813  E_coul = 198.9118993988361
Extra cycle  E= -507.633361619945  delta_E= -4.55e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.75492052148412
E1 = -706.5452610187813  E_coul = 198.9118993988361
init E= -507.633361619945
    CPU time for initialize scf      0.86 sec, wall time      0.05 sec
  HOMO = -0.23643451876821  LUMO = 86.4556700006364
  mo_energy =
[-1.20269069e+02 -1.22537322e+01 -6.65504638e+00 -6.65504638e+00
 -6.65504638e+00 -1.16348683e+00 -2.36434519e-01 -2.36434519e-01
 -2.36434519e-01  8.64556700e+01  6.74873975e+02  3.71415591e+03
  1.58596211e+04  5.42647525e+04]
E1 = -706.5452610193407  E_coul = 198.9118993993958
cycle= 1 E= -507.633361619945  delta_E= 2.27e-13  |g|= 1.31e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5452610193407  E_coul = 198.9118993993958
  HOMO = -0.236434518765525  LUMO = 86.4556700006964
  mo_energy =
[-1.20269069e+02 -1.22537322e+01 -6.65504638e+00 -6.65504638e+00
 -6.65504638e+00 -1.16348683e+00 -2.36434519e-01 -2.36434519e-01
 -2.36434519e-01  8.64556700e+01  6.74873975e+02  3.71415591e+03
  1.58596211e+04  5.42647525e+04]
E1 = -706.5452610193503  E_coul = 198.91189939940537
Extra cycle  E= -507.633361619945  delta_E=    0  |g|= 7.56e-12  |ddm|= 4.48e-12
    CPU time for scf_cycle      1.08 sec, wall time      0.12 sec
exp = [7.34198466e+03 1.83549617e+04 2.23215683e+03 4.57778856e+02
 1.21890455e+02 3.76196473e+01 4.74133973e+00 3.91094620e-01
 8.59875474e+00 4.90887682e-01]
grad_E = [-5.68855722e-07 -1.51731393e-06  1.08815882e-04 -4.24681874e-04
  9.07986279e-04 -1.16597958e-03 -6.18768104e-06 -1.33925927e-03
 -4.29661306e-05  9.87146533e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98468143        1
[INPUT] 0    0    [1    /1   ]  18354.9617068        1
[INPUT] 0    0    [1    /1   ]  2232.15327229        1
[INPUT] 0    0    [1    /1   ]  457.792752884        1
[INPUT] 0    0    [1    /1   ]  121.860600824        1
[INPUT] 0    0    [1    /1   ]  37.6583144087        1
[INPUT] 0    0    [1    /1   ]  4.7464490547         1
[INPUT] 0    0    [1    /1   ]  0.395182761859       1
[INPUT] 1    0    [1    /1   ]  8.60130830382        1
[INPUT] 1    0    [1    /1   ]  0.486951024787       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984681427133, 1.0]], [0, [18354.961706756185, 1.0]], [0, [2232.153272292368, 1.0]], [0, [457.79275288387294, 1.0]], [0, [121.86060082368031, 1.0]], [0, [37.658314408741, 1.0]], [0, [4.746449054700765, 1.0]], [0, [0.39518276185929374, 1.0]], [1, [8.60130830381644, 1.0]], [1, [0.4869510247869139, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98468143]
bas 1, expnt(s) = [18354.96170676]
bas 2, expnt(s) = [2232.15327229]
bas 3, expnt(s) = [457.79275288]
bas 4, expnt(s) = [121.86060082]
bas 5, expnt(s) = [37.65831441]
bas 6, expnt(s) = [4.74644905]
bas 7, expnt(s) = [0.39518276]
bas 8, expnt(s) = [8.6013083]
bas 9, expnt(s) = [0.48695102]
CPU time:        16.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198468e+03 2.00389578e+03 1.83549617e+04 3.98409914e+03
 2.23215327e+03 8.20461173e+02 4.57792753e+02 2.50044156e+02
 1.21860601e+02 9.26643130e+01 3.76583144e+01 3.84070262e+01
 4.74644905e+00 8.12440645e+00 3.95182762e-01 1.25925452e+00
 8.60130830e+00 4.29724422e+01 4.86951025e-01 1.18670015e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.324246418075525
cond(S) = 85.7856052266633
E1 = -689.0681798007174  E_coul = 184.8623659045422
init E= -504.205813896175
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.683906507202234  LUMO = 85.2285954559445
  mo_energy =
[-1.21650361e+02 -1.32861154e+01 -7.62316458e+00 -7.62316458e+00
 -7.62316458e+00 -1.65445912e+00 -6.83906507e-01 -6.83906507e-01
 -6.83906507e-01  8.52285955e+01  6.73615477e+02  3.71299746e+03
  1.58585695e+04  5.42637745e+04]
E1 = -706.4766837723691  E_coul = 198.8440712699114
cycle= 1 E= -507.632612502458  delta_E= -3.43  |g|= 0.315  |ddm|= 0.297
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.441505
diis-c [-0.19492663  1.        ]
  HOMO = -0.242851782126995  LUMO = 86.5584835103646
  mo_energy =
[-1.20264091e+02 -1.22612925e+01 -6.65743634e+00 -6.65743634e+00
 -6.65743634e+00 -1.16823126e+00 -2.42851782e-01 -2.42851782e-01
 -2.42851782e-01  8.65584835e+01  6.74985904e+02  3.71426095e+03
  1.58597201e+04  5.42648450e+04]
E1 = -706.44544287955  E_coul = 198.81240786274012
cycle= 2 E= -507.63303501681  delta_E= -0.000423  |g|= 0.00471  |ddm|= 0.0142
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00509013
diis-c [-2.58981364e-05  2.40403618e-04  9.99759596e-01]
  HOMO = -0.243023365655442  LUMO = 86.554985620183
  mo_energy =
[-1.20272676e+02 -1.22624726e+01 -6.65926516e+00 -6.65926516e+00
 -6.65926516e+00 -1.16829615e+00 -2.43023366e-01 -2.43023366e-01
 -2.43023366e-01  8.65549856e+01  6.74975438e+02  3.71424549e+03
  1.58597020e+04  5.42648256e+04]
E1 = -706.4450062494022  E_coul = 198.8119711240847
cycle= 3 E= -507.633035125318  delta_E= -1.09e-07  |g|= 9.74e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013268
diis-c [-3.95579258e-10  3.39032635e-05 -2.62561487e-02  1.02622225e+00]
  HOMO = -0.243025658677277  LUMO = 86.5549386429722
  mo_energy =
[-1.20272794e+02 -1.22624891e+01 -6.65929329e+00 -6.65929329e+00
 -6.65929329e+00 -1.16829685e+00 -2.43025659e-01 -2.43025659e-01
 -2.43025659e-01  8.65549386e+01  6.74975314e+02  3.71424534e+03
  1.58597018e+04  5.42648255e+04]
E1 = -706.4449987487568  E_coul = 198.81196362339696
cycle= 4 E= -507.63303512536  delta_E= -4.23e-11  |g|= 3.73e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.4449987487568  E_coul = 198.81196362339696
  HOMO = -0.243025642697969  LUMO = 86.5549389792716
  mo_energy =
[-1.20272794e+02 -1.22624890e+01 -6.65929313e+00 -6.65929313e+00
 -6.65929313e+00 -1.16829685e+00 -2.43025643e-01 -2.43025643e-01
 -2.43025643e-01  8.65549390e+01  6.74975315e+02  3.71424534e+03
  1.58597018e+04  5.42648255e+04]
E1 = -706.444998785578  E_coul = 198.8119636602184
Extra cycle  E= -507.63303512536  delta_E= 1.71e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198468e+03 1.83549617e+04 2.23215327e+03 4.57792753e+02
 1.21860601e+02 3.76583144e+01 4.74644905e+00 3.95182762e-01
 8.60130830e+00 4.86951025e-01]
E = -507.63303512535964
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466481        1
[INPUT] 0    0    [1    /1   ]  18354.9616624        1
[INPUT] 0    0    [1    /1   ]  2232.15645104        1
[INPUT] 0    0    [1    /1   ]  457.780331254        1
[INPUT] 0    0    [1    /1   ]  121.887286496        1
[INPUT] 0    0    [1    /1   ]  37.6237513094        1
[INPUT] 0    0    [1    /1   ]  4.74188202347        1
[INPUT] 0    0    [1    /1   ]  0.391528526545       1
[INPUT] 1    0    [1    /1   ]  8.59902577036        1
[INPUT] 1    0    [1    /1   ]  0.490469853681       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984664808897, 1.0]], [0, [18354.9616624452, 1.0]], [0, [2232.156451038768, 1.0]], [0, [457.78033125354074, 1.0]], [0, [121.8872864956879, 1.0]], [0, [37.623751309362646, 1.0]], [0, [4.741882023471169, 1.0]], [0, [0.39152852654458653, 1.0]], [1, [8.599025770355903, 1.0]], [1, [0.4904698536814574, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466481]
bas 1, expnt(s) = [18354.96166245]
bas 2, expnt(s) = [2232.15645104]
bas 3, expnt(s) = [457.78033125]
bas 4, expnt(s) = [121.8872865]
bas 5, expnt(s) = [37.62375131]
bas 6, expnt(s) = [4.74188202]
bas 7, expnt(s) = [0.39152853]
bas 8, expnt(s) = [8.59902577]
bas 9, expnt(s) = [0.49046985]
CPU time:        16.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215645e+03 8.20462049e+02 4.57780331e+02 2.50039068e+02
 1.21887286e+02 9.26795317e+01 3.76237513e+01 3.83805855e+01
 4.74188202e+00 8.11854277e+00 3.91528527e-01 1.25051119e+00
 8.59902577e+00 4.29581881e+01 4.90469854e-01 1.19742905e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32041251665557
cond(S) = 85.75817165068845
E1 = -689.1189448690378  E_coul = 184.91077199882685
init E= -504.208172870211
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681209616489438  LUMO = 85.1376175979888
  mo_energy =
[-1.21647968e+02 -1.32811164e+01 -7.62170943e+00 -7.62170943e+00
 -7.62170943e+00 -1.65102237e+00 -6.81209616e-01 -6.81209616e-01
 -6.81209616e-01  8.51376176e+01  6.73524481e+02  3.71291790e+03
  1.58584982e+04  5.42637103e+04]
E1 = -706.5665846524936  E_coul = 198.9336453694768
cycle= 1 E= -507.632939283017  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441246
diis-c [-0.19469831  1.        ]
  HOMO = -0.236959202468184  LUMO = 86.4697747987605
  mo_energy =
[-1.20260717e+02 -1.22534534e+01 -6.65362526e+00 -6.65362526e+00
 -6.65362526e+00 -1.16393330e+00 -2.36959202e-01 -2.36959202e-01
 -2.36959202e-01  8.64697748e+01  6.74895373e+02  3.71418107e+03
  1.58596480e+04  5.42647799e+04]
E1 = -706.5351947037832  E_coul = 198.90182852377689
cycle= 2 E= -507.633366180006  delta_E= -0.000427  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511972
diis-c [-2.61999265e-05  2.43626669e-04  9.99756373e-01]
  HOMO = -0.237133755580417  LUMO = 86.4662606637773
  mo_energy =
[-1.20269340e+02 -1.22546391e+01 -6.65546214e+00 -6.65546214e+00
 -6.65546214e+00 -1.16399794e+00 -2.37133756e-01 -2.37133756e-01
 -2.37133756e-01  8.64662607e+01  6.74884860e+02  3.71416556e+03
  1.58596298e+04  5.42647604e+04]
E1 = -706.5347558537742  E_coul = 198.901389564222
cycle= 3 E= -507.633366289552  delta_E= -1.1e-07  |g|= 9.78e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133375
diis-c [-4.00382530e-10  3.36745088e-05 -2.62445592e-02  1.02621088e+00]
  HOMO = -0.23713608917649  LUMO = 86.4662134374169
  mo_energy =
[-1.20269460e+02 -1.22546557e+01 -6.65549041e+00 -6.65549041e+00
 -6.65549041e+00 -1.16399865e+00 -2.37136089e-01 -2.37136089e-01
 -2.37136089e-01  8.64662134e+01  6.74884736e+02  3.71416540e+03
  1.58596297e+04  5.42647603e+04]
E1 = -706.5347483105269  E_coul = 198.90138202093212
cycle= 4 E= -507.633366289595  delta_E= -4.25e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5347483105269  E_coul = 198.90138202093212
  HOMO = -0.237136072930734  LUMO = 86.4662137752613
  mo_energy =
[-1.20269459e+02 -1.22546556e+01 -6.65549025e+00 -6.65549025e+00
 -6.65549025e+00 -1.16399864e+00 -2.37136073e-01 -2.37136073e-01
 -2.37136073e-01  8.64662138e+01  6.74884737e+02  3.71416540e+03
  1.58596297e+04  5.42647603e+04]
E1 = -706.5347483474909  E_coul = 198.90138205789594
Extra cycle  E= -507.633366289595  delta_E= -2.27e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198466e+03 1.83549617e+04 2.23215645e+03 4.57780331e+02
 1.21887286e+02 3.76237513e+01 4.74188202e+00 3.91528527e-01
 8.59902577e+00 4.90469854e-01]
E = -507.63336628959496
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466481        1
[INPUT] 0    0    [1    /1   ]  18354.9616624        1
[INPUT] 0    0    [1    /1   ]  2232.15645104        1
[INPUT] 0    0    [1    /1   ]  457.780331254        1
[INPUT] 0    0    [1    /1   ]  121.887286496        1
[INPUT] 0    0    [1    /1   ]  37.6237513094        1
[INPUT] 0    0    [1    /1   ]  4.74188202347        1
[INPUT] 0    0    [1    /1   ]  0.391528526545       1
[INPUT] 1    0    [1    /1   ]  8.59902577036        1
[INPUT] 1    0    [1    /1   ]  0.490469853681       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984664808897, 1.0]], [0, [18354.9616624452, 1.0]], [0, [2232.156451038768, 1.0]], [0, [457.78033125354074, 1.0]], [0, [121.8872864956879, 1.0]], [0, [37.623751309362646, 1.0]], [0, [4.741882023471169, 1.0]], [0, [0.39152852654458653, 1.0]], [1, [8.599025770355903, 1.0]], [1, [0.4904698536814574, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466481]
bas 1, expnt(s) = [18354.96166245]
bas 2, expnt(s) = [2232.15645104]
bas 3, expnt(s) = [457.78033125]
bas 4, expnt(s) = [121.8872865]
bas 5, expnt(s) = [37.62375131]
bas 6, expnt(s) = [4.74188202]
bas 7, expnt(s) = [0.39152853]
bas 8, expnt(s) = [8.59902577]
bas 9, expnt(s) = [0.49046985]
CPU time:        17.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215645e+03 8.20462049e+02 4.57780331e+02 2.50039068e+02
 1.21887286e+02 9.26795317e+01 3.76237513e+01 3.83805855e+01
 4.74188202e+00 8.11854277e+00 3.91528527e-01 1.25051119e+00
 8.59902577e+00 4.29581881e+01 4.90469854e-01 1.19742905e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32041251665557
cond(S) = 85.75817165068845
E1 = -689.1189448690378  E_coul = 184.91077199882685
init E= -504.208172870211
    CPU time for initialize scf      0.12 sec, wall time      0.02 sec
  HOMO = -0.681209616489438  LUMO = 85.1376175979888
  mo_energy =
[-1.21647968e+02 -1.32811164e+01 -7.62170943e+00 -7.62170943e+00
 -7.62170943e+00 -1.65102237e+00 -6.81209616e-01 -6.81209616e-01
 -6.81209616e-01  8.51376176e+01  6.73524481e+02  3.71291790e+03
  1.58584982e+04  5.42637103e+04]
E1 = -706.5665846524936  E_coul = 198.9336453694768
cycle= 1 E= -507.632939283017  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441246
diis-c [-0.19469831  1.        ]
  HOMO = -0.236959202468184  LUMO = 86.4697747987605
  mo_energy =
[-1.20260717e+02 -1.22534534e+01 -6.65362526e+00 -6.65362526e+00
 -6.65362526e+00 -1.16393330e+00 -2.36959202e-01 -2.36959202e-01
 -2.36959202e-01  8.64697748e+01  6.74895373e+02  3.71418107e+03
  1.58596480e+04  5.42647799e+04]
E1 = -706.5351947037832  E_coul = 198.90182852377689
cycle= 2 E= -507.633366180006  delta_E= -0.000427  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511972
diis-c [-2.61999265e-05  2.43626669e-04  9.99756373e-01]
  HOMO = -0.237133755580417  LUMO = 86.4662606637773
  mo_energy =
[-1.20269340e+02 -1.22546391e+01 -6.65546214e+00 -6.65546214e+00
 -6.65546214e+00 -1.16399794e+00 -2.37133756e-01 -2.37133756e-01
 -2.37133756e-01  8.64662607e+01  6.74884860e+02  3.71416556e+03
  1.58596298e+04  5.42647604e+04]
E1 = -706.5347558537742  E_coul = 198.901389564222
cycle= 3 E= -507.633366289552  delta_E= -1.1e-07  |g|= 9.78e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133375
diis-c [-4.00382530e-10  3.36745088e-05 -2.62445592e-02  1.02621088e+00]
  HOMO = -0.23713608917649  LUMO = 86.4662134374169
  mo_energy =
[-1.20269460e+02 -1.22546557e+01 -6.65549041e+00 -6.65549041e+00
 -6.65549041e+00 -1.16399865e+00 -2.37136089e-01 -2.37136089e-01
 -2.37136089e-01  8.64662134e+01  6.74884736e+02  3.71416540e+03
  1.58596297e+04  5.42647603e+04]
E1 = -706.5347483105269  E_coul = 198.90138202093212
cycle= 4 E= -507.633366289595  delta_E= -4.25e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5347483105269  E_coul = 198.90138202093212
  HOMO = -0.237136072930734  LUMO = 86.4662137752613
  mo_energy =
[-1.20269459e+02 -1.22546556e+01 -6.65549025e+00 -6.65549025e+00
 -6.65549025e+00 -1.16399864e+00 -2.37136073e-01 -2.37136073e-01
 -2.37136073e-01  8.64662138e+01  6.74884737e+02  3.71416540e+03
  1.58596297e+04  5.42647603e+04]
E1 = -706.5347483474909  E_coul = 198.90138205789594
Extra cycle  E= -507.633366289595  delta_E= -2.27e-13  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.75817165068845
E1 = -706.5347483474909  E_coul = 198.90138205789594
init E= -507.633366289595
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.237136072740722  LUMO = 86.4662137793921
  mo_energy =
[-1.20269459e+02 -1.22546556e+01 -6.65549024e+00 -6.65549024e+00
 -6.65549024e+00 -1.16399864e+00 -2.37136073e-01 -2.37136073e-01
 -2.37136073e-01  8.64662138e+01  6.74884737e+02  3.71416540e+03
  1.58596297e+04  5.42647603e+04]
E1 = -706.53474834805  E_coul = 198.90138205845474
cycle= 1 E= -507.633366289595  delta_E= -3.41e-13  |g|= 1.26e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.53474834805  E_coul = 198.90138205845474
  HOMO = -0.237136072738041  LUMO = 86.4662137794497
  mo_energy =
[-1.20269459e+02 -1.22546556e+01 -6.65549024e+00 -6.65549024e+00
 -6.65549024e+00 -1.16399864e+00 -2.37136073e-01 -2.37136073e-01
 -2.37136073e-01  8.64662138e+01  6.74884737e+02  3.71416540e+03
  1.58596297e+04  5.42647603e+04]
E1 = -706.5347483480591  E_coul = 198.9013820584644
Extra cycle  E= -507.633366289595  delta_E= 5.68e-13  |g|= 5.91e-12  |ddm|= 4.54e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198466e+03 1.83549617e+04 2.23215645e+03 4.57780331e+02
 1.21887286e+02 3.76237513e+01 4.74188202e+00 3.91528527e-01
 8.59902577e+00 4.90469854e-01]
grad_E = [-5.68320996e-07 -1.51794130e-06  1.08734693e-04 -4.22240144e-04
  8.86047605e-04 -1.10091730e-03  4.11826398e-04  4.46218963e-03
  6.69688734e-04 -1.35169814e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98468607        1
[INPUT] 0    0    [1    /1   ]  18354.9617191        1
[INPUT] 0    0    [1    /1   ]  2232.15238377        1
[INPUT] 0    0    [1    /1   ]  457.796218858        1
[INPUT] 0    0    [1    /1   ]  121.853203723        1
[INPUT] 0    0    [1    /1   ]  37.667784341         1
[INPUT] 0    0    [1    /1   ]  4.74619941877        1
[INPUT] 0    0    [1    /1   ]  0.399364028964       1
[INPUT] 1    0    [1    /1   ]  8.60097406144        1
[INPUT] 1    0    [1    /1   ]  0.494075815985       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984686071948, 1.0]], [0, [18354.961719146988, 1.0]], [0, [2232.1523837727514, 1.0]], [0, [457.7962188578802, 1.0]], [0, [121.85320372348959, 1.0]], [0, [37.667784340956224, 1.0]], [0, [4.746199418769875, 1.0]], [0, [0.39936402896359047, 1.0]], [1, [8.600974061444576, 1.0]], [1, [0.4940758159850688, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98468607]
bas 1, expnt(s) = [18354.96171915]
bas 2, expnt(s) = [2232.15238377]
bas 3, expnt(s) = [457.79621886]
bas 4, expnt(s) = [121.85320372]
bas 5, expnt(s) = [37.66778434]
bas 6, expnt(s) = [4.74619942]
bas 7, expnt(s) = [0.39936403]
bas 8, expnt(s) = [8.60097406]
bas 9, expnt(s) = [0.49407582]
CPU time:        20.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198469e+03 2.00389578e+03 1.83549617e+04 3.98409914e+03
 2.23215238e+03 8.20460928e+02 4.57796219e+02 2.50045576e+02
 1.21853204e+02 9.26600944e+01 3.76677843e+01 3.84142697e+01
 4.74619942e+00 8.12408597e+00 3.99364029e-01 1.26923410e+00
 8.60097406e+00 4.29703548e+01 4.94075816e-01 1.20844361e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.314449804117437
cond(S) = 85.7954338921875
E1 = -689.3946701073726  E_coul = 185.15954940904845
init E= -504.235120698324
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.673363314511666  LUMO = 85.2849329571279
  mo_energy =
[-1.21624967e+02 -1.32617838e+01 -7.60390987e+00 -7.60390987e+00
 -7.60390987e+00 -1.64746487e+00 -6.73363315e-01 -6.73363315e-01
 -6.73363315e-01  8.52849330e+01  6.73669376e+02  3.71304758e+03
  1.58586171e+04  5.42638199e+04]
E1 = -706.9312324109072  E_coul = 199.2990312285085
cycle= 1 E= -507.632201182399  delta_E= -3.4  |g|= 0.316  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441977
diis-c [-0.19534388  1.        ]
  HOMO = -0.224210638530464  LUMO = 86.6256921477417
  mo_energy =
[-1.20226733e+02 -1.22272284e+01 -6.62880898e+00 -6.62880898e+00
 -6.62880898e+00 -1.15377358e+00 -2.24210639e-01 -2.24210639e-01
 -2.24210639e-01  8.66256921e+01  6.75051987e+02  3.71432372e+03
  1.58597805e+04  5.42649034e+04]
E1 = -706.8998934405834  E_coul = 199.2672679792815
cycle= 2 E= -507.632625461302  delta_E= -0.000424  |g|= 0.00472  |ddm|= 0.0143
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0051023
diis-c [-2.60214211e-05  2.47900347e-04  9.99752100e-01]
  HOMO = -0.224387041688371  LUMO = 86.6221835607734
  mo_energy =
[-1.20235344e+02 -1.22284119e+01 -6.63063936e+00 -6.63063936e+00
 -6.63063936e+00 -1.15383938e+00 -2.24387042e-01 -2.24387042e-01
 -2.24387042e-01  8.66221836e+01  6.75041487e+02  3.71430821e+03
  1.58597623e+04  5.42648840e+04]
E1 = -706.8994555465564  E_coul = 199.26682997625022
cycle= 3 E= -507.632625570306  delta_E= -1.09e-07  |g|= 9.76e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133034
diis-c [-3.97483222e-10  3.38332518e-05 -2.62632274e-02  1.02622939e+00]
  HOMO = -0.224389406674944  LUMO = 86.6221364256577
  mo_energy =
[-1.20235464e+02 -1.22284285e+01 -6.63066753e+00 -6.63066753e+00
 -6.63066753e+00 -1.15384010e+00 -2.24389407e-01 -2.24389407e-01
 -2.24389407e-01  8.66221364e+01  6.75041362e+02  3.71430805e+03
  1.58597622e+04  5.42648838e+04]
E1 = -706.8994480240431  E_coul = 199.26682245369435
cycle= 4 E= -507.632625570349  delta_E= -4.26e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.8994480240431  E_coul = 199.26682245369435
  HOMO = -0.224389390231863  LUMO = 86.6221367633973
  mo_energy =
[-1.20235463e+02 -1.22284284e+01 -6.63066737e+00 -6.63066737e+00
 -6.63066737e+00 -1.15384009e+00 -2.24389390e-01 -2.24389390e-01
 -2.24389390e-01  8.66221368e+01  6.75041363e+02  3.71430805e+03
  1.58597622e+04  5.42648838e+04]
E1 = -706.899448061029  E_coul = 199.26682249068074
Extra cycle  E= -507.632625570348  delta_E= 4.55e-13  |g|= 6.47e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198469e+03 1.83549617e+04 2.23215238e+03 4.57796219e+02
 1.21853204e+02 3.76677843e+01 4.74619942e+00 3.99364029e-01
 8.60097406e+00 4.94075816e-01]
E = -507.6326255703483
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466694        1
[INPUT] 0    0    [1    /1   ]  18354.9616681        1
[INPUT] 0    0    [1    /1   ]  2232.15604431        1
[INPUT] 0    0    [1    /1   ]  457.781920014        1
[INPUT] 0    0    [1    /1   ]  121.883878218        1
[INPUT] 0    0    [1    /1   ]  37.6281546125        1
[INPUT] 0    0    [1    /1   ]  4.742313763          1
[INPUT] 0    0    [1    /1   ]  0.392312076786       1
[INPUT] 1    0    [1    /1   ]  8.59922059946        1
[INPUT] 1    0    [1    /1   ]  0.490830449912       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984666935202, 1.0]], [0, [18354.96166811538, 1.0]], [0, [2232.156044312166, 1.0]], [0, [457.7819200139747, 1.0]], [0, [121.88387821846807, 1.0]], [0, [37.628154612522, 1.0]], [0, [4.7423137630010395, 1.0]], [0, [0.39231207678648694, 1.0]], [1, [8.59922059946477, 1.0]], [1, [0.49083044991181857, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466694]
bas 1, expnt(s) = [18354.96166812]
bas 2, expnt(s) = [2232.15604431]
bas 3, expnt(s) = [457.78192001]
bas 4, expnt(s) = [121.88387822]
bas 5, expnt(s) = [37.62815461]
bas 6, expnt(s) = [4.74231376]
bas 7, expnt(s) = [0.39231208]
bas 8, expnt(s) = [8.5992206]
bas 9, expnt(s) = [0.49083045]
CPU time:        21.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198467e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215604e+03 8.20461937e+02 4.57781920e+02 2.50039719e+02
 1.21883878e+02 9.26775880e+01 3.76281546e+01 3.83839544e+01
 4.74231376e+00 8.11909714e+00 3.92312077e-01 1.25238767e+00
 8.59922060e+00 4.29594048e+01 4.90830450e-01 1.19852960e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319847313352856
cond(S) = 85.76188874351728
E1 = -689.1472762998138  E_coul = 184.93615819996978
init E= -504.211118099844
    CPU time for initialize scf      0.12 sec, wall time      0.02 sec
  HOMO = -0.680408875357792  LUMO = 85.1523853373063
  mo_energy =
[-1.21645632e+02 -1.32791465e+01 -7.61989157e+00 -7.61989157e+00
 -7.61989157e+00 -1.65067749e+00 -6.80408875e-01 -6.80408875e-01
 -6.80408875e-01  8.51523853e+01  6.73539005e+02  3.71293090e+03
  1.58585101e+04  5.42637213e+04]
E1 = -706.6032700640086  E_coul = 198.97032930031892
cycle= 1 E= -507.63294076369  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441319
diis-c [-0.19476233  1.        ]
  HOMO = -0.235685414800795  LUMO = 86.4853762362809
  mo_energy =
[-1.20257308e+02 -1.22508194e+01 -6.65113078e+00 -6.65113078e+00
 -6.65113078e+00 -1.16293976e+00 -2.35685415e-01 -2.35685415e-01
 -2.35685415e-01  8.64853762e+01  6.74911042e+02  3.71419534e+03
  1.58596612e+04  5.42647922e+04]
E1 = -706.5718852078121  E_coul = 198.9385178118306
cycle= 2 E= -507.633367395982  delta_E= -0.000427  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511796
diis-c [-2.61819481e-05  2.44091372e-04  9.99755909e-01]
  HOMO = -0.235860152595162  LUMO = 86.4818626559327
  mo_energy =
[-1.20265930e+02 -1.22520048e+01 -6.65296701e+00 -6.65296701e+00
 -6.65296701e+00 -1.16300452e+00 -2.35860153e-01 -2.35860153e-01
 -2.35860153e-01  8.64818627e+01  6.74900531e+02  3.71417983e+03
  1.58596431e+04  5.42647728e+04]
E1 = -706.5714464534566  E_coul = 198.9380789479837
cycle= 3 E= -507.633367505473  delta_E= -1.09e-07  |g|= 9.78e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133341
diis-c [-4.00087884e-10  3.36901426e-05 -2.62464814e-02  1.02621279e+00]
  HOMO = -0.235862489334763  LUMO = 86.4818154385709
  mo_energy =
[-1.20266050e+02 -1.22520215e+01 -6.65299527e+00 -6.65299527e+00
 -6.65299527e+00 -1.16300522e+00 -2.35862489e-01 -2.35862489e-01
 -2.35862489e-01  8.64818154e+01  6.74900407e+02  3.71417967e+03
  1.58596429e+04  5.42647726e+04]
E1 = -706.5714389122726  E_coul = 198.93807140675722
cycle= 4 E= -507.633367505515  delta_E= -4.25e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5714389122726  E_coul = 198.93807140675722
  HOMO = -0.235862473069215  LUMO = 86.4818157764088
  mo_energy =
[-1.20266049e+02 -1.22520213e+01 -6.65299511e+00 -6.65299511e+00
 -6.65299511e+00 -1.16300521e+00 -2.35862473e-01 -2.35862473e-01
 -2.35862473e-01  8.64818158e+01  6.74900408e+02  3.71417967e+03
  1.58596429e+04  5.42647726e+04]
E1 = -706.5714389492389  E_coul = 198.93807144372343
Extra cycle  E= -507.633367505515  delta_E= -1.14e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198467e+03 1.83549617e+04 2.23215604e+03 4.57781920e+02
 1.21883878e+02 3.76281546e+01 4.74231376e+00 3.92312077e-01
 8.59922060e+00 4.90830450e-01]
E = -507.6333675055155
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98466694        1
[INPUT] 0    0    [1    /1   ]  18354.9616681        1
[INPUT] 0    0    [1    /1   ]  2232.15604431        1
[INPUT] 0    0    [1    /1   ]  457.781920014        1
[INPUT] 0    0    [1    /1   ]  121.883878218        1
[INPUT] 0    0    [1    /1   ]  37.6281546125        1
[INPUT] 0    0    [1    /1   ]  4.742313763          1
[INPUT] 0    0    [1    /1   ]  0.392312076786       1
[INPUT] 1    0    [1    /1   ]  8.59922059946        1
[INPUT] 1    0    [1    /1   ]  0.490830449912       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984666935202, 1.0]], [0, [18354.96166811538, 1.0]], [0, [2232.156044312166, 1.0]], [0, [457.7819200139747, 1.0]], [0, [121.88387821846807, 1.0]], [0, [37.628154612522, 1.0]], [0, [4.7423137630010395, 1.0]], [0, [0.39231207678648694, 1.0]], [1, [8.59922059946477, 1.0]], [1, [0.49083044991181857, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98466694]
bas 1, expnt(s) = [18354.96166812]
bas 2, expnt(s) = [2232.15604431]
bas 3, expnt(s) = [457.78192001]
bas 4, expnt(s) = [121.88387822]
bas 5, expnt(s) = [37.62815461]
bas 6, expnt(s) = [4.74231376]
bas 7, expnt(s) = [0.39231208]
bas 8, expnt(s) = [8.5992206]
bas 9, expnt(s) = [0.49083045]
CPU time:        21.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198467e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215604e+03 8.20461937e+02 4.57781920e+02 2.50039719e+02
 1.21883878e+02 9.26775880e+01 3.76281546e+01 3.83839544e+01
 4.74231376e+00 8.11909714e+00 3.92312077e-01 1.25238767e+00
 8.59922060e+00 4.29594048e+01 4.90830450e-01 1.19852960e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319847313352856
cond(S) = 85.76188874351728
E1 = -689.1472762998138  E_coul = 184.93615819996978
init E= -504.211118099844
    CPU time for initialize scf      0.12 sec, wall time      0.02 sec
  HOMO = -0.680408875357792  LUMO = 85.1523853373063
  mo_energy =
[-1.21645632e+02 -1.32791465e+01 -7.61989157e+00 -7.61989157e+00
 -7.61989157e+00 -1.65067749e+00 -6.80408875e-01 -6.80408875e-01
 -6.80408875e-01  8.51523853e+01  6.73539005e+02  3.71293090e+03
  1.58585101e+04  5.42637213e+04]
E1 = -706.6032700640086  E_coul = 198.97032930031892
cycle= 1 E= -507.63294076369  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441319
diis-c [-0.19476233  1.        ]
  HOMO = -0.235685414800795  LUMO = 86.4853762362809
  mo_energy =
[-1.20257308e+02 -1.22508194e+01 -6.65113078e+00 -6.65113078e+00
 -6.65113078e+00 -1.16293976e+00 -2.35685415e-01 -2.35685415e-01
 -2.35685415e-01  8.64853762e+01  6.74911042e+02  3.71419534e+03
  1.58596612e+04  5.42647922e+04]
E1 = -706.5718852078121  E_coul = 198.9385178118306
cycle= 2 E= -507.633367395982  delta_E= -0.000427  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511796
diis-c [-2.61819481e-05  2.44091372e-04  9.99755909e-01]
  HOMO = -0.235860152595162  LUMO = 86.4818626559327
  mo_energy =
[-1.20265930e+02 -1.22520048e+01 -6.65296701e+00 -6.65296701e+00
 -6.65296701e+00 -1.16300452e+00 -2.35860153e-01 -2.35860153e-01
 -2.35860153e-01  8.64818627e+01  6.74900531e+02  3.71417983e+03
  1.58596431e+04  5.42647728e+04]
E1 = -706.5714464534566  E_coul = 198.9380789479837
cycle= 3 E= -507.633367505473  delta_E= -1.09e-07  |g|= 9.78e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133341
diis-c [-4.00087884e-10  3.36901426e-05 -2.62464814e-02  1.02621279e+00]
  HOMO = -0.235862489334763  LUMO = 86.4818154385709
  mo_energy =
[-1.20266050e+02 -1.22520215e+01 -6.65299527e+00 -6.65299527e+00
 -6.65299527e+00 -1.16300522e+00 -2.35862489e-01 -2.35862489e-01
 -2.35862489e-01  8.64818154e+01  6.74900407e+02  3.71417967e+03
  1.58596429e+04  5.42647726e+04]
E1 = -706.5714389122726  E_coul = 198.93807140675722
cycle= 4 E= -507.633367505515  delta_E= -4.25e-11  |g|= 3.75e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5714389122726  E_coul = 198.93807140675722
  HOMO = -0.235862473069215  LUMO = 86.4818157764088
  mo_energy =
[-1.20266049e+02 -1.22520213e+01 -6.65299511e+00 -6.65299511e+00
 -6.65299511e+00 -1.16300521e+00 -2.35862473e-01 -2.35862473e-01
 -2.35862473e-01  8.64818158e+01  6.74900408e+02  3.71417967e+03
  1.58596429e+04  5.42647726e+04]
E1 = -706.5714389492389  E_coul = 198.93807144372343
Extra cycle  E= -507.633367505515  delta_E= -1.14e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.76188874351728
E1 = -706.5714389492389  E_coul = 198.93807144372343
init E= -507.633367505515
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.235862472878899  LUMO = 86.4818157805379
  mo_energy =
[-1.20266049e+02 -1.22520213e+01 -6.65299511e+00 -6.65299511e+00
 -6.65299511e+00 -1.16300521e+00 -2.35862473e-01 -2.35862473e-01
 -2.35862473e-01  8.64818158e+01  6.74900408e+02  3.71417967e+03
  1.58596429e+04  5.42647726e+04]
E1 = -706.5714389497979  E_coul = 198.9380714442826
cycle= 1 E= -507.633367505515  delta_E= 2.27e-13  |g|= 1.3e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5714389497979  E_coul = 198.9380714442826
  HOMO = -0.235862472876216  LUMO = 86.4818157805965
  mo_energy =
[-1.20266049e+02 -1.22520213e+01 -6.65299511e+00 -6.65299511e+00
 -6.65299511e+00 -1.16300521e+00 -2.35862473e-01 -2.35862473e-01
 -2.35862473e-01  8.64818158e+01  6.74900408e+02  3.71417967e+03
  1.58596429e+04  5.42647726e+04]
E1 = -706.5714389498078  E_coul = 198.93807144429215
Extra cycle  E= -507.633367505516  delta_E= -3.41e-13  |g|= 5.79e-12  |ddm|= 4.53e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198467e+03 1.83549617e+04 2.23215604e+03 4.57781920e+02
 1.21883878e+02 3.76281546e+01 4.74231376e+00 3.92312077e-01
 8.59922060e+00 4.90830450e-01]
grad_E = [-5.67747557e-07 -1.51861018e-06  1.08648849e-04 -4.19650558e-04
  8.63039028e-04 -1.03324002e-03  8.40688421e-04  1.81201063e-02
  5.89426946e-04  2.05061331e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:42 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98467634        1
[INPUT] 0    0    [1    /1   ]  18354.9616932        1
[INPUT] 0    0    [1    /1   ]  2232.15424508        1
[INPUT] 0    0    [1    /1   ]  457.788940721        1
[INPUT] 0    0    [1    /1   ]  121.86887683         1
[INPUT] 0    0    [1    /1   ]  37.647400997         1
[INPUT] 0    0    [1    /1   ]  4.74241818994        1
[INPUT] 0    0    [1    /1   ]  0.391776724538       1
[INPUT] 1    0    [1    /1   ]  8.59917376455        1
[INPUT] 1    0    [1    /1   ]  0.490726646489       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984676340966, 1.0]], [0, [18354.961693204747, 1.0]], [0, [2232.154245075755, 1.0]], [0, [457.7889407212553, 1.0]], [0, [121.86887683041118, 1.0]], [0, [37.64740099704106, 1.0]], [0, [4.742418189943933, 1.0]], [0, [0.3917767245381896, 1.0]], [1, [8.599173764554259, 1.0]], [1, [0.490726646489376, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98467634]
bas 1, expnt(s) = [18354.9616932]
bas 2, expnt(s) = [2232.15424508]
bas 3, expnt(s) = [457.78894072]
bas 4, expnt(s) = [121.86887683]
bas 5, expnt(s) = [37.647401]
bas 6, expnt(s) = [4.74241819]
bas 7, expnt(s) = [0.39177672]
bas 8, expnt(s) = [8.59917376]
bas 9, expnt(s) = [0.49072665]
CPU time:        25.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198468e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215425e+03 8.20461441e+02 4.57788941e+02 2.50042595e+02
 1.21868877e+02 9.26690329e+01 3.76474010e+01 3.83986781e+01
 4.74241819e+00 8.11923123e+00 3.91776725e-01 1.25110568e+00
 8.59917376e+00 4.29591123e+01 4.90726646e-01 1.19821277e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3200434983735
cond(S) = 85.77174489981343
E1 = -689.1350193998794  E_coul = 184.9246647231061
init E= -504.210354676773
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680779787555964  LUMO = 85.1830592059242
  mo_energy =
[-1.21646480e+02 -1.32801989e+01 -7.62074654e+00 -7.62074654e+00
 -7.62074654e+00 -1.65080579e+00 -6.80779788e-01 -6.80779788e-01
 -6.80779788e-01  8.51830592e+01  6.73574070e+02  3.71296246e+03
  1.58585387e+04  5.42637467e+04]
E1 = -706.5884116071472  E_coul = 198.95543111885954
cycle= 1 E= -507.632980488288  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.44136
diis-c [-0.19479842  1.        ]
  HOMO = -0.236213753869472  LUMO = 86.5159405096762
  mo_energy =
[-1.20258310e+02 -1.22520727e+01 -6.65219292e+00 -6.65219292e+00
 -6.65219292e+00 -1.16338247e+00 -2.36213754e-01 -2.36213754e-01
 -2.36213754e-01  8.65159405e+01  6.74946062e+02  3.71422686e+03
  1.58596898e+04  5.42648176e+04]
E1 = -706.5570578384304  E_coul = 198.92365107731285
cycle= 2 E= -507.633406761118  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511356
diis-c [-2.61376759e-05  2.35526923e-04  9.99764473e-01]
  HOMO = -0.236388273747289  LUMO = 86.5124305349764
  mo_energy =
[-1.20266923e+02 -1.22532571e+01 -6.65402748e+00 -6.65402748e+00
 -6.65402748e+00 -1.16344709e+00 -2.36388274e-01 -2.36388274e-01
 -2.36388274e-01  8.65124305e+01  6.74935564e+02  3.71421137e+03
  1.58596716e+04  5.42647983e+04]
E1 = -706.5566195618011  E_coul = 198.92321269131614
cycle= 3 E= -507.633406870485  delta_E= -1.09e-07  |g|= 9.77e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013318
diis-c [-3.99259418e-10  3.37902958e-05 -2.62377351e-02  1.02620394e+00]
  HOMO = -0.236390605379197  LUMO = 86.5123834019994
  mo_energy =
[-1.20267042e+02 -1.22532737e+01 -6.65405569e+00 -6.65405569e+00
 -6.65405569e+00 -1.16344779e+00 -2.36390605e-01 -2.36390605e-01
 -2.36390605e-01  8.65123834e+01  6.74935440e+02  3.71421121e+03
  1.58596714e+04  5.42647981e+04]
E1 = -706.5566120333948  E_coul = 198.92320516286725
cycle= 4 E= -507.633406870528  delta_E= -4.26e-11  |g|= 3.74e-07  |ddm|= 3.58e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5566120333948  E_coul = 198.92320516286725
  HOMO = -0.236390589151357  LUMO = 86.5123837391515
  mo_energy =
[-1.20267041e+02 -1.22532736e+01 -6.65405553e+00 -6.65405553e+00
 -6.65405553e+00 -1.16344779e+00 -2.36390589e-01 -2.36390589e-01
 -2.36390589e-01  8.65123837e+01  6.74935441e+02  3.71421122e+03
  1.58596714e+04  5.42647981e+04]
E1 = -706.5566120702886  E_coul = 198.92320519976101
Extra cycle  E= -507.633406870528  delta_E=    0  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198468e+03 1.83549617e+04 2.23215425e+03 4.57788941e+02
 1.21868877e+02 3.76474010e+01 4.74241819e+00 3.91776725e-01
 8.59917376e+00 4.90726646e-01]
E = -507.63340687052755
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:42 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98467634        1
[INPUT] 0    0    [1    /1   ]  18354.9616932        1
[INPUT] 0    0    [1    /1   ]  2232.15424508        1
[INPUT] 0    0    [1    /1   ]  457.788940721        1
[INPUT] 0    0    [1    /1   ]  121.86887683         1
[INPUT] 0    0    [1    /1   ]  37.647400997         1
[INPUT] 0    0    [1    /1   ]  4.74241818994        1
[INPUT] 0    0    [1    /1   ]  0.391776724538       1
[INPUT] 1    0    [1    /1   ]  8.59917376455        1
[INPUT] 1    0    [1    /1   ]  0.490726646489       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984676340966, 1.0]], [0, [18354.961693204747, 1.0]], [0, [2232.154245075755, 1.0]], [0, [457.7889407212553, 1.0]], [0, [121.86887683041118, 1.0]], [0, [37.64740099704106, 1.0]], [0, [4.742418189943933, 1.0]], [0, [0.3917767245381896, 1.0]], [1, [8.599173764554259, 1.0]], [1, [0.490726646489376, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98467634]
bas 1, expnt(s) = [18354.9616932]
bas 2, expnt(s) = [2232.15424508]
bas 3, expnt(s) = [457.78894072]
bas 4, expnt(s) = [121.86887683]
bas 5, expnt(s) = [37.647401]
bas 6, expnt(s) = [4.74241819]
bas 7, expnt(s) = [0.39177672]
bas 8, expnt(s) = [8.59917376]
bas 9, expnt(s) = [0.49072665]
CPU time:        26.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198468e+03 2.00389577e+03 1.83549617e+04 3.98409913e+03
 2.23215425e+03 8.20461441e+02 4.57788941e+02 2.50042595e+02
 1.21868877e+02 9.26690329e+01 3.76474010e+01 3.83986781e+01
 4.74241819e+00 8.11923123e+00 3.91776725e-01 1.25110568e+00
 8.59917376e+00 4.29591123e+01 4.90726646e-01 1.19821277e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3200434983735
cond(S) = 85.77174489981343
E1 = -689.1350193998794  E_coul = 184.9246647231061
init E= -504.210354676773
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680779787555964  LUMO = 85.1830592059242
  mo_energy =
[-1.21646480e+02 -1.32801989e+01 -7.62074654e+00 -7.62074654e+00
 -7.62074654e+00 -1.65080579e+00 -6.80779788e-01 -6.80779788e-01
 -6.80779788e-01  8.51830592e+01  6.73574070e+02  3.71296246e+03
  1.58585387e+04  5.42637467e+04]
E1 = -706.5884116071472  E_coul = 198.95543111885954
cycle= 1 E= -507.632980488288  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.44136
diis-c [-0.19479842  1.        ]
  HOMO = -0.236213753869472  LUMO = 86.5159405096762
  mo_energy =
[-1.20258310e+02 -1.22520727e+01 -6.65219292e+00 -6.65219292e+00
 -6.65219292e+00 -1.16338247e+00 -2.36213754e-01 -2.36213754e-01
 -2.36213754e-01  8.65159405e+01  6.74946062e+02  3.71422686e+03
  1.58596898e+04  5.42648176e+04]
E1 = -706.5570578384304  E_coul = 198.92365107731285
cycle= 2 E= -507.633406761118  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511356
diis-c [-2.61376759e-05  2.35526923e-04  9.99764473e-01]
  HOMO = -0.236388273747289  LUMO = 86.5124305349764
  mo_energy =
[-1.20266923e+02 -1.22532571e+01 -6.65402748e+00 -6.65402748e+00
 -6.65402748e+00 -1.16344709e+00 -2.36388274e-01 -2.36388274e-01
 -2.36388274e-01  8.65124305e+01  6.74935564e+02  3.71421137e+03
  1.58596716e+04  5.42647983e+04]
E1 = -706.5566195618011  E_coul = 198.92321269131614
cycle= 3 E= -507.633406870485  delta_E= -1.09e-07  |g|= 9.77e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013318
diis-c [-3.99259418e-10  3.37902958e-05 -2.62377351e-02  1.02620394e+00]
  HOMO = -0.236390605379197  LUMO = 86.5123834019994
  mo_energy =
[-1.20267042e+02 -1.22532737e+01 -6.65405569e+00 -6.65405569e+00
 -6.65405569e+00 -1.16344779e+00 -2.36390605e-01 -2.36390605e-01
 -2.36390605e-01  8.65123834e+01  6.74935440e+02  3.71421121e+03
  1.58596714e+04  5.42647981e+04]
E1 = -706.5566120333948  E_coul = 198.92320516286725
cycle= 4 E= -507.633406870528  delta_E= -4.26e-11  |g|= 3.74e-07  |ddm|= 3.58e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5566120333948  E_coul = 198.92320516286725
  HOMO = -0.236390589151357  LUMO = 86.5123837391515
  mo_energy =
[-1.20267041e+02 -1.22532736e+01 -6.65405553e+00 -6.65405553e+00
 -6.65405553e+00 -1.16344779e+00 -2.36390589e-01 -2.36390589e-01
 -2.36390589e-01  8.65123837e+01  6.74935441e+02  3.71421122e+03
  1.58596714e+04  5.42647981e+04]
E1 = -706.5566120702886  E_coul = 198.92320519976101
Extra cycle  E= -507.633406870528  delta_E=    0  |g|= 6.45e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.77174489981343
E1 = -706.5566120702886  E_coul = 198.92320519976101
init E= -507.633406870528
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236390588961515  LUMO = 86.5123837432735
  mo_energy =
[-1.20267041e+02 -1.22532736e+01 -6.65405553e+00 -6.65405553e+00
 -6.65405553e+00 -1.16344779e+00 -2.36390589e-01 -2.36390589e-01
 -2.36390589e-01  8.65123837e+01  6.74935441e+02  3.71421122e+03
  1.58596714e+04  5.42647981e+04]
E1 = -706.5566120708463  E_coul = 198.92320520031868
cycle= 1 E= -507.633406870528  delta_E= -1.14e-13  |g|= 1.28e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5566120708463  E_coul = 198.92320520031868
  HOMO = -0.236390588958839  LUMO = 86.5123837433317
  mo_energy =
[-1.20267041e+02 -1.22532736e+01 -6.65405553e+00 -6.65405553e+00
 -6.65405553e+00 -1.16344779e+00 -2.36390589e-01 -2.36390589e-01
 -2.36390589e-01  8.65123837e+01  6.74935441e+02  3.71421122e+03
  1.58596714e+04  5.42647981e+04]
E1 = -706.5566120708561  E_coul = 198.92320520032845
Extra cycle  E= -507.633406870528  delta_E=    0  |g|= 7.36e-12  |ddm|= 4.51e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198468e+03 1.83549617e+04 2.23215425e+03 4.57788941e+02
 1.21868877e+02 3.76474010e+01 4.74241819e+00 3.91776725e-01
 8.59917376e+00 4.90726646e-01]
grad_E = [-5.65088687e-07 -1.52145408e-06  1.08261336e-04 -4.08093393e-04
  7.61796437e-04 -7.27492611e-04  1.08363462e-03  9.02843440e-03
  6.56319648e-04 -3.25891092e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98471025        1
[INPUT] 0    0    [1    /1   ]  18354.9617837        1
[INPUT] 0    0    [1    /1   ]  2232.14775851        1
[INPUT] 0    0    [1    /1   ]  457.814212399        1
[INPUT] 0    0    [1    /1   ]  121.815176841        1
[INPUT] 0    0    [1    /1   ]  37.7156145528        1
[INPUT] 0    0    [1    /1   ]  4.74137729665        1
[INPUT] 0    0    [1    /1   ]  0.39102885479        1
[INPUT] 1    0    [1    /1   ]  8.59865662471        1
[INPUT] 1    0    [1    /1   ]  0.490763770746       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984710247958, 1.0]], [0, [18354.96178368858, 1.0]], [0, [2232.147758510044, 1.0]], [0, [457.81421239908553, 1.0]], [0, [121.81517684053291, 1.0]], [0, [37.71561455282369, 1.0]], [0, [4.741377296653629, 1.0]], [0, [0.391028854790317, 1.0]], [1, [8.598656624706324, 1.0]], [1, [0.4907637707456605, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98471025]
bas 1, expnt(s) = [18354.96178369]
bas 2, expnt(s) = [2232.14775851]
bas 3, expnt(s) = [457.8142124]
bas 4, expnt(s) = [121.81517684]
bas 5, expnt(s) = [37.71561455]
bas 6, expnt(s) = [4.7413773]
bas 7, expnt(s) = [0.39102885]
bas 8, expnt(s) = [8.59865662]
bas 9, expnt(s) = [0.49076377]
CPU time:        30.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214776e+03 8.20459653e+02 4.57814212e+02 2.50052947e+02
 1.21815177e+02 9.26384061e+01 3.77156146e+01 3.84508474e+01
 4.74137730e+00 8.11789465e+00 3.91028855e-01 1.24931406e+00
 8.59865662e+00 4.29558830e+01 4.90763771e-01 1.19832608e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320095749939384
cond(S) = 85.8067134671518
E1 = -689.1219398195898  E_coul = 184.91181868233787
init E= -504.210121137252
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681073986769715  LUMO = 85.2917032682798
  mo_energy =
[-1.21647370e+02 -1.32816970e+01 -7.62179110e+00 -7.62179110e+00
 -7.62179110e+00 -1.65082057e+00 -6.81073987e-01 -6.81073987e-01
 -6.81073987e-01  8.52917033e+01  6.73697228e+02  3.71307379e+03
  1.58586395e+04  5.42638367e+04]
E1 = -706.574278076613  E_coul = 198.94123821264543
cycle= 1 E= -507.633039863968  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441536
diis-c [-0.19495405  1.        ]
  HOMO = -0.236548190730198  LUMO = 86.624847055256
  mo_energy =
[-1.20259044e+02 -1.22536559e+01 -6.65334762e+00 -6.65334762e+00
 -6.65334762e+00 -1.16372313e+00 -2.36548191e-01 -2.36548191e-01
 -2.36548191e-01  8.66248471e+01  6.75069753e+02  3.71433879e+03
  1.58597913e+04  5.42649084e+04]
E1 = -706.5430088358171  E_coul = 198.9095435388193
cycle= 2 E= -507.633465296998  delta_E= -0.000425  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510357
diis-c [-2.60382045e-05  2.04821714e-04  9.99795178e-01]
  HOMO = -0.236722286911979  LUMO = 86.6213468848334
  mo_energy =
[-1.20267633e+02 -1.22548374e+01 -6.65517750e+00 -6.65517750e+00
 -6.65517750e+00 -1.16378747e+00 -2.36722287e-01 -2.36722287e-01
 -2.36722287e-01  8.66213469e+01  6.75059290e+02  3.71432334e+03
  1.58597732e+04  5.42648891e+04]
E1 = -706.5425718400551  E_coul = 198.90910643393994
cycle= 3 E= -507.633465406115  delta_E= -1.09e-07  |g|= 9.75e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132745
diis-c [-3.96573356e-10  3.41087434e-05 -2.62055068e-02  1.02617140e+00]
  HOMO = -0.236724606306038  LUMO = 86.6213000077732
  mo_energy =
[-1.20267752e+02 -1.22548539e+01 -6.65520558e+00 -6.65520558e+00
 -6.65520558e+00 -1.16378817e+00 -2.36724606e-01 -2.36724606e-01
 -2.36724606e-01  8.66213000e+01  6.75059166e+02  3.71432319e+03
  1.58597731e+04  5.42648889e+04]
E1 = -706.5425643499077  E_coul = 198.90909894375028
cycle= 4 E= -507.633465406157  delta_E= -4.23e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5425643499077  E_coul = 198.90909894375028
  HOMO = -0.236724590172596  LUMO = 86.6213003429225
  mo_energy =
[-1.20267751e+02 -1.22548538e+01 -6.65520542e+00 -6.65520542e+00
 -6.65520542e+00 -1.16378816e+00 -2.36724590e-01 -2.36724590e-01
 -2.36724590e-01  8.66213003e+01  6.75059167e+02  3.71432319e+03
  1.58597731e+04  5.42648889e+04]
E1 = -706.5425643865934  E_coul = 198.909098980436
Extra cycle  E= -507.633465406157  delta_E=    0  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198471e+03 1.83549618e+04 2.23214776e+03 4.57814212e+02
 1.21815177e+02 3.77156146e+01 4.74137730e+00 3.91028855e-01
 8.59865662e+00 4.90763771e-01]
E = -507.6334654061574
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98471025        1
[INPUT] 0    0    [1    /1   ]  18354.9617837        1
[INPUT] 0    0    [1    /1   ]  2232.14775851        1
[INPUT] 0    0    [1    /1   ]  457.814212399        1
[INPUT] 0    0    [1    /1   ]  121.815176841        1
[INPUT] 0    0    [1    /1   ]  37.7156145528        1
[INPUT] 0    0    [1    /1   ]  4.74137729665        1
[INPUT] 0    0    [1    /1   ]  0.39102885479        1
[INPUT] 1    0    [1    /1   ]  8.59865662471        1
[INPUT] 1    0    [1    /1   ]  0.490763770746       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984710247958, 1.0]], [0, [18354.96178368858, 1.0]], [0, [2232.147758510044, 1.0]], [0, [457.81421239908553, 1.0]], [0, [121.81517684053291, 1.0]], [0, [37.71561455282369, 1.0]], [0, [4.741377296653629, 1.0]], [0, [0.391028854790317, 1.0]], [1, [8.598656624706324, 1.0]], [1, [0.4907637707456605, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98471025]
bas 1, expnt(s) = [18354.96178369]
bas 2, expnt(s) = [2232.14775851]
bas 3, expnt(s) = [457.8142124]
bas 4, expnt(s) = [121.81517684]
bas 5, expnt(s) = [37.71561455]
bas 6, expnt(s) = [4.7413773]
bas 7, expnt(s) = [0.39102885]
bas 8, expnt(s) = [8.59865662]
bas 9, expnt(s) = [0.49076377]
CPU time:        30.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214776e+03 8.20459653e+02 4.57814212e+02 2.50052947e+02
 1.21815177e+02 9.26384061e+01 3.77156146e+01 3.84508474e+01
 4.74137730e+00 8.11789465e+00 3.91028855e-01 1.24931406e+00
 8.59865662e+00 4.29558830e+01 4.90763771e-01 1.19832608e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320095749939384
cond(S) = 85.8067134671518
E1 = -689.1219398195898  E_coul = 184.91181868233787
init E= -504.210121137252
    CPU time for initialize scf      0.12 sec, wall time      0.02 sec
  HOMO = -0.681073986769715  LUMO = 85.2917032682798
  mo_energy =
[-1.21647370e+02 -1.32816970e+01 -7.62179110e+00 -7.62179110e+00
 -7.62179110e+00 -1.65082057e+00 -6.81073987e-01 -6.81073987e-01
 -6.81073987e-01  8.52917033e+01  6.73697228e+02  3.71307379e+03
  1.58586395e+04  5.42638367e+04]
E1 = -706.574278076613  E_coul = 198.94123821264543
cycle= 1 E= -507.633039863968  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441536
diis-c [-0.19495405  1.        ]
  HOMO = -0.236548190730198  LUMO = 86.624847055256
  mo_energy =
[-1.20259044e+02 -1.22536559e+01 -6.65334762e+00 -6.65334762e+00
 -6.65334762e+00 -1.16372313e+00 -2.36548191e-01 -2.36548191e-01
 -2.36548191e-01  8.66248471e+01  6.75069753e+02  3.71433879e+03
  1.58597913e+04  5.42649084e+04]
E1 = -706.5430088358171  E_coul = 198.9095435388193
cycle= 2 E= -507.633465296998  delta_E= -0.000425  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510357
diis-c [-2.60382045e-05  2.04821714e-04  9.99795178e-01]
  HOMO = -0.236722286911979  LUMO = 86.6213468848334
  mo_energy =
[-1.20267633e+02 -1.22548374e+01 -6.65517750e+00 -6.65517750e+00
 -6.65517750e+00 -1.16378747e+00 -2.36722287e-01 -2.36722287e-01
 -2.36722287e-01  8.66213469e+01  6.75059290e+02  3.71432334e+03
  1.58597732e+04  5.42648891e+04]
E1 = -706.5425718400551  E_coul = 198.90910643393994
cycle= 3 E= -507.633465406115  delta_E= -1.09e-07  |g|= 9.75e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132745
diis-c [-3.96573356e-10  3.41087434e-05 -2.62055068e-02  1.02617140e+00]
  HOMO = -0.236724606306038  LUMO = 86.6213000077732
  mo_energy =
[-1.20267752e+02 -1.22548539e+01 -6.65520558e+00 -6.65520558e+00
 -6.65520558e+00 -1.16378817e+00 -2.36724606e-01 -2.36724606e-01
 -2.36724606e-01  8.66213000e+01  6.75059166e+02  3.71432319e+03
  1.58597731e+04  5.42648889e+04]
E1 = -706.5425643499077  E_coul = 198.90909894375028
cycle= 4 E= -507.633465406157  delta_E= -4.23e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5425643499077  E_coul = 198.90909894375028
  HOMO = -0.236724590172596  LUMO = 86.6213003429225
  mo_energy =
[-1.20267751e+02 -1.22548538e+01 -6.65520542e+00 -6.65520542e+00
 -6.65520542e+00 -1.16378816e+00 -2.36724590e-01 -2.36724590e-01
 -2.36724590e-01  8.66213003e+01  6.75059167e+02  3.71432319e+03
  1.58597731e+04  5.42648889e+04]
E1 = -706.5425643865934  E_coul = 198.909098980436
Extra cycle  E= -507.633465406157  delta_E=    0  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.8067134671518
E1 = -706.5425643865934  E_coul = 198.909098980436
init E= -507.633465406157
    CPU time for initialize scf      1.10 sec, wall time      0.07 sec
  HOMO = -0.236724589983867  LUMO = 86.6213003470191
  mo_energy =
[-1.20267751e+02 -1.22548538e+01 -6.65520541e+00 -6.65520541e+00
 -6.65520541e+00 -1.16378816e+00 -2.36724590e-01 -2.36724590e-01
 -2.36724590e-01  8.66213003e+01  6.75059167e+02  3.71432319e+03
  1.58597731e+04  5.42648889e+04]
E1 = -706.5425643871484  E_coul = 198.909098980991
cycle= 1 E= -507.633465406157  delta_E= -5.68e-14  |g|= 1.29e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.13 sec, wall time      0.01 sec
E1 = -706.5425643871484  E_coul = 198.909098980991
  HOMO = -0.236724589981201  LUMO = 86.6213003470785
  mo_energy =
[-1.20267751e+02 -1.22548538e+01 -6.65520541e+00 -6.65520541e+00
 -6.65520541e+00 -1.16378816e+00 -2.36724590e-01 -2.36724590e-01
 -2.36724590e-01  8.66213003e+01  6.75059167e+02  3.71432319e+03
  1.58597731e+04  5.42648889e+04]
E1 = -706.5425643871575  E_coul = 198.90909898100026
Extra cycle  E= -507.633465406157  delta_E= 2.27e-13  |g|= 4.08e-12  |ddm|= 4.48e-12
    CPU time for scf_cycle      1.28 sec, wall time      0.14 sec
exp = [7.34198471e+03 1.83549618e+04 2.23214776e+03 4.57814212e+02
 1.21815177e+02 3.77156146e+01 4.74137730e+00 3.91028855e-01
 8.59865662e+00 4.90763771e-01]
grad_E = [-5.55505316e-07 -1.53149003e-06  1.06893350e-04 -3.67203899e-04
  4.07631239e-04  3.37546948e-04  7.56421968e-04 -3.47928498e-03
  2.24309434e-04 -3.57689096e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98471409        1
[INPUT] 0    0    [1    /1   ]  18354.961794         1
[INPUT] 0    0    [1    /1   ]  2232.14702305        1
[INPUT] 0    0    [1    /1   ]  457.817028248        1
[INPUT] 0    0    [1    /1   ]  121.809567572        1
[INPUT] 0    0    [1    /1   ]  37.7218813789        1
[INPUT] 0    0    [1    /1   ]  4.74067711362        1
[INPUT] 0    0    [1    /1   ]  0.391170793681       1
[INPUT] 1    0    [1    /1   ]  8.59851453695        1
[INPUT] 1    0    [1    /1   ]  0.490827725788       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984714089123, 1.0]], [0, [18354.961793988452, 1.0]], [0, [2232.1470230477407, 1.0]], [0, [457.81702824779114, 1.0]], [0, [121.80956757174123, 1.0]], [0, [37.72188137888319, 1.0]], [0, [4.74067711362237, 1.0]], [0, [0.39117079368073493, 1.0]], [1, [8.59851453694629, 1.0]], [1, [0.49082772578807665, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98471409]
bas 1, expnt(s) = [18354.96179399]
bas 2, expnt(s) = [2232.14702305]
bas 3, expnt(s) = [457.81702825]
bas 4, expnt(s) = [121.80956757]
bas 5, expnt(s) = [37.72188138]
bas 6, expnt(s) = [4.74067711]
bas 7, expnt(s) = [0.39117079]
bas 8, expnt(s) = [8.59851454]
bas 9, expnt(s) = [0.49082773]
CPU time:        34.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214702e+03 8.20459450e+02 4.57817028e+02 2.50054101e+02
 1.21809568e+02 9.26352068e+01 3.77218814e+01 3.84556391e+01
 4.74067711e+00 8.11699553e+00 3.91170794e-01 1.24965416e+00
 8.59851454e+00 4.29549957e+01 4.90827726e-01 1.19852129e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000755375136
cond(S) = 85.80949209893957
E1 = -689.1251930074175  E_coul = 184.9148195139511
init E= -504.210373493466
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680929953647444  LUMO = 85.299780047575
  mo_energy =
[-1.21647185e+02 -1.32814958e+01 -7.62159398e+00 -7.62159398e+00
 -7.62159398e+00 -1.65074742e+00 -6.80929954e-01 -6.80929954e-01
 -6.80929954e-01  8.52997800e+01  6.73705743e+02  3.71308184e+03
  1.58586469e+04  5.42638432e+04]
E1 = -706.5783364192157  E_coul = 198.94529497588314
cycle= 1 E= -507.633041443333  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441549
diis-c [-0.19496576  1.        ]
  HOMO = -0.236335331069887  LUMO = 86.6329938162713
  mo_energy =
[-1.20258837e+02 -1.22533947e+01 -6.65309598e+00 -6.65309598e+00
 -6.65309598e+00 -1.16355726e+00 -2.36335331e-01 -2.36335331e-01
 -2.36335331e-01  8.66329938e+01  6.75078310e+02  3.71434686e+03
  1.58597987e+04  5.42649149e+04]
E1 = -706.5470657956962  E_coul = 198.9135987922378
cycle= 2 E= -507.633467003458  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510487
diis-c [-2.60518194e-05  2.01314969e-04  9.99798685e-01]
  HOMO = -0.236509465071456  LUMO = 86.6294935076914
  mo_energy =
[-1.20267427e+02 -1.22545762e+01 -6.65492596e+00 -6.65492596e+00
 -6.65492596e+00 -1.16362162e+00 -2.36509465e-01 -2.36509465e-01
 -2.36509465e-01  8.66294935e+01  6.75067848e+02  3.71433141e+03
  1.58597806e+04  5.42648956e+04]
E1 = -706.546628766018  E_coul = 198.91316165338876
cycle= 3 E= -507.633467112629  delta_E= -1.09e-07  |g|= 9.75e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132754
diis-c [-3.96434961e-10  3.41266840e-05 -2.62012604e-02  1.02616713e+00]
  HOMO = -0.236511784534573  LUMO = 86.62944664059
  mo_energy =
[-1.20267545e+02 -1.22545927e+01 -6.65495403e+00 -6.65495403e+00
 -6.65495403e+00 -1.16362231e+00 -2.36511785e-01 -2.36511785e-01
 -2.36511785e-01  8.66294466e+01  6.75067725e+02  3.71433126e+03
  1.58597805e+04  5.42648954e+04]
E1 = -706.5466212769604  E_coul = 198.91315416428887
cycle= 4 E= -507.633467112672  delta_E= -4.23e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5466212769604  E_coul = 198.91315416428887
  HOMO = -0.236511768401692  LUMO = 86.6294469756789
  mo_energy =
[-1.20267545e+02 -1.22545926e+01 -6.65495387e+00 -6.65495387e+00
 -6.65495387e+00 -1.16362231e+00 -2.36511768e-01 -2.36511768e-01
 -2.36511768e-01  8.66294470e+01  6.75067726e+02  3.71433126e+03
  1.58597805e+04  5.42648954e+04]
E1 = -706.5466213136411  E_coul = 198.91315420096967
Extra cycle  E= -507.633467112671  delta_E= 5.68e-14  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198471e+03 1.83549618e+04 2.23214702e+03 4.57817028e+02
 1.21809568e+02 3.77218814e+01 4.74067711e+00 3.91170794e-01
 8.59851454e+00 4.90827726e-01]
E = -507.6334671126715
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98471409        1
[INPUT] 0    0    [1    /1   ]  18354.961794         1
[INPUT] 0    0    [1    /1   ]  2232.14702305        1
[INPUT] 0    0    [1    /1   ]  457.817028248        1
[INPUT] 0    0    [1    /1   ]  121.809567572        1
[INPUT] 0    0    [1    /1   ]  37.7218813789        1
[INPUT] 0    0    [1    /1   ]  4.74067711362        1
[INPUT] 0    0    [1    /1   ]  0.391170793681       1
[INPUT] 1    0    [1    /1   ]  8.59851453695        1
[INPUT] 1    0    [1    /1   ]  0.490827725788       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984714089123, 1.0]], [0, [18354.961793988452, 1.0]], [0, [2232.1470230477407, 1.0]], [0, [457.81702824779114, 1.0]], [0, [121.80956757174123, 1.0]], [0, [37.72188137888319, 1.0]], [0, [4.74067711362237, 1.0]], [0, [0.39117079368073493, 1.0]], [1, [8.59851453694629, 1.0]], [1, [0.49082772578807665, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98471409]
bas 1, expnt(s) = [18354.96179399]
bas 2, expnt(s) = [2232.14702305]
bas 3, expnt(s) = [457.81702825]
bas 4, expnt(s) = [121.80956757]
bas 5, expnt(s) = [37.72188138]
bas 6, expnt(s) = [4.74067711]
bas 7, expnt(s) = [0.39117079]
bas 8, expnt(s) = [8.59851454]
bas 9, expnt(s) = [0.49082773]
CPU time:        35.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214702e+03 8.20459450e+02 4.57817028e+02 2.50054101e+02
 1.21809568e+02 9.26352068e+01 3.77218814e+01 3.84556391e+01
 4.74067711e+00 8.11699553e+00 3.91170794e-01 1.24965416e+00
 8.59851454e+00 4.29549957e+01 4.90827726e-01 1.19852129e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000755375136
cond(S) = 85.80949209893957
E1 = -689.1251930074175  E_coul = 184.9148195139511
init E= -504.210373493466
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680929953647444  LUMO = 85.299780047575
  mo_energy =
[-1.21647185e+02 -1.32814958e+01 -7.62159398e+00 -7.62159398e+00
 -7.62159398e+00 -1.65074742e+00 -6.80929954e-01 -6.80929954e-01
 -6.80929954e-01  8.52997800e+01  6.73705743e+02  3.71308184e+03
  1.58586469e+04  5.42638432e+04]
E1 = -706.5783364192157  E_coul = 198.94529497588314
cycle= 1 E= -507.633041443333  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441549
diis-c [-0.19496576  1.        ]
  HOMO = -0.236335331069887  LUMO = 86.6329938162713
  mo_energy =
[-1.20258837e+02 -1.22533947e+01 -6.65309598e+00 -6.65309598e+00
 -6.65309598e+00 -1.16355726e+00 -2.36335331e-01 -2.36335331e-01
 -2.36335331e-01  8.66329938e+01  6.75078310e+02  3.71434686e+03
  1.58597987e+04  5.42649149e+04]
E1 = -706.5470657956962  E_coul = 198.9135987922378
cycle= 2 E= -507.633467003458  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510487
diis-c [-2.60518194e-05  2.01314969e-04  9.99798685e-01]
  HOMO = -0.236509465071456  LUMO = 86.6294935076914
  mo_energy =
[-1.20267427e+02 -1.22545762e+01 -6.65492596e+00 -6.65492596e+00
 -6.65492596e+00 -1.16362162e+00 -2.36509465e-01 -2.36509465e-01
 -2.36509465e-01  8.66294935e+01  6.75067848e+02  3.71433141e+03
  1.58597806e+04  5.42648956e+04]
E1 = -706.546628766018  E_coul = 198.91316165338876
cycle= 3 E= -507.633467112629  delta_E= -1.09e-07  |g|= 9.75e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132754
diis-c [-3.96434961e-10  3.41266840e-05 -2.62012604e-02  1.02616713e+00]
  HOMO = -0.236511784534573  LUMO = 86.62944664059
  mo_energy =
[-1.20267545e+02 -1.22545927e+01 -6.65495403e+00 -6.65495403e+00
 -6.65495403e+00 -1.16362231e+00 -2.36511785e-01 -2.36511785e-01
 -2.36511785e-01  8.66294466e+01  6.75067725e+02  3.71433126e+03
  1.58597805e+04  5.42648954e+04]
E1 = -706.5466212769604  E_coul = 198.91315416428887
cycle= 4 E= -507.633467112672  delta_E= -4.23e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5466212769604  E_coul = 198.91315416428887
  HOMO = -0.236511768401692  LUMO = 86.6294469756789
  mo_energy =
[-1.20267545e+02 -1.22545926e+01 -6.65495387e+00 -6.65495387e+00
 -6.65495387e+00 -1.16362231e+00 -2.36511768e-01 -2.36511768e-01
 -2.36511768e-01  8.66294470e+01  6.75067726e+02  3.71433126e+03
  1.58597805e+04  5.42648954e+04]
E1 = -706.5466213136411  E_coul = 198.91315420096967
Extra cycle  E= -507.633467112671  delta_E= 5.68e-14  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.80949209893957
E1 = -706.5466213136411  E_coul = 198.91315420096967
init E= -507.633467112671
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236511768212953  LUMO = 86.6294469797762
  mo_energy =
[-1.20267545e+02 -1.22545926e+01 -6.65495387e+00 -6.65495387e+00
 -6.65495387e+00 -1.16362231e+00 -2.36511768e-01 -2.36511768e-01
 -2.36511768e-01  8.66294470e+01  6.75067726e+02  3.71433126e+03
  1.58597805e+04  5.42648954e+04]
E1 = -706.5466213141959  E_coul = 198.91315420152424
cycle= 1 E= -507.633467112672  delta_E= -2.27e-13  |g|= 1.26e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5466213141959  E_coul = 198.91315420152424
  HOMO = -0.23651176821029  LUMO = 86.6294469798342
  mo_energy =
[-1.20267545e+02 -1.22545926e+01 -6.65495387e+00 -6.65495387e+00
 -6.65495387e+00 -1.16362231e+00 -2.36511768e-01 -2.36511768e-01
 -2.36511768e-01  8.66294470e+01  6.75067726e+02  3.71433126e+03
  1.58597805e+04  5.42648954e+04]
E1 = -706.5466213142055  E_coul = 198.91315420153384
Extra cycle  E= -507.633467112672  delta_E= 1.14e-13  |g|= 9.33e-12  |ddm|= 4.49e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198471e+03 1.83549618e+04 2.23214702e+03 4.57817028e+02
 1.21809568e+02 3.77218814e+01 4.74067711e+00 3.91170794e-01
 8.59851454e+00 4.90827726e-01]
grad_E = [-5.54546916e-07 -1.53244139e-06  1.06762507e-04 -3.63317700e-04
  3.75460345e-04  4.32614266e-04  2.16105194e-04 -1.02383950e-03
  2.99967240e-05 -7.47432256e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98471628        1
[INPUT] 0    0    [1    /1   ]  18354.9617999        1
[INPUT] 0    0    [1    /1   ]  2232.14660279        1
[INPUT] 0    0    [1    /1   ]  457.818575704        1
[INPUT] 0    0    [1    /1   ]  121.806956507        1
[INPUT] 0    0    [1    /1   ]  37.7236451368        1
[INPUT] 0    0    [1    /1   ]  4.740220347          1
[INPUT] 0    0    [1    /1   ]  0.391266154012       1
[INPUT] 1    0    [1    /1   ]  8.59846160181        1
[INPUT] 1    0    [1    /1   ]  0.49086174065        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984716279877, 1.0]], [0, [18354.961799924436, 1.0]], [0, [2232.14660279417, 1.0]], [0, [457.8185757042671, 1.0]], [0, [121.80695650743026, 1.0]], [0, [37.72364513676646, 1.0]], [0, [4.740220347000647, 1.0]], [0, [0.39126615401179743, 1.0]], [1, [8.598461601806168, 1.0]], [1, [0.49086174065022287, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98471628]
bas 1, expnt(s) = [18354.96179992]
bas 2, expnt(s) = [2232.14660279]
bas 3, expnt(s) = [457.8185757]
bas 4, expnt(s) = [121.80695651]
bas 5, expnt(s) = [37.72364514]
bas 6, expnt(s) = [4.74022035]
bas 7, expnt(s) = [0.39126615]
bas 8, expnt(s) = [8.5984616]
bas 9, expnt(s) = [0.49086174]
CPU time:        39.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214660e+03 8.20459334e+02 4.57818576e+02 2.50054734e+02
 1.21806957e+02 9.26337175e+01 3.77236451e+01 3.84569876e+01
 4.74022035e+00 8.11640896e+00 3.91266154e-01 1.24988264e+00
 8.59846160e+00 4.29546651e+01 4.90861741e-01 1.19862511e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31995953657144
cond(S) = 85.8099272872016
E1 = -689.1271873890466  E_coul = 184.91671068221805
init E= -504.210476706829
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680844797329196  LUMO = 85.3007257197896
  mo_energy =
[-1.21647067e+02 -1.32813537e+01 -7.62146797e+00 -7.62146797e+00
 -7.62146797e+00 -1.65070448e+00 -6.80844797e-01 -6.80844797e-01
 -6.80844797e-01  8.53007257e+01  6.73705226e+02  3.71308185e+03
  1.58586470e+04  5.42638431e+04]
E1 = -706.5807141816344  E_coul = 198.94767205192008
cycle= 1 E= -507.633042129714  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.44155
diis-c [-0.19496646  1.        ]
  HOMO = -0.23621318973919  LUMO = 86.6339582784368
  mo_energy =
[-1.20258735e+02 -1.22532249e+01 -6.65294540e+00 -6.65294540e+00
 -6.65294540e+00 -1.16345878e+00 -2.36213190e-01 -2.36213190e-01
 -2.36213190e-01  8.66339583e+01  6.75077776e+02  3.71434683e+03
  1.58597988e+04  5.42649148e+04]
E1 = -706.5494392443238  E_coul = 198.91597142404555
cycle= 2 E= -507.633467820278  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510619
diis-c [-2.60653849e-05  1.99938455e-04  9.99800062e-01]
  HOMO = -0.23638736277845  LUMO = 86.6304575050791
  mo_energy =
[-1.20267326e+02 -1.22544066e+01 -6.65477567e+00 -6.65477567e+00
 -6.65477567e+00 -1.16352316e+00 -2.36387363e-01 -2.36387363e-01
 -2.36387363e-01  8.66304575e+01  6.75067312e+02  3.71433139e+03
  1.58597807e+04  5.42648954e+04]
E1 = -706.5490021384909  E_coul = 198.91553420899265
cycle= 3 E= -507.633467929498  delta_E= -1.09e-07  |g|= 9.75e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132777
diis-c [-3.96448325e-10  3.41280217e-05 -2.61994673e-02  1.02616534e+00]
  HOMO = -0.236389682675049  LUMO = 86.6304106353521
  mo_energy =
[-1.20267445e+02 -1.22544231e+01 -6.65480374e+00 -6.65480374e+00
 -6.65480374e+00 -1.16352385e+00 -2.36389683e-01 -2.36389683e-01
 -2.36389683e-01  8.66304106e+01  6.75067189e+02  3.71433123e+03
  1.58597806e+04  5.42648953e+04]
E1 = -706.5489946486798  E_coul = 198.91552671913954
cycle= 4 E= -507.63346792954  delta_E= -4.21e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5489946486798  E_coul = 198.91552671913954
  HOMO = -0.236389666539471  LUMO = 86.6304109704702
  mo_energy =
[-1.20267444e+02 -1.22544230e+01 -6.65480358e+00 -6.65480358e+00
 -6.65480358e+00 -1.16352385e+00 -2.36389667e-01 -2.36389667e-01
 -2.36389667e-01  8.66304110e+01  6.75067190e+02  3.71433123e+03
  1.58597806e+04  5.42648953e+04]
E1 = -706.5489946853645  E_coul = 198.91552675582432
Extra cycle  E= -507.63346792954  delta_E= 1.14e-13  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198472e+03 1.83549618e+04 2.23214660e+03 4.57818576e+02
 1.21806957e+02 3.77236451e+01 4.74022035e+00 3.91266154e-01
 8.59846160e+00 4.90861741e-01]
E = -507.6334679295402
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98471628        1
[INPUT] 0    0    [1    /1   ]  18354.9617999        1
[INPUT] 0    0    [1    /1   ]  2232.14660279        1
[INPUT] 0    0    [1    /1   ]  457.818575704        1
[INPUT] 0    0    [1    /1   ]  121.806956507        1
[INPUT] 0    0    [1    /1   ]  37.7236451368        1
[INPUT] 0    0    [1    /1   ]  4.740220347          1
[INPUT] 0    0    [1    /1   ]  0.391266154012       1
[INPUT] 1    0    [1    /1   ]  8.59846160181        1
[INPUT] 1    0    [1    /1   ]  0.49086174065        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984716279877, 1.0]], [0, [18354.961799924436, 1.0]], [0, [2232.14660279417, 1.0]], [0, [457.8185757042671, 1.0]], [0, [121.80695650743026, 1.0]], [0, [37.72364513676646, 1.0]], [0, [4.740220347000647, 1.0]], [0, [0.39126615401179743, 1.0]], [1, [8.598461601806168, 1.0]], [1, [0.49086174065022287, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98471628]
bas 1, expnt(s) = [18354.96179992]
bas 2, expnt(s) = [2232.14660279]
bas 3, expnt(s) = [457.8185757]
bas 4, expnt(s) = [121.80695651]
bas 5, expnt(s) = [37.72364514]
bas 6, expnt(s) = [4.74022035]
bas 7, expnt(s) = [0.39126615]
bas 8, expnt(s) = [8.5984616]
bas 9, expnt(s) = [0.49086174]
CPU time:        39.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214660e+03 8.20459334e+02 4.57818576e+02 2.50054734e+02
 1.21806957e+02 9.26337175e+01 3.77236451e+01 3.84569876e+01
 4.74022035e+00 8.11640896e+00 3.91266154e-01 1.24988264e+00
 8.59846160e+00 4.29546651e+01 4.90861741e-01 1.19862511e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31995953657144
cond(S) = 85.8099272872016
E1 = -689.1271873890466  E_coul = 184.91671068221805
init E= -504.210476706829
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680844797329196  LUMO = 85.3007257197896
  mo_energy =
[-1.21647067e+02 -1.32813537e+01 -7.62146797e+00 -7.62146797e+00
 -7.62146797e+00 -1.65070448e+00 -6.80844797e-01 -6.80844797e-01
 -6.80844797e-01  8.53007257e+01  6.73705226e+02  3.71308185e+03
  1.58586470e+04  5.42638431e+04]
E1 = -706.5807141816344  E_coul = 198.94767205192008
cycle= 1 E= -507.633042129714  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.44155
diis-c [-0.19496646  1.        ]
  HOMO = -0.23621318973919  LUMO = 86.6339582784368
  mo_energy =
[-1.20258735e+02 -1.22532249e+01 -6.65294540e+00 -6.65294540e+00
 -6.65294540e+00 -1.16345878e+00 -2.36213190e-01 -2.36213190e-01
 -2.36213190e-01  8.66339583e+01  6.75077776e+02  3.71434683e+03
  1.58597988e+04  5.42649148e+04]
E1 = -706.5494392443238  E_coul = 198.91597142404555
cycle= 2 E= -507.633467820278  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510619
diis-c [-2.60653849e-05  1.99938455e-04  9.99800062e-01]
  HOMO = -0.23638736277845  LUMO = 86.6304575050791
  mo_energy =
[-1.20267326e+02 -1.22544066e+01 -6.65477567e+00 -6.65477567e+00
 -6.65477567e+00 -1.16352316e+00 -2.36387363e-01 -2.36387363e-01
 -2.36387363e-01  8.66304575e+01  6.75067312e+02  3.71433139e+03
  1.58597807e+04  5.42648954e+04]
E1 = -706.5490021384909  E_coul = 198.91553420899265
cycle= 3 E= -507.633467929498  delta_E= -1.09e-07  |g|= 9.75e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132777
diis-c [-3.96448325e-10  3.41280217e-05 -2.61994673e-02  1.02616534e+00]
  HOMO = -0.236389682675049  LUMO = 86.6304106353521
  mo_energy =
[-1.20267445e+02 -1.22544231e+01 -6.65480374e+00 -6.65480374e+00
 -6.65480374e+00 -1.16352385e+00 -2.36389683e-01 -2.36389683e-01
 -2.36389683e-01  8.66304106e+01  6.75067189e+02  3.71433123e+03
  1.58597806e+04  5.42648953e+04]
E1 = -706.5489946486798  E_coul = 198.91552671913954
cycle= 4 E= -507.63346792954  delta_E= -4.21e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5489946486798  E_coul = 198.91552671913954
  HOMO = -0.236389666539471  LUMO = 86.6304109704702
  mo_energy =
[-1.20267444e+02 -1.22544230e+01 -6.65480358e+00 -6.65480358e+00
 -6.65480358e+00 -1.16352385e+00 -2.36389667e-01 -2.36389667e-01
 -2.36389667e-01  8.66304110e+01  6.75067190e+02  3.71433123e+03
  1.58597806e+04  5.42648953e+04]
E1 = -706.5489946853645  E_coul = 198.91552675582432
Extra cycle  E= -507.63346792954  delta_E= 1.14e-13  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.8099272872016
E1 = -706.5489946853645  E_coul = 198.91552675582432
init E= -507.63346792954
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236389666350691  LUMO = 86.6304109745656
  mo_energy =
[-1.20267444e+02 -1.22544230e+01 -6.65480358e+00 -6.65480358e+00
 -6.65480358e+00 -1.16352385e+00 -2.36389666e-01 -2.36389666e-01
 -2.36389666e-01  8.66304110e+01  6.75067190e+02  3.71433123e+03
  1.58597806e+04  5.42648953e+04]
E1 = -706.5489946859196  E_coul = 198.91552675637962
cycle= 1 E= -507.63346792954  delta_E= 1.71e-13  |g|= 1.29e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5489946859196  E_coul = 198.91552675637962
  HOMO = -0.236389666348025  LUMO = 86.6304109746237
  mo_energy =
[-1.20267444e+02 -1.22544230e+01 -6.65480358e+00 -6.65480358e+00
 -6.65480358e+00 -1.16352385e+00 -2.36389666e-01 -2.36389666e-01
 -2.36389666e-01  8.66304110e+01  6.75067190e+02  3.71433123e+03
  1.58597806e+04  5.42648953e+04]
E1 = -706.5489946859299  E_coul = 198.9155267563893
Extra cycle  E= -507.633467929541  delta_E= -5.12e-13  |g|= 1.33e-11  |ddm|= 4.49e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198472e+03 1.83549618e+04 2.23214660e+03 4.57818576e+02
 1.21806957e+02 3.77236451e+01 4.74022035e+00 3.91266154e-01
 8.59846160e+00 4.90861741e-01]
grad_E = [-5.54184167e-07 -1.53278716e-06  1.06714656e-04 -3.61946266e-04
  3.65089251e-04  4.61601625e-04 -1.51933676e-04  6.19208259e-04
 -6.07617100e-05  7.77130339e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98472077        1
[INPUT] 0    0    [1    /1   ]  18354.9618122        1
[INPUT] 0    0    [1    /1   ]  2232.14574094        1
[INPUT] 0    0    [1    /1   ]  457.821674414        1
[INPUT] 0    0    [1    /1   ]  121.802321569        1
[INPUT] 0    0    [1    /1   ]  37.7250640355        1
[INPUT] 0    0    [1    /1   ]  4.73960997922        1
[INPUT] 0    0    [1    /1   ]  0.391387518334       1
[INPUT] 1    0    [1    /1   ]  8.59841522489        1
[INPUT] 1    0    [1    /1   ]  0.490903870189       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984720767573, 1.0]], [0, [18354.961812159305, 1.0]], [0, [2232.1457409444038, 1.0]], [0, [457.82167441393807, 1.0]], [0, [121.80232156913937, 1.0]], [0, [37.72506403546514, 1.0]], [0, [4.7396099792199, 1.0]], [0, [0.39138751833398816, 1.0]], [1, [8.598415224887084, 1.0]], [1, [0.49090387018850834, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98472077]
bas 1, expnt(s) = [18354.96181216]
bas 2, expnt(s) = [2232.14574094]
bas 3, expnt(s) = [457.82167441]
bas 4, expnt(s) = [121.80232157]
bas 5, expnt(s) = [37.72506404]
bas 6, expnt(s) = [4.73960998]
bas 7, expnt(s) = [0.39138752]
bas 8, expnt(s) = [8.59841522]
bas 9, expnt(s) = [0.49090387]
CPU time:        43.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214574e+03 8.20459097e+02 4.57821674e+02 2.50056004e+02
 1.21802322e+02 9.26310739e+01 3.77250640e+01 3.84580725e+01
 4.73960998e+00 8.11562513e+00 3.91387518e-01 1.25017340e+00
 8.59841522e+00 4.29543755e+01 4.90903870e-01 1.19875371e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31990020819054
cond(S) = 85.80970149156886
E1 = -689.1297246417556  E_coul = 184.9191320870915
init E= -504.210592554664
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680738283159247  LUMO = 85.2995239456875
  mo_energy =
[-1.21646909e+02 -1.32811680e+01 -7.62130722e+00 -7.62130722e+00
 -7.62130722e+00 -1.65064942e+00 -6.80738283e-01 -6.80738283e-01
 -6.80738283e-01  8.52995239e+01  6.73698742e+02  3.71307722e+03
  1.58586432e+04  5.42638391e+04]
E1 = -706.5836922799813  E_coul = 198.95064867526466
cycle= 1 E= -507.633043604717  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441548
diis-c [-0.19496437  1.        ]
  HOMO = -0.236061113040176  LUMO = 86.6327711038975
  mo_energy =
[-1.20258611e+02 -1.22530077e+01 -6.65275692e+00 -6.65275692e+00
 -6.65275692e+00 -1.16333476e+00 -2.36061113e-01 -2.36061113e-01
 -2.36061113e-01  8.66327711e+01  6.75071254e+02  3.71434213e+03
  1.58597949e+04  5.42649107e+04]
E1 = -706.552410006955  E_coul = 198.91894051339898
cycle= 2 E= -507.633469493556  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510814
diis-c [-2.60853717e-05  1.98380701e-04  9.99801619e-01]
  HOMO = -0.236235346185752  LUMO = 86.6292695707784
  mo_energy =
[-1.20267204e+02 -1.22541895e+01 -6.65458765e+00 -6.65458765e+00
 -6.65458765e+00 -1.16339916e+00 -2.36235346e-01 -2.36235346e-01
 -2.36235346e-01  8.66292696e+01  6.75060789e+02  3.71432668e+03
  1.58597768e+04  5.42648913e+04]
E1 = -706.5519727714151  E_coul = 198.91850316856565
cycle= 3 E= -507.633469602849  delta_E= -1.09e-07  |g|= 9.76e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132815
diis-c [-3.96513069e-10  3.41272995e-05 -2.61975703e-02  1.02616344e+00]
  HOMO = -0.236237666842916  LUMO = 86.62922269387
  mo_energy =
[-1.20267322e+02 -1.22542060e+01 -6.65461573e+00 -6.65461573e+00
 -6.65461573e+00 -1.16339986e+00 -2.36237667e-01 -2.36237667e-01
 -2.36237667e-01  8.66292227e+01  6.75060665e+02  3.71432653e+03
  1.58597766e+04  5.42648912e+04]
E1 = -706.5519652798835  E_coul = 198.918495676992
cycle= 4 E= -507.633469602891  delta_E= -4.2e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5519652798835  E_coul = 198.918495676992
  HOMO = -0.236237650702232  LUMO = 86.629223029055
  mo_energy =
[-1.20267322e+02 -1.22542059e+01 -6.65461557e+00 -6.65461557e+00
 -6.65461557e+00 -1.16339985e+00 -2.36237651e-01 -2.36237651e-01
 -2.36237651e-01  8.66292230e+01  6.75060666e+02  3.71432653e+03
  1.58597766e+04  5.42648912e+04]
E1 = -706.5519653165778  E_coul = 198.91849571368618
Extra cycle  E= -507.633469602892  delta_E= -1.71e-13  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198472e+03 1.83549618e+04 2.23214574e+03 4.57821674e+02
 1.21802322e+02 3.77250640e+01 4.73960998e+00 3.91387518e-01
 8.59841522e+00 4.90903870e-01]
E = -507.63346960289164
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98472077        1
[INPUT] 0    0    [1    /1   ]  18354.9618122        1
[INPUT] 0    0    [1    /1   ]  2232.14574094        1
[INPUT] 0    0    [1    /1   ]  457.821674414        1
[INPUT] 0    0    [1    /1   ]  121.802321569        1
[INPUT] 0    0    [1    /1   ]  37.7250640355        1
[INPUT] 0    0    [1    /1   ]  4.73960997922        1
[INPUT] 0    0    [1    /1   ]  0.391387518334       1
[INPUT] 1    0    [1    /1   ]  8.59841522489        1
[INPUT] 1    0    [1    /1   ]  0.490903870189       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984720767573, 1.0]], [0, [18354.961812159305, 1.0]], [0, [2232.1457409444038, 1.0]], [0, [457.82167441393807, 1.0]], [0, [121.80232156913937, 1.0]], [0, [37.72506403546514, 1.0]], [0, [4.7396099792199, 1.0]], [0, [0.39138751833398816, 1.0]], [1, [8.598415224887084, 1.0]], [1, [0.49090387018850834, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98472077]
bas 1, expnt(s) = [18354.96181216]
bas 2, expnt(s) = [2232.14574094]
bas 3, expnt(s) = [457.82167441]
bas 4, expnt(s) = [121.80232157]
bas 5, expnt(s) = [37.72506404]
bas 6, expnt(s) = [4.73960998]
bas 7, expnt(s) = [0.39138752]
bas 8, expnt(s) = [8.59841522]
bas 9, expnt(s) = [0.49090387]
CPU time:        43.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+03 2.00389578e+03 1.83549618e+04 3.98409915e+03
 2.23214574e+03 8.20459097e+02 4.57821674e+02 2.50056004e+02
 1.21802322e+02 9.26310739e+01 3.77250640e+01 3.84580725e+01
 4.73960998e+00 8.11562513e+00 3.91387518e-01 1.25017340e+00
 8.59841522e+00 4.29543755e+01 4.90903870e-01 1.19875371e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31990020819054
cond(S) = 85.80970149156886
E1 = -689.1297246417556  E_coul = 184.9191320870915
init E= -504.210592554664
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680738283159247  LUMO = 85.2995239456875
  mo_energy =
[-1.21646909e+02 -1.32811680e+01 -7.62130722e+00 -7.62130722e+00
 -7.62130722e+00 -1.65064942e+00 -6.80738283e-01 -6.80738283e-01
 -6.80738283e-01  8.52995239e+01  6.73698742e+02  3.71307722e+03
  1.58586432e+04  5.42638391e+04]
E1 = -706.5836922799813  E_coul = 198.95064867526466
cycle= 1 E= -507.633043604717  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441548
diis-c [-0.19496437  1.        ]
  HOMO = -0.236061113040176  LUMO = 86.6327711038975
  mo_energy =
[-1.20258611e+02 -1.22530077e+01 -6.65275692e+00 -6.65275692e+00
 -6.65275692e+00 -1.16333476e+00 -2.36061113e-01 -2.36061113e-01
 -2.36061113e-01  8.66327711e+01  6.75071254e+02  3.71434213e+03
  1.58597949e+04  5.42649107e+04]
E1 = -706.552410006955  E_coul = 198.91894051339898
cycle= 2 E= -507.633469493556  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510814
diis-c [-2.60853717e-05  1.98380701e-04  9.99801619e-01]
  HOMO = -0.236235346185752  LUMO = 86.6292695707784
  mo_energy =
[-1.20267204e+02 -1.22541895e+01 -6.65458765e+00 -6.65458765e+00
 -6.65458765e+00 -1.16339916e+00 -2.36235346e-01 -2.36235346e-01
 -2.36235346e-01  8.66292696e+01  6.75060789e+02  3.71432668e+03
  1.58597768e+04  5.42648913e+04]
E1 = -706.5519727714151  E_coul = 198.91850316856565
cycle= 3 E= -507.633469602849  delta_E= -1.09e-07  |g|= 9.76e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132815
diis-c [-3.96513069e-10  3.41272995e-05 -2.61975703e-02  1.02616344e+00]
  HOMO = -0.236237666842916  LUMO = 86.62922269387
  mo_energy =
[-1.20267322e+02 -1.22542060e+01 -6.65461573e+00 -6.65461573e+00
 -6.65461573e+00 -1.16339986e+00 -2.36237667e-01 -2.36237667e-01
 -2.36237667e-01  8.66292227e+01  6.75060665e+02  3.71432653e+03
  1.58597766e+04  5.42648912e+04]
E1 = -706.5519652798835  E_coul = 198.918495676992
cycle= 4 E= -507.633469602891  delta_E= -4.2e-11  |g|= 3.72e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5519652798835  E_coul = 198.918495676992
  HOMO = -0.236237650702232  LUMO = 86.629223029055
  mo_energy =
[-1.20267322e+02 -1.22542059e+01 -6.65461557e+00 -6.65461557e+00
 -6.65461557e+00 -1.16339985e+00 -2.36237651e-01 -2.36237651e-01
 -2.36237651e-01  8.66292230e+01  6.75060666e+02  3.71432653e+03
  1.58597766e+04  5.42648912e+04]
E1 = -706.5519653165778  E_coul = 198.91849571368618
Extra cycle  E= -507.633469602892  delta_E= -1.71e-13  |g|= 6.43e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.80970149156886
E1 = -706.5519653165778  E_coul = 198.91849571368618
init E= -507.633469602892
    CPU time for initialize scf      0.77 sec, wall time      0.05 sec
  HOMO = -0.236237650513375  LUMO = 86.6292230331499
  mo_energy =
[-1.20267321e+02 -1.22542059e+01 -6.65461557e+00 -6.65461557e+00
 -6.65461557e+00 -1.16339985e+00 -2.36237651e-01 -2.36237651e-01
 -2.36237651e-01  8.66292230e+01  6.75060666e+02  3.71432653e+03
  1.58597766e+04  5.42648912e+04]
E1 = -706.5519653171335  E_coul = 198.91849571424177
cycle= 1 E= -507.633469602892  delta_E= -1.14e-13  |g|= 1.31e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5519653171335  E_coul = 198.91849571424177
  HOMO = -0.236237650510707  LUMO = 86.6292230332084
  mo_energy =
[-1.20267321e+02 -1.22542059e+01 -6.65461557e+00 -6.65461557e+00
 -6.65461557e+00 -1.16339985e+00 -2.36237651e-01 -2.36237651e-01
 -2.36237651e-01  8.66292230e+01  6.75060666e+02  3.71432653e+03
  1.58597766e+04  5.42648912e+04]
E1 = -706.5519653171432  E_coul = 198.9184957142514
Extra cycle  E= -507.633469602892  delta_E=    0  |g|= 1.09e-11  |ddm|= 4.49e-12
    CPU time for scf_cycle      0.99 sec, wall time      0.11 sec
exp = [7.34198472e+03 1.83549618e+04 2.23214574e+03 4.57821674e+02
 1.21802322e+02 3.77250640e+01 4.73960998e+00 3.91387518e-01
 8.59841522e+00 4.90903870e-01]
grad_E = [-5.53674852e-07 -1.53327456e-06  1.06647783e-04 -3.60122322e-04
  3.52583813e-04  4.93455302e-04 -6.46037997e-04  2.71216501e-03
 -1.60053249e-04  2.64842852e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98473351        1
[INPUT] 0    0    [1    /1   ]  18354.961847         1
[INPUT] 0    0    [1    /1   ]  2232.14329152        1
[INPUT] 0    0    [1    /1   ]  457.830371883        1
[INPUT] 0    0    [1    /1   ]  121.790196099        1
[INPUT] 0    0    [1    /1   ]  37.7259067502        1
[INPUT] 0    0    [1    /1   ]  4.73854302906        1
[INPUT] 0    0    [1    /1   ]  0.391595907811       1
[INPUT] 1    0    [1    /1   ]  8.59835219759        1
[INPUT] 1    0    [1    /1   ]  0.490976179501       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984733514404, 1.0]], [0, [18354.961847021445, 1.0]], [0, [2232.143291520334, 1.0]], [0, [457.8303718827391, 1.0]], [0, [121.79019609917687, 1.0]], [0, [37.72590675017076, 1.0]], [0, [4.738543029055668, 1.0]], [0, [0.391595907811456, 1.0]], [1, [8.59835219759092, 1.0]], [1, [0.4909761795014576, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98473351]
bas 1, expnt(s) = [18354.96184702]
bas 2, expnt(s) = [2232.14329152]
bas 3, expnt(s) = [457.83037188]
bas 4, expnt(s) = [121.7901961]
bas 5, expnt(s) = [37.72590675]
bas 6, expnt(s) = [4.73854303]
bas 7, expnt(s) = [0.39159591]
bas 8, expnt(s) = [8.5983522]
bas 9, expnt(s) = [0.49097618]
CPU time:        47.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198473e+03 2.00389579e+03 1.83549618e+04 3.98409916e+03
 2.23214329e+03 8.20458421e+02 4.57830372e+02 2.50059567e+02
 1.21790196e+02 9.26241577e+01 3.77259068e+01 3.84587168e+01
 4.73854303e+00 8.11425489e+00 3.91595908e-01 1.25067259e+00
 8.59835220e+00 4.29539820e+01 4.90976180e-01 1.19897443e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31979836940706
cond(S) = 85.8075924254671
E1 = -689.134133296363  E_coul = 184.92332791879488
init E= -504.210805377568
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680555900009786  LUMO = 85.2922575089449
  mo_energy =
[-1.21646632e+02 -1.32808422e+01 -7.62102931e+00 -7.62102931e+00
 -7.62102931e+00 -1.65055366e+00 -6.80555900e-01 -6.80555900e-01
 -6.80555900e-01  8.52922575e+01  6.73673032e+02  3.71305777e+03
  1.58586266e+04  5.42638225e+04]
E1 = -706.5888219189825  E_coul = 198.95577404354955
cycle= 1 E= -507.633047875433  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441538
diis-c [-0.19495559  1.        ]
  HOMO = -0.235800575737877  LUMO = 86.6255207715077
  mo_energy =
[-1.20258398e+02 -1.22526290e+01 -6.65243249e+00 -6.65243249e+00
 -6.65243249e+00 -1.16312110e+00 -2.35800576e-01 -2.35800576e-01
 -2.35800576e-01  8.66255208e+01  6.75045467e+02  3.71432255e+03
  1.58597781e+04  5.42648939e+04]
E1 = -706.5575238802612  E_coul = 198.92404972582037
cycle= 2 E= -507.633474154441  delta_E= -0.000426  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511184
diis-c [-2.61233862e-05  1.96062147e-04  9.99803938e-01]
  HOMO = -0.235974932382397  LUMO = 86.6220176868488
  mo_energy =
[-1.20266995e+02 -1.22538114e+01 -6.65426425e+00 -6.65426425e+00
 -6.65426425e+00 -1.16318555e+00 -2.35974932e-01 -2.35974932e-01
 -2.35974932e-01  8.66220177e+01  6.75034998e+02  3.71430709e+03
  1.58597600e+04  5.42648746e+04]
E1 = -706.5570863619811  E_coul = 198.92361209810056
cycle= 3 E= -507.633474263881  delta_E= -1.09e-07  |g|= 9.76e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132894
diis-c [-3.96709581e-10  3.41239197e-05 -2.61953232e-02  1.02616120e+00]
  HOMO = -0.235977254757082  LUMO = 86.621970790952
  mo_energy =
[-1.20267113e+02 -1.22538279e+01 -6.65429234e+00 -6.65429234e+00
 -6.65429234e+00 -1.16318625e+00 -2.35977255e-01 -2.35977255e-01
 -2.35977255e-01  8.66219708e+01  6.75034874e+02  3.71430694e+03
  1.58597599e+04  5.42648744e+04]
E1 = -706.5570788660419  E_coul = 198.92360460211918
cycle= 4 E= -507.633474263923  delta_E= -4.22e-11  |g|= 3.73e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5570788660419  E_coul = 198.92360460211918
  HOMO = -0.235977238604275  LUMO = 86.6219711262967
  mo_energy =
[-1.20267113e+02 -1.22538278e+01 -6.65429218e+00 -6.65429218e+00
 -6.65429218e+00 -1.16318624e+00 -2.35977239e-01 -2.35977239e-01
 -2.35977239e-01  8.66219711e+01  6.75034875e+02  3.71430694e+03
  1.58597599e+04  5.42648744e+04]
E1 = -706.5570789027605  E_coul = 198.9236046388378
Extra cycle  E= -507.633474263923  delta_E=    0  |g|= 6.43e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198473e+03 1.83549618e+04 2.23214329e+03 4.57830372e+02
 1.21790196e+02 3.77259068e+01 4.73854303e+00 3.91595908e-01
 8.59835220e+00 4.90976180e-01]
E = -507.6334742639227
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98473351        1
[INPUT] 0    0    [1    /1   ]  18354.961847         1
[INPUT] 0    0    [1    /1   ]  2232.14329152        1
[INPUT] 0    0    [1    /1   ]  457.830371883        1
[INPUT] 0    0    [1    /1   ]  121.790196099        1
[INPUT] 0    0    [1    /1   ]  37.7259067502        1
[INPUT] 0    0    [1    /1   ]  4.73854302906        1
[INPUT] 0    0    [1    /1   ]  0.391595907811       1
[INPUT] 1    0    [1    /1   ]  8.59835219759        1
[INPUT] 1    0    [1    /1   ]  0.490976179501       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984733514404, 1.0]], [0, [18354.961847021445, 1.0]], [0, [2232.143291520334, 1.0]], [0, [457.8303718827391, 1.0]], [0, [121.79019609917687, 1.0]], [0, [37.72590675017076, 1.0]], [0, [4.738543029055668, 1.0]], [0, [0.391595907811456, 1.0]], [1, [8.59835219759092, 1.0]], [1, [0.4909761795014576, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98473351]
bas 1, expnt(s) = [18354.96184702]
bas 2, expnt(s) = [2232.14329152]
bas 3, expnt(s) = [457.83037188]
bas 4, expnt(s) = [121.7901961]
bas 5, expnt(s) = [37.72590675]
bas 6, expnt(s) = [4.73854303]
bas 7, expnt(s) = [0.39159591]
bas 8, expnt(s) = [8.5983522]
bas 9, expnt(s) = [0.49097618]
CPU time:        48.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198473e+03 2.00389579e+03 1.83549618e+04 3.98409916e+03
 2.23214329e+03 8.20458421e+02 4.57830372e+02 2.50059567e+02
 1.21790196e+02 9.26241577e+01 3.77259068e+01 3.84587168e+01
 4.73854303e+00 8.11425489e+00 3.91595908e-01 1.25067259e+00
 8.59835220e+00 4.29539820e+01 4.90976180e-01 1.19897443e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31979836940706
cond(S) = 85.8075924254671
E1 = -689.134133296363  E_coul = 184.92332791879488
init E= -504.210805377568
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680555900009786  LUMO = 85.2922575089449
  mo_energy =
[-1.21646632e+02 -1.32808422e+01 -7.62102931e+00 -7.62102931e+00
 -7.62102931e+00 -1.65055366e+00 -6.80555900e-01 -6.80555900e-01
 -6.80555900e-01  8.52922575e+01  6.73673032e+02  3.71305777e+03
  1.58586266e+04  5.42638225e+04]
E1 = -706.5888219189825  E_coul = 198.95577404354955
cycle= 1 E= -507.633047875433  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441538
diis-c [-0.19495559  1.        ]
  HOMO = -0.235800575737877  LUMO = 86.6255207715077
  mo_energy =
[-1.20258398e+02 -1.22526290e+01 -6.65243249e+00 -6.65243249e+00
 -6.65243249e+00 -1.16312110e+00 -2.35800576e-01 -2.35800576e-01
 -2.35800576e-01  8.66255208e+01  6.75045467e+02  3.71432255e+03
  1.58597781e+04  5.42648939e+04]
E1 = -706.5575238802612  E_coul = 198.92404972582037
cycle= 2 E= -507.633474154441  delta_E= -0.000426  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511184
diis-c [-2.61233862e-05  1.96062147e-04  9.99803938e-01]
  HOMO = -0.235974932382397  LUMO = 86.6220176868488
  mo_energy =
[-1.20266995e+02 -1.22538114e+01 -6.65426425e+00 -6.65426425e+00
 -6.65426425e+00 -1.16318555e+00 -2.35974932e-01 -2.35974932e-01
 -2.35974932e-01  8.66220177e+01  6.75034998e+02  3.71430709e+03
  1.58597600e+04  5.42648746e+04]
E1 = -706.5570863619811  E_coul = 198.92361209810056
cycle= 3 E= -507.633474263881  delta_E= -1.09e-07  |g|= 9.76e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132894
diis-c [-3.96709581e-10  3.41239197e-05 -2.61953232e-02  1.02616120e+00]
  HOMO = -0.235977254757082  LUMO = 86.621970790952
  mo_energy =
[-1.20267113e+02 -1.22538279e+01 -6.65429234e+00 -6.65429234e+00
 -6.65429234e+00 -1.16318625e+00 -2.35977255e-01 -2.35977255e-01
 -2.35977255e-01  8.66219708e+01  6.75034874e+02  3.71430694e+03
  1.58597599e+04  5.42648744e+04]
E1 = -706.5570788660419  E_coul = 198.92360460211918
cycle= 4 E= -507.633474263923  delta_E= -4.22e-11  |g|= 3.73e-07  |ddm|= 3.57e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5570788660419  E_coul = 198.92360460211918
  HOMO = -0.235977238604275  LUMO = 86.6219711262967
  mo_energy =
[-1.20267113e+02 -1.22538278e+01 -6.65429218e+00 -6.65429218e+00
 -6.65429218e+00 -1.16318624e+00 -2.35977239e-01 -2.35977239e-01
 -2.35977239e-01  8.66219711e+01  6.75034875e+02  3.71430694e+03
  1.58597599e+04  5.42648744e+04]
E1 = -706.5570789027605  E_coul = 198.9236046388378
Extra cycle  E= -507.633474263923  delta_E=    0  |g|= 6.43e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.8075924254671
E1 = -706.5570789027605  E_coul = 198.9236046388378
init E= -507.633474263923
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.23597723841524  LUMO = 86.6219711303957
  mo_energy =
[-1.20267113e+02 -1.22538278e+01 -6.65429218e+00 -6.65429218e+00
 -6.65429218e+00 -1.16318624e+00 -2.35977238e-01 -2.35977238e-01
 -2.35977238e-01  8.66219711e+01  6.75034875e+02  3.71430694e+03
  1.58597599e+04  5.42648744e+04]
E1 = -706.5570789033166  E_coul = 198.92360463939355
cycle= 1 E= -507.633474263923  delta_E= -2.84e-13  |g|= 1.3e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5570789033166  E_coul = 198.92360463939355
  HOMO = -0.235977238412568  LUMO = 86.6219711304548
  mo_energy =
[-1.20267113e+02 -1.22538278e+01 -6.65429218e+00 -6.65429218e+00
 -6.65429218e+00 -1.16318624e+00 -2.35977238e-01 -2.35977238e-01
 -2.35977238e-01  8.66219711e+01  6.75034875e+02  3.71430694e+03
  1.58597599e+04  5.42648744e+04]
E1 = -706.5570789033258  E_coul = 198.92360463940295
Extra cycle  E= -507.633474263923  delta_E= 1.71e-13  |g|= 1.96e-11  |ddm|= 4.47e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198473e+03 1.83549618e+04 2.23214329e+03 4.57830372e+02
 1.21790196e+02 3.77259068e+01 4.73854303e+00 3.91595908e-01
 8.59835220e+00 4.90976180e-01]
grad_E = [-5.52572920e-07 -1.53434630e-06  1.06502595e-04 -3.56357084e-04
  3.29342169e-04  5.45266268e-04 -1.51065249e-03  6.30892006e-03
 -3.18480157e-04  5.83992445e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98476577        1
[INPUT] 0    0    [1    /1   ]  18354.9619354        1
[INPUT] 0    0    [1    /1   ]  2232.1370912         1
[INPUT] 0    0    [1    /1   ]  457.852222106        1
[INPUT] 0    0    [1    /1   ]  121.761085171        1
[INPUT] 0    0    [1    /1   ]  37.7232394632        1
[INPUT] 0    0    [1    /1   ]  4.73691825034        1
[INPUT] 0    0    [1    /1   ]  0.391911601009       1
[INPUT] 1    0    [1    /1   ]  8.59826944443        1
[INPUT] 1    0    [1    /1   ]  0.491085987338       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.9847657695445, 1.0]], [0, [18354.961935406696, 1.0]], [0, [2232.1370911982667, 1.0]], [0, [457.85222210631974, 1.0]], [0, [121.7610851714397, 1.0]], [0, [37.7232394632094, 1.0]], [0, [4.736918250340758, 1.0]], [0, [0.3919116010092007, 1.0]], [1, [8.59826944442676, 1.0]], [1, [0.49108598733769643, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98476577]
bas 1, expnt(s) = [18354.96193541]
bas 2, expnt(s) = [2232.1370912]
bas 3, expnt(s) = [457.85222211]
bas 4, expnt(s) = [121.76108517]
bas 5, expnt(s) = [37.72323946]
bas 6, expnt(s) = [4.73691825]
bas 7, expnt(s) = [0.3919116]
bas 8, expnt(s) = [8.59826944]
bas 9, expnt(s) = [0.49108599]
CPU time:        52.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198477e+03 2.00389579e+03 1.83549619e+04 3.98409917e+03
 2.23213709e+03 8.20456712e+02 4.57852222e+02 2.50068517e+02
 1.21761085e+02 9.26075526e+01 3.77232395e+01 3.84566774e+01
 4.73691825e+00 8.11216810e+00 3.91911601e-01 1.25142871e+00
 8.59826944e+00 4.29534652e+01 4.91085987e-01 1.19930963e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31964327799821
cond(S) = 85.80011050626935
E1 = -689.1408960049422  E_coul = 184.92970774543727
init E= -504.211188259505
    CPU time for initialize scf      0.14 sec, wall time      0.02 sec
  HOMO = -0.680279950799286  LUMO = 85.2683405232352
  mo_energy =
[-1.21646216e+02 -1.32803383e+01 -7.62060764e+00 -7.62060764e+00
 -7.62060764e+00 -1.65040677e+00 -6.80279951e-01 -6.80279951e-01
 -6.80279951e-01  8.52683405e+01  6.73597212e+02  3.71299928e+03
  1.58585762e+04  5.42637728e+04]
E1 = -706.5966087272575  E_coul = 198.96354995483864
cycle= 1 E= -507.633058772419  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.441509
diis-c [-0.19492995  1.        ]
  HOMO = -0.235405758163287  LUMO = 86.6016107050171
  mo_energy =
[-1.20258085e+02 -1.22520458e+01 -6.65194047e+00 -6.65194047e+00
 -6.65194047e+00 -1.16279567e+00 -2.35405758e-01 -2.35405758e-01
 -2.35405758e-01  8.66016107e+01  6.74969518e+02  3.71426382e+03
  1.58597275e+04  5.42648439e+04]
E1 = -706.565279539032  E_coul = 198.9317937895323
cycle= 2 E= -507.6334857495  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511819
diis-c [-2.61885368e-05  1.93470992e-04  9.99806529e-01]
  HOMO = -0.235580349374466  LUMO = 86.5981047319592
  mo_energy =
[-1.20266690e+02 -1.22532292e+01 -6.65377425e+00 -6.65377425e+00
 -6.65377425e+00 -1.16286022e+00 -2.35580349e-01 -2.35580349e-01
 -2.35580349e-01  8.65981047e+01  6.74959040e+02  3.71424836e+03
  1.58597094e+04  5.42648245e+04]
E1 = -706.5648414522965  E_coul = 198.93135559309147
cycle= 3 E= -507.633485859205  delta_E= -1.1e-07  |g|= 9.77e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133047
diis-c [-3.97207996e-10  3.41143475e-05 -2.61945701e-02  1.02616046e+00]
  HOMO = -0.23558267533696  LUMO = 86.5980577916447
  mo_energy =
[-1.20266809e+02 -1.22532458e+01 -6.65380237e+00 -6.65380237e+00
 -6.65380237e+00 -1.16286091e+00 -2.35582675e-01 -2.35582675e-01
 -2.35582675e-01  8.65980578e+01  6.74958916e+02  3.71424820e+03
  1.58597092e+04  5.42648244e+04]
E1 = -706.5648339462027  E_coul = 198.9313480869554
cycle= 4 E= -507.633485859247  delta_E= -4.23e-11  |g|= 3.73e-07  |ddm|= 3.58e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5648339462027  E_coul = 198.9313480869554
  HOMO = -0.235582659157593  LUMO = 86.5980581273459
  mo_energy =
[-1.20266808e+02 -1.22532457e+01 -6.65380221e+00 -6.65380221e+00
 -6.65380221e+00 -1.16286091e+00 -2.35582659e-01 -2.35582659e-01
 -2.35582659e-01  8.65980581e+01  6.74958917e+02  3.71424821e+03
  1.58597092e+04  5.42648244e+04]
E1 = -706.5648339829761  E_coul = 198.93134812372907
Extra cycle  E= -507.633485859247  delta_E= 3.41e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34198477e+03 1.83549619e+04 2.23213709e+03 4.57852222e+02
 1.21761085e+02 3.77232395e+01 4.73691825e+00 3.91911601e-01
 8.59826944e+00 4.91085987e-01]
E = -507.633485859247
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:13:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98476577        1
[INPUT] 0    0    [1    /1   ]  18354.9619354        1
[INPUT] 0    0    [1    /1   ]  2232.1370912         1
[INPUT] 0    0    [1    /1   ]  457.852222106        1
[INPUT] 0    0    [1    /1   ]  121.761085171        1
[INPUT] 0    0    [1    /1   ]  37.7232394632        1
[INPUT] 0    0    [1    /1   ]  4.73691825034        1
[INPUT] 0    0    [1    /1   ]  0.391911601009       1
[INPUT] 1    0    [1    /1   ]  8.59826944443        1
[INPUT] 1    0    [1    /1   ]  0.491085987338       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.9847657695445, 1.0]], [0, [18354.961935406696, 1.0]], [0, [2232.1370911982667, 1.0]], [0, [457.85222210631974, 1.0]], [0, [121.7610851714397, 1.0]], [0, [37.7232394632094, 1.0]], [0, [4.736918250340758, 1.0]], [0, [0.3919116010092007, 1.0]], [1, [8.59826944442676, 1.0]], [1, [0.49108598733769643, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98476577]
bas 1, expnt(s) = [18354.96193541]
bas 2, expnt(s) = [2232.1370912]
bas 3, expnt(s) = [457.85222211]
bas 4, expnt(s) = [121.76108517]
bas 5, expnt(s) = [37.72323946]
bas 6, expnt(s) = [4.73691825]
bas 7, expnt(s) = [0.3919116]
bas 8, expnt(s) = [8.59826944]
bas 9, expnt(s) = [0.49108599]
CPU time:        52.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198477e+03 2.00389579e+03 1.83549619e+04 3.98409917e+03
 2.23213709e+03 8.20456712e+02 4.57852222e+02 2.50068517e+02
 1.21761085e+02 9.26075526e+01 3.77232395e+01 3.84566774e+01
 4.73691825e+00 8.11216810e+00 3.91911601e-01 1.25142871e+00
 8.59826944e+00 4.29534652e+01 4.91085987e-01 1.19930963e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31964327799821
cond(S) = 85.80011050626935
E1 = -689.1408960049422  E_coul = 184.92970774543727
init E= -504.211188259505
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680279950799286  LUMO = 85.2683405232352
  mo_energy =
[-1.21646216e+02 -1.32803383e+01 -7.62060764e+00 -7.62060764e+00
 -7.62060764e+00 -1.65040677e+00 -6.80279951e-01 -6.80279951e-01
 -6.80279951e-01  8.52683405e+01  6.73597212e+02  3.71299928e+03
  1.58585762e+04  5.42637728e+04]
E1 = -706.5966087272575  E_coul = 198.96354995483864
cycle= 1 E= -507.633058772419  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441509
diis-c [-0.19492995  1.        ]
  HOMO = -0.235405758163287  LUMO = 86.6016107050171
  mo_energy =
[-1.20258085e+02 -1.22520458e+01 -6.65194047e+00 -6.65194047e+00
 -6.65194047e+00 -1.16279567e+00 -2.35405758e-01 -2.35405758e-01
 -2.35405758e-01  8.66016107e+01  6.74969518e+02  3.71426382e+03
  1.58597275e+04  5.42648439e+04]
E1 = -706.565279539032  E_coul = 198.9317937895323
cycle= 2 E= -507.6334857495  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511819
diis-c [-2.61885368e-05  1.93470992e-04  9.99806529e-01]
  HOMO = -0.235580349374466  LUMO = 86.5981047319592
  mo_energy =
[-1.20266690e+02 -1.22532292e+01 -6.65377425e+00 -6.65377425e+00
 -6.65377425e+00 -1.16286022e+00 -2.35580349e-01 -2.35580349e-01
 -2.35580349e-01  8.65981047e+01  6.74959040e+02  3.71424836e+03
  1.58597094e+04  5.42648245e+04]
E1 = -706.5648414522965  E_coul = 198.93135559309147
cycle= 3 E= -507.633485859205  delta_E= -1.1e-07  |g|= 9.77e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133047
diis-c [-3.97207996e-10  3.41143475e-05 -2.61945701e-02  1.02616046e+00]
  HOMO = -0.23558267533696  LUMO = 86.5980577916447
  mo_energy =
[-1.20266809e+02 -1.22532458e+01 -6.65380237e+00 -6.65380237e+00
 -6.65380237e+00 -1.16286091e+00 -2.35582675e-01 -2.35582675e-01
 -2.35582675e-01  8.65980578e+01  6.74958916e+02  3.71424820e+03
  1.58597092e+04  5.42648244e+04]
E1 = -706.5648339462027  E_coul = 198.9313480869554
cycle= 4 E= -507.633485859247  delta_E= -4.23e-11  |g|= 3.73e-07  |ddm|= 3.58e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5648339462027  E_coul = 198.9313480869554
  HOMO = -0.235582659157593  LUMO = 86.5980581273459
  mo_energy =
[-1.20266808e+02 -1.22532457e+01 -6.65380221e+00 -6.65380221e+00
 -6.65380221e+00 -1.16286091e+00 -2.35582659e-01 -2.35582659e-01
 -2.35582659e-01  8.65980581e+01  6.74958917e+02  3.71424821e+03
  1.58597092e+04  5.42648244e+04]
E1 = -706.5648339829761  E_coul = 198.93134812372907
Extra cycle  E= -507.633485859247  delta_E= 3.41e-13  |g|= 6.44e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.80011050626935
E1 = -706.5648339829761  E_coul = 198.93134812372907
init E= -507.633485859247
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.23558265896818  LUMO = 86.59805813145
  mo_energy =
[-1.20266808e+02 -1.22532457e+01 -6.65380221e+00 -6.65380221e+00
 -6.65380221e+00 -1.16286091e+00 -2.35582659e-01 -2.35582659e-01
 -2.35582659e-01  8.65980581e+01  6.74958917e+02  3.71424821e+03
  1.58597092e+04  5.42648244e+04]
E1 = -706.564833983533  E_coul = 198.9313481242856
cycle= 1 E= -507.633485859247  delta_E= -4.55e-13  |g|= 1.29e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.564833983533  E_coul = 198.9313481242856
  HOMO = -0.235582658965503  LUMO = 86.5980581315098
  mo_energy =
[-1.20266808e+02 -1.22532457e+01 -6.65380221e+00 -6.65380221e+00
 -6.65380221e+00 -1.16286091e+00 -2.35582659e-01 -2.35582659e-01
 -2.35582659e-01  8.65980581e+01  6.74958917e+02  3.71424821e+03
  1.58597092e+04  5.42648244e+04]
E1 = -706.564833983542  E_coul = 198.93134812429503
Extra cycle  E= -507.633485859247  delta_E= 4.55e-13  |g|= 1.54e-11  |ddm|= 4.49e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198477e+03 1.83549619e+04 2.23213709e+03 4.57852222e+02
 1.21761085e+02 3.77232395e+01 4.73691825e+00 3.91911601e-01
 8.59826944e+00 4.91085987e-01]
grad_E = [-5.50302204e-07 -1.53658996e-06  1.06202497e-04 -3.48954148e-04
  2.88862933e-04  6.18572143e-04 -2.82901812e-03  1.17616416e-02
 -5.50392646e-04  1.06674134e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:01 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98484755        1
[INPUT] 0    0    [1    /1   ]  18354.9621598        1
[INPUT] 0    0    [1    /1   ]  2232.12136654        1
[INPUT] 0    0    [1    /1   ]  457.907373737        1
[INPUT] 0    0    [1    /1   ]  121.689740098        1
[INPUT] 0    0    [1    /1   ]  37.7089947901        1
[INPUT] 0    0    [1    /1   ]  4.73450226256        1
[INPUT] 0    0    [1    /1   ]  0.392380763077       1
[INPUT] 1    0    [1    /1   ]  8.59815984519        1
[INPUT] 1    0    [1    /1   ]  0.491249690377       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984847553647, 1.0]], [0, [18354.96215977984, 1.0]], [0, [2232.121366537689, 1.0]], [0, [457.90737373730855, 1.0]], [0, [121.68974009801167, 1.0]], [0, [37.70899479010136, 1.0]], [0, [4.734502262559099, 1.0]], [0, [0.39238076307737063, 1.0]], [1, [8.598159845192543, 1.0]], [1, [0.49124969037668187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98484755]
bas 1, expnt(s) = [18354.96215978]
bas 2, expnt(s) = [2232.12136654]
bas 3, expnt(s) = [457.90737374]
bas 4, expnt(s) = [121.6897401]
bas 5, expnt(s) = [37.70899479]
bas 6, expnt(s) = [4.73450226]
bas 7, expnt(s) = [0.39238076]
bas 8, expnt(s) = [8.59815985]
bas 9, expnt(s) = [0.49124969]
CPU time:        56.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198485e+03 2.00389581e+03 1.83549622e+04 3.98409921e+03
 2.23212137e+03 8.20452377e+02 4.57907374e+02 2.50091109e+02
 1.21689740e+02 9.25668525e+01 3.77089948e+01 3.84457857e+01
 4.73450226e+00 8.10906479e+00 3.92380763e-01 1.25255212e+00
 8.59815985e+00 4.29527808e+01 4.91249690e-01 1.19980938e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319410957017794
cond(S) = 85.77784281517964
E1 = -689.1511149459395  E_coul = 184.9391862456835
init E= -504.211928700256
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679870459587411  LUMO = 85.1991985167501
  mo_energy =
[-1.21645621e+02 -1.32795686e+01 -7.61998316e+00 -7.61998316e+00
 -7.61998316e+00 -1.65018490e+00 -6.79870460e-01 -6.79870460e-01
 -6.79870460e-01  8.51991985e+01  6.73388289e+02  3.71283662e+03
  1.58584358e+04  5.42636348e+04]
E1 = -706.6081690094059  E_coul = 198.97508264640555
cycle= 1 E= -507.633086363  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441429
diis-c [-0.19485993  1.        ]
  HOMO = -0.234818633252192  LUMO = 86.5324347404338
  mo_energy =
[-1.20257655e+02 -1.22511595e+01 -6.65121121e+00 -6.65121121e+00
 -6.65121121e+00 -1.16230839e+00 -2.34818633e-01 -2.34818633e-01
 -2.34818633e-01  8.65324347e+01  6.74760369e+02  3.71410076e+03
  1.58595866e+04  5.42647054e+04]
E1 = -706.5767748937958  E_coul = 198.9432602461153
cycle= 2 E= -507.63351464768  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00512947
diis-c [-2.63042638e-05  1.92053396e-04  9.99807947e-01]
  HOMO = -0.234993695138744  LUMO = 86.5289231109898
  mo_energy =
[-1.20266277e+02 -1.22523453e+01 -6.65304922e+00 -6.65304922e+00
 -6.65304922e+00 -1.16237312e+00 -2.34993695e-01 -2.34993695e-01
 -2.34993695e-01  8.65289231e+01  6.74749874e+02  3.71408527e+03
  1.58595685e+04  5.42646860e+04]
E1 = -706.5763356011483  E_coul = 198.9428208432563
cycle= 3 E= -507.633514757892  delta_E= -1.1e-07  |g|= 9.8e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133359
diis-c [-3.98465877e-10  3.40893147e-05 -2.62004574e-02  1.02616637e+00]
  HOMO = -0.234996028988169  LUMO = 86.5288760642306
  mo_energy =
[-1.20266396e+02 -1.22523619e+01 -6.65307742e+00 -6.65307742e+00
 -6.65307742e+00 -1.16237383e+00 -2.34996029e-01 -2.34996029e-01
 -2.34996029e-01  8.65288761e+01  6.74749750e+02  3.71408511e+03
  1.58595683e+04  5.42646858e+04]
E1 = -706.5763280709427  E_coul = 198.9428133130081
cycle= 4 E= -507.633514757935  delta_E= -4.26e-11  |g|= 3.74e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5763280709427  E_coul = 198.9428133130081
  HOMO = -0.23499601274803  LUMO = 86.5288764007474
  mo_energy =
[-1.20266395e+02 -1.22523618e+01 -6.65307726e+00 -6.65307726e+00
 -6.65307726e+00 -1.16237382e+00 -2.34996013e-01 -2.34996013e-01
 -2.34996013e-01  8.65288764e+01  6.74749751e+02  3.71408511e+03
  1.58595683e+04  5.42646858e+04]
E1 = -706.5763281078476  E_coul = 198.94281334991285
Extra cycle  E= -507.633514757935  delta_E= -1.14e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198485e+03 1.83549622e+04 2.23212137e+03 4.57907374e+02
 1.21689740e+02 3.77089948e+01 4.73450226e+00 3.92380763e-01
 8.59815985e+00 4.91249690e-01]
E = -507.6335147579348
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:01 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98484755        1
[INPUT] 0    0    [1    /1   ]  18354.9621598        1
[INPUT] 0    0    [1    /1   ]  2232.12136654        1
[INPUT] 0    0    [1    /1   ]  457.907373737        1
[INPUT] 0    0    [1    /1   ]  121.689740098        1
[INPUT] 0    0    [1    /1   ]  37.7089947901        1
[INPUT] 0    0    [1    /1   ]  4.73450226256        1
[INPUT] 0    0    [1    /1   ]  0.392380763077       1
[INPUT] 1    0    [1    /1   ]  8.59815984519        1
[INPUT] 1    0    [1    /1   ]  0.491249690377       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.984847553647, 1.0]], [0, [18354.96215977984, 1.0]], [0, [2232.121366537689, 1.0]], [0, [457.90737373730855, 1.0]], [0, [121.68974009801167, 1.0]], [0, [37.70899479010136, 1.0]], [0, [4.734502262559099, 1.0]], [0, [0.39238076307737063, 1.0]], [1, [8.598159845192543, 1.0]], [1, [0.49124969037668187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98484755]
bas 1, expnt(s) = [18354.96215978]
bas 2, expnt(s) = [2232.12136654]
bas 3, expnt(s) = [457.90737374]
bas 4, expnt(s) = [121.6897401]
bas 5, expnt(s) = [37.70899479]
bas 6, expnt(s) = [4.73450226]
bas 7, expnt(s) = [0.39238076]
bas 8, expnt(s) = [8.59815985]
bas 9, expnt(s) = [0.49124969]
CPU time:        57.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198485e+03 2.00389581e+03 1.83549622e+04 3.98409921e+03
 2.23212137e+03 8.20452377e+02 4.57907374e+02 2.50091109e+02
 1.21689740e+02 9.25668525e+01 3.77089948e+01 3.84457857e+01
 4.73450226e+00 8.10906479e+00 3.92380763e-01 1.25255212e+00
 8.59815985e+00 4.29527808e+01 4.91249690e-01 1.19980938e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319410957017794
cond(S) = 85.77784281517964
E1 = -689.1511149459395  E_coul = 184.9391862456835
init E= -504.211928700256
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679870459587411  LUMO = 85.1991985167501
  mo_energy =
[-1.21645621e+02 -1.32795686e+01 -7.61998316e+00 -7.61998316e+00
 -7.61998316e+00 -1.65018490e+00 -6.79870460e-01 -6.79870460e-01
 -6.79870460e-01  8.51991985e+01  6.73388289e+02  3.71283662e+03
  1.58584358e+04  5.42636348e+04]
E1 = -706.6081690094059  E_coul = 198.97508264640555
cycle= 1 E= -507.633086363  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441429
diis-c [-0.19485993  1.        ]
  HOMO = -0.234818633252192  LUMO = 86.5324347404338
  mo_energy =
[-1.20257655e+02 -1.22511595e+01 -6.65121121e+00 -6.65121121e+00
 -6.65121121e+00 -1.16230839e+00 -2.34818633e-01 -2.34818633e-01
 -2.34818633e-01  8.65324347e+01  6.74760369e+02  3.71410076e+03
  1.58595866e+04  5.42647054e+04]
E1 = -706.5767748937958  E_coul = 198.9432602461153
cycle= 2 E= -507.63351464768  delta_E= -0.000428  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00512947
diis-c [-2.63042638e-05  1.92053396e-04  9.99807947e-01]
  HOMO = -0.234993695138744  LUMO = 86.5289231109898
  mo_energy =
[-1.20266277e+02 -1.22523453e+01 -6.65304922e+00 -6.65304922e+00
 -6.65304922e+00 -1.16237312e+00 -2.34993695e-01 -2.34993695e-01
 -2.34993695e-01  8.65289231e+01  6.74749874e+02  3.71408527e+03
  1.58595685e+04  5.42646860e+04]
E1 = -706.5763356011483  E_coul = 198.9428208432563
cycle= 3 E= -507.633514757892  delta_E= -1.1e-07  |g|= 9.8e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133359
diis-c [-3.98465877e-10  3.40893147e-05 -2.62004574e-02  1.02616637e+00]
  HOMO = -0.234996028988169  LUMO = 86.5288760642306
  mo_energy =
[-1.20266396e+02 -1.22523619e+01 -6.65307742e+00 -6.65307742e+00
 -6.65307742e+00 -1.16237383e+00 -2.34996029e-01 -2.34996029e-01
 -2.34996029e-01  8.65288761e+01  6.74749750e+02  3.71408511e+03
  1.58595683e+04  5.42646858e+04]
E1 = -706.5763280709427  E_coul = 198.9428133130081
cycle= 4 E= -507.633514757935  delta_E= -4.26e-11  |g|= 3.74e-07  |ddm|= 3.59e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5763280709427  E_coul = 198.9428133130081
  HOMO = -0.23499601274803  LUMO = 86.5288764007474
  mo_energy =
[-1.20266395e+02 -1.22523618e+01 -6.65307726e+00 -6.65307726e+00
 -6.65307726e+00 -1.16237382e+00 -2.34996013e-01 -2.34996013e-01
 -2.34996013e-01  8.65288764e+01  6.74749751e+02  3.71408511e+03
  1.58595683e+04  5.42646858e+04]
E1 = -706.5763281078476  E_coul = 198.94281334991285
Extra cycle  E= -507.633514757935  delta_E= -1.14e-13  |g|= 6.46e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.77784281517964
E1 = -706.5763281078476  E_coul = 198.94281334991285
init E= -507.633514757935
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.234996012557771  LUMO = 86.5288764048637
  mo_energy =
[-1.20266395e+02 -1.22523618e+01 -6.65307726e+00 -6.65307726e+00
 -6.65307726e+00 -1.16237382e+00 -2.34996013e-01 -2.34996013e-01
 -2.34996013e-01  8.65288764e+01  6.74749751e+02  3.71408511e+03
  1.58595683e+04  5.42646858e+04]
E1 = -706.5763281084061  E_coul = 198.94281335047157
cycle= 1 E= -507.633514757935  delta_E= 2.84e-13  |g|= 1.3e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5763281084061  E_coul = 198.94281335047157
  HOMO = -0.234996012555082  LUMO = 86.5288764049245
  mo_energy =
[-1.20266395e+02 -1.22523618e+01 -6.65307726e+00 -6.65307726e+00
 -6.65307726e+00 -1.16237382e+00 -2.34996013e-01 -2.34996013e-01
 -2.34996013e-01  8.65288764e+01  6.74749751e+02  3.71408511e+03
  1.58595683e+04  5.42646858e+04]
E1 = -706.5763281084155  E_coul = 198.94281335048103
Extra cycle  E= -507.633514757934  delta_E= 5.68e-14  |g|= 9.59e-12  |ddm|= 4.5e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198485e+03 1.83549622e+04 2.23212137e+03 4.57907374e+02
 1.21689740e+02 3.77089948e+01 4.73450226e+00 3.92380763e-01
 8.59815985e+00 4.91249690e-01]
grad_E = [-5.45331457e-07 -1.54154969e-06  1.05546374e-04 -3.33477142e-04
  2.14616145e-04  7.14591987e-04 -4.79349945e-03  1.98752227e-02
 -8.89150908e-04  1.78390583e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:04 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98503536        1
[INPUT] 0    0    [1    /1   ]  18354.9626755        1
[INPUT] 0    0    [1    /1   ]  2232.0852507         1
[INPUT] 0    0    [1    /1   ]  458.03363601         1
[INPUT] 0    0    [1    /1   ]  121.529678831        1
[INPUT] 0    0    [1    /1   ]  37.6649541732        1
[INPUT] 0    0    [1    /1   ]  4.73153841245        1
[INPUT] 0    0    [1    /1   ]  0.392956934297       1
[INPUT] 1    0    [1    /1   ]  8.59804769374        1
[INPUT] 1    0    [1    /1   ]  0.491452010449       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985035363484, 1.0]], [0, [18354.962675455714, 1.0]], [0, [2232.085250697509, 1.0]], [0, [458.0336360102934, 1.0]], [0, [121.52967883110821, 1.0]], [0, [37.66495417321573, 1.0]], [0, [4.731538412453223, 1.0]], [0, [0.39295693429723977, 1.0]], [1, [8.59804769374155, 1.0]], [1, [0.49145201044914977, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98503536]
bas 1, expnt(s) = [18354.96267546]
bas 2, expnt(s) = [2232.0852507]
bas 3, expnt(s) = [458.03363601]
bas 4, expnt(s) = [121.52967883]
bas 5, expnt(s) = [37.66495417]
bas 6, expnt(s) = [4.73153841]
bas 7, expnt(s) = [0.39295693]
bas 8, expnt(s) = [8.59804769]
bas 9, expnt(s) = [0.49145201]
CPU time:        60.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198504e+03 2.00389585e+03 1.83549627e+04 3.98409929e+03
 2.23208525e+03 8.20442421e+02 4.58033636e+02 2.50142827e+02
 1.21529679e+02 9.24755210e+01 3.76649542e+01 3.84121049e+01
 4.73153841e+00 8.10525722e+00 3.92956934e-01 1.25393130e+00
 8.59804769e+00 4.29520805e+01 4.91452010e-01 1.20042709e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319122576693182
cond(S) = 85.72183673470431
E1 = -689.1641045655864  E_coul = 184.9508067357323
init E= -504.213297829854
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679367921659012  LUMO = 85.0276316751669
  mo_energy =
[-1.21644953e+02 -1.32785731e+01 -7.61922236e+00 -7.61922236e+00
 -7.61922236e+00 -1.64990425e+00 -6.79367922e-01 -6.79367922e-01
 -6.79367922e-01  8.50276317e+01  6.72883224e+02  3.71244145e+03
  1.58580940e+04  5.42632999e+04]
E1 = -706.6223053380913  E_coul = 198.98915661662204
cycle= 1 E= -507.633148721469  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441239
diis-c [-0.19469151  1.        ]
  HOMO = -0.234096408152104  LUMO = 86.3607107072755
  mo_energy =
[-1.20257224e+02 -1.22500253e+01 -6.65032252e+00 -6.65032252e+00
 -6.65032252e+00 -1.16170200e+00 -2.34096408e-01 -2.34096408e-01
 -2.34096408e-01  8.63607107e+01  6.74254945e+02  3.71370494e+03
  1.58592440e+04  5.42643698e+04]
E1 = -706.5907832870984  E_coul = 198.95720397847845
cycle= 2 E= -507.63357930862  delta_E= -0.000431  |g|= 0.00477  |ddm|= 0.0144
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00514807
diis-c [-2.64951069e-05  1.96627819e-04  9.99803372e-01]
  HOMO = -0.234272364136091  LUMO = 86.3571886172332
  mo_energy =
[-1.20265878e+02 -1.22512161e+01 -6.65216887e+00 -6.65216887e+00
 -6.65216887e+00 -1.16176709e+00 -2.34272364e-01 -2.34272364e-01
 -2.34272364e-01  8.63571886e+01  6.74244414e+02  3.71368941e+03
  1.58592258e+04  5.42643503e+04]
E1 = -706.5903415772625  E_coul = 198.95676215751809
cycle= 3 E= -507.633579419744  delta_E= -1.11e-07  |g|= 9.84e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133959
diis-c [-4.01356495e-10  3.40307129e-05 -2.62258690e-02  1.02619184e+00]
  HOMO = -0.23427471431164  LUMO = 86.3571413349101
  mo_energy =
[-1.20265997e+02 -1.22512328e+01 -6.65219724e+00 -6.65219724e+00
 -6.65219724e+00 -1.16176779e+00 -2.34274714e-01 -2.34274714e-01
 -2.34274714e-01  8.63571413e+01  6.74244289e+02  3.71368925e+03
  1.58592257e+04  5.42643502e+04]
E1 = -706.5903339939885  E_coul = 198.9567545742009
cycle= 4 E= -507.633579419788  delta_E= -4.31e-11  |g|= 3.76e-07  |ddm|= 3.61e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5903339939885  E_coul = 198.9567545742009
  HOMO = -0.234274697941469  LUMO = 86.3571416731767
  mo_energy =
[-1.20265997e+02 -1.22512327e+01 -6.65219708e+00 -6.65219708e+00
 -6.65219708e+00 -1.16176779e+00 -2.34274698e-01 -2.34274698e-01
 -2.34274698e-01  8.63571417e+01  6.74244290e+02  3.71368925e+03
  1.58592257e+04  5.42643502e+04]
E1 = -706.5903340311812  E_coul = 198.9567546113939
Extra cycle  E= -507.633579419787  delta_E= 2.27e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198504e+03 1.83549627e+04 2.23208525e+03 4.58033636e+02
 1.21529679e+02 3.76649542e+01 4.73153841e+00 3.92956934e-01
 8.59804769e+00 4.91452010e-01]
E = -507.63357941978734
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:04 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98503536        1
[INPUT] 0    0    [1    /1   ]  18354.9626755        1
[INPUT] 0    0    [1    /1   ]  2232.0852507         1
[INPUT] 0    0    [1    /1   ]  458.03363601         1
[INPUT] 0    0    [1    /1   ]  121.529678831        1
[INPUT] 0    0    [1    /1   ]  37.6649541732        1
[INPUT] 0    0    [1    /1   ]  4.73153841245        1
[INPUT] 0    0    [1    /1   ]  0.392956934297       1
[INPUT] 1    0    [1    /1   ]  8.59804769374        1
[INPUT] 1    0    [1    /1   ]  0.491452010449       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985035363484, 1.0]], [0, [18354.962675455714, 1.0]], [0, [2232.085250697509, 1.0]], [0, [458.0336360102934, 1.0]], [0, [121.52967883110821, 1.0]], [0, [37.66495417321573, 1.0]], [0, [4.731538412453223, 1.0]], [0, [0.39295693429723977, 1.0]], [1, [8.59804769374155, 1.0]], [1, [0.49145201044914977, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98503536]
bas 1, expnt(s) = [18354.96267546]
bas 2, expnt(s) = [2232.0852507]
bas 3, expnt(s) = [458.03363601]
bas 4, expnt(s) = [121.52967883]
bas 5, expnt(s) = [37.66495417]
bas 6, expnt(s) = [4.73153841]
bas 7, expnt(s) = [0.39295693]
bas 8, expnt(s) = [8.59804769]
bas 9, expnt(s) = [0.49145201]
CPU time:        61.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198504e+03 2.00389585e+03 1.83549627e+04 3.98409929e+03
 2.23208525e+03 8.20442421e+02 4.58033636e+02 2.50142827e+02
 1.21529679e+02 9.24755210e+01 3.76649542e+01 3.84121049e+01
 4.73153841e+00 8.10525722e+00 3.92956934e-01 1.25393130e+00
 8.59804769e+00 4.29520805e+01 4.91452010e-01 1.20042709e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319122576693182
cond(S) = 85.72183673470431
E1 = -689.1641045655864  E_coul = 184.9508067357323
init E= -504.213297829854
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679367921659012  LUMO = 85.0276316751669
  mo_energy =
[-1.21644953e+02 -1.32785731e+01 -7.61922236e+00 -7.61922236e+00
 -7.61922236e+00 -1.64990425e+00 -6.79367922e-01 -6.79367922e-01
 -6.79367922e-01  8.50276317e+01  6.72883224e+02  3.71244145e+03
  1.58580940e+04  5.42632999e+04]
E1 = -706.6223053380913  E_coul = 198.98915661662204
cycle= 1 E= -507.633148721469  delta_E= -3.42  |g|= 0.317  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441239
diis-c [-0.19469151  1.        ]
  HOMO = -0.234096408152104  LUMO = 86.3607107072755
  mo_energy =
[-1.20257224e+02 -1.22500253e+01 -6.65032252e+00 -6.65032252e+00
 -6.65032252e+00 -1.16170200e+00 -2.34096408e-01 -2.34096408e-01
 -2.34096408e-01  8.63607107e+01  6.74254945e+02  3.71370494e+03
  1.58592440e+04  5.42643698e+04]
E1 = -706.5907832870984  E_coul = 198.95720397847845
cycle= 2 E= -507.63357930862  delta_E= -0.000431  |g|= 0.00477  |ddm|= 0.0144
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00514807
diis-c [-2.64951069e-05  1.96627819e-04  9.99803372e-01]
  HOMO = -0.234272364136091  LUMO = 86.3571886172332
  mo_energy =
[-1.20265878e+02 -1.22512161e+01 -6.65216887e+00 -6.65216887e+00
 -6.65216887e+00 -1.16176709e+00 -2.34272364e-01 -2.34272364e-01
 -2.34272364e-01  8.63571886e+01  6.74244414e+02  3.71368941e+03
  1.58592258e+04  5.42643503e+04]
E1 = -706.5903415772625  E_coul = 198.95676215751809
cycle= 3 E= -507.633579419744  delta_E= -1.11e-07  |g|= 9.84e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000133959
diis-c [-4.01356495e-10  3.40307129e-05 -2.62258690e-02  1.02619184e+00]
  HOMO = -0.23427471431164  LUMO = 86.3571413349101
  mo_energy =
[-1.20265997e+02 -1.22512328e+01 -6.65219724e+00 -6.65219724e+00
 -6.65219724e+00 -1.16176779e+00 -2.34274714e-01 -2.34274714e-01
 -2.34274714e-01  8.63571413e+01  6.74244289e+02  3.71368925e+03
  1.58592257e+04  5.42643502e+04]
E1 = -706.5903339939885  E_coul = 198.9567545742009
cycle= 4 E= -507.633579419788  delta_E= -4.31e-11  |g|= 3.76e-07  |ddm|= 3.61e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5903339939885  E_coul = 198.9567545742009
  HOMO = -0.234274697941469  LUMO = 86.3571416731767
  mo_energy =
[-1.20265997e+02 -1.22512327e+01 -6.65219708e+00 -6.65219708e+00
 -6.65219708e+00 -1.16176779e+00 -2.34274698e-01 -2.34274698e-01
 -2.34274698e-01  8.63571417e+01  6.74244290e+02  3.71368925e+03
  1.58592257e+04  5.42643502e+04]
E1 = -706.5903340311812  E_coul = 198.9567546113939
Extra cycle  E= -507.633579419787  delta_E= 2.27e-13  |g|= 6.5e-09  |ddm|= 1.66e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.72183673470431
E1 = -706.5903340311812  E_coul = 198.9567546113939
init E= -507.633579419787
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.234274697749414  LUMO = 86.3571416773217
  mo_energy =
[-1.20265997e+02 -1.22512327e+01 -6.65219708e+00 -6.65219708e+00
 -6.65219708e+00 -1.16176779e+00 -2.34274698e-01 -2.34274698e-01
 -2.34274698e-01  8.63571417e+01  6.74244290e+02  3.71368925e+03
  1.58592257e+04  5.42643502e+04]
E1 = -706.5903340317451  E_coul = 198.95675461195765
cycle= 1 E= -507.633579419787  delta_E= -1.14e-13  |g|= 1.28e-10  |ddm|= 2.57e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5903340317451  E_coul = 198.95675461195765
  HOMO = -0.234274697746699  LUMO = 86.3571416773826
  mo_energy =
[-1.20265997e+02 -1.22512327e+01 -6.65219708e+00 -6.65219708e+00
 -6.65219708e+00 -1.16176779e+00 -2.34274698e-01 -2.34274698e-01
 -2.34274698e-01  8.63571417e+01  6.74244290e+02  3.71368925e+03
  1.58592257e+04  5.42643502e+04]
E1 = -706.5903340317549  E_coul = 198.9567546119671
Extra cycle  E= -507.633579419788  delta_E= -3.41e-13  |g|= 2.03e-11  |ddm|= 4.52e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198504e+03 1.83549627e+04 2.23208525e+03 4.58033636e+02
 1.21529679e+02 3.76649542e+01 4.73153841e+00 3.92956934e-01
 8.59804769e+00 4.91452010e-01]
grad_E = [-5.35009613e-07 -1.55184045e-06  1.04197226e-04 -3.02825485e-04
  8.64069426e-05  7.99758872e-04 -7.21188514e-03  2.98812490e-02
 -1.29942559e-03  2.66548702e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:07 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98539076        1
[INPUT] 0    0    [1    /1   ]  18354.9636519        1
[INPUT] 0    0    [1    /1   ]  2232.01690015        1
[INPUT] 0    0    [1    /1   ]  458.271989451        1
[INPUT] 0    0    [1    /1   ]  121.232249541        1
[INPUT] 0    0    [1    /1   ]  37.5655368891        1
[INPUT] 0    0    [1    /1   ]  4.72955998266        1
[INPUT] 0    0    [1    /1   ]  0.393340640928       1
[INPUT] 1    0    [1    /1   ]  8.59802487229        1
[INPUT] 1    0    [1    /1   ]  0.491590849345       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985390756152, 1.0]], [0, [18354.963651906688, 1.0]], [0, [2232.0169001495897, 1.0]], [0, [458.2719894511405, 1.0]], [0, [121.23224954139494, 1.0]], [0, [37.56553688914081, 1.0]], [0, [4.729559982655484, 1.0]], [0, [0.3933406409276086, 1.0]], [1, [8.598024872286285, 1.0]], [1, [0.49159084934454034, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98539076]
bas 1, expnt(s) = [18354.96365191]
bas 2, expnt(s) = [2232.01690015]
bas 3, expnt(s) = [458.27198945]
bas 4, expnt(s) = [121.23224954]
bas 5, expnt(s) = [37.56553689]
bas 6, expnt(s) = [4.72955998]
bas 7, expnt(s) = [0.39334064]
bas 8, expnt(s) = [8.59802487]
bas 9, expnt(s) = [0.49159085]
CPU time:        65.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198539e+03 2.00389592e+03 1.83549637e+04 3.98409945e+03
 2.23201690e+03 8.20423578e+02 4.58271989e+02 2.50240448e+02
 1.21232250e+02 9.23057270e+01 3.75655369e+01 3.83360378e+01
 4.72955998e+00 8.10271526e+00 3.93340641e-01 1.25484949e+00
 8.59802487e+00 4.29519380e+01 4.91590849e-01 1.20085102e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31892752879265
cond(S) = 85.60934292417133
E1 = -689.1740498017648  E_coul = 184.95858502779564
init E= -504.215464773969
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679029411527967  LUMO = 84.6849044043599
  mo_energy =
[-1.21644659e+02 -1.32777778e+01 -7.61872541e+00 -7.61872541e+00
 -7.61872541e+00 -1.64969700e+00 -6.79029412e-01 -6.79029412e-01
 -6.79029412e-01  8.46849044e+01  6.71891226e+02  3.71166318e+03
  1.58574200e+04  5.42626411e+04]
E1 = -706.6315791800345  E_coul = 198.9983171213156
cycle= 1 E= -507.633262058719  delta_E= -3.42  |g|= 0.318  |ddm|= 0.303
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440864
diis-c [-0.1943613  1.       ]
  HOMO = -0.233610256787472  LUMO = 86.0175674331488
  mo_energy =
[-1.20257179e+02 -1.22491540e+01 -6.64974757e+00 -6.64974757e+00
 -6.64974757e+00 -1.16128001e+00 -2.33610257e-01 -2.33610257e-01
 -2.33610257e-01  8.60175674e+01  6.73262482e+02  3.71292584e+03
  1.58585692e+04  5.42637101e+04]
E1 = -706.5998439334642  E_coul = 198.96614790581756
cycle= 2 E= -507.633696027647  delta_E= -0.000434  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517306
diis-c [-2.67514225e-05  2.16417542e-04  9.99783582e-01]
  HOMO = -0.23378764803431  LUMO = 86.0140290704631
  mo_energy =
[-1.20265885e+02 -1.22503536e+01 -6.65160786e+00 -6.65160786e+00
 -6.65160786e+00 -1.16134564e+00 -2.33787648e-01 -2.33787648e-01
 -2.33787648e-01  8.60140291e+01  6.73251892e+02  3.71291021e+03
  1.58585509e+04  5.42636905e+04]
E1 = -706.5993981233534  E_coul = 198.96570198320003
cycle= 3 E= -507.633696140153  delta_E= -1.13e-07  |g|= 9.92e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000134936
diis-c [-4.06873192e-10  3.39180477e-05 -2.62909305e-02  1.02625701e+00]
  HOMO = -0.233790026785423  LUMO = 86.0139813525439
  mo_energy =
[-1.20266006e+02 -1.22503705e+01 -6.65163655e+00 -6.65163655e+00
 -6.65163655e+00 -1.16134636e+00 -2.33790027e-01 -2.33790027e-01
 -2.33790027e-01  8.60139814e+01  6.73251766e+02  3.71291006e+03
  1.58585507e+04  5.42636904e+04]
E1 = -706.5993904421517  E_coul = 198.9656943019546
cycle= 4 E= -507.633696140197  delta_E= -4.38e-11  |g|= 3.8e-07  |ddm|= 3.65e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5993904421517  E_coul = 198.9656943019546
  HOMO = -0.233790010180839  LUMO = 86.0139816939629
  mo_energy =
[-1.20266005e+02 -1.22503704e+01 -6.65163639e+00 -6.65163639e+00
 -6.65163639e+00 -1.16134635e+00 -2.33790010e-01 -2.33790010e-01
 -2.33790010e-01  8.60139817e+01  6.73251767e+02  3.71291006e+03
  1.58585507e+04  5.42636904e+04]
E1 = -706.5993904798769  E_coul = 198.96569433967952
Extra cycle  E= -507.633696140197  delta_E= -2.27e-13  |g|= 6.58e-09  |ddm|= 1.68e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198539e+03 1.83549637e+04 2.23201690e+03 4.58271989e+02
 1.21232250e+02 3.75655369e+01 4.72955998e+00 3.93340641e-01
 8.59802487e+00 4.91590849e-01]
E = -507.63369614019734
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:07 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98539076        1
[INPUT] 0    0    [1    /1   ]  18354.9636519        1
[INPUT] 0    0    [1    /1   ]  2232.01690015        1
[INPUT] 0    0    [1    /1   ]  458.271989451        1
[INPUT] 0    0    [1    /1   ]  121.232249541        1
[INPUT] 0    0    [1    /1   ]  37.5655368891        1
[INPUT] 0    0    [1    /1   ]  4.72955998266        1
[INPUT] 0    0    [1    /1   ]  0.393340640928       1
[INPUT] 1    0    [1    /1   ]  8.59802487229        1
[INPUT] 1    0    [1    /1   ]  0.491590849345       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985390756152, 1.0]], [0, [18354.963651906688, 1.0]], [0, [2232.0169001495897, 1.0]], [0, [458.2719894511405, 1.0]], [0, [121.23224954139494, 1.0]], [0, [37.56553688914081, 1.0]], [0, [4.729559982655484, 1.0]], [0, [0.3933406409276086, 1.0]], [1, [8.598024872286285, 1.0]], [1, [0.49159084934454034, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98539076]
bas 1, expnt(s) = [18354.96365191]
bas 2, expnt(s) = [2232.01690015]
bas 3, expnt(s) = [458.27198945]
bas 4, expnt(s) = [121.23224954]
bas 5, expnt(s) = [37.56553689]
bas 6, expnt(s) = [4.72955998]
bas 7, expnt(s) = [0.39334064]
bas 8, expnt(s) = [8.59802487]
bas 9, expnt(s) = [0.49159085]
CPU time:        65.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198539e+03 2.00389592e+03 1.83549637e+04 3.98409945e+03
 2.23201690e+03 8.20423578e+02 4.58271989e+02 2.50240448e+02
 1.21232250e+02 9.23057270e+01 3.75655369e+01 3.83360378e+01
 4.72955998e+00 8.10271526e+00 3.93340641e-01 1.25484949e+00
 8.59802487e+00 4.29519380e+01 4.91590849e-01 1.20085102e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31892752879265
cond(S) = 85.60934292417133
E1 = -689.1740498017648  E_coul = 184.95858502779564
init E= -504.215464773969
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679029411527967  LUMO = 84.6849044043599
  mo_energy =
[-1.21644659e+02 -1.32777778e+01 -7.61872541e+00 -7.61872541e+00
 -7.61872541e+00 -1.64969700e+00 -6.79029412e-01 -6.79029412e-01
 -6.79029412e-01  8.46849044e+01  6.71891226e+02  3.71166318e+03
  1.58574200e+04  5.42626411e+04]
E1 = -706.6315791800345  E_coul = 198.9983171213156
cycle= 1 E= -507.633262058719  delta_E= -3.42  |g|= 0.318  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440864
diis-c [-0.1943613  1.       ]
  HOMO = -0.233610256787472  LUMO = 86.0175674331488
  mo_energy =
[-1.20257179e+02 -1.22491540e+01 -6.64974757e+00 -6.64974757e+00
 -6.64974757e+00 -1.16128001e+00 -2.33610257e-01 -2.33610257e-01
 -2.33610257e-01  8.60175674e+01  6.73262482e+02  3.71292584e+03
  1.58585692e+04  5.42637101e+04]
E1 = -706.5998439334642  E_coul = 198.96614790581756
cycle= 2 E= -507.633696027647  delta_E= -0.000434  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517306
diis-c [-2.67514225e-05  2.16417542e-04  9.99783582e-01]
  HOMO = -0.23378764803431  LUMO = 86.0140290704631
  mo_energy =
[-1.20265885e+02 -1.22503536e+01 -6.65160786e+00 -6.65160786e+00
 -6.65160786e+00 -1.16134564e+00 -2.33787648e-01 -2.33787648e-01
 -2.33787648e-01  8.60140291e+01  6.73251892e+02  3.71291021e+03
  1.58585509e+04  5.42636905e+04]
E1 = -706.5993981233534  E_coul = 198.96570198320003
cycle= 3 E= -507.633696140153  delta_E= -1.13e-07  |g|= 9.92e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000134936
diis-c [-4.06873192e-10  3.39180477e-05 -2.62909305e-02  1.02625701e+00]
  HOMO = -0.233790026785423  LUMO = 86.0139813525439
  mo_energy =
[-1.20266006e+02 -1.22503705e+01 -6.65163655e+00 -6.65163655e+00
 -6.65163655e+00 -1.16134636e+00 -2.33790027e-01 -2.33790027e-01
 -2.33790027e-01  8.60139814e+01  6.73251766e+02  3.71291006e+03
  1.58585507e+04  5.42636904e+04]
E1 = -706.5993904421517  E_coul = 198.9656943019546
cycle= 4 E= -507.633696140197  delta_E= -4.38e-11  |g|= 3.8e-07  |ddm|= 3.65e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5993904421517  E_coul = 198.9656943019546
  HOMO = -0.233790010180839  LUMO = 86.0139816939629
  mo_energy =
[-1.20266005e+02 -1.22503704e+01 -6.65163639e+00 -6.65163639e+00
 -6.65163639e+00 -1.16134635e+00 -2.33790010e-01 -2.33790010e-01
 -2.33790010e-01  8.60139817e+01  6.73251767e+02  3.71291006e+03
  1.58585507e+04  5.42636904e+04]
E1 = -706.5993904798769  E_coul = 198.96569433967952
Extra cycle  E= -507.633696140197  delta_E= -2.27e-13  |g|= 6.58e-09  |ddm|= 1.68e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.60934292417133
E1 = -706.5993904798769  E_coul = 198.96569433967952
init E= -507.633696140197
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.23379000998559  LUMO = 86.0139816981562
  mo_energy =
[-1.20266005e+02 -1.22503704e+01 -6.65163639e+00 -6.65163639e+00
 -6.65163639e+00 -1.16134635e+00 -2.33790010e-01 -2.33790010e-01
 -2.33790010e-01  8.60139817e+01  6.73251767e+02  3.71291006e+03
  1.58585507e+04  5.42636904e+04]
E1 = -706.5993904804498  E_coul = 198.96569434025278
cycle= 1 E= -507.633696140197  delta_E= 3.41e-13  |g|= 1.3e-10  |ddm|= 2.61e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5993904804498  E_coul = 198.96569434025278
  HOMO = -0.233790009982826  LUMO = 86.0139816982162
  mo_energy =
[-1.20266005e+02 -1.22503704e+01 -6.65163639e+00 -6.65163639e+00
 -6.65163639e+00 -1.16134635e+00 -2.33790010e-01 -2.33790010e-01
 -2.33790010e-01  8.60139817e+01  6.73251767e+02  3.71291006e+03
  1.58585507e+04  5.42636904e+04]
E1 = -706.5993904804598  E_coul = 198.96569434026264
Extra cycle  E= -507.633696140197  delta_E= -1.14e-13  |g|= 5.79e-12  |ddm|= 4.65e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198539e+03 1.83549637e+04 2.23201690e+03 4.58271989e+02
 1.21232250e+02 3.75655369e+01 4.72955998e+00 3.93340641e-01
 8.59802487e+00 4.91590849e-01]
grad_E = [-5.16740455e-07 -1.56978208e-06  1.01862859e-04 -2.51442955e-04
 -9.81713872e-05  7.71152878e-04 -8.84416543e-03  3.67174698e-02
 -1.56441608e-03  3.25951466e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98582441        1
[INPUT] 0    0    [1    /1   ]  18354.9648442        1
[INPUT] 0    0    [1    /1   ]  2231.93348722        1
[INPUT] 0    0    [1    /1   ]  458.562078333        1
[INPUT] 0    0    [1    /1   ]  120.876249681        1
[INPUT] 0    0    [1    /1   ]  37.4243821832        1
[INPUT] 0    0    [1    /1   ]  4.7315072615         1
[INPUT] 0    0    [1    /1   ]  0.392951131455       1
[INPUT] 1    0    [1    /1   ]  8.59822184603        1
[INPUT] 1    0    [1    /1   ]  0.491466501215       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985824405043, 1.0]], [0, [18354.964844229053, 1.0]], [0, [2231.933487220382, 1.0]], [0, [458.56207833304325, 1.0]], [0, [120.8762496811309, 1.0]], [0, [37.42438218315231, 1.0]], [0, [4.73150726149591, 1.0]], [0, [0.39295113145519867, 1.0]], [1, [8.598221846027952, 1.0]], [1, [0.49146650121518337, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98582441]
bas 1, expnt(s) = [18354.96484423]
bas 2, expnt(s) = [2231.93348722]
bas 3, expnt(s) = [458.56207833]
bas 4, expnt(s) = [120.87624968]
bas 5, expnt(s) = [37.42438218]
bas 6, expnt(s) = [4.73150726]
bas 7, expnt(s) = [0.39295113]
bas 8, expnt(s) = [8.59822185]
bas 9, expnt(s) = [0.4914665]
CPU time:        69.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198582e+03 2.00389601e+03 1.83549648e+04 3.98409965e+03
 2.23193349e+03 8.20400583e+02 4.58562078e+02 2.50359241e+02
 1.20876250e+02 9.21023597e+01 3.74243822e+01 3.82279495e+01
 4.73150726e+00 8.10521720e+00 3.92951131e-01 1.25391741e+00
 8.59822185e+00 4.29531680e+01 4.91466501e-01 1.20047133e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3191188686161
cond(S) = 85.46444768174524
E1 = -689.1685590870164  E_coul = 184.95093351887326
init E= -504.217625568143
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679352920375794  LUMO = 84.2442376428299
  mo_energy =
[-1.21645461e+02 -1.32781255e+01 -7.61925764e+00 -7.61925764e+00
 -7.61925764e+00 -1.64983585e+00 -6.79352920e-01 -6.79352920e-01
 -6.79352920e-01  8.42442376e+01  6.70635730e+02  3.71067619e+03
  1.58565646e+04  5.42618068e+04]
E1 = -706.6216977983595  E_coul = 198.98830486182712
cycle= 1 E= -507.633392936532  delta_E= -3.42  |g|= 0.318  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440389
diis-c [-0.19394266  1.        ]
  HOMO = -0.234080747332948  LUMO = 85.5762374606124
  mo_energy =
[-1.20258059e+02 -1.22496413e+01 -6.65039020e+00 -6.65039020e+00
 -6.65039020e+00 -1.16164587e+00 -2.34080747e-01 -2.34080747e-01
 -2.34080747e-01  8.55762375e+01  6.72006667e+02  3.71193827e+03
  1.58577132e+04  5.42628751e+04]
E1 = -706.5897361517677  E_coul = 198.9559062838275
cycle= 2 E= -507.63382986794  delta_E= -0.000437  |g|= 0.0048  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00519138
diis-c [-2.69378398e-05  2.54218211e-04  9.99745782e-01]
  HOMO = -0.23425958619726  LUMO = 85.5726834282405
  mo_energy =
[-1.20266820e+02 -1.22508509e+01 -6.65226535e+00 -6.65226535e+00
 -6.65226535e+00 -1.16171203e+00 -2.34259586e-01 -2.34259586e-01
 -2.34259586e-01  8.55726834e+01  6.71996011e+02  3.71192255e+03
  1.58576948e+04  5.42628554e+04]
E1 = -706.5892858881267  E_coul = 198.9554559064074
cycle= 3 E= -507.633829981719  delta_E= -1.14e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135943
diis-c [-4.13735413e-10  3.37766265e-05 -2.63911219e-02  1.02635735e+00]
  HOMO = -0.234261997211519  LUMO = 85.5726351881723
  mo_energy =
[-1.20266942e+02 -1.22508680e+01 -6.65229442e+00 -6.65229442e+00
 -6.65229442e+00 -1.16171275e+00 -2.34261997e-01 -2.34261997e-01
 -2.34261997e-01  8.55726352e+01  6.71995883e+02  3.71192239e+03
  1.58576946e+04  5.42628553e+04]
E1 = -706.5892780895974  E_coul = 198.95544810783352
cycle= 4 E= -507.633829981764  delta_E= -4.46e-11  |g|= 3.84e-07  |ddm|= 3.7e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5892780895974  E_coul = 198.95544810783352
  HOMO = -0.234261980333221  LUMO = 85.5726355332639
  mo_energy =
[-1.20266942e+02 -1.22508679e+01 -6.65229426e+00 -6.65229426e+00
 -6.65229426e+00 -1.16171275e+00 -2.34261980e-01 -2.34261980e-01
 -2.34261980e-01  8.55726355e+01  6.71995885e+02  3.71192240e+03
  1.58576946e+04  5.42628553e+04]
E1 = -706.5892781279595  E_coul = 198.95544814619564
Extra cycle  E= -507.633829981764  delta_E= 1.14e-13  |g|= 6.67e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198582e+03 1.83549648e+04 2.23193349e+03 4.58562078e+02
 1.20876250e+02 3.74243822e+01 4.73150726e+00 3.92951131e-01
 8.59822185e+00 4.91466501e-01]
E = -507.6338299817638
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98582441        1
[INPUT] 0    0    [1    /1   ]  18354.9648442        1
[INPUT] 0    0    [1    /1   ]  2231.93348722        1
[INPUT] 0    0    [1    /1   ]  458.562078333        1
[INPUT] 0    0    [1    /1   ]  120.876249681        1
[INPUT] 0    0    [1    /1   ]  37.4243821832        1
[INPUT] 0    0    [1    /1   ]  4.7315072615         1
[INPUT] 0    0    [1    /1   ]  0.392951131455       1
[INPUT] 1    0    [1    /1   ]  8.59822184603        1
[INPUT] 1    0    [1    /1   ]  0.491466501215       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985824405043, 1.0]], [0, [18354.964844229053, 1.0]], [0, [2231.933487220382, 1.0]], [0, [458.56207833304325, 1.0]], [0, [120.8762496811309, 1.0]], [0, [37.42438218315231, 1.0]], [0, [4.73150726149591, 1.0]], [0, [0.39295113145519867, 1.0]], [1, [8.598221846027952, 1.0]], [1, [0.49146650121518337, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98582441]
bas 1, expnt(s) = [18354.96484423]
bas 2, expnt(s) = [2231.93348722]
bas 3, expnt(s) = [458.56207833]
bas 4, expnt(s) = [120.87624968]
bas 5, expnt(s) = [37.42438218]
bas 6, expnt(s) = [4.73150726]
bas 7, expnt(s) = [0.39295113]
bas 8, expnt(s) = [8.59822185]
bas 9, expnt(s) = [0.4914665]
CPU time:        70.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198582e+03 2.00389601e+03 1.83549648e+04 3.98409965e+03
 2.23193349e+03 8.20400583e+02 4.58562078e+02 2.50359241e+02
 1.20876250e+02 9.21023597e+01 3.74243822e+01 3.82279495e+01
 4.73150726e+00 8.10521720e+00 3.92951131e-01 1.25391741e+00
 8.59822185e+00 4.29531680e+01 4.91466501e-01 1.20047133e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3191188686161
cond(S) = 85.46444768174524
E1 = -689.1685590870164  E_coul = 184.95093351887326
init E= -504.217625568143
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.679352920375794  LUMO = 84.2442376428299
  mo_energy =
[-1.21645461e+02 -1.32781255e+01 -7.61925764e+00 -7.61925764e+00
 -7.61925764e+00 -1.64983585e+00 -6.79352920e-01 -6.79352920e-01
 -6.79352920e-01  8.42442376e+01  6.70635730e+02  3.71067619e+03
  1.58565646e+04  5.42618068e+04]
E1 = -706.6216977983595  E_coul = 198.98830486182712
cycle= 1 E= -507.633392936532  delta_E= -3.42  |g|= 0.318  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440389
diis-c [-0.19394266  1.        ]
  HOMO = -0.234080747332948  LUMO = 85.5762374606124
  mo_energy =
[-1.20258059e+02 -1.22496413e+01 -6.65039020e+00 -6.65039020e+00
 -6.65039020e+00 -1.16164587e+00 -2.34080747e-01 -2.34080747e-01
 -2.34080747e-01  8.55762375e+01  6.72006667e+02  3.71193827e+03
  1.58577132e+04  5.42628751e+04]
E1 = -706.5897361517677  E_coul = 198.9559062838275
cycle= 2 E= -507.63382986794  delta_E= -0.000437  |g|= 0.0048  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00519138
diis-c [-2.69378398e-05  2.54218211e-04  9.99745782e-01]
  HOMO = -0.23425958619726  LUMO = 85.5726834282405
  mo_energy =
[-1.20266820e+02 -1.22508509e+01 -6.65226535e+00 -6.65226535e+00
 -6.65226535e+00 -1.16171203e+00 -2.34259586e-01 -2.34259586e-01
 -2.34259586e-01  8.55726834e+01  6.71996011e+02  3.71192255e+03
  1.58576948e+04  5.42628554e+04]
E1 = -706.5892858881267  E_coul = 198.9554559064074
cycle= 3 E= -507.633829981719  delta_E= -1.14e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135943
diis-c [-4.13735413e-10  3.37766265e-05 -2.63911219e-02  1.02635735e+00]
  HOMO = -0.234261997211519  LUMO = 85.5726351881723
  mo_energy =
[-1.20266942e+02 -1.22508680e+01 -6.65229442e+00 -6.65229442e+00
 -6.65229442e+00 -1.16171275e+00 -2.34261997e-01 -2.34261997e-01
 -2.34261997e-01  8.55726352e+01  6.71995883e+02  3.71192239e+03
  1.58576946e+04  5.42628553e+04]
E1 = -706.5892780895974  E_coul = 198.95544810783352
cycle= 4 E= -507.633829981764  delta_E= -4.46e-11  |g|= 3.84e-07  |ddm|= 3.7e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5892780895974  E_coul = 198.95544810783352
  HOMO = -0.234261980333221  LUMO = 85.5726355332639
  mo_energy =
[-1.20266942e+02 -1.22508679e+01 -6.65229426e+00 -6.65229426e+00
 -6.65229426e+00 -1.16171275e+00 -2.34261980e-01 -2.34261980e-01
 -2.34261980e-01  8.55726355e+01  6.71995885e+02  3.71192240e+03
  1.58576946e+04  5.42628553e+04]
E1 = -706.5892781279595  E_coul = 198.95544814619564
Extra cycle  E= -507.633829981764  delta_E= 1.14e-13  |g|= 6.67e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.46444768174524
E1 = -706.5892781279595  E_coul = 198.95544814619564
init E= -507.633829981764
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.234261980134285  LUMO = 85.5726355375155
  mo_energy =
[-1.20266942e+02 -1.22508679e+01 -6.65229425e+00 -6.65229425e+00
 -6.65229425e+00 -1.16171275e+00 -2.34261980e-01 -2.34261980e-01
 -2.34261980e-01  8.55726355e+01  6.71995885e+02  3.71192240e+03
  1.58576946e+04  5.42628553e+04]
E1 = -706.5892781285443  E_coul = 198.95544814678027
cycle= 1 E= -507.633829981764  delta_E= -1.71e-13  |g|= 1.32e-10  |ddm|= 2.66e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5892781285443  E_coul = 198.95544814678027
  HOMO = -0.23426198013146  LUMO = 85.5726355375756
  mo_energy =
[-1.20266942e+02 -1.22508679e+01 -6.65229425e+00 -6.65229425e+00
 -6.65229425e+00 -1.16171275e+00 -2.34261980e-01 -2.34261980e-01
 -2.34261980e-01  8.55726355e+01  6.71995885e+02  3.71192240e+03
  1.58576946e+04  5.42628553e+04]
E1 = -706.5892781285544  E_coul = 198.9554481467906
Extra cycle  E= -507.633829981764  delta_E= 1.71e-13  |g|= 7.45e-12  |ddm|= 4.77e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198582e+03 1.83549648e+04 2.23193349e+03 4.58562078e+02
 1.20876250e+02 3.74243822e+01 4.73150726e+00 3.92951131e-01
 8.59822185e+00 4.91466501e-01]
grad_E = [-4.95874672e-07 -1.58982121e-06  9.92785090e-05 -1.96702815e-04
 -2.52321290e-04  5.03093332e-04 -7.30680929e-03  3.04453847e-02
 -1.27660748e-03  2.69079859e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98604497        1
[INPUT] 0    0    [1    /1   ]  18354.9654516        1
[INPUT] 0    0    [1    /1   ]  2231.89104798        1
[INPUT] 0    0    [1    /1   ]  458.708806196        1
[INPUT] 0    0    [1    /1   ]  120.7023875          1
[INPUT] 0    0    [1    /1   ]  37.332842455         1
[INPUT] 0    0    [1    /1   ]  4.7367728173         1
[INPUT] 0    0    [1    /1   ]  0.391906789191       1
[INPUT] 1    0    [1    /1   ]  8.59854315932        1
[INPUT] 1    0    [1    /1   ]  0.491115092009       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986044966307, 1.0]], [0, [18354.96545164492, 1.0]], [0, [2231.8910479750843, 1.0]], [0, [458.70880619626587, 1.0]], [0, [120.70238750030616, 1.0]], [0, [37.33284245497382, 1.0]], [0, [4.736772817302308, 1.0]], [0, [0.3919067891907598, 1.0]], [1, [8.598543159321853, 1.0]], [1, [0.49111509200863107, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98604497]
bas 1, expnt(s) = [18354.96545164]
bas 2, expnt(s) = [2231.89104798]
bas 3, expnt(s) = [458.7088062]
bas 4, expnt(s) = [120.7023875]
bas 5, expnt(s) = [37.33284245]
bas 6, expnt(s) = [4.73677282]
bas 7, expnt(s) = [0.39190679]
bas 8, expnt(s) = [8.59854316]
bas 9, expnt(s) = [0.49111509]
CPU time:        74.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198604e+03 2.00389605e+03 1.83549655e+04 3.98409975e+03
 2.23189105e+03 8.20388884e+02 4.58708806e+02 2.50419320e+02
 1.20702388e+02 9.20029853e+01 3.73328425e+01 3.81577991e+01
 4.73677282e+00 8.11198130e+00 3.91906789e-01 1.25141718e+00
 8.59854316e+00 4.29551744e+01 4.91115092e-01 1.19939848e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319631141317288
cond(S) = 85.38263935474951
E1 = -689.1481739088788  E_coul = 184.92998731185847
init E= -504.21818659702
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680246869527584  LUMO = 83.9973925530718
  mo_energy =
[-1.21647056e+02 -1.32796009e+01 -7.62066416e+00 -7.62066416e+00
 -7.62066416e+00 -1.65028767e+00 -6.80246870e-01 -6.80246870e-01
 -6.80246870e-01  8.39973926e+01  6.69953711e+02  3.71013782e+03
  1.58560972e+04  5.42613523e+04]
E1 = -706.5956799419154  E_coul = 198.96221393971464
cycle= 1 E= -507.633466002201  delta_E= -3.42  |g|= 0.318  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440129
diis-c [-0.1937134  1.       ]
  HOMO = -0.235367361560982  LUMO = 85.3289024092598
  mo_energy =
[-1.20259477e+02 -1.22514133e+01 -6.65205194e+00 -6.65205194e+00
 -6.65205194e+00 -1.16269341e+00 -2.35367362e-01 -2.35367362e-01
 -2.35367362e-01  8.53289024e+01  6.71324721e+02  3.71140004e+03
  1.58572460e+04  5.42624209e+04]
E1 = -706.5636372207201  E_coul = 198.92973393495015
cycle= 2 E= -507.63390328577  delta_E= -0.000437  |g|= 0.0048  |ddm|= 0.0146
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00518876
diis-c [-2.69073214e-05  2.86864869e-04  9.99713135e-01]
  HOMO = -0.235546629176075  LUMO = 85.3253445236388
  mo_energy =
[-1.20268256e+02 -1.22526273e+01 -6.65393247e+00 -6.65393247e+00
 -6.65393247e+00 -1.16275970e+00 -2.35546629e-01 -2.35546629e-01
 -2.35546629e-01  8.53253445e+01  6.71314040e+02  3.71138428e+03
  1.58572275e+04  5.42624012e+04]
E1 = -706.5631852626316  E_coul = 198.92928186285843
cycle= 3 E= -507.633903399773  delta_E= -1.14e-07  |g|= 0.0001  |ddm|= 0.000207
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000136268
diis-c [-4.17319068e-10  3.36984476e-05 -2.64622298e-02  1.02642853e+00]
  HOMO = -0.235549053761395  LUMO = 85.3252960296
  mo_energy =
[-1.20268379e+02 -1.22526445e+01 -6.65396172e+00 -6.65396172e+00
 -6.65396172e+00 -1.16276043e+00 -2.35549054e-01 -2.35549054e-01
 -2.35549054e-01  8.53252960e+01  6.71313912e+02  3.71138412e+03
  1.58572273e+04  5.42624010e+04]
E1 = -706.5631774075047  E_coul = 198.92927400768616
cycle= 4 E= -507.633903399819  delta_E= -4.54e-11  |g|= 3.86e-07  |ddm|= 3.72e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5631774075047  E_coul = 198.92927400768616
  HOMO = -0.235549036758563  LUMO = 85.3252963763668
  mo_energy =
[-1.20268378e+02 -1.22526444e+01 -6.65396155e+00 -6.65396155e+00
 -6.65396155e+00 -1.16276042e+00 -2.35549037e-01 -2.35549037e-01
 -2.35549037e-01  8.53252964e+01  6.71313913e+02  3.71138413e+03
  1.58572273e+04  5.42624010e+04]
E1 = -706.5631774461733  E_coul = 198.92927404635506
Extra cycle  E= -507.633903399818  delta_E= 2.84e-13  |g|= 6.71e-09  |ddm|= 1.72e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198604e+03 1.83549655e+04 2.23189105e+03 4.58708806e+02
 1.20702388e+02 3.73328425e+01 4.73677282e+00 3.91906789e-01
 8.59854316e+00 4.91115092e-01]
E = -507.6339033998182
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98604497        1
[INPUT] 0    0    [1    /1   ]  18354.9654516        1
[INPUT] 0    0    [1    /1   ]  2231.89104798        1
[INPUT] 0    0    [1    /1   ]  458.708806196        1
[INPUT] 0    0    [1    /1   ]  120.7023875          1
[INPUT] 0    0    [1    /1   ]  37.332842455         1
[INPUT] 0    0    [1    /1   ]  4.7367728173         1
[INPUT] 0    0    [1    /1   ]  0.391906789191       1
[INPUT] 1    0    [1    /1   ]  8.59854315932        1
[INPUT] 1    0    [1    /1   ]  0.491115092009       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986044966307, 1.0]], [0, [18354.96545164492, 1.0]], [0, [2231.8910479750843, 1.0]], [0, [458.70880619626587, 1.0]], [0, [120.70238750030616, 1.0]], [0, [37.33284245497382, 1.0]], [0, [4.736772817302308, 1.0]], [0, [0.3919067891907598, 1.0]], [1, [8.598543159321853, 1.0]], [1, [0.49111509200863107, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98604497]
bas 1, expnt(s) = [18354.96545164]
bas 2, expnt(s) = [2231.89104798]
bas 3, expnt(s) = [458.7088062]
bas 4, expnt(s) = [120.7023875]
bas 5, expnt(s) = [37.33284245]
bas 6, expnt(s) = [4.73677282]
bas 7, expnt(s) = [0.39190679]
bas 8, expnt(s) = [8.59854316]
bas 9, expnt(s) = [0.49111509]
CPU time:        74.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198604e+03 2.00389605e+03 1.83549655e+04 3.98409975e+03
 2.23189105e+03 8.20388884e+02 4.58708806e+02 2.50419320e+02
 1.20702388e+02 9.20029853e+01 3.73328425e+01 3.81577991e+01
 4.73677282e+00 8.11198130e+00 3.91906789e-01 1.25141718e+00
 8.59854316e+00 4.29551744e+01 4.91115092e-01 1.19939848e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319631141317288
cond(S) = 85.38263935474951
E1 = -689.1481739088788  E_coul = 184.92998731185847
init E= -504.21818659702
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680246869527584  LUMO = 83.9973925530718
  mo_energy =
[-1.21647056e+02 -1.32796009e+01 -7.62066416e+00 -7.62066416e+00
 -7.62066416e+00 -1.65028767e+00 -6.80246870e-01 -6.80246870e-01
 -6.80246870e-01  8.39973926e+01  6.69953711e+02  3.71013782e+03
  1.58560972e+04  5.42613523e+04]
E1 = -706.5956799419154  E_coul = 198.96221393971464
cycle= 1 E= -507.633466002201  delta_E= -3.42  |g|= 0.318  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440129
diis-c [-0.1937134  1.       ]
  HOMO = -0.235367361560982  LUMO = 85.3289024092598
  mo_energy =
[-1.20259477e+02 -1.22514133e+01 -6.65205194e+00 -6.65205194e+00
 -6.65205194e+00 -1.16269341e+00 -2.35367362e-01 -2.35367362e-01
 -2.35367362e-01  8.53289024e+01  6.71324721e+02  3.71140004e+03
  1.58572460e+04  5.42624209e+04]
E1 = -706.5636372207201  E_coul = 198.92973393495015
cycle= 2 E= -507.63390328577  delta_E= -0.000437  |g|= 0.0048  |ddm|= 0.0146
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00518876
diis-c [-2.69073214e-05  2.86864869e-04  9.99713135e-01]
  HOMO = -0.235546629176075  LUMO = 85.3253445236388
  mo_energy =
[-1.20268256e+02 -1.22526273e+01 -6.65393247e+00 -6.65393247e+00
 -6.65393247e+00 -1.16275970e+00 -2.35546629e-01 -2.35546629e-01
 -2.35546629e-01  8.53253445e+01  6.71314040e+02  3.71138428e+03
  1.58572275e+04  5.42624012e+04]
E1 = -706.5631852626316  E_coul = 198.92928186285843
cycle= 3 E= -507.633903399773  delta_E= -1.14e-07  |g|= 0.0001  |ddm|= 0.000207
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000136268
diis-c [-4.17319068e-10  3.36984476e-05 -2.64622298e-02  1.02642853e+00]
  HOMO = -0.235549053761395  LUMO = 85.3252960296
  mo_energy =
[-1.20268379e+02 -1.22526445e+01 -6.65396172e+00 -6.65396172e+00
 -6.65396172e+00 -1.16276043e+00 -2.35549054e-01 -2.35549054e-01
 -2.35549054e-01  8.53252960e+01  6.71313912e+02  3.71138412e+03
  1.58572273e+04  5.42624010e+04]
E1 = -706.5631774075047  E_coul = 198.92927400768616
cycle= 4 E= -507.633903399819  delta_E= -4.54e-11  |g|= 3.86e-07  |ddm|= 3.72e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5631774075047  E_coul = 198.92927400768616
  HOMO = -0.235549036758563  LUMO = 85.3252963763668
  mo_energy =
[-1.20268378e+02 -1.22526444e+01 -6.65396155e+00 -6.65396155e+00
 -6.65396155e+00 -1.16276042e+00 -2.35549037e-01 -2.35549037e-01
 -2.35549037e-01  8.53252964e+01  6.71313913e+02  3.71138413e+03
  1.58572273e+04  5.42624010e+04]
E1 = -706.5631774461733  E_coul = 198.92927404635506
Extra cycle  E= -507.633903399818  delta_E= 2.84e-13  |g|= 6.71e-09  |ddm|= 1.72e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.38263935474951
E1 = -706.5631774461733  E_coul = 198.92927404635506
init E= -507.633903399818
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.235549036558004  LUMO = 85.3252963806454
  mo_energy =
[-1.20268378e+02 -1.22526444e+01 -6.65396155e+00 -6.65396155e+00
 -6.65396155e+00 -1.16276042e+00 -2.35549037e-01 -2.35549037e-01
 -2.35549037e-01  8.53252964e+01  6.71313913e+02  3.71138413e+03
  1.58572273e+04  5.42624010e+04]
E1 = -706.5631774467632  E_coul = 198.92927404694524
cycle= 1 E= -507.633903399818  delta_E= 2.27e-13  |g|= 1.34e-10  |ddm|= 2.68e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5631774467632  E_coul = 198.92927404694524
  HOMO = -0.235549036555153  LUMO = 85.3252963807067
  mo_energy =
[-1.20268378e+02 -1.22526444e+01 -6.65396155e+00 -6.65396155e+00
 -6.65396155e+00 -1.16276042e+00 -2.35549037e-01 -2.35549037e-01
 -2.35549037e-01  8.53252964e+01  6.71313913e+02  3.71138413e+03
  1.58572273e+04  5.42624010e+04]
E1 = -706.5631774467743  E_coul = 198.92927404695567
Extra cycle  E= -507.633903399819  delta_E= -5.68e-13  |g|= 4.27e-12  |ddm|= 4.8e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198604e+03 1.83549655e+04 2.23189105e+03 4.58708806e+02
 1.20702388e+02 3.73328425e+01 4.73677282e+00 3.91906789e-01
 8.59854316e+00 4.91115092e-01]
grad_E = [-4.87325263e-07 -1.59811588e-06  9.82363952e-05 -1.77472868e-04
 -2.54643723e-04  1.28373161e-04 -3.08773314e-03  1.27721205e-02
 -5.33551659e-04  1.12928678e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98602396        1
[INPUT] 0    0    [1    /1   ]  18354.9653948        1
[INPUT] 0    0    [1    /1   ]  2231.89507543        1
[INPUT] 0    0    [1    /1   ]  458.694033606        1
[INPUT] 0    0    [1    /1   ]  120.725513631        1
[INPUT] 0    0    [1    /1   ]  37.3248620742        1
[INPUT] 0    0    [1    /1   ]  4.74005924851        1
[INPUT] 0    0    [1    /1   ]  0.391265679645       1
[INPUT] 1    0    [1    /1   ]  8.5987110868         1
[INPUT] 1    0    [1    /1   ]  0.490893752359       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986023957224, 1.0]], [0, [18354.965394799314, 1.0]], [0, [2231.895075425869, 1.0]], [0, [458.69403360577434, 1.0]], [0, [120.7255136310592, 1.0]], [0, [37.324862074202265, 1.0]], [0, [4.740059248505188, 1.0]], [0, [0.39126567964546, 1.0]], [1, [8.598711086804927, 1.0]], [1, [0.4908937523587005, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98602396]
bas 1, expnt(s) = [18354.9653948]
bas 2, expnt(s) = [2231.89507543]
bas 3, expnt(s) = [458.69403361]
bas 4, expnt(s) = [120.72551363]
bas 5, expnt(s) = [37.32486207]
bas 6, expnt(s) = [4.74005925]
bas 7, expnt(s) = [0.39126568]
bas 8, expnt(s) = [8.59871109]
bas 9, expnt(s) = [0.49089375]
CPU time:        78.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198602e+03 2.00389605e+03 1.83549654e+04 3.98409974e+03
 2.23189508e+03 8.20389994e+02 4.58694034e+02 2.50413272e+02
 1.20725514e+02 9.20162056e+01 3.73248621e+01 3.81516814e+01
 4.74005925e+00 8.11620208e+00 3.91265680e-01 1.24988150e+00
 8.59871109e+00 4.29562231e+01 4.90893752e-01 1.19872282e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319944191927547
cond(S) = 85.38334166916816
E1 = -689.1346376622698  E_coul = 184.91697138214923
init E= -504.217666280121
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680805770353827  LUMO = 84.0023453011839
  mo_energy =
[-1.21647958e+02 -1.32806020e+01 -7.62152820e+00 -7.62152820e+00
 -7.62152820e+00 -1.65058060e+00 -6.80805770e-01 -6.80805770e-01
 -6.80805770e-01  8.40023453e+01  6.69984151e+02  3.71016014e+03
  1.58561157e+04  5.42613714e+04]
E1 = -706.5797838139556  E_coul = 198.94630243606568
cycle= 1 E= -507.63348137789  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.44014
diis-c [-0.19372334  1.        ]
  HOMO = -0.236166773012287  LUMO = 85.3337790454213
  mo_energy =
[-1.20260192e+02 -1.22525798e+01 -6.65306113e+00 -6.65306113e+00
 -6.65306113e+00 -1.16334927e+00 -2.36166773e-01 -2.36166773e-01
 -2.36166773e-01  8.53337790e+01  6.71355377e+02  3.71142275e+03
  1.58572650e+04  5.42624405e+04]
E1 = -706.547780886817  E_coul = 198.91386330787304
cycle= 2 E= -507.633917578944  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517827
diis-c [-2.67975328e-05  2.95322874e-04  9.99704677e-01]
  HOMO = -0.236345715315862  LUMO = 85.3302252970544
  mo_energy =
[-1.20268960e+02 -1.22537926e+01 -6.65493908e+00 -6.65493908e+00
 -6.65493908e+00 -1.16341541e+00 -2.36345715e-01 -2.36345715e-01
 -2.36345715e-01  8.53302253e+01  6.71344707e+02  3.71140701e+03
  1.58572465e+04  5.42624208e+04]
E1 = -706.5473296348829  E_coul = 198.91341194234255
cycle= 3 E= -507.63391769254  delta_E= -1.14e-07  |g|= 0.0001  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000136063
diis-c [-4.16973798e-10  3.37025652e-05 -2.64727420e-02  1.02643904e+00]
  HOMO = -0.236348135767217  LUMO = 85.3301768422362
  mo_energy =
[-1.20269083e+02 -1.22538098e+01 -6.65496830e+00 -6.65496830e+00
 -6.65496830e+00 -1.16341614e+00 -2.36348136e-01 -2.36348136e-01
 -2.36348136e-01  8.53301768e+01  6.71344578e+02  3.71140685e+03
  1.58572464e+04  5.42624206e+04]
E1 = -706.5473217891168  E_coul = 198.91340409653137
cycle= 4 E= -507.633917692585  delta_E= -4.51e-11  |g|= 3.85e-07  |ddm|= 3.72e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5473217891168  E_coul = 198.91340409653137
  HOMO = -0.236348118792129  LUMO = 85.3301771886454
  mo_energy =
[-1.20269082e+02 -1.22538096e+01 -6.65496814e+00 -6.65496814e+00
 -6.65496814e+00 -1.16341613e+00 -2.36348119e-01 -2.36348119e-01
 -2.36348119e-01  8.53301772e+01  6.71344579e+02  3.71140685e+03
  1.58572464e+04  5.42624206e+04]
E1 = -706.5473218277336  E_coul = 198.91340413514837
Extra cycle  E= -507.633917692585  delta_E= 1.71e-13  |g|= 6.7e-09  |ddm|= 1.72e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198602e+03 1.83549654e+04 2.23189508e+03 4.58694034e+02
 1.20725514e+02 3.73248621e+01 4.74005925e+00 3.91265680e-01
 8.59871109e+00 4.90893752e-01]
E = -507.63391769258527
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98602396        1
[INPUT] 0    0    [1    /1   ]  18354.9653948        1
[INPUT] 0    0    [1    /1   ]  2231.89507543        1
[INPUT] 0    0    [1    /1   ]  458.694033606        1
[INPUT] 0    0    [1    /1   ]  120.725513631        1
[INPUT] 0    0    [1    /1   ]  37.3248620742        1
[INPUT] 0    0    [1    /1   ]  4.74005924851        1
[INPUT] 0    0    [1    /1   ]  0.391265679645       1
[INPUT] 1    0    [1    /1   ]  8.5987110868         1
[INPUT] 1    0    [1    /1   ]  0.490893752359       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986023957224, 1.0]], [0, [18354.965394799314, 1.0]], [0, [2231.895075425869, 1.0]], [0, [458.69403360577434, 1.0]], [0, [120.7255136310592, 1.0]], [0, [37.324862074202265, 1.0]], [0, [4.740059248505188, 1.0]], [0, [0.39126567964546, 1.0]], [1, [8.598711086804927, 1.0]], [1, [0.4908937523587005, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98602396]
bas 1, expnt(s) = [18354.9653948]
bas 2, expnt(s) = [2231.89507543]
bas 3, expnt(s) = [458.69403361]
bas 4, expnt(s) = [120.72551363]
bas 5, expnt(s) = [37.32486207]
bas 6, expnt(s) = [4.74005925]
bas 7, expnt(s) = [0.39126568]
bas 8, expnt(s) = [8.59871109]
bas 9, expnt(s) = [0.49089375]
CPU time:        78.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198602e+03 2.00389605e+03 1.83549654e+04 3.98409974e+03
 2.23189508e+03 8.20389994e+02 4.58694034e+02 2.50413272e+02
 1.20725514e+02 9.20162056e+01 3.73248621e+01 3.81516814e+01
 4.74005925e+00 8.11620208e+00 3.91265680e-01 1.24988150e+00
 8.59871109e+00 4.29562231e+01 4.90893752e-01 1.19872282e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319944191927547
cond(S) = 85.38334166916816
E1 = -689.1346376622698  E_coul = 184.91697138214923
init E= -504.217666280121
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680805770353827  LUMO = 84.0023453011839
  mo_energy =
[-1.21647958e+02 -1.32806020e+01 -7.62152820e+00 -7.62152820e+00
 -7.62152820e+00 -1.65058060e+00 -6.80805770e-01 -6.80805770e-01
 -6.80805770e-01  8.40023453e+01  6.69984151e+02  3.71016014e+03
  1.58561157e+04  5.42613714e+04]
E1 = -706.5797838139556  E_coul = 198.94630243606568
cycle= 1 E= -507.63348137789  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.44014
diis-c [-0.19372334  1.        ]
  HOMO = -0.236166773012287  LUMO = 85.3337790454213
  mo_energy =
[-1.20260192e+02 -1.22525798e+01 -6.65306113e+00 -6.65306113e+00
 -6.65306113e+00 -1.16334927e+00 -2.36166773e-01 -2.36166773e-01
 -2.36166773e-01  8.53337790e+01  6.71355377e+02  3.71142275e+03
  1.58572650e+04  5.42624405e+04]
E1 = -706.547780886817  E_coul = 198.91386330787304
cycle= 2 E= -507.633917578944  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517827
diis-c [-2.67975328e-05  2.95322874e-04  9.99704677e-01]
  HOMO = -0.236345715315862  LUMO = 85.3302252970544
  mo_energy =
[-1.20268960e+02 -1.22537926e+01 -6.65493908e+00 -6.65493908e+00
 -6.65493908e+00 -1.16341541e+00 -2.36345715e-01 -2.36345715e-01
 -2.36345715e-01  8.53302253e+01  6.71344707e+02  3.71140701e+03
  1.58572465e+04  5.42624208e+04]
E1 = -706.5473296348829  E_coul = 198.91341194234255
cycle= 3 E= -507.63391769254  delta_E= -1.14e-07  |g|= 0.0001  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000136063
diis-c [-4.16973798e-10  3.37025652e-05 -2.64727420e-02  1.02643904e+00]
  HOMO = -0.236348135767217  LUMO = 85.3301768422362
  mo_energy =
[-1.20269083e+02 -1.22538098e+01 -6.65496830e+00 -6.65496830e+00
 -6.65496830e+00 -1.16341614e+00 -2.36348136e-01 -2.36348136e-01
 -2.36348136e-01  8.53301768e+01  6.71344578e+02  3.71140685e+03
  1.58572464e+04  5.42624206e+04]
E1 = -706.5473217891168  E_coul = 198.91340409653137
cycle= 4 E= -507.633917692585  delta_E= -4.51e-11  |g|= 3.85e-07  |ddm|= 3.72e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5473217891168  E_coul = 198.91340409653137
  HOMO = -0.236348118792129  LUMO = 85.3301771886454
  mo_energy =
[-1.20269082e+02 -1.22538096e+01 -6.65496814e+00 -6.65496814e+00
 -6.65496814e+00 -1.16341613e+00 -2.36348119e-01 -2.36348119e-01
 -2.36348119e-01  8.53301772e+01  6.71344579e+02  3.71140685e+03
  1.58572464e+04  5.42624206e+04]
E1 = -706.5473218277336  E_coul = 198.91340413514837
Extra cycle  E= -507.633917692585  delta_E= 1.71e-13  |g|= 6.7e-09  |ddm|= 1.72e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.38334166916816
E1 = -706.5473218277336  E_coul = 198.91340413514837
init E= -507.633917692585
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.23634811859199  LUMO = 85.330177192919
  mo_energy =
[-1.20269082e+02 -1.22538096e+01 -6.65496813e+00 -6.65496813e+00
 -6.65496813e+00 -1.16341613e+00 -2.36348119e-01 -2.36348119e-01
 -2.36348119e-01  8.53301772e+01  6.71344579e+02  3.71140685e+03
  1.58572464e+04  5.42624206e+04]
E1 = -706.5473218283233  E_coul = 198.91340413573766
cycle= 1 E= -507.633917692586  delta_E= -3.98e-13  |g|= 1.34e-10  |ddm|= 2.67e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5473218283233  E_coul = 198.91340413573766
  HOMO = -0.236348118589145  LUMO = 85.3301771929791
  mo_energy =
[-1.20269082e+02 -1.22538096e+01 -6.65496813e+00 -6.65496813e+00
 -6.65496813e+00 -1.16341613e+00 -2.36348119e-01 -2.36348119e-01
 -2.36348119e-01  8.53301772e+01  6.71344579e+02  3.71140685e+03
  1.58572464e+04  5.42624206e+04]
E1 = -706.5473218283337  E_coul = 198.91340413574812
Extra cycle  E= -507.633917692586  delta_E= 1.14e-13  |g|= 1.63e-11  |ddm|= 4.84e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198602e+03 1.83549654e+04 2.23189508e+03 4.58694034e+02
 1.20725514e+02 3.73248621e+01 4.74005925e+00 3.91265680e-01
 8.59871109e+00 4.90893752e-01]
grad_E = [-4.90228842e-07 -1.59565543e-06  9.85765314e-05 -1.87064654e-04
 -1.87357714e-04 -4.12337287e-05 -4.43123376e-04  1.72855790e-03
 -7.25534452e-05  1.54100065e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:18 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98598925        1
[INPUT] 0    0    [1    /1   ]  18354.9652998        1
[INPUT] 0    0    [1    /1   ]  2231.90174542        1
[INPUT] 0    0    [1    /1   ]  458.670549261        1
[INPUT] 0    0    [1    /1   ]  120.755630224        1
[INPUT] 0    0    [1    /1   ]  37.3337091928        1
[INPUT] 0    0    [1    /1   ]  4.74062229865        1
[INPUT] 0    0    [1    /1   ]  0.391162301352       1
[INPUT] 1    0    [1    /1   ]  8.59873219298        1
[INPUT] 1    0    [1    /1   ]  0.490856102926       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985989246936, 1.0]], [0, [18354.965299767144, 1.0]], [0, [2231.901745423307, 1.0]], [0, [458.6705492609725, 1.0]], [0, [120.75563022394381, 1.0]], [0, [37.333709192797706, 1.0]], [0, [4.740622298648146, 1.0]], [0, [0.39116230135199326, 1.0]], [1, [8.598732192981576, 1.0]], [1, [0.490856102925708, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98598925]
bas 1, expnt(s) = [18354.96529977]
bas 2, expnt(s) = [2231.90174542]
bas 3, expnt(s) = [458.67054926]
bas 4, expnt(s) = [120.75563022]
bas 5, expnt(s) = [37.33370919]
bas 6, expnt(s) = [4.7406223]
bas 7, expnt(s) = [0.3911623]
bas 8, expnt(s) = [8.59873219]
bas 9, expnt(s) = [0.4908561]
CPU time:        82.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198599e+03 2.00389604e+03 1.83549653e+04 3.98409972e+03
 2.23190175e+03 8.20391833e+02 4.58670549e+02 2.50403656e+02
 1.20755630e+02 9.20334211e+01 3.73337092e+01 3.81584635e+01
 4.74062230e+00 8.11692514e+00 3.91162301e-01 1.24963382e+00
 8.59873219e+00 4.29563549e+01 4.90856103e-01 1.19860790e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319995753483738
cond(S) = 85.39402690496314
E1 = -689.1322866849425  E_coul = 184.91485536475506
init E= -504.217431320187
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680898419684729  LUMO = 84.0357291660738
  mo_energy =
[-1.21648084e+02 -1.32807854e+01 -7.62166548e+00 -7.62166548e+00
 -7.62166548e+00 -1.65063282e+00 -6.80898420e-01 -6.80898420e-01
 -6.80898420e-01  8.40357292e+01  6.70081836e+02  3.71023721e+03
  1.58561824e+04  5.42614365e+04]
E1 = -706.5772736242992  E_coul = 198.9437909752697
cycle= 1 E= -507.633482649029  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440178
diis-c [-0.19375681  1.        ]
  HOMO = -0.236298866540728  LUMO = 85.3672006603706
  mo_energy =
[-1.20260264e+02 -1.22527857e+01 -6.65321840e+00 -6.65321840e+00
 -6.65321840e+00 -1.16345954e+00 -2.36298867e-01 -2.36298867e-01
 -2.36298867e-01  8.53672007e+01  6.71453142e+02  3.71149995e+03
  1.58573318e+04  5.42625057e+04]
E1 = -706.5452961477624  E_coul = 198.91137775255416
cycle= 2 E= -507.633918395208  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517462
diis-c [-2.67598681e-05  2.94250100e-04  9.99705750e-01]
  HOMO = -0.236477631823332  LUMO = 85.363648986954
  mo_energy =
[-1.20269026e+02 -1.22539974e+01 -6.65509469e+00 -6.65509469e+00
 -6.65509469e+00 -1.16352562e+00 -2.36477632e-01 -2.36477632e-01
 -2.36477632e-01  8.53636490e+01  6.71442479e+02  3.71148422e+03
  1.58573134e+04  5.42624861e+04]
E1 = -706.5448453783108  E_coul = 198.91092686968673
cycle= 3 E= -507.633918508624  delta_E= -1.13e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135944
diis-c [-4.16376014e-10  3.37155253e-05 -2.64676236e-02  1.02643391e+00]
  HOMO = -0.236480048981166  LUMO = 85.36360057984
  mo_energy =
[-1.20269149e+02 -1.22540146e+01 -6.65512388e+00 -6.65512388e+00
 -6.65512388e+00 -1.16352635e+00 -2.36480049e-01 -2.36480049e-01
 -2.36480049e-01  8.53636006e+01  6.71442350e+02  3.71148406e+03
  1.58573132e+04  5.42624859e+04]
E1 = -706.544837543334  E_coul = 198.91091903466528
cycle= 4 E= -507.633918508669  delta_E= -4.46e-11  |g|= 3.85e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.544837543334  E_coul = 198.91091903466528
  HOMO = -0.236480032032456  LUMO = 85.3636009258947
  mo_energy =
[-1.20269148e+02 -1.22540145e+01 -6.65512371e+00 -6.65512371e+00
 -6.65512371e+00 -1.16352634e+00 -2.36480032e-01 -2.36480032e-01
 -2.36480032e-01  8.53636009e+01  6.71442351e+02  3.71148406e+03
  1.58573132e+04  5.42624859e+04]
E1 = -706.5448375818919  E_coul = 198.91091907322334
Extra cycle  E= -507.633918508669  delta_E= 1.14e-13  |g|= 6.69e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198599e+03 1.83549653e+04 2.23190175e+03 4.58670549e+02
 1.20755630e+02 3.73337092e+01 4.74062230e+00 3.91162301e-01
 8.59873219e+00 4.90856103e-01]
E = -507.63391850866856
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:18 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98598925        1
[INPUT] 0    0    [1    /1   ]  18354.9652998        1
[INPUT] 0    0    [1    /1   ]  2231.90174542        1
[INPUT] 0    0    [1    /1   ]  458.670549261        1
[INPUT] 0    0    [1    /1   ]  120.755630224        1
[INPUT] 0    0    [1    /1   ]  37.3337091928        1
[INPUT] 0    0    [1    /1   ]  4.74062229865        1
[INPUT] 0    0    [1    /1   ]  0.391162301352       1
[INPUT] 1    0    [1    /1   ]  8.59873219298        1
[INPUT] 1    0    [1    /1   ]  0.490856102926       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985989246936, 1.0]], [0, [18354.965299767144, 1.0]], [0, [2231.901745423307, 1.0]], [0, [458.6705492609725, 1.0]], [0, [120.75563022394381, 1.0]], [0, [37.333709192797706, 1.0]], [0, [4.740622298648146, 1.0]], [0, [0.39116230135199326, 1.0]], [1, [8.598732192981576, 1.0]], [1, [0.490856102925708, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98598925]
bas 1, expnt(s) = [18354.96529977]
bas 2, expnt(s) = [2231.90174542]
bas 3, expnt(s) = [458.67054926]
bas 4, expnt(s) = [120.75563022]
bas 5, expnt(s) = [37.33370919]
bas 6, expnt(s) = [4.7406223]
bas 7, expnt(s) = [0.3911623]
bas 8, expnt(s) = [8.59873219]
bas 9, expnt(s) = [0.4908561]
CPU time:        83.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198599e+03 2.00389604e+03 1.83549653e+04 3.98409972e+03
 2.23190175e+03 8.20391833e+02 4.58670549e+02 2.50403656e+02
 1.20755630e+02 9.20334211e+01 3.73337092e+01 3.81584635e+01
 4.74062230e+00 8.11692514e+00 3.91162301e-01 1.24963382e+00
 8.59873219e+00 4.29563549e+01 4.90856103e-01 1.19860790e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319995753483738
cond(S) = 85.39402690496314
E1 = -689.1322866849425  E_coul = 184.91485536475506
init E= -504.217431320187
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680898419684729  LUMO = 84.0357291660738
  mo_energy =
[-1.21648084e+02 -1.32807854e+01 -7.62166548e+00 -7.62166548e+00
 -7.62166548e+00 -1.65063282e+00 -6.80898420e-01 -6.80898420e-01
 -6.80898420e-01  8.40357292e+01  6.70081836e+02  3.71023721e+03
  1.58561824e+04  5.42614365e+04]
E1 = -706.5772736242992  E_coul = 198.9437909752697
cycle= 1 E= -507.633482649029  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440178
diis-c [-0.19375681  1.        ]
  HOMO = -0.236298866540728  LUMO = 85.3672006603706
  mo_energy =
[-1.20260264e+02 -1.22527857e+01 -6.65321840e+00 -6.65321840e+00
 -6.65321840e+00 -1.16345954e+00 -2.36298867e-01 -2.36298867e-01
 -2.36298867e-01  8.53672007e+01  6.71453142e+02  3.71149995e+03
  1.58573318e+04  5.42625057e+04]
E1 = -706.5452961477624  E_coul = 198.91137775255416
cycle= 2 E= -507.633918395208  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517462
diis-c [-2.67598681e-05  2.94250100e-04  9.99705750e-01]
  HOMO = -0.236477631823332  LUMO = 85.363648986954
  mo_energy =
[-1.20269026e+02 -1.22539974e+01 -6.65509469e+00 -6.65509469e+00
 -6.65509469e+00 -1.16352562e+00 -2.36477632e-01 -2.36477632e-01
 -2.36477632e-01  8.53636490e+01  6.71442479e+02  3.71148422e+03
  1.58573134e+04  5.42624861e+04]
E1 = -706.5448453783108  E_coul = 198.91092686968673
cycle= 3 E= -507.633918508624  delta_E= -1.13e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135944
diis-c [-4.16376014e-10  3.37155253e-05 -2.64676236e-02  1.02643391e+00]
  HOMO = -0.236480048981166  LUMO = 85.36360057984
  mo_energy =
[-1.20269149e+02 -1.22540146e+01 -6.65512388e+00 -6.65512388e+00
 -6.65512388e+00 -1.16352635e+00 -2.36480049e-01 -2.36480049e-01
 -2.36480049e-01  8.53636006e+01  6.71442350e+02  3.71148406e+03
  1.58573132e+04  5.42624859e+04]
E1 = -706.544837543334  E_coul = 198.91091903466528
cycle= 4 E= -507.633918508669  delta_E= -4.46e-11  |g|= 3.85e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.544837543334  E_coul = 198.91091903466528
  HOMO = -0.236480032032456  LUMO = 85.3636009258947
  mo_energy =
[-1.20269148e+02 -1.22540145e+01 -6.65512371e+00 -6.65512371e+00
 -6.65512371e+00 -1.16352634e+00 -2.36480032e-01 -2.36480032e-01
 -2.36480032e-01  8.53636009e+01  6.71442351e+02  3.71148406e+03
  1.58573132e+04  5.42624859e+04]
E1 = -706.5448375818919  E_coul = 198.91091907322334
Extra cycle  E= -507.633918508669  delta_E= 1.14e-13  |g|= 6.69e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.39402690496314
E1 = -706.5448375818919  E_coul = 198.91091907322334
init E= -507.633918508669
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.23648003183269  LUMO = 85.3636009301623
  mo_energy =
[-1.20269148e+02 -1.22540145e+01 -6.65512371e+00 -6.65512371e+00
 -6.65512371e+00 -1.16352634e+00 -2.36480032e-01 -2.36480032e-01
 -2.36480032e-01  8.53636009e+01  6.71442352e+02  3.71148406e+03
  1.58573132e+04  5.42624859e+04]
E1 = -706.5448375824809  E_coul = 198.91091907381195
cycle= 1 E= -507.633918508669  delta_E= -3.98e-13  |g|= 1.34e-10  |ddm|= 2.67e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5448375824809  E_coul = 198.91091907381195
  HOMO = -0.23648003182985  LUMO = 85.3636009302234
  mo_energy =
[-1.20269148e+02 -1.22540145e+01 -6.65512371e+00 -6.65512371e+00
 -6.65512371e+00 -1.16352634e+00 -2.36480032e-01 -2.36480032e-01
 -2.36480032e-01  8.53636009e+01  6.71442352e+02  3.71148406e+03
  1.58573132e+04  5.42624859e+04]
E1 = -706.544837582491  E_coul = 198.91091907382204
Extra cycle  E= -507.633918508669  delta_E= -5.68e-14  |g|= 9.09e-12  |ddm|= 4.78e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198599e+03 1.83549653e+04 2.23190175e+03 4.58670549e+02
 1.20755630e+02 3.73337092e+01 4.74062230e+00 3.91162301e-01
 8.59873219e+00 4.90856103e-01]
grad_E = [-4.92317834e-07 -1.59375657e-06  9.88261795e-05 -1.92823576e-04
 -1.63958526e-04 -5.19588464e-05  1.61254400e-05 -8.98856761e-05
  5.56137450e-06 -9.01836403e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98598191        1
[INPUT] 0    0    [1    /1   ]  18354.9652799        1
[INPUT] 0    0    [1    /1   ]  2231.90315078        1
[INPUT] 0    0    [1    /1   ]  458.665471223        1
[INPUT] 0    0    [1    /1   ]  120.76239644         1
[INPUT] 0    0    [1    /1   ]  37.3362114984        1
[INPUT] 0    0    [1    /1   ]  4.74065552525        1
[INPUT] 0    0    [1    /1   ]  0.391157440499       1
[INPUT] 1    0    [1    /1   ]  8.59873027469        1
[INPUT] 1    0    [1    /1   ]  0.490854282353       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985981913992, 1.0]], [0, [18354.965279905548, 1.0]], [0, [2231.90315078056, 1.0]], [0, [458.6654712232722, 1.0]], [0, [120.76239644016573, 1.0]], [0, [37.336211498447454, 1.0]], [0, [4.740655525253774, 1.0]], [0, [0.3911574404989574, 1.0]], [1, [8.59873027469258, 1.0]], [1, [0.4908542823526813, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98598191]
bas 1, expnt(s) = [18354.96527991]
bas 2, expnt(s) = [2231.90315078]
bas 3, expnt(s) = [458.66547122]
bas 4, expnt(s) = [120.76239644]
bas 5, expnt(s) = [37.3362115]
bas 6, expnt(s) = [4.74065553]
bas 7, expnt(s) = [0.39115744]
bas 8, expnt(s) = [8.59873027]
bas 9, expnt(s) = [0.49085428]
CPU time:        87.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198598e+03 2.00389604e+03 1.83549653e+04 3.98409972e+03
 2.23190315e+03 8.20392220e+02 4.58665471e+02 2.50401577e+02
 1.20762396e+02 9.20372887e+01 3.73362115e+01 3.81603817e+01
 4.74065553e+00 8.11696781e+00 3.91157440e-01 1.24962217e+00
 8.59873027e+00 4.29563429e+01 4.90854282e-01 1.19860234e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999802657475
cond(S) = 85.39670277562834
E1 = -689.1321509994875  E_coul = 184.91475819495327
init E= -504.217392804534
    CPU time for initialize scf      0.14 sec, wall time      0.02 sec
  HOMO = -0.680902794008244  LUMO = 84.0439701800188
  mo_energy =
[-1.21648086e+02 -1.32807983e+01 -7.62167121e+00 -7.62167121e+00
 -7.62167121e+00 -1.65063605e+00 -6.80902794e-01 -6.80902794e-01
 -6.80902794e-01  8.40439702e+01  6.70105594e+02  3.71025663e+03
  1.58561993e+04  5.42614529e+04]
E1 = -706.5771787370296  E_coul = 198.94369590823916
cycle= 1 E= -507.63348282879  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440187
diis-c [-0.19376485  1.        ]
  HOMO = -0.236304913852102  LUMO = 85.3754541743831
  mo_energy =
[-1.20260258e+02 -1.22527984e+01 -6.65322404e+00 -6.65322404e+00
 -6.65322404e+00 -1.16346515e+00 -2.36304914e-01 -2.36304914e-01
 -2.36304914e-01  8.53754542e+01  6.71476913e+02  3.71151939e+03
  1.58573487e+04  5.42625221e+04]
E1 = -706.5452063675239  E_coul = 198.91128787153653
cycle= 2 E= -507.633918495987  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.08 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517404
diis-c [-2.67539794e-05  2.93693223e-04  9.99706307e-01]
  HOMO = -0.236483645464919  LUMO = 85.3719028895829
  mo_energy =
[-1.20269019e+02 -1.22540099e+01 -6.65510000e+00 -6.65510000e+00
 -6.65510000e+00 -1.16353122e+00 -2.36483645e-01 -2.36483645e-01
 -2.36483645e-01  8.53719029e+01  6.71466252e+02  3.71150366e+03
  1.58573303e+04  5.42625024e+04]
E1 = -706.5447556962973  E_coul = 198.9108370869268
cycle= 3 E= -507.633918609371  delta_E= -1.13e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013592
diis-c [-4.16236958e-10  3.37188178e-05 -2.64659930e-02  1.02643227e+00]
  HOMO = -0.236486061931684  LUMO = 85.3718544932294
  mo_energy =
[-1.20269141e+02 -1.22540271e+01 -6.65512918e+00 -6.65512918e+00
 -6.65512918e+00 -1.16353194e+00 -2.36486062e-01 -2.36486062e-01
 -2.36486062e-01  8.53718545e+01  6.71466124e+02  3.71150350e+03
  1.58573301e+04  5.42625023e+04]
E1 = -706.5447478637308  E_coul = 198.9108292543153
cycle= 4 E= -507.633918609415  delta_E= -4.49e-11  |g|= 3.85e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5447478637308  E_coul = 198.9108292543153
  HOMO = -0.236486044988687  LUMO = 85.3718548392055
  mo_energy =
[-1.20269141e+02 -1.22540270e+01 -6.65512901e+00 -6.65512901e+00
 -6.65512901e+00 -1.16353194e+00 -2.36486045e-01 -2.36486045e-01
 -2.36486045e-01  8.53718548e+01  6.71466125e+02  3.71150351e+03
  1.58573301e+04  5.42625023e+04]
E1 = -706.5447479022768  E_coul = 198.91082929286088
Extra cycle  E= -507.633918609416  delta_E= -4.55e-13  |g|= 6.69e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.41 sec, wall time      0.08 sec
exp = [7.34198598e+03 1.83549653e+04 2.23190315e+03 4.58665471e+02
 1.20762396e+02 3.73362115e+01 4.74065553e+00 3.91157440e-01
 8.59873027e+00 4.90854282e-01]
E = -507.6339186094159
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98598191        1
[INPUT] 0    0    [1    /1   ]  18354.9652799        1
[INPUT] 0    0    [1    /1   ]  2231.90315078        1
[INPUT] 0    0    [1    /1   ]  458.665471223        1
[INPUT] 0    0    [1    /1   ]  120.76239644         1
[INPUT] 0    0    [1    /1   ]  37.3362114984        1
[INPUT] 0    0    [1    /1   ]  4.74065552525        1
[INPUT] 0    0    [1    /1   ]  0.391157440499       1
[INPUT] 1    0    [1    /1   ]  8.59873027469        1
[INPUT] 1    0    [1    /1   ]  0.490854282353       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985981913992, 1.0]], [0, [18354.965279905548, 1.0]], [0, [2231.90315078056, 1.0]], [0, [458.6654712232722, 1.0]], [0, [120.76239644016573, 1.0]], [0, [37.336211498447454, 1.0]], [0, [4.740655525253774, 1.0]], [0, [0.3911574404989574, 1.0]], [1, [8.59873027469258, 1.0]], [1, [0.4908542823526813, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98598191]
bas 1, expnt(s) = [18354.96527991]
bas 2, expnt(s) = [2231.90315078]
bas 3, expnt(s) = [458.66547122]
bas 4, expnt(s) = [120.76239644]
bas 5, expnt(s) = [37.3362115]
bas 6, expnt(s) = [4.74065553]
bas 7, expnt(s) = [0.39115744]
bas 8, expnt(s) = [8.59873027]
bas 9, expnt(s) = [0.49085428]
CPU time:        87.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198598e+03 2.00389604e+03 1.83549653e+04 3.98409972e+03
 2.23190315e+03 8.20392220e+02 4.58665471e+02 2.50401577e+02
 1.20762396e+02 9.20372887e+01 3.73362115e+01 3.81603817e+01
 4.74065553e+00 8.11696781e+00 3.91157440e-01 1.24962217e+00
 8.59873027e+00 4.29563429e+01 4.90854282e-01 1.19860234e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31999802657475
cond(S) = 85.39670277562834
E1 = -689.1321509994875  E_coul = 184.91475819495327
init E= -504.217392804534
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680902794008244  LUMO = 84.0439701800188
  mo_energy =
[-1.21648086e+02 -1.32807983e+01 -7.62167121e+00 -7.62167121e+00
 -7.62167121e+00 -1.65063605e+00 -6.80902794e-01 -6.80902794e-01
 -6.80902794e-01  8.40439702e+01  6.70105594e+02  3.71025663e+03
  1.58561993e+04  5.42614529e+04]
E1 = -706.5771787370296  E_coul = 198.94369590823916
cycle= 1 E= -507.63348282879  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440187
diis-c [-0.19376485  1.        ]
  HOMO = -0.236304913852102  LUMO = 85.3754541743831
  mo_energy =
[-1.20260258e+02 -1.22527984e+01 -6.65322404e+00 -6.65322404e+00
 -6.65322404e+00 -1.16346515e+00 -2.36304914e-01 -2.36304914e-01
 -2.36304914e-01  8.53754542e+01  6.71476913e+02  3.71151939e+03
  1.58573487e+04  5.42625221e+04]
E1 = -706.5452063675239  E_coul = 198.91128787153653
cycle= 2 E= -507.633918495987  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517404
diis-c [-2.67539794e-05  2.93693223e-04  9.99706307e-01]
  HOMO = -0.236483645464919  LUMO = 85.3719028895829
  mo_energy =
[-1.20269019e+02 -1.22540099e+01 -6.65510000e+00 -6.65510000e+00
 -6.65510000e+00 -1.16353122e+00 -2.36483645e-01 -2.36483645e-01
 -2.36483645e-01  8.53719029e+01  6.71466252e+02  3.71150366e+03
  1.58573303e+04  5.42625024e+04]
E1 = -706.5447556962973  E_coul = 198.9108370869268
cycle= 3 E= -507.633918609371  delta_E= -1.13e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013592
diis-c [-4.16236958e-10  3.37188178e-05 -2.64659930e-02  1.02643227e+00]
  HOMO = -0.236486061931684  LUMO = 85.3718544932294
  mo_energy =
[-1.20269141e+02 -1.22540271e+01 -6.65512918e+00 -6.65512918e+00
 -6.65512918e+00 -1.16353194e+00 -2.36486062e-01 -2.36486062e-01
 -2.36486062e-01  8.53718545e+01  6.71466124e+02  3.71150350e+03
  1.58573301e+04  5.42625023e+04]
E1 = -706.5447478637308  E_coul = 198.9108292543153
cycle= 4 E= -507.633918609415  delta_E= -4.49e-11  |g|= 3.85e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5447478637308  E_coul = 198.9108292543153
  HOMO = -0.236486044988687  LUMO = 85.3718548392055
  mo_energy =
[-1.20269141e+02 -1.22540270e+01 -6.65512901e+00 -6.65512901e+00
 -6.65512901e+00 -1.16353194e+00 -2.36486045e-01 -2.36486045e-01
 -2.36486045e-01  8.53718548e+01  6.71466125e+02  3.71150351e+03
  1.58573301e+04  5.42625023e+04]
E1 = -706.5447479022768  E_coul = 198.91082929286088
Extra cycle  E= -507.633918609416  delta_E= -4.55e-13  |g|= 6.69e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.39670277562834
E1 = -706.5447479022768  E_coul = 198.91082929286088
init E= -507.633918609416
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236486044788989  LUMO = 85.3718548434734
  mo_energy =
[-1.20269141e+02 -1.22540270e+01 -6.65512901e+00 -6.65512901e+00
 -6.65512901e+00 -1.16353194e+00 -2.36486045e-01 -2.36486045e-01
 -2.36486045e-01  8.53718548e+01  6.71466125e+02  3.71150351e+03
  1.58573301e+04  5.42625023e+04]
E1 = -706.5447479028647  E_coul = 198.9108292934489
cycle= 1 E= -507.633918609416  delta_E= 5.68e-14  |g|= 1.35e-10  |ddm|= 2.67e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5447479028647  E_coul = 198.9108292934489
  HOMO = -0.236486044786152  LUMO = 85.3718548435347
  mo_energy =
[-1.20269141e+02 -1.22540270e+01 -6.65512901e+00 -6.65512901e+00
 -6.65512901e+00 -1.16353194e+00 -2.36486045e-01 -2.36486045e-01
 -2.36486045e-01  8.53718548e+01  6.71466125e+02  3.71150351e+03
  1.58573301e+04  5.42625023e+04]
E1 = -706.5447479028745  E_coul = 198.91082929345902
Extra cycle  E= -507.633918609416  delta_E= 3.41e-13  |g|= 1.54e-11  |ddm|= 4.78e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198598e+03 1.83549653e+04 2.23190315e+03 4.58665471e+02
 1.20762396e+02 3.73362115e+01 4.74065553e+00 3.91157440e-01
 8.59873027e+00 4.90854282e-01]
grad_E = [-4.92731480e-07 -1.59337483e-06  9.88759076e-05 -1.93916327e-04
 -1.60520964e-04 -4.85739895e-05  4.46378575e-05 -1.81659214e-04
  8.31485917e-06 -1.63983020e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98596835        1
[INPUT] 0    0    [1    /1   ]  18354.965244         1
[INPUT] 0    0    [1    /1   ]  2231.90573557        1
[INPUT] 0    0    [1    /1   ]  458.655609079        1
[INPUT] 0    0    [1    /1   ]  120.776860212        1
[INPUT] 0    0    [1    /1   ]  37.3416212828        1
[INPUT] 0    0    [1    /1   ]  4.7407100666         1
[INPUT] 0    0    [1    /1   ]  0.391150408168       1
[INPUT] 1    0    [1    /1   ]  8.59872371492        1
[INPUT] 1    0    [1    /1   ]  0.490851669742       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985968352523, 1.0]], [0, [18354.965244003022, 1.0]], [0, [2231.905735574833, 1.0]], [0, [458.6556090790248, 1.0]], [0, [120.77686021198677, 1.0]], [0, [37.34162128281498, 1.0]], [0, [4.740710066601528, 1.0]], [0, [0.39115040816811997, 1.0]], [1, [8.598723714922214, 1.0]], [1, [0.4908516697419632, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98596835]
bas 1, expnt(s) = [18354.965244]
bas 2, expnt(s) = [2231.90573557]
bas 3, expnt(s) = [458.65560908]
bas 4, expnt(s) = [120.77686021]
bas 5, expnt(s) = [37.34162128]
bas 6, expnt(s) = [4.74071007]
bas 7, expnt(s) = [0.39115041]
bas 8, expnt(s) = [8.59872371]
bas 9, expnt(s) = [0.49085167]
CPU time:        91.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198597e+03 2.00389604e+03 1.83549652e+04 3.98409971e+03
 2.23190574e+03 8.20392933e+02 4.58655609e+02 2.50397539e+02
 1.20776860e+02 9.20455561e+01 3.73416213e+01 3.81645285e+01
 4.74071007e+00 8.11703784e+00 3.91150408e-01 1.24960532e+00
 8.59872371e+00 4.29563019e+01 4.90851670e-01 1.19859437e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320001097875437
cond(S) = 85.40247887092104
E1 = -689.1319317352741  E_coul = 184.9146166592196
init E= -504.217315076054
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680909041250082  LUMO = 84.0616518611759
  mo_energy =
[-1.21648087e+02 -1.32808209e+01 -7.62167908e+00 -7.62167908e+00
 -7.62167908e+00 -1.65064134e+00 -6.80909041e-01 -6.80909041e-01
 -6.80909041e-01  8.40616519e+01  6.70157333e+02  3.71030088e+03
  1.58562379e+04  5.42614899e+04]
E1 = -706.5770597028838  E_coul = 198.9435763827901
cycle= 1 E= -507.633483320094  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440207
diis-c [-0.1937818  1.       ]
  HOMO = -0.236313363665992  LUMO = 85.3931632655494
  mo_energy =
[-1.20260242e+02 -1.22528196e+01 -6.65323087e+00 -6.65323087e+00
 -6.65323087e+00 -1.16347355e+00 -2.36313364e-01 -2.36313364e-01
 -2.36313364e-01  8.53931633e+01  6.71528680e+02  3.71156369e+03
  1.58573874e+04  5.42625592e+04]
E1 = -706.5450981031536  E_coul = 198.91117928004002
cycle= 2 E= -507.633918823114  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517286
diis-c [-2.67419050e-05  2.92453546e-04  9.99707546e-01]
  HOMO = -0.236492024679666  LUMO = 85.3896127946316
  mo_energy =
[-1.20269000e+02 -1.22540306e+01 -6.65510612e+00 -6.65510612e+00
 -6.65510612e+00 -1.16353959e+00 -2.36492025e-01 -2.36492025e-01
 -2.36492025e-01  8.53896128e+01  6.71518022e+02  3.71154797e+03
  1.58573690e+04  5.42625396e+04]
E1 = -706.5446476393402  E_coul = 198.9107287029111
cycle= 3 E= -507.633918936429  delta_E= -1.13e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135871
diis-c [-4.15939726e-10  3.37257787e-05 -2.64624302e-02  1.02642870e+00]
  HOMO = -0.236494439684368  LUMO = 85.3895644212041
  mo_energy =
[-1.20269123e+02 -1.22540478e+01 -6.65513528e+00 -6.65513528e+00
 -6.65513528e+00 -1.16354032e+00 -2.36494440e-01 -2.36494440e-01
 -2.36494440e-01  8.53895644e+01  6.71517894e+02  3.71154781e+03
  1.58573688e+04  5.42625394e+04]
E1 = -706.5446398119011  E_coul = 198.91072087542685
cycle= 4 E= -507.633918936474  delta_E= -4.52e-11  |g|= 3.85e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5446398119011  E_coul = 198.91072087542685
  HOMO = -0.23649442275348  LUMO = 85.3895647670149
  mo_energy =
[-1.20269122e+02 -1.22540477e+01 -6.65513512e+00 -6.65513512e+00
 -6.65513512e+00 -1.16354031e+00 -2.36494423e-01 -2.36494423e-01
 -2.36494423e-01  8.53895648e+01  6.71517895e+02  3.71154781e+03
  1.58573688e+04  5.42625394e+04]
E1 = -706.5446398504187  E_coul = 198.9107209139446
Extra cycle  E= -507.633918936474  delta_E= 2.27e-13  |g|= 6.69e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198597e+03 1.83549652e+04 2.23190574e+03 4.58655609e+02
 1.20776860e+02 3.73416213e+01 4.74071007e+00 3.91150408e-01
 8.59872371e+00 4.90851670e-01]
E = -507.63391893647406
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98596835        1
[INPUT] 0    0    [1    /1   ]  18354.965244         1
[INPUT] 0    0    [1    /1   ]  2231.90573557        1
[INPUT] 0    0    [1    /1   ]  458.655609079        1
[INPUT] 0    0    [1    /1   ]  120.776860212        1
[INPUT] 0    0    [1    /1   ]  37.3416212828        1
[INPUT] 0    0    [1    /1   ]  4.7407100666         1
[INPUT] 0    0    [1    /1   ]  0.391150408168       1
[INPUT] 1    0    [1    /1   ]  8.59872371492        1
[INPUT] 1    0    [1    /1   ]  0.490851669742       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985968352523, 1.0]], [0, [18354.965244003022, 1.0]], [0, [2231.905735574833, 1.0]], [0, [458.6556090790248, 1.0]], [0, [120.77686021198677, 1.0]], [0, [37.34162128281498, 1.0]], [0, [4.740710066601528, 1.0]], [0, [0.39115040816811997, 1.0]], [1, [8.598723714922214, 1.0]], [1, [0.4908516697419632, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98596835]
bas 1, expnt(s) = [18354.965244]
bas 2, expnt(s) = [2231.90573557]
bas 3, expnt(s) = [458.65560908]
bas 4, expnt(s) = [120.77686021]
bas 5, expnt(s) = [37.34162128]
bas 6, expnt(s) = [4.74071007]
bas 7, expnt(s) = [0.39115041]
bas 8, expnt(s) = [8.59872371]
bas 9, expnt(s) = [0.49085167]
CPU time:        92.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198597e+03 2.00389604e+03 1.83549652e+04 3.98409971e+03
 2.23190574e+03 8.20392933e+02 4.58655609e+02 2.50397539e+02
 1.20776860e+02 9.20455561e+01 3.73416213e+01 3.81645285e+01
 4.74071007e+00 8.11703784e+00 3.91150408e-01 1.24960532e+00
 8.59872371e+00 4.29563019e+01 4.90851670e-01 1.19859437e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320001097875437
cond(S) = 85.40247887092104
E1 = -689.1319317352741  E_coul = 184.9146166592196
init E= -504.217315076054
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680909041250082  LUMO = 84.0616518611759
  mo_energy =
[-1.21648087e+02 -1.32808209e+01 -7.62167908e+00 -7.62167908e+00
 -7.62167908e+00 -1.65064134e+00 -6.80909041e-01 -6.80909041e-01
 -6.80909041e-01  8.40616519e+01  6.70157333e+02  3.71030088e+03
  1.58562379e+04  5.42614899e+04]
E1 = -706.5770597028838  E_coul = 198.9435763827901
cycle= 1 E= -507.633483320094  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440207
diis-c [-0.1937818  1.       ]
  HOMO = -0.236313363665992  LUMO = 85.3931632655494
  mo_energy =
[-1.20260242e+02 -1.22528196e+01 -6.65323087e+00 -6.65323087e+00
 -6.65323087e+00 -1.16347355e+00 -2.36313364e-01 -2.36313364e-01
 -2.36313364e-01  8.53931633e+01  6.71528680e+02  3.71156369e+03
  1.58573874e+04  5.42625592e+04]
E1 = -706.5450981031536  E_coul = 198.91117928004002
cycle= 2 E= -507.633918823114  delta_E= -0.000436  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517286
diis-c [-2.67419050e-05  2.92453546e-04  9.99707546e-01]
  HOMO = -0.236492024679666  LUMO = 85.3896127946316
  mo_energy =
[-1.20269000e+02 -1.22540306e+01 -6.65510612e+00 -6.65510612e+00
 -6.65510612e+00 -1.16353959e+00 -2.36492025e-01 -2.36492025e-01
 -2.36492025e-01  8.53896128e+01  6.71518022e+02  3.71154797e+03
  1.58573690e+04  5.42625396e+04]
E1 = -706.5446476393402  E_coul = 198.9107287029111
cycle= 3 E= -507.633918936429  delta_E= -1.13e-07  |g|= 9.99e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135871
diis-c [-4.15939726e-10  3.37257787e-05 -2.64624302e-02  1.02642870e+00]
  HOMO = -0.236494439684368  LUMO = 85.3895644212041
  mo_energy =
[-1.20269123e+02 -1.22540478e+01 -6.65513528e+00 -6.65513528e+00
 -6.65513528e+00 -1.16354032e+00 -2.36494440e-01 -2.36494440e-01
 -2.36494440e-01  8.53895644e+01  6.71517894e+02  3.71154781e+03
  1.58573688e+04  5.42625394e+04]
E1 = -706.5446398119011  E_coul = 198.91072087542685
cycle= 4 E= -507.633918936474  delta_E= -4.52e-11  |g|= 3.85e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5446398119011  E_coul = 198.91072087542685
  HOMO = -0.23649442275348  LUMO = 85.3895647670149
  mo_energy =
[-1.20269122e+02 -1.22540477e+01 -6.65513512e+00 -6.65513512e+00
 -6.65513512e+00 -1.16354031e+00 -2.36494423e-01 -2.36494423e-01
 -2.36494423e-01  8.53895648e+01  6.71517895e+02  3.71154781e+03
  1.58573688e+04  5.42625394e+04]
E1 = -706.5446398504187  E_coul = 198.9107209139446
Extra cycle  E= -507.633918936474  delta_E= 2.27e-13  |g|= 6.69e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.40247887092104
E1 = -706.5446398504187  E_coul = 198.9107209139446
init E= -507.633918936474
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.23649442255395  LUMO = 85.389564771281
  mo_energy =
[-1.20269122e+02 -1.22540477e+01 -6.65513511e+00 -6.65513511e+00
 -6.65513511e+00 -1.16354031e+00 -2.36494423e-01 -2.36494423e-01
 -2.36494423e-01  8.53895648e+01  6.71517895e+02  3.71154781e+03
  1.58573688e+04  5.42625394e+04]
E1 = -706.5446398510061  E_coul = 198.91072091453182
cycle= 1 E= -507.633918936474  delta_E= -2.27e-13  |g|= 1.32e-10  |ddm|= 2.67e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5446398510061  E_coul = 198.91072091453182
  HOMO = -0.23649442255112  LUMO = 85.3895647713404
  mo_energy =
[-1.20269122e+02 -1.22540477e+01 -6.65513511e+00 -6.65513511e+00
 -6.65513511e+00 -1.16354031e+00 -2.36494423e-01 -2.36494423e-01
 -2.36494423e-01  8.53895648e+01  6.71517895e+02  3.71154781e+03
  1.58573688e+04  5.42625394e+04]
E1 = -706.5446398510168  E_coul = 198.91072091454257
Extra cycle  E= -507.633918936474  delta_E= 1.14e-13  |g|= 1.4e-11  |ddm|= 4.83e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198597e+03 1.83549652e+04 2.23190574e+03 4.58655609e+02
 1.20776860e+02 3.73416213e+01 4.74071007e+00 3.91150408e-01
 8.59872371e+00 4.90851670e-01]
grad_E = [-4.93577222e-07 -1.59259372e-06  9.89778734e-05 -1.96167092e-04
 -1.53633212e-04 -4.03138253e-05  9.22244560e-05 -3.19733907e-04
  1.03930664e-05 -2.64515418e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98595376        1
[INPUT] 0    0    [1    /1   ]  18354.9652077        1
[INPUT] 0    0    [1    /1   ]  2231.90847806        1
[INPUT] 0    0    [1    /1   ]  458.643677906        1
[INPUT] 0    0    [1    /1   ]  120.797917921        1
[INPUT] 0    0    [1    /1   ]  37.3494127075        1
[INPUT] 0    0    [1    /1   ]  4.74078585007        1
[INPUT] 0    0    [1    /1   ]  0.391140972227       1
[INPUT] 1    0    [1    /1   ]  8.59871326249        1
[INPUT] 1    0    [1    /1   ]  0.490848149398       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985953755215, 1.0]], [0, [18354.965207670954, 1.0]], [0, [2231.908478062256, 1.0]], [0, [458.64367790616603, 1.0]], [0, [120.79791792109982, 1.0]], [0, [37.34941270751581, 1.0]], [0, [4.740785850071912, 1.0]], [0, [0.3911409722268077, 1.0]], [1, [8.59871326249122, 1.0]], [1, [0.49084814939841476, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98595376]
bas 1, expnt(s) = [18354.96520767]
bas 2, expnt(s) = [2231.90847806]
bas 3, expnt(s) = [458.64367791]
bas 4, expnt(s) = [120.79791792]
bas 5, expnt(s) = [37.34941271]
bas 6, expnt(s) = [4.74078585]
bas 7, expnt(s) = [0.39114097]
bas 8, expnt(s) = [8.59871326]
bas 9, expnt(s) = [0.49084815]
CPU time:        96.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198595e+03 2.00389604e+03 1.83549652e+04 3.98409971e+03
 2.23190848e+03 8.20393689e+02 4.58643678e+02 2.50392654e+02
 1.20797918e+02 9.20575920e+01 3.73494127e+01 3.81705007e+01
 4.74078585e+00 8.11713516e+00 3.91140972e-01 1.24958271e+00
 8.59871326e+00 4.29562366e+01 4.90848149e-01 1.19858362e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000517130605
cond(S) = 85.4108989122329
E1 = -689.1316298090491  E_coul = 184.9144236526566
init E= -504.217206156392
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680917421745683  LUMO = 84.0871996045041
  mo_energy =
[-1.21648088e+02 -1.32808523e+01 -7.62168972e+00 -7.62168972e+00
 -7.62168972e+00 -1.65064866e+00 -6.80917422e-01 -6.80917422e-01
 -6.80917422e-01  8.40871996e+01  6.70234219e+02  3.71037129e+03
  1.58562998e+04  5.42615485e+04]
E1 = -706.5769020823694  E_coul = 198.94341777112044
cycle= 1 E= -507.633484311249  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440234
diis-c [-0.19380557  1.        ]
  HOMO = -0.236324655547039  LUMO = 85.4187506017657
  mo_energy =
[-1.20260220e+02 -1.22528489e+01 -6.65323984e+00 -6.65323984e+00
 -6.65323984e+00 -1.16348494e+00 -2.36324656e-01 -2.36324656e-01
 -2.36324656e-01  8.54187506e+01  6.71605607e+02  3.71163417e+03
  1.58574494e+04  5.42626179e+04]
E1 = -706.5449559882968  E_coul = 198.9110364099463
cycle= 2 E= -507.633919578351  delta_E= -0.000435  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517117
diis-c [-2.67246427e-05  2.90663112e-04  9.99709337e-01]
  HOMO = -0.236503214942051  LUMO = 85.4152012997789
  mo_energy =
[-1.20268975e+02 -1.22540593e+01 -6.65511408e+00 -6.65511408e+00
 -6.65511408e+00 -1.16355094e+00 -2.36503215e-01 -2.36503215e-01
 -2.36503215e-01  8.54152013e+01  6.71594953e+02  3.71161845e+03
  1.58574310e+04  5.42625982e+04]
E1 = -706.5445058232974  E_coul = 198.91058613172697
cycle= 3 E= -507.63391969157  delta_E= -1.13e-07  |g|= 9.98e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135801
diis-c [-4.15512142e-10  3.37357085e-05 -2.64572765e-02  1.02642354e+00]
  HOMO = -0.236505627841444  LUMO = 85.4151529593764
  mo_energy =
[-1.20269098e+02 -1.22540765e+01 -6.65514322e+00 -6.65514322e+00
 -6.65514322e+00 -1.16355167e+00 -2.36505628e-01 -2.36505628e-01
 -2.36505628e-01  8.54151530e+01  6.71594825e+02  3.71161829e+03
  1.58574308e+04  5.42625981e+04]
E1 = -706.5444980032472  E_coul = 198.91057831163258
cycle= 4 E= -507.633919691615  delta_E= -4.42e-11  |g|= 3.84e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5444980032472  E_coul = 198.91057831163258
  HOMO = -0.236505610928018  LUMO = 85.4151533049506
  mo_energy =
[-1.20269097e+02 -1.22540763e+01 -6.65514305e+00 -6.65514305e+00
 -6.65514305e+00 -1.16355166e+00 -2.36505611e-01 -2.36505611e-01
 -2.36505611e-01  8.54151533e+01  6.71594826e+02  3.71161829e+03
  1.58574308e+04  5.42625981e+04]
E1 = -706.5444980417253  E_coul = 198.91057835011028
Extra cycle  E= -507.633919691615  delta_E= -3.41e-13  |g|= 6.68e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198595e+03 1.83549652e+04 2.23190848e+03 4.58643678e+02
 1.20797918e+02 3.73494127e+01 4.74078585e+00 3.91140972e-01
 8.59871326e+00 4.90848149e-01]
E = -507.633919691615
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98595376        1
[INPUT] 0    0    [1    /1   ]  18354.9652077        1
[INPUT] 0    0    [1    /1   ]  2231.90847806        1
[INPUT] 0    0    [1    /1   ]  458.643677906        1
[INPUT] 0    0    [1    /1   ]  120.797917921        1
[INPUT] 0    0    [1    /1   ]  37.3494127075        1
[INPUT] 0    0    [1    /1   ]  4.74078585007        1
[INPUT] 0    0    [1    /1   ]  0.391140972227       1
[INPUT] 1    0    [1    /1   ]  8.59871326249        1
[INPUT] 1    0    [1    /1   ]  0.490848149398       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985953755215, 1.0]], [0, [18354.965207670954, 1.0]], [0, [2231.908478062256, 1.0]], [0, [458.64367790616603, 1.0]], [0, [120.79791792109982, 1.0]], [0, [37.34941270751581, 1.0]], [0, [4.740785850071912, 1.0]], [0, [0.3911409722268077, 1.0]], [1, [8.59871326249122, 1.0]], [1, [0.49084814939841476, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98595376]
bas 1, expnt(s) = [18354.96520767]
bas 2, expnt(s) = [2231.90847806]
bas 3, expnt(s) = [458.64367791]
bas 4, expnt(s) = [120.79791792]
bas 5, expnt(s) = [37.34941271]
bas 6, expnt(s) = [4.74078585]
bas 7, expnt(s) = [0.39114097]
bas 8, expnt(s) = [8.59871326]
bas 9, expnt(s) = [0.49084815]
CPU time:        96.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198595e+03 2.00389604e+03 1.83549652e+04 3.98409971e+03
 2.23190848e+03 8.20393689e+02 4.58643678e+02 2.50392654e+02
 1.20797918e+02 9.20575920e+01 3.73494127e+01 3.81705007e+01
 4.74078585e+00 8.11713516e+00 3.91140972e-01 1.24958271e+00
 8.59871326e+00 4.29562366e+01 4.90848149e-01 1.19858362e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32000517130605
cond(S) = 85.4108989122329
E1 = -689.1316298090491  E_coul = 184.9144236526566
init E= -504.217206156392
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680917421745683  LUMO = 84.0871996045041
  mo_energy =
[-1.21648088e+02 -1.32808523e+01 -7.62168972e+00 -7.62168972e+00
 -7.62168972e+00 -1.65064866e+00 -6.80917422e-01 -6.80917422e-01
 -6.80917422e-01  8.40871996e+01  6.70234219e+02  3.71037129e+03
  1.58562998e+04  5.42615485e+04]
E1 = -706.5769020823694  E_coul = 198.94341777112044
cycle= 1 E= -507.633484311249  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440234
diis-c [-0.19380557  1.        ]
  HOMO = -0.236324655547039  LUMO = 85.4187506017657
  mo_energy =
[-1.20260220e+02 -1.22528489e+01 -6.65323984e+00 -6.65323984e+00
 -6.65323984e+00 -1.16348494e+00 -2.36324656e-01 -2.36324656e-01
 -2.36324656e-01  8.54187506e+01  6.71605607e+02  3.71163417e+03
  1.58574494e+04  5.42626179e+04]
E1 = -706.5449559882968  E_coul = 198.9110364099463
cycle= 2 E= -507.633919578351  delta_E= -0.000435  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00517117
diis-c [-2.67246427e-05  2.90663112e-04  9.99709337e-01]
  HOMO = -0.236503214942051  LUMO = 85.4152012997789
  mo_energy =
[-1.20268975e+02 -1.22540593e+01 -6.65511408e+00 -6.65511408e+00
 -6.65511408e+00 -1.16355094e+00 -2.36503215e-01 -2.36503215e-01
 -2.36503215e-01  8.54152013e+01  6.71594953e+02  3.71161845e+03
  1.58574310e+04  5.42625982e+04]
E1 = -706.5445058232974  E_coul = 198.91058613172697
cycle= 3 E= -507.63391969157  delta_E= -1.13e-07  |g|= 9.98e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135801
diis-c [-4.15512142e-10  3.37357085e-05 -2.64572765e-02  1.02642354e+00]
  HOMO = -0.236505627841444  LUMO = 85.4151529593764
  mo_energy =
[-1.20269098e+02 -1.22540765e+01 -6.65514322e+00 -6.65514322e+00
 -6.65514322e+00 -1.16355167e+00 -2.36505628e-01 -2.36505628e-01
 -2.36505628e-01  8.54151530e+01  6.71594825e+02  3.71161829e+03
  1.58574308e+04  5.42625981e+04]
E1 = -706.5444980032472  E_coul = 198.91057831163258
cycle= 4 E= -507.633919691615  delta_E= -4.42e-11  |g|= 3.84e-07  |ddm|= 3.71e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5444980032472  E_coul = 198.91057831163258
  HOMO = -0.236505610928018  LUMO = 85.4151533049506
  mo_energy =
[-1.20269097e+02 -1.22540763e+01 -6.65514305e+00 -6.65514305e+00
 -6.65514305e+00 -1.16355166e+00 -2.36505611e-01 -2.36505611e-01
 -2.36505611e-01  8.54151533e+01  6.71594826e+02  3.71161829e+03
  1.58574308e+04  5.42625981e+04]
E1 = -706.5444980417253  E_coul = 198.91057835011028
Extra cycle  E= -507.633919691615  delta_E= -3.41e-13  |g|= 6.68e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.4108989122329
E1 = -706.5444980417253  E_coul = 198.91057835011028
init E= -507.633919691615
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236505610728718  LUMO = 85.4151533092121
  mo_energy =
[-1.20269097e+02 -1.22540763e+01 -6.65514305e+00 -6.65514305e+00
 -6.65514305e+00 -1.16355166e+00 -2.36505611e-01 -2.36505611e-01
 -2.36505611e-01  8.54151533e+01  6.71594826e+02  3.71161829e+03
  1.58574308e+04  5.42625981e+04]
E1 = -706.5444980423122  E_coul = 198.910578350697
cycle= 1 E= -507.633919691615  delta_E= -1.71e-13  |g|= 1.36e-10  |ddm|= 2.66e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5444980423122  E_coul = 198.910578350697
  HOMO = -0.236505610725894  LUMO = 85.4151533092747
  mo_energy =
[-1.20269097e+02 -1.22540763e+01 -6.65514305e+00 -6.65514305e+00
 -6.65514305e+00 -1.16355166e+00 -2.36505611e-01 -2.36505611e-01
 -2.36505611e-01  8.54151533e+01  6.71594826e+02  3.71161829e+03
  1.58574308e+04  5.42625981e+04]
E1 = -706.5444980423221  E_coul = 198.910578350707
Extra cycle  E= -507.633919691615  delta_E= 1.14e-13  |g|= 6.34e-12  |ddm|= 4.75e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198595e+03 1.83549652e+04 2.23190848e+03 4.58643678e+02
 1.20797918e+02 3.73494127e+01 4.74078585e+00 3.91140972e-01
 8.59871326e+00 4.90848149e-01]
grad_E = [-4.94736499e-07 -1.59152408e-06  9.91182839e-05 -1.99321317e-04
 -1.43921112e-04 -2.84063940e-05  1.58131925e-04 -5.06608749e-04
  1.21805933e-05 -3.97765205e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.9859414         1
[INPUT] 0    0    [1    /1   ]  18354.9651852        1
[INPUT] 0    0    [1    /1   ]  2231.91065734        1
[INPUT] 0    0    [1    /1   ]  458.62889237         1
[INPUT] 0    0    [1    /1   ]  120.83530613         1
[INPUT] 0    0    [1    /1   ]  37.3629794989        1
[INPUT] 0    0    [1    /1   ]  4.74091578889        1
[INPUT] 0    0    [1    /1   ]  0.391125065588       1
[INPUT] 1    0    [1    /1   ]  8.59869471782        1
[INPUT] 1    0    [1    /1   ]  0.490842179873       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985941402067, 1.0]], [0, [18354.96518516532, 1.0]], [0, [2231.9106573391687, 1.0]], [0, [458.6288923704983, 1.0]], [0, [120.83530613040308, 1.0]], [0, [37.362979498936035, 1.0]], [0, [4.740915788891175, 1.0]], [0, [0.39112506558794896, 1.0]], [1, [8.598694717815295, 1.0]], [1, [0.49084217987310014, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.9859414]
bas 1, expnt(s) = [18354.96518517]
bas 2, expnt(s) = [2231.91065734]
bas 3, expnt(s) = [458.62889237]
bas 4, expnt(s) = [120.83530613]
bas 5, expnt(s) = [37.3629795]
bas 6, expnt(s) = [4.74091579]
bas 7, expnt(s) = [0.39112507]
bas 8, expnt(s) = [8.59869472]
bas 9, expnt(s) = [0.49084218]
CPU time:       100.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198594e+03 2.00389603e+03 1.83549652e+04 3.98409970e+03
 2.23191066e+03 8.20394289e+02 4.58628892e+02 2.50386600e+02
 1.20835306e+02 9.20789608e+01 3.73629795e+01 3.81808990e+01
 4.74091579e+00 8.11730202e+00 3.91125066e-01 1.24954460e+00
 8.59869472e+00 4.29561208e+01 4.90842180e-01 1.19856540e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320012022779512
cond(S) = 85.42585147682445
E1 = -689.1311179528827  E_coul = 184.91409584249135
init E= -504.217022110391
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680931591384992  LUMO = 84.1319728206542
  mo_energy =
[-1.21648091e+02 -1.32809059e+01 -7.62170771e+00 -7.62170771e+00
 -7.62170771e+00 -1.65066116e+00 -6.80931591e-01 -6.80931591e-01
 -6.80931591e-01  8.41319728e+01  6.70374696e+02  3.71051192e+03
  1.58564243e+04  5.42616646e+04]
E1 = -706.5766364568829  E_coul = 198.94314965919176
cycle= 1 E= -507.633486797691  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440279
diis-c [-0.1938453  1.       ]
  HOMO = -0.236343721603525  LUMO = 85.4635928549462
  mo_energy =
[-1.20260184e+02 -1.22528988e+01 -6.65325495e+00 -6.65325495e+00
 -6.65325495e+00 -1.16350424e+00 -2.36343722e-01 -2.36343722e-01
 -2.36343722e-01  8.54635929e+01  6.71746153e+02  3.71177491e+03
  1.58575740e+04  5.42627341e+04]
E1 = -706.5447174338703  E_coul = 198.91079578041462
cycle= 2 E= -507.633921653456  delta_E= -0.000435  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00516825
diis-c [-2.66947378e-05  2.87544725e-04  9.99712455e-01]
  HOMO = -0.236522103478985  LUMO = 85.4600455871524
  mo_energy =
[-1.20268932e+02 -1.22541081e+01 -6.65512742e+00 -6.65512742e+00
 -6.65512742e+00 -1.16357017e+00 -2.36522103e-01 -2.36522103e-01
 -2.36522103e-01  8.54600456e+01  6.71735506e+02  3.71175920e+03
  1.58575556e+04  5.42627145e+04]
E1 = -706.5442677910765  E_coul = 198.91034602456932
cycle= 3 E= -507.633921766507  delta_E= -1.13e-07  |g|= 9.97e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135678
diis-c [-4.14767316e-10  3.37527524e-05 -2.64482472e-02  1.02641449e+00]
  HOMO = -0.236524512702773  LUMO = 85.45999730439
  mo_energy =
[-1.20269054e+02 -1.22541252e+01 -6.65515652e+00 -6.65515652e+00
 -6.65515652e+00 -1.16357090e+00 -2.36524513e-01 -2.36524513e-01
 -2.36524513e-01  8.54599973e+01  6.71735379e+02  3.71175905e+03
  1.58575554e+04  5.42627143e+04]
E1 = -706.5442599839366  E_coul = 198.91033821738463
cycle= 4 E= -507.633921766552  delta_E= -4.48e-11  |g|= 3.84e-07  |ddm|= 3.7e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5442599839366  E_coul = 198.91033821738463
  HOMO = -0.236524495819833  LUMO = 85.4599976495528
  mo_energy =
[-1.20269053e+02 -1.22541251e+01 -6.65515635e+00 -6.65515635e+00
 -6.65515635e+00 -1.16357089e+00 -2.36524496e-01 -2.36524496e-01
 -2.36524496e-01  8.54599976e+01  6.71735380e+02  3.71175905e+03
  1.58575554e+04  5.42627143e+04]
E1 = -706.5442600223441  E_coul = 198.91033825579183
Extra cycle  E= -507.633921766552  delta_E= -2.84e-13  |g|= 6.67e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198594e+03 1.83549652e+04 2.23191066e+03 4.58628892e+02
 1.20835306e+02 3.73629795e+01 4.74091579e+00 3.91125066e-01
 8.59869472e+00 4.90842180e-01]
E = -507.6339217665523
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.9859414         1
[INPUT] 0    0    [1    /1   ]  18354.9651852        1
[INPUT] 0    0    [1    /1   ]  2231.91065734        1
[INPUT] 0    0    [1    /1   ]  458.62889237         1
[INPUT] 0    0    [1    /1   ]  120.83530613         1
[INPUT] 0    0    [1    /1   ]  37.3629794989        1
[INPUT] 0    0    [1    /1   ]  4.74091578889        1
[INPUT] 0    0    [1    /1   ]  0.391125065588       1
[INPUT] 1    0    [1    /1   ]  8.59869471782        1
[INPUT] 1    0    [1    /1   ]  0.490842179873       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985941402067, 1.0]], [0, [18354.96518516532, 1.0]], [0, [2231.9106573391687, 1.0]], [0, [458.6288923704983, 1.0]], [0, [120.83530613040308, 1.0]], [0, [37.362979498936035, 1.0]], [0, [4.740915788891175, 1.0]], [0, [0.39112506558794896, 1.0]], [1, [8.598694717815295, 1.0]], [1, [0.49084217987310014, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.9859414]
bas 1, expnt(s) = [18354.96518517]
bas 2, expnt(s) = [2231.91065734]
bas 3, expnt(s) = [458.62889237]
bas 4, expnt(s) = [120.83530613]
bas 5, expnt(s) = [37.3629795]
bas 6, expnt(s) = [4.74091579]
bas 7, expnt(s) = [0.39112507]
bas 8, expnt(s) = [8.59869472]
bas 9, expnt(s) = [0.49084218]
CPU time:       101.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198594e+03 2.00389603e+03 1.83549652e+04 3.98409970e+03
 2.23191066e+03 8.20394289e+02 4.58628892e+02 2.50386600e+02
 1.20835306e+02 9.20789608e+01 3.73629795e+01 3.81808990e+01
 4.74091579e+00 8.11730202e+00 3.91125066e-01 1.24954460e+00
 8.59869472e+00 4.29561208e+01 4.90842180e-01 1.19856540e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320012022779512
cond(S) = 85.42585147682445
E1 = -689.1311179528827  E_coul = 184.91409584249135
init E= -504.217022110391
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680931591384992  LUMO = 84.1319728206542
  mo_energy =
[-1.21648091e+02 -1.32809059e+01 -7.62170771e+00 -7.62170771e+00
 -7.62170771e+00 -1.65066116e+00 -6.80931591e-01 -6.80931591e-01
 -6.80931591e-01  8.41319728e+01  6.70374696e+02  3.71051192e+03
  1.58564243e+04  5.42616646e+04]
E1 = -706.5766364568829  E_coul = 198.94314965919176
cycle= 1 E= -507.633486797691  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440279
diis-c [-0.1938453  1.       ]
  HOMO = -0.236343721603525  LUMO = 85.4635928549462
  mo_energy =
[-1.20260184e+02 -1.22528988e+01 -6.65325495e+00 -6.65325495e+00
 -6.65325495e+00 -1.16350424e+00 -2.36343722e-01 -2.36343722e-01
 -2.36343722e-01  8.54635929e+01  6.71746153e+02  3.71177491e+03
  1.58575740e+04  5.42627341e+04]
E1 = -706.5447174338703  E_coul = 198.91079578041462
cycle= 2 E= -507.633921653456  delta_E= -0.000435  |g|= 0.00479  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00516825
diis-c [-2.66947378e-05  2.87544725e-04  9.99712455e-01]
  HOMO = -0.236522103478985  LUMO = 85.4600455871524
  mo_energy =
[-1.20268932e+02 -1.22541081e+01 -6.65512742e+00 -6.65512742e+00
 -6.65512742e+00 -1.16357017e+00 -2.36522103e-01 -2.36522103e-01
 -2.36522103e-01  8.54600456e+01  6.71735506e+02  3.71175920e+03
  1.58575556e+04  5.42627145e+04]
E1 = -706.5442677910765  E_coul = 198.91034602456932
cycle= 3 E= -507.633921766507  delta_E= -1.13e-07  |g|= 9.97e-05  |ddm|= 0.000206
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135678
diis-c [-4.14767316e-10  3.37527524e-05 -2.64482472e-02  1.02641449e+00]
  HOMO = -0.236524512702773  LUMO = 85.45999730439
  mo_energy =
[-1.20269054e+02 -1.22541252e+01 -6.65515652e+00 -6.65515652e+00
 -6.65515652e+00 -1.16357090e+00 -2.36524513e-01 -2.36524513e-01
 -2.36524513e-01  8.54599973e+01  6.71735379e+02  3.71175905e+03
  1.58575554e+04  5.42627143e+04]
E1 = -706.5442599839366  E_coul = 198.91033821738463
cycle= 4 E= -507.633921766552  delta_E= -4.48e-11  |g|= 3.84e-07  |ddm|= 3.7e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5442599839366  E_coul = 198.91033821738463
  HOMO = -0.236524495819833  LUMO = 85.4599976495528
  mo_energy =
[-1.20269053e+02 -1.22541251e+01 -6.65515635e+00 -6.65515635e+00
 -6.65515635e+00 -1.16357089e+00 -2.36524496e-01 -2.36524496e-01
 -2.36524496e-01  8.54599976e+01  6.71735380e+02  3.71175905e+03
  1.58575554e+04  5.42627143e+04]
E1 = -706.5442600223441  E_coul = 198.91033825579183
Extra cycle  E= -507.633921766552  delta_E= -2.84e-13  |g|= 6.67e-09  |ddm|= 1.71e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.42585147682445
E1 = -706.5442600223441  E_coul = 198.91033825579183
init E= -507.633921766552
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236524495620953  LUMO = 85.459997653808
  mo_energy =
[-1.20269053e+02 -1.22541251e+01 -6.65515635e+00 -6.65515635e+00
 -6.65515635e+00 -1.16357089e+00 -2.36524496e-01 -2.36524496e-01
 -2.36524496e-01  8.54599977e+01  6.71735380e+02  3.71175905e+03
  1.58575554e+04  5.42627143e+04]
E1 = -706.5442600229295  E_coul = 198.9103382563772
cycle= 1 E= -507.633921766552  delta_E=    0  |g|= 1.32e-10  |ddm|= 2.66e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5442600229295  E_coul = 198.9103382563772
  HOMO = -0.236524495618132  LUMO = 85.4599976538678
  mo_energy =
[-1.20269053e+02 -1.22541251e+01 -6.65515635e+00 -6.65515635e+00
 -6.65515635e+00 -1.16357089e+00 -2.36524496e-01 -2.36524496e-01
 -2.36524496e-01  8.54599977e+01  6.71735380e+02  3.71175905e+03
  1.58575554e+04  5.42627143e+04]
E1 = -706.5442600229393  E_coul = 198.91033825638758
Extra cycle  E= -507.633921766552  delta_E= 6.25e-13  |g|= 1.3e-11  |ddm|= 4.8e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198594e+03 1.83549652e+04 2.23191066e+03 4.58628892e+02
 1.20835306e+02 3.73629795e+01 4.74091579e+00 3.91125066e-01
 8.59869472e+00 4.90842180e-01]
grad_E = [-4.96609521e-07 -1.58979981e-06  9.93468513e-05 -2.04613923e-04
 -1.27356610e-04 -8.07351930e-06  2.70225282e-04 -8.22737705e-04
  1.46468896e-05 -6.22389083e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98595419        1
[INPUT] 0    0    [1    /1   ]  18354.9652513        1
[INPUT] 0    0    [1    /1   ]  2231.90766542        1
[INPUT] 0    0    [1    /1   ]  458.619805263        1
[INPUT] 0    0    [1    /1   ]  120.898400455        1
[INPUT] 0    0    [1    /1   ]  37.3852016214        1
[INPUT] 0    0    [1    /1   ]  4.74112386302        1
[INPUT] 0    0    [1    /1   ]  0.391100068862       1
[INPUT] 1    0    [1    /1   ]  8.59866478441        1
[INPUT] 1    0    [1    /1   ]  0.490832730085       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985954186725, 1.0]], [0, [18354.965251324506, 1.0]], [0, [2231.9076654244723, 1.0]], [0, [458.61980526285436, 1.0]], [0, [120.89840045526877, 1.0]], [0, [37.38520162139897, 1.0]], [0, [4.741123863023539, 1.0]], [0, [0.39110006886192233, 1.0]], [1, [8.598664784414046, 1.0]], [1, [0.49083273008471584, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98595419]
bas 1, expnt(s) = [18354.96525132]
bas 2, expnt(s) = [2231.90766542]
bas 3, expnt(s) = [458.61980526]
bas 4, expnt(s) = [120.89840046]
bas 5, expnt(s) = [37.38520162]
bas 6, expnt(s) = [4.74112386]
bas 7, expnt(s) = [0.39110007]
bas 8, expnt(s) = [8.59866478]
bas 9, expnt(s) = [0.49083273]
CPU time:       105.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198595e+03 2.00389604e+03 1.83549653e+04 3.98409971e+03
 2.23190767e+03 8.20393465e+02 4.58619805e+02 2.50382879e+02
 1.20898400e+02 9.21150178e+01 3.73852016e+01 3.81979292e+01
 4.74112386e+00 8.11756922e+00 3.91100069e-01 1.24948470e+00
 8.59866478e+00 4.29559339e+01 4.90832730e-01 1.19853656e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320022755456392
cond(S) = 85.45108452493557
E1 = -689.1303133705042  E_coul = 184.913579287175
init E= -504.216734083329
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68095396507012  LUMO = 84.206054748778
  mo_energy =
[-1.21648096e+02 -1.32809908e+01 -7.62173590e+00 -7.62173590e+00
 -7.62173590e+00 -1.65068108e+00 -6.80953965e-01 -6.80953965e-01
 -6.80953965e-01  8.42060547e+01  6.70621551e+02  3.71078792e+03
  1.58566707e+04  5.42618904e+04]
E1 = -706.5762216742194  E_coul = 198.9427288813402
cycle= 1 E= -507.633492792879  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440348
diis-c [-0.19390619  1.        ]
  HOMO = -0.23637376199686  LUMO = 85.5377880468878
  mo_energy =
[-1.20260127e+02 -1.22529776e+01 -6.65327850e+00 -6.65327850e+00
 -6.65327850e+00 -1.16353472e+00 -2.36373762e-01 -2.36373762e-01
 -2.36373762e-01  8.55377880e+01  6.71993116e+02  3.71205109e+03
  1.58578205e+04  5.42629601e+04]
E1 = -706.5443471742622  E_coul = 198.91042020072533
cycle= 2 E= -507.633926973537  delta_E= -0.000434  |g|= 0.00478  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00516349
diis-c [-2.66461394e-05  2.82436502e-04  9.99717563e-01]
  HOMO = -0.23655185162216  LUMO = 85.5342441079232
  mo_energy =
[-1.20268864e+02 -1.22541850e+01 -6.65514805e+00 -6.65514805e+00
 -6.65514805e+00 -1.16360055e+00 -2.36551852e-01 -2.36551852e-01
 -2.36551852e-01  8.55342441e+01  6.71982482e+02  3.71203540e+03
  1.58578022e+04  5.42629405e+04]
E1 = -706.5438983916322  E_coul = 198.90997130532057
cycle= 3 E= -507.633927086312  delta_E= -1.13e-07  |g|= 9.96e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135477
diis-c [-4.13548161e-10  3.37800186e-05 -2.64333205e-02  1.02639954e+00]
  HOMO = -0.236554254800795  LUMO = 85.5341959198987
  mo_energy =
[-1.20268986e+02 -1.22542021e+01 -6.65517707e+00 -6.65517707e+00
 -6.65517707e+00 -1.16360127e+00 -2.36554255e-01 -2.36554255e-01
 -2.36554255e-01  8.55341959e+01  6.71982355e+02  3.71203525e+03
  1.58578020e+04  5.42629403e+04]
E1 = -706.5438906057425  E_coul = 198.90996351938605
cycle= 4 E= -507.633927086356  delta_E= -4.48e-11  |g|= 3.83e-07  |ddm|= 3.69e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5438906057425  E_coul = 198.90996351938605
  HOMO = -0.236554237968036  LUMO = 85.5341962643822
  mo_energy =
[-1.20268985e+02 -1.22542020e+01 -6.65517691e+00 -6.65517691e+00
 -6.65517691e+00 -1.16360127e+00 -2.36554238e-01 -2.36554238e-01
 -2.36554238e-01  8.55341963e+01  6.71982356e+02  3.71203525e+03
  1.58578020e+04  5.42629403e+04]
E1 = -706.5438906440351  E_coul = 198.90996355767808
Extra cycle  E= -507.633927086357  delta_E= -5.12e-13  |g|= 6.65e-09  |ddm|= 1.7e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198595e+03 1.83549653e+04 2.23190767e+03 4.58619805e+02
 1.20898400e+02 3.73852016e+01 4.74112386e+00 3.91100069e-01
 8.59866478e+00 4.90832730e-01]
E = -507.63392708635695
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98595419        1
[INPUT] 0    0    [1    /1   ]  18354.9652513        1
[INPUT] 0    0    [1    /1   ]  2231.90766542        1
[INPUT] 0    0    [1    /1   ]  458.619805263        1
[INPUT] 0    0    [1    /1   ]  120.898400455        1
[INPUT] 0    0    [1    /1   ]  37.3852016214        1
[INPUT] 0    0    [1    /1   ]  4.74112386302        1
[INPUT] 0    0    [1    /1   ]  0.391100068862       1
[INPUT] 1    0    [1    /1   ]  8.59866478441        1
[INPUT] 1    0    [1    /1   ]  0.490832730085       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.985954186725, 1.0]], [0, [18354.965251324506, 1.0]], [0, [2231.9076654244723, 1.0]], [0, [458.61980526285436, 1.0]], [0, [120.89840045526877, 1.0]], [0, [37.38520162139897, 1.0]], [0, [4.741123863023539, 1.0]], [0, [0.39110006886192233, 1.0]], [1, [8.598664784414046, 1.0]], [1, [0.49083273008471584, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98595419]
bas 1, expnt(s) = [18354.96525132]
bas 2, expnt(s) = [2231.90766542]
bas 3, expnt(s) = [458.61980526]
bas 4, expnt(s) = [120.89840046]
bas 5, expnt(s) = [37.38520162]
bas 6, expnt(s) = [4.74112386]
bas 7, expnt(s) = [0.39110007]
bas 8, expnt(s) = [8.59866478]
bas 9, expnt(s) = [0.49083273]
CPU time:       105.48
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198595e+03 2.00389604e+03 1.83549653e+04 3.98409971e+03
 2.23190767e+03 8.20393465e+02 4.58619805e+02 2.50382879e+02
 1.20898400e+02 9.21150178e+01 3.73852016e+01 3.81979292e+01
 4.74112386e+00 8.11756922e+00 3.91100069e-01 1.24948470e+00
 8.59866478e+00 4.29559339e+01 4.90832730e-01 1.19853656e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320022755456392
cond(S) = 85.45108452493557
E1 = -689.1303133705042  E_coul = 184.913579287175
init E= -504.216734083329
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68095396507012  LUMO = 84.206054748778
  mo_energy =
[-1.21648096e+02 -1.32809908e+01 -7.62173590e+00 -7.62173590e+00
 -7.62173590e+00 -1.65068108e+00 -6.80953965e-01 -6.80953965e-01
 -6.80953965e-01  8.42060547e+01  6.70621551e+02  3.71078792e+03
  1.58566707e+04  5.42618904e+04]
E1 = -706.5762216742194  E_coul = 198.9427288813402
cycle= 1 E= -507.633492792879  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440348
diis-c [-0.19390619  1.        ]
  HOMO = -0.23637376199686  LUMO = 85.5377880468878
  mo_energy =
[-1.20260127e+02 -1.22529776e+01 -6.65327850e+00 -6.65327850e+00
 -6.65327850e+00 -1.16353472e+00 -2.36373762e-01 -2.36373762e-01
 -2.36373762e-01  8.55377880e+01  6.71993116e+02  3.71205109e+03
  1.58578205e+04  5.42629601e+04]
E1 = -706.5443471742622  E_coul = 198.91042020072533
cycle= 2 E= -507.633926973537  delta_E= -0.000434  |g|= 0.00478  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00516349
diis-c [-2.66461394e-05  2.82436502e-04  9.99717563e-01]
  HOMO = -0.23655185162216  LUMO = 85.5342441079232
  mo_energy =
[-1.20268864e+02 -1.22541850e+01 -6.65514805e+00 -6.65514805e+00
 -6.65514805e+00 -1.16360055e+00 -2.36551852e-01 -2.36551852e-01
 -2.36551852e-01  8.55342441e+01  6.71982482e+02  3.71203540e+03
  1.58578022e+04  5.42629405e+04]
E1 = -706.5438983916322  E_coul = 198.90997130532057
cycle= 3 E= -507.633927086312  delta_E= -1.13e-07  |g|= 9.96e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135477
diis-c [-4.13548161e-10  3.37800186e-05 -2.64333205e-02  1.02639954e+00]
  HOMO = -0.236554254800795  LUMO = 85.5341959198987
  mo_energy =
[-1.20268986e+02 -1.22542021e+01 -6.65517707e+00 -6.65517707e+00
 -6.65517707e+00 -1.16360127e+00 -2.36554255e-01 -2.36554255e-01
 -2.36554255e-01  8.55341959e+01  6.71982355e+02  3.71203525e+03
  1.58578020e+04  5.42629403e+04]
E1 = -706.5438906057425  E_coul = 198.90996351938605
cycle= 4 E= -507.633927086356  delta_E= -4.48e-11  |g|= 3.83e-07  |ddm|= 3.69e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5438906057425  E_coul = 198.90996351938605
  HOMO = -0.236554237968036  LUMO = 85.5341962643822
  mo_energy =
[-1.20268985e+02 -1.22542020e+01 -6.65517691e+00 -6.65517691e+00
 -6.65517691e+00 -1.16360127e+00 -2.36554238e-01 -2.36554238e-01
 -2.36554238e-01  8.55341963e+01  6.71982356e+02  3.71203525e+03
  1.58578020e+04  5.42629403e+04]
E1 = -706.5438906440351  E_coul = 198.90996355767808
Extra cycle  E= -507.633927086357  delta_E= -5.12e-13  |g|= 6.65e-09  |ddm|= 1.7e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.45108452493557
E1 = -706.5438906440351  E_coul = 198.90996355767808
init E= -507.633927086357
    CPU time for initialize scf      0.77 sec, wall time      0.05 sec
  HOMO = -0.236554237769845  LUMO = 85.5341962686274
  mo_energy =
[-1.20268985e+02 -1.22542020e+01 -6.65517690e+00 -6.65517690e+00
 -6.65517690e+00 -1.16360127e+00 -2.36554238e-01 -2.36554238e-01
 -2.36554238e-01  8.55341963e+01  6.71982356e+02  3.71203525e+03
  1.58578020e+04  5.42629403e+04]
E1 = -706.5438906446182  E_coul = 198.90996355826147
cycle= 1 E= -507.633927086357  delta_E= 2.27e-13  |g|= 1.31e-10  |ddm|= 2.65e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5438906446182  E_coul = 198.90996355826147
  HOMO = -0.23655423776703  LUMO = 85.5341962686887
  mo_energy =
[-1.20268985e+02 -1.22542020e+01 -6.65517690e+00 -6.65517690e+00
 -6.65517690e+00 -1.16360127e+00 -2.36554238e-01 -2.36554238e-01
 -2.36554238e-01  8.55341963e+01  6.71982356e+02  3.71203525e+03
  1.58578020e+04  5.42629403e+04]
E1 = -706.5438906446286  E_coul = 198.90996355827193
Extra cycle  E= -507.633927086357  delta_E=    0  |g|= 6.67e-12  |ddm|= 4.77e-12
    CPU time for scf_cycle      0.99 sec, wall time      0.11 sec
exp = [7.34198595e+03 1.83549653e+04 2.23190767e+03 4.58619805e+02
 1.20898400e+02 3.73852016e+01 4.74112386e+00 3.91100069e-01
 8.59866478e+00 4.90832730e-01]
grad_E = [-4.99314121e-07 -1.58732336e-06  9.96812112e-05 -2.12783950e-04
 -1.01060359e-04  2.41360112e-05  4.47412008e-04 -1.32153070e-03
  1.82209903e-05 -9.76473071e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:35 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98605978        1
[INPUT] 0    0    [1    /1   ]  18354.9656256        1
[INPUT] 0    0    [1    /1   ]  2231.88591198        1
[INPUT] 0    0    [1    /1   ]  458.642675648        1
[INPUT] 0    0    [1    /1   ]  121.010824143        1
[INPUT] 0    0    [1    /1   ]  37.4231332512        1
[INPUT] 0    0    [1    /1   ]  4.741466702          1
[INPUT] 0    0    [1    /1   ]  0.391060009254       1
[INPUT] 1    0    [1    /1   ]  8.59861558482        1
[INPUT] 1    0    [1    /1   ]  0.490817422537       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986059776254, 1.0]], [0, [18354.96562562949, 1.0]], [0, [2231.8859119829785, 1.0]], [0, [458.64267564777657, 1.0]], [0, [121.01082414304031, 1.0]], [0, [37.423133251225934, 1.0]], [0, [4.741466702000404, 1.0]], [0, [0.39106000925406503, 1.0]], [1, [8.598615584823014, 1.0]], [1, [0.49081742253690086, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98605978]
bas 1, expnt(s) = [18354.96562563]
bas 2, expnt(s) = [2231.88591198]
bas 3, expnt(s) = [458.64267565]
bas 4, expnt(s) = [121.01082414]
bas 5, expnt(s) = [37.42313325]
bas 6, expnt(s) = [4.7414667]
bas 7, expnt(s) = [0.39106001]
bas 8, expnt(s) = [8.59861558]
bas 9, expnt(s) = [0.49081742]
CPU time:       109.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198606e+03 2.00389606e+03 1.83549656e+04 3.98409977e+03
 2.23188591e+03 8.20387468e+02 4.58642676e+02 2.50392243e+02
 1.21010824e+02 9.21792538e+01 3.74231333e+01 3.82269927e+01
 4.74146670e+00 8.11800946e+00 3.91060009e-01 1.24938872e+00
 8.59861558e+00 4.29556267e+01 4.90817423e-01 1.19848984e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32003985457633
cond(S) = 85.4960407318174
E1 = -689.1290274949619  E_coul = 184.91275105473807
init E= -504.216276440224
    CPU time for initialize scf      0.14 sec, wall time      0.02 sec
  HOMO = -0.680990092413185  LUMO = 84.3344135265144
  mo_energy =
[-1.21648106e+02 -1.32811283e+01 -7.62178068e+00 -7.62178068e+00
 -7.62178068e+00 -1.65071366e+00 -6.80990092e-01 -6.80990092e-01
 -6.80990092e-01  8.43344135e+01  6.71085487e+02  3.71137493e+03
  1.58571989e+04  5.42623664e+04]
E1 = -706.5755668218338  E_coul = 198.94205892761875
cycle= 1 E= -507.633507894215  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440454
diis-c [-0.19399948  1.        ]
  HOMO = -0.236422088804796  LUMO = 85.666340618729
  mo_energy =
[-1.20260036e+02 -1.22531048e+01 -6.65331551e+00 -6.65331551e+00
 -6.65331551e+00 -1.16358394e+00 -2.36422089e-01 -2.36422089e-01
 -2.36422089e-01  8.56663406e+01  6.72457226e+02  3.71263840e+03
  1.58583491e+04  5.42634365e+04]
E1 = -706.5437687562011  E_coul = 198.90982783667687
cycle= 2 E= -507.633940919524  delta_E= -0.000433  |g|= 0.00477  |ddm|= 0.0145
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00515546
diis-c [-2.65641910e-05  2.73716288e-04  9.99726284e-01]
  HOMO = -0.236599676017863  LUMO = 85.6628023527992
  mo_energy =
[-1.20268754e+02 -1.22543090e+01 -6.65518004e+00 -6.65518004e+00
 -6.65518004e+00 -1.16364958e+00 -2.36599676e-01 -2.36599676e-01
 -2.36599676e-01  8.56628024e+01  6.72446613e+02  3.71262274e+03
  1.58583308e+04  5.42634169e+04]
E1 = -706.5433214534203  E_coul = 198.909380421594
cycle= 3 E= -507.633941031826  delta_E= -1.12e-07  |g|= 9.93e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135135
diis-c [-4.11470747e-10  3.38245466e-05 -2.64074797e-02  1.02637366e+00]
  HOMO = -0.23660206882033  LUMO = 85.6627543272691
  mo_energy =
[-1.20268876e+02 -1.22543260e+01 -6.65520895e+00 -6.65520895e+00
 -6.65520895e+00 -1.16365030e+00 -2.36602069e-01 -2.36602069e-01
 -2.36602069e-01  8.56627543e+01  6.72446486e+02  3.71262258e+03
  1.58583306e+04  5.42634167e+04]
E1 = -706.5433137040492  E_coul = 198.90937267217868
cycle= 4 E= -507.633941031871  delta_E= -4.42e-11  |g|= 3.82e-07  |ddm|= 3.68e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5433137040492  E_coul = 198.90937267217868
  HOMO = -0.236602052073793  LUMO = 85.6627546705887
  mo_energy =
[-1.20268876e+02 -1.22543259e+01 -6.65520878e+00 -6.65520878e+00
 -6.65520878e+00 -1.16365029e+00 -2.36602052e-01 -2.36602052e-01
 -2.36602052e-01  8.56627547e+01  6.72446487e+02  3.71262258e+03
  1.58583306e+04  5.42634167e+04]
E1 = -706.5433137421437  E_coul = 198.90937271027317
Extra cycle  E= -507.633941031871  delta_E= -5.68e-14  |g|= 6.63e-09  |ddm|= 1.69e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198606e+03 1.83549656e+04 2.23188591e+03 4.58642676e+02
 1.21010824e+02 3.74231333e+01 4.74146670e+00 3.91060009e-01
 8.59861558e+00 4.90817423e-01]
E = -507.63394103187056
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:35 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98605978        1
[INPUT] 0    0    [1    /1   ]  18354.9656256        1
[INPUT] 0    0    [1    /1   ]  2231.88591198        1
[INPUT] 0    0    [1    /1   ]  458.642675648        1
[INPUT] 0    0    [1    /1   ]  121.010824143        1
[INPUT] 0    0    [1    /1   ]  37.4231332512        1
[INPUT] 0    0    [1    /1   ]  4.741466702          1
[INPUT] 0    0    [1    /1   ]  0.391060009254       1
[INPUT] 1    0    [1    /1   ]  8.59861558482        1
[INPUT] 1    0    [1    /1   ]  0.490817422537       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986059776254, 1.0]], [0, [18354.96562562949, 1.0]], [0, [2231.8859119829785, 1.0]], [0, [458.64267564777657, 1.0]], [0, [121.01082414304031, 1.0]], [0, [37.423133251225934, 1.0]], [0, [4.741466702000404, 1.0]], [0, [0.39106000925406503, 1.0]], [1, [8.598615584823014, 1.0]], [1, [0.49081742253690086, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98605978]
bas 1, expnt(s) = [18354.96562563]
bas 2, expnt(s) = [2231.88591198]
bas 3, expnt(s) = [458.64267565]
bas 4, expnt(s) = [121.01082414]
bas 5, expnt(s) = [37.42313325]
bas 6, expnt(s) = [4.7414667]
bas 7, expnt(s) = [0.39106001]
bas 8, expnt(s) = [8.59861558]
bas 9, expnt(s) = [0.49081742]
CPU time:       109.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198606e+03 2.00389606e+03 1.83549656e+04 3.98409977e+03
 2.23188591e+03 8.20387468e+02 4.58642676e+02 2.50392243e+02
 1.21010824e+02 9.21792538e+01 3.74231333e+01 3.82269927e+01
 4.74146670e+00 8.11800946e+00 3.91060009e-01 1.24938872e+00
 8.59861558e+00 4.29556267e+01 4.90817423e-01 1.19848984e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32003985457633
cond(S) = 85.4960407318174
E1 = -689.1290274949619  E_coul = 184.91275105473807
init E= -504.216276440224
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680990092413185  LUMO = 84.3344135265144
  mo_energy =
[-1.21648106e+02 -1.32811283e+01 -7.62178068e+00 -7.62178068e+00
 -7.62178068e+00 -1.65071366e+00 -6.80990092e-01 -6.80990092e-01
 -6.80990092e-01  8.43344135e+01  6.71085487e+02  3.71137493e+03
  1.58571989e+04  5.42623664e+04]
E1 = -706.5755668218338  E_coul = 198.94205892761875
cycle= 1 E= -507.633507894215  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440454
diis-c [-0.19399948  1.        ]
  HOMO = -0.236422088804796  LUMO = 85.666340618729
  mo_energy =
[-1.20260036e+02 -1.22531048e+01 -6.65331551e+00 -6.65331551e+00
 -6.65331551e+00 -1.16358394e+00 -2.36422089e-01 -2.36422089e-01
 -2.36422089e-01  8.56663406e+01  6.72457226e+02  3.71263840e+03
  1.58583491e+04  5.42634365e+04]
E1 = -706.5437687562011  E_coul = 198.90982783667687
cycle= 2 E= -507.633940919524  delta_E= -0.000433  |g|= 0.00477  |ddm|= 0.0145
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00515546
diis-c [-2.65641910e-05  2.73716288e-04  9.99726284e-01]
  HOMO = -0.236599676017863  LUMO = 85.6628023527992
  mo_energy =
[-1.20268754e+02 -1.22543090e+01 -6.65518004e+00 -6.65518004e+00
 -6.65518004e+00 -1.16364958e+00 -2.36599676e-01 -2.36599676e-01
 -2.36599676e-01  8.56628024e+01  6.72446613e+02  3.71262274e+03
  1.58583308e+04  5.42634169e+04]
E1 = -706.5433214534203  E_coul = 198.909380421594
cycle= 3 E= -507.633941031826  delta_E= -1.12e-07  |g|= 9.93e-05  |ddm|= 0.000205
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000135135
diis-c [-4.11470747e-10  3.38245466e-05 -2.64074797e-02  1.02637366e+00]
  HOMO = -0.23660206882033  LUMO = 85.6627543272691
  mo_energy =
[-1.20268876e+02 -1.22543260e+01 -6.65520895e+00 -6.65520895e+00
 -6.65520895e+00 -1.16365030e+00 -2.36602069e-01 -2.36602069e-01
 -2.36602069e-01  8.56627543e+01  6.72446486e+02  3.71262258e+03
  1.58583306e+04  5.42634167e+04]
E1 = -706.5433137040492  E_coul = 198.90937267217868
cycle= 4 E= -507.633941031871  delta_E= -4.42e-11  |g|= 3.82e-07  |ddm|= 3.68e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5433137040492  E_coul = 198.90937267217868
  HOMO = -0.236602052073793  LUMO = 85.6627546705887
  mo_energy =
[-1.20268876e+02 -1.22543259e+01 -6.65520878e+00 -6.65520878e+00
 -6.65520878e+00 -1.16365029e+00 -2.36602052e-01 -2.36602052e-01
 -2.36602052e-01  8.56627547e+01  6.72446487e+02  3.71262258e+03
  1.58583306e+04  5.42634167e+04]
E1 = -706.5433137421437  E_coul = 198.90937271027317
Extra cycle  E= -507.633941031871  delta_E= -5.68e-14  |g|= 6.63e-09  |ddm|= 1.69e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.4960407318174
E1 = -706.5433137421437  E_coul = 198.90937271027317
init E= -507.633941031871
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236602051876763  LUMO = 85.6627546748151
  mo_energy =
[-1.20268875e+02 -1.22543259e+01 -6.65520878e+00 -6.65520878e+00
 -6.65520878e+00 -1.16365029e+00 -2.36602052e-01 -2.36602052e-01
 -2.36602052e-01  8.56627547e+01  6.72446487e+02  3.71262258e+03
  1.58583306e+04  5.42634167e+04]
E1 = -706.5433137427235  E_coul = 198.9093727108531
cycle= 1 E= -507.63394103187  delta_E= 1.14e-13  |g|= 1.34e-10  |ddm|= 2.63e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5433137427235  E_coul = 198.9093727108531
  HOMO = -0.236602051873969  LUMO = 85.662754674877
  mo_energy =
[-1.20268875e+02 -1.22543259e+01 -6.65520878e+00 -6.65520878e+00
 -6.65520878e+00 -1.16365029e+00 -2.36602052e-01 -2.36602052e-01
 -2.36602052e-01  8.56627547e+01  6.72446487e+02  3.71262258e+03
  1.58583306e+04  5.42634167e+04]
E1 = -706.5433137427333  E_coul = 198.90937271086293
Extra cycle  E= -507.63394103187  delta_E= 1.14e-13  |g|= 1.32e-11  |ddm|= 4.67e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198606e+03 1.83549656e+04 2.23188591e+03 4.58642676e+02
 1.21010824e+02 3.74231333e+01 4.74146670e+00 3.91060009e-01
 8.59861558e+00 4.90817423e-01]
grad_E = [-5.03019536e-07 -1.58397900e-06  1.00150372e-04 -2.25460664e-04
 -5.82981455e-05  7.63590967e-05  7.33476514e-04 -2.12590487e-03
  2.37934352e-05 -1.54711200e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:38 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98644785        1
[INPUT] 0    0    [1    /1   ]  18354.9669135        1
[INPUT] 0    0    [1    /1   ]  2231.80747006        1
[INPUT] 0    0    [1    /1   ]  458.776712602        1
[INPUT] 0    0    [1    /1   ]  121.2154245          1
[INPUT] 0    0    [1    /1   ]  37.4882002509        1
[INPUT] 0    0    [1    /1   ]  4.74202407939        1
[INPUT] 0    0    [1    /1   ]  0.390997702632       1
[INPUT] 1    0    [1    /1   ]  8.59853628202        1
[INPUT] 1    0    [1    /1   ]  0.490793197771       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986447852745, 1.0]], [0, [18354.966913482676, 1.0]], [0, [2231.807470063003, 1.0]], [0, [458.7767126016855, 1.0]], [0, [121.21542450031674, 1.0]], [0, [37.488200250892696, 1.0]], [0, [4.742024079387207, 1.0]], [0, [0.3909977026316212, 1.0]], [1, [8.598536282015369, 1.0]], [1, [0.490793197770516, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98644785]
bas 1, expnt(s) = [18354.96691348]
bas 2, expnt(s) = [2231.80747006]
bas 3, expnt(s) = [458.7767126]
bas 4, expnt(s) = [121.2154245]
bas 5, expnt(s) = [37.48820025]
bas 6, expnt(s) = [4.74202408]
bas 7, expnt(s) = [0.3909977]
bas 8, expnt(s) = [8.59853628]
bas 9, expnt(s) = [0.4907932]
CPU time:       113.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198645e+03 2.00389614e+03 1.83549669e+04 3.98409998e+03
 2.23180747e+03 8.20365843e+02 4.58776713e+02 2.50447124e+02
 1.21215425e+02 9.22961189e+01 3.74882003e+01 3.82768304e+01
 4.74202408e+00 8.11872517e+00 3.90997703e-01 1.24923942e+00
 8.59853628e+00 4.29551315e+01 4.90793198e-01 1.19841590e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320066172568303
cond(S) = 85.57783599446888
E1 = -689.1270402216327  E_coul = 184.9114640775172
init E= -504.215576144116
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681046985180304  LUMO = 84.5593722856701
  mo_energy =
[-1.21648124e+02 -1.32813457e+01 -7.62184911e+00 -7.62184911e+00
 -7.62184911e+00 -1.65076604e+00 -6.81046985e-01 -6.81046985e-01
 -6.81046985e-01  8.45593723e+01  6.71986680e+02  3.71266841e+03
  1.58583715e+04  5.42634069e+04]
E1 = -706.5745774851555  E_coul = 198.9410317194218
cycle= 1 E= -507.633545765734  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440606
diis-c [-0.19413322  1.        ]
  HOMO = -0.2364977096126  LUMO = 85.891633007876
  mo_energy =
[-1.20259897e+02 -1.22533047e+01 -6.65337098e+00 -6.65337098e+00
 -6.65337098e+00 -1.16366141e+00 -2.36497710e-01 -2.36497710e-01
 -2.36497710e-01  8.58916330e+01  6.73358692e+02  3.71393235e+03
  1.58595223e+04  5.42644775e+04]
E1 = -706.5429115347126  E_coul = 198.9089347316858
cycle= 2 E= -507.633976803027  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.0051419
diis-c [-2.64261630e-05  2.58756450e-04  9.99741244e-01]
  HOMO = -0.236674426864841  LUMO = 85.8881044490781
  mo_energy =
[-1.20268583e+02 -1.22545033e+01 -6.65522682e+00 -6.65522682e+00
 -6.65522682e+00 -1.16372673e+00 -2.36674427e-01 -2.36674427e-01
 -2.36674427e-01  8.58881044e+01  6.73348115e+02  3.71391674e+03
  1.58595040e+04  5.42644580e+04]
E1 = -706.542466796953  E_coul = 198.90848988244142
cycle= 3 E= -507.633976914512  delta_E= -1.11e-07  |g|= 9.89e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013455
diis-c [-4.07919609e-10  3.38961861e-05 -2.63622720e-02  1.02632838e+00]
  HOMO = -0.236676801744886  LUMO = 85.8880567040417
  mo_energy =
[-1.20268704e+02 -1.22545202e+01 -6.65525552e+00 -6.65525552e+00
 -6.65525552e+00 -1.16372744e+00 -2.36676802e-01 -2.36676802e-01
 -2.36676802e-01  8.58880567e+01  6.73347989e+02  3.71391659e+03
  1.58595038e+04  5.42644578e+04]
E1 = -706.5424591107661  E_coul = 198.9084821962104
cycle= 4 E= -507.633976914556  delta_E= -4.41e-11  |g|= 3.79e-07  |ddm|= 3.65e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5424591107661  E_coul = 198.9084821962104
  HOMO = -0.236676785147426  LUMO = 85.8880570453676
  mo_energy =
[-1.20268703e+02 -1.22545201e+01 -6.65525536e+00 -6.65525536e+00
 -6.65525536e+00 -1.16372744e+00 -2.36676785e-01 -2.36676785e-01
 -2.36676785e-01  8.58880570e+01  6.73347990e+02  3.71391659e+03
  1.58595038e+04  5.42644578e+04]
E1 = -706.5424591485169  E_coul = 198.90848223396122
Extra cycle  E= -507.633976914556  delta_E= 5.68e-14  |g|= 6.58e-09  |ddm|= 1.68e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198645e+03 1.83549669e+04 2.23180747e+03 4.58776713e+02
 1.21215425e+02 3.74882003e+01 4.74202408e+00 3.90997703e-01
 8.59853628e+00 4.90793198e-01]
E = -507.63397691455566
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:38 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98644785        1
[INPUT] 0    0    [1    /1   ]  18354.9669135        1
[INPUT] 0    0    [1    /1   ]  2231.80747006        1
[INPUT] 0    0    [1    /1   ]  458.776712602        1
[INPUT] 0    0    [1    /1   ]  121.2154245          1
[INPUT] 0    0    [1    /1   ]  37.4882002509        1
[INPUT] 0    0    [1    /1   ]  4.74202407939        1
[INPUT] 0    0    [1    /1   ]  0.390997702632       1
[INPUT] 1    0    [1    /1   ]  8.59853628202        1
[INPUT] 1    0    [1    /1   ]  0.490793197771       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.986447852745, 1.0]], [0, [18354.966913482676, 1.0]], [0, [2231.807470063003, 1.0]], [0, [458.7767126016855, 1.0]], [0, [121.21542450031674, 1.0]], [0, [37.488200250892696, 1.0]], [0, [4.742024079387207, 1.0]], [0, [0.3909977026316212, 1.0]], [1, [8.598536282015369, 1.0]], [1, [0.490793197770516, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98644785]
bas 1, expnt(s) = [18354.96691348]
bas 2, expnt(s) = [2231.80747006]
bas 3, expnt(s) = [458.7767126]
bas 4, expnt(s) = [121.2154245]
bas 5, expnt(s) = [37.48820025]
bas 6, expnt(s) = [4.74202408]
bas 7, expnt(s) = [0.3909977]
bas 8, expnt(s) = [8.59853628]
bas 9, expnt(s) = [0.4907932]
CPU time:       114.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198645e+03 2.00389614e+03 1.83549669e+04 3.98409998e+03
 2.23180747e+03 8.20365843e+02 4.58776713e+02 2.50447124e+02
 1.21215425e+02 9.22961189e+01 3.74882003e+01 3.82768304e+01
 4.74202408e+00 8.11872517e+00 3.90997703e-01 1.24923942e+00
 8.59853628e+00 4.29551315e+01 4.90793198e-01 1.19841590e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320066172568303
cond(S) = 85.57783599446888
E1 = -689.1270402216327  E_coul = 184.9114640775172
init E= -504.215576144116
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681046985180304  LUMO = 84.5593722856701
  mo_energy =
[-1.21648124e+02 -1.32813457e+01 -7.62184911e+00 -7.62184911e+00
 -7.62184911e+00 -1.65076604e+00 -6.81046985e-01 -6.81046985e-01
 -6.81046985e-01  8.45593723e+01  6.71986680e+02  3.71266841e+03
  1.58583715e+04  5.42634069e+04]
E1 = -706.5745774851555  E_coul = 198.9410317194218
cycle= 1 E= -507.633545765734  delta_E= -3.42  |g|= 0.317  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440606
diis-c [-0.19413322  1.        ]
  HOMO = -0.2364977096126  LUMO = 85.891633007876
  mo_energy =
[-1.20259897e+02 -1.22533047e+01 -6.65337098e+00 -6.65337098e+00
 -6.65337098e+00 -1.16366141e+00 -2.36497710e-01 -2.36497710e-01
 -2.36497710e-01  8.58916330e+01  6.73358692e+02  3.71393235e+03
  1.58595223e+04  5.42644775e+04]
E1 = -706.5429115347126  E_coul = 198.9089347316858
cycle= 2 E= -507.633976803027  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.0051419
diis-c [-2.64261630e-05  2.58756450e-04  9.99741244e-01]
  HOMO = -0.236674426864841  LUMO = 85.8881044490781
  mo_energy =
[-1.20268583e+02 -1.22545033e+01 -6.65522682e+00 -6.65522682e+00
 -6.65522682e+00 -1.16372673e+00 -2.36674427e-01 -2.36674427e-01
 -2.36674427e-01  8.58881044e+01  6.73348115e+02  3.71391674e+03
  1.58595040e+04  5.42644580e+04]
E1 = -706.542466796953  E_coul = 198.90848988244142
cycle= 3 E= -507.633976914512  delta_E= -1.11e-07  |g|= 9.89e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013455
diis-c [-4.07919609e-10  3.38961861e-05 -2.63622720e-02  1.02632838e+00]
  HOMO = -0.236676801744886  LUMO = 85.8880567040417
  mo_energy =
[-1.20268704e+02 -1.22545202e+01 -6.65525552e+00 -6.65525552e+00
 -6.65525552e+00 -1.16372744e+00 -2.36676802e-01 -2.36676802e-01
 -2.36676802e-01  8.58880567e+01  6.73347989e+02  3.71391659e+03
  1.58595038e+04  5.42644578e+04]
E1 = -706.5424591107661  E_coul = 198.9084821962104
cycle= 4 E= -507.633976914556  delta_E= -4.41e-11  |g|= 3.79e-07  |ddm|= 3.65e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5424591107661  E_coul = 198.9084821962104
  HOMO = -0.236676785147426  LUMO = 85.8880570453676
  mo_energy =
[-1.20268703e+02 -1.22545201e+01 -6.65525536e+00 -6.65525536e+00
 -6.65525536e+00 -1.16372744e+00 -2.36676785e-01 -2.36676785e-01
 -2.36676785e-01  8.58880570e+01  6.73347990e+02  3.71391659e+03
  1.58595038e+04  5.42644578e+04]
E1 = -706.5424591485169  E_coul = 198.90848223396122
Extra cycle  E= -507.633976914556  delta_E= 5.68e-14  |g|= 6.58e-09  |ddm|= 1.68e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.57783599446888
E1 = -706.5424591485169  E_coul = 198.90848223396122
init E= -507.633976914556
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236676784952422  LUMO = 85.8880570495616
  mo_energy =
[-1.20268703e+02 -1.22545201e+01 -6.65525536e+00 -6.65525536e+00
 -6.65525536e+00 -1.16372744e+00 -2.36676785e-01 -2.36676785e-01
 -2.36676785e-01  8.58880570e+01  6.73347990e+02  3.71391659e+03
  1.58595038e+04  5.42644578e+04]
E1 = -706.5424591490911  E_coul = 198.9084822345351
cycle= 1 E= -507.633976914556  delta_E= -3.41e-13  |g|= 1.31e-10  |ddm|= 2.61e-10
    CPU time for cycle= 1      0.13 sec, wall time      0.01 sec
E1 = -706.5424591490911  E_coul = 198.9084822345351
  HOMO = -0.236676784949659  LUMO = 85.8880570496214
  mo_energy =
[-1.20268703e+02 -1.22545201e+01 -6.65525536e+00 -6.65525536e+00
 -6.65525536e+00 -1.16372744e+00 -2.36676785e-01 -2.36676785e-01
 -2.36676785e-01  8.58880570e+01  6.73347990e+02  3.71391659e+03
  1.58595038e+04  5.42644578e+04]
E1 = -706.542459149101  E_coul = 198.90848223454512
Extra cycle  E= -507.633976914556  delta_E= 1.14e-13  |g|= 1.45e-11  |ddm|= 4.68e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34198645e+03 1.83549669e+04 2.23180747e+03 4.58776713e+02
 1.21215425e+02 3.74882003e+01 4.74202408e+00 3.90997703e-01
 8.59853628e+00 4.90793198e-01]
grad_E = [-5.07161522e-07 -1.58042343e-06  1.00704241e-04 -2.44059424e-04
  9.76845386e-06  1.59310141e-04  1.18385119e-03 -3.39017712e-03
  3.24426868e-05 -2.44301700e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:41 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98761807        1
[INPUT] 0    0    [1    /1   ]  18354.9706986        1
[INPUT] 0    0    [1    /1   ]  2231.57262445        1
[INPUT] 0    0    [1    /1   ]  459.236852715        1
[INPUT] 0    0    [1    /1   ]  121.598829345        1
[INPUT] 0    0    [1    /1   ]  37.6010626588        1
[INPUT] 0    0    [1    /1   ]  4.74291680541        1
[INPUT] 0    0    [1    /1   ]  0.390904980369       1
[INPUT] 1    0    [1    /1   ]  8.59841101497        1
[INPUT] 1    0    [1    /1   ]  0.490756058891       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.987618065343, 1.0]], [0, [18354.97069855577, 1.0]], [0, [2231.5726244501952, 1.0]], [0, [459.23685271450955, 1.0]], [0, [121.59882934490072, 1.0]], [0, [37.60106265877995, 1.0]], [0, [4.742916805409646, 1.0]], [0, [0.39090498036866417, 1.0]], [1, [8.598411014967633, 1.0]], [1, [0.49075605889123886, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98761807]
bas 1, expnt(s) = [18354.97069856]
bas 2, expnt(s) = [2231.57262445]
bas 3, expnt(s) = [459.23685271]
bas 4, expnt(s) = [121.59882934]
bas 5, expnt(s) = [37.60106266]
bas 6, expnt(s) = [4.74291681]
bas 7, expnt(s) = [0.39090498]
bas 8, expnt(s) = [8.59841101]
bas 9, expnt(s) = [0.49075606]
CPU time:       118.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198762e+03 2.00389638e+03 1.83549707e+04 3.98410060e+03
 2.23157262e+03 8.20301098e+02 4.59236853e+02 2.50635493e+02
 1.21598829e+02 9.25149822e+01 3.76010627e+01 3.83632254e+01
 4.74291681e+00 8.11987146e+00 3.90904980e-01 1.24901722e+00
 8.59841101e+00 4.29543492e+01 4.90756059e-01 1.19830254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320104596498204
cond(S) = 85.73105520832576
E1 = -689.1241212954574  E_coul = 184.90955423860606
init E= -504.214567056851
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681133483523353  LUMO = 84.9613131160848
  mo_energy =
[-1.21648157e+02 -1.32816796e+01 -7.62194755e+00 -7.62194755e+00
 -7.62194755e+00 -1.65084855e+00 -6.81133484e-01 -6.81133484e-01
 -6.81133484e-01  8.49613131e+01  6.73803695e+02  3.71560085e+03
  1.58610462e+04  5.42657504e+04]
E1 = -706.5731886490497  E_coul = 198.93954882176345
cycle= 1 E= -507.633639827286  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440797
diis-c [-0.19430224  1.        ]
  HOMO = -0.236611397950392  LUMO = 86.2941556230782
  mo_energy =
[-1.20259692e+02 -1.22536083e+01 -6.65344757e+00 -6.65344757e+00
 -6.65344757e+00 -1.16377919e+00 -2.36611398e-01 -2.36611398e-01
 -2.36611398e-01  8.62941556e+01  6.75176122e+02  3.71686556e+03
  1.58621978e+04  5.42668220e+04]
E1 = -706.5417539859824  E_coul = 198.90768658032482
cycle= 2 E= -507.634067405658  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511894
diis-c [-2.61930151e-05  2.32807897e-04  9.99767192e-01]
  HOMO = -0.236786589122351  LUMO = 86.2906438381673
  mo_energy =
[-1.20268321e+02 -1.22547971e+01 -6.65528817e+00 -6.65528817e+00
 -6.65528817e+00 -1.16384394e+00 -2.36786589e-01 -2.36786589e-01
 -2.36786589e-01  8.62906438e+01  6.75165605e+02  3.71685004e+03
  1.58621797e+04  5.42668026e+04]
E1 = -706.5413137530518  E_coul = 198.90724623733118
cycle= 3 E= -507.634067515721  delta_E= -1.1e-07  |g|= 9.81e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013354
diis-c [-4.01802703e-10  3.40093337e-05 -2.62817736e-02  1.02624776e+00]
  HOMO = -0.236788932688938  LUMO = 86.2905965832903
  mo_energy =
[-1.20268441e+02 -1.22548138e+01 -6.65531652e+00 -6.65531652e+00
 -6.65531652e+00 -1.16384465e+00 -2.36788933e-01 -2.36788933e-01
 -2.36788933e-01  8.62905966e+01  6.75165480e+02  3.71684989e+03
  1.58621795e+04  5.42668024e+04]
E1 = -706.5413061774858  E_coul = 198.90723866172235
cycle= 4 E= -507.634067515763  delta_E= -4.29e-11  |g|= 3.75e-07  |ddm|= 3.6e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5413061774858  E_coul = 198.90723866172235
  HOMO = -0.236788916352241  LUMO = 86.290596921143
  mo_energy =
[-1.20268440e+02 -1.22548137e+01 -6.65531635e+00 -6.65531635e+00
 -6.65531635e+00 -1.16384464e+00 -2.36788916e-01 -2.36788916e-01
 -2.36788916e-01  8.62905969e+01  6.75165481e+02  3.71684989e+03
  1.58621795e+04  5.42668024e+04]
E1 = -706.5413062146345  E_coul = 198.9072386988713
Extra cycle  E= -507.634067515763  delta_E= 3.41e-13  |g|= 6.49e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34198762e+03 1.83549707e+04 2.23157262e+03 4.59236853e+02
 1.21598829e+02 3.76010627e+01 4.74291681e+00 3.90904980e-01
 8.59841101e+00 4.90756059e-01]
E = -507.63406751576315
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:41 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.98761807        1
[INPUT] 0    0    [1    /1   ]  18354.9706986        1
[INPUT] 0    0    [1    /1   ]  2231.57262445        1
[INPUT] 0    0    [1    /1   ]  459.236852715        1
[INPUT] 0    0    [1    /1   ]  121.598829345        1
[INPUT] 0    0    [1    /1   ]  37.6010626588        1
[INPUT] 0    0    [1    /1   ]  4.74291680541        1
[INPUT] 0    0    [1    /1   ]  0.390904980369       1
[INPUT] 1    0    [1    /1   ]  8.59841101497        1
[INPUT] 1    0    [1    /1   ]  0.490756058891       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.987618065343, 1.0]], [0, [18354.97069855577, 1.0]], [0, [2231.5726244501952, 1.0]], [0, [459.23685271450955, 1.0]], [0, [121.59882934490072, 1.0]], [0, [37.60106265877995, 1.0]], [0, [4.742916805409646, 1.0]], [0, [0.39090498036866417, 1.0]], [1, [8.598411014967633, 1.0]], [1, [0.49075605889123886, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.98761807]
bas 1, expnt(s) = [18354.97069856]
bas 2, expnt(s) = [2231.57262445]
bas 3, expnt(s) = [459.23685271]
bas 4, expnt(s) = [121.59882934]
bas 5, expnt(s) = [37.60106266]
bas 6, expnt(s) = [4.74291681]
bas 7, expnt(s) = [0.39090498]
bas 8, expnt(s) = [8.59841101]
bas 9, expnt(s) = [0.49075606]
CPU time:       118.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198762e+03 2.00389638e+03 1.83549707e+04 3.98410060e+03
 2.23157262e+03 8.20301098e+02 4.59236853e+02 2.50635493e+02
 1.21598829e+02 9.25149822e+01 3.76010627e+01 3.83632254e+01
 4.74291681e+00 8.11987146e+00 3.90904980e-01 1.24901722e+00
 8.59841101e+00 4.29543492e+01 4.90756059e-01 1.19830254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320104596498204
cond(S) = 85.73105520832576
E1 = -689.1241212954574  E_coul = 184.90955423860606
init E= -504.214567056851
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681133483523353  LUMO = 84.9613131160848
  mo_energy =
[-1.21648157e+02 -1.32816796e+01 -7.62194755e+00 -7.62194755e+00
 -7.62194755e+00 -1.65084855e+00 -6.81133484e-01 -6.81133484e-01
 -6.81133484e-01  8.49613131e+01  6.73803695e+02  3.71560085e+03
  1.58610462e+04  5.42657504e+04]
E1 = -706.5731886490497  E_coul = 198.93954882176345
cycle= 1 E= -507.633639827286  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440797
diis-c [-0.19430224  1.        ]
  HOMO = -0.236611397950392  LUMO = 86.2941556230782
  mo_energy =
[-1.20259692e+02 -1.22536083e+01 -6.65344757e+00 -6.65344757e+00
 -6.65344757e+00 -1.16377919e+00 -2.36611398e-01 -2.36611398e-01
 -2.36611398e-01  8.62941556e+01  6.75176122e+02  3.71686556e+03
  1.58621978e+04  5.42668220e+04]
E1 = -706.5417539859824  E_coul = 198.90768658032482
cycle= 2 E= -507.634067405658  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00511894
diis-c [-2.61930151e-05  2.32807897e-04  9.99767192e-01]
  HOMO = -0.236786589122351  LUMO = 86.2906438381673
  mo_energy =
[-1.20268321e+02 -1.22547971e+01 -6.65528817e+00 -6.65528817e+00
 -6.65528817e+00 -1.16384394e+00 -2.36786589e-01 -2.36786589e-01
 -2.36786589e-01  8.62906438e+01  6.75165605e+02  3.71685004e+03
  1.58621797e+04  5.42668026e+04]
E1 = -706.5413137530518  E_coul = 198.90724623733118
cycle= 3 E= -507.634067515721  delta_E= -1.1e-07  |g|= 9.81e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00013354
diis-c [-4.01802703e-10  3.40093337e-05 -2.62817736e-02  1.02624776e+00]
  HOMO = -0.236788932688938  LUMO = 86.2905965832903
  mo_energy =
[-1.20268441e+02 -1.22548138e+01 -6.65531652e+00 -6.65531652e+00
 -6.65531652e+00 -1.16384465e+00 -2.36788933e-01 -2.36788933e-01
 -2.36788933e-01  8.62905966e+01  6.75165480e+02  3.71684989e+03
  1.58621795e+04  5.42668024e+04]
E1 = -706.5413061774858  E_coul = 198.90723866172235
cycle= 4 E= -507.634067515763  delta_E= -4.29e-11  |g|= 3.75e-07  |ddm|= 3.6e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5413061774858  E_coul = 198.90723866172235
  HOMO = -0.236788916352241  LUMO = 86.290596921143
  mo_energy =
[-1.20268440e+02 -1.22548137e+01 -6.65531635e+00 -6.65531635e+00
 -6.65531635e+00 -1.16384464e+00 -2.36788916e-01 -2.36788916e-01
 -2.36788916e-01  8.62905969e+01  6.75165481e+02  3.71684989e+03
  1.58621795e+04  5.42668024e+04]
E1 = -706.5413062146345  E_coul = 198.9072386988713
Extra cycle  E= -507.634067515763  delta_E= 3.41e-13  |g|= 6.49e-09  |ddm|= 1.65e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.73105520832576
E1 = -706.5413062146345  E_coul = 198.9072386988713
init E= -507.634067515763
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236788916160781  LUMO = 86.2905969252808
  mo_energy =
[-1.20268440e+02 -1.22548137e+01 -6.65531635e+00 -6.65531635e+00
 -6.65531635e+00 -1.16384464e+00 -2.36788916e-01 -2.36788916e-01
 -2.36788916e-01  8.62905969e+01  6.75165481e+02  3.71684989e+03
  1.58621795e+04  5.42668024e+04]
E1 = -706.541306215198  E_coul = 198.90723869943488
cycle= 1 E= -507.634067515763  delta_E=    0  |g|= 1.3e-10  |ddm|= 2.56e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.541306215198  E_coul = 198.90723869943488
  HOMO = -0.236788916158071  LUMO = 86.2905969253402
  mo_energy =
[-1.20268440e+02 -1.22548137e+01 -6.65531635e+00 -6.65531635e+00
 -6.65531635e+00 -1.16384464e+00 -2.36788916e-01 -2.36788916e-01
 -2.36788916e-01  8.62905969e+01  6.75165481e+02  3.71684989e+03
  1.58621795e+04  5.42668024e+04]
E1 = -706.5413062152072  E_coul = 198.90723869944435
Extra cycle  E= -507.634067515763  delta_E= 2.84e-13  |g|= 2.09e-11  |ddm|= 4.55e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34198762e+03 1.83549707e+04 2.23157262e+03 4.59236853e+02
 1.21598829e+02 3.76010627e+01 4.74291681e+00 3.90904980e-01
 8.59841101e+00 4.90756059e-01]
grad_E = [-5.09135709e-07 -1.57947884e-06  1.01064402e-04 -2.68756464e-04
  1.15078807e-04  2.87908513e-04  1.86928478e-03 -5.30701090e-03
  4.55485837e-05 -3.79795120e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.9907303         1
[INPUT] 0    0    [1    /1   ]  18354.9806359        1
[INPUT] 0    0    [1    /1   ]  2230.95026114        1
[INPUT] 0    0    [1    /1   ]  460.534150235        1
[INPUT] 0    0    [1    /1   ]  122.311671412        1
[INPUT] 0    0    [1    /1   ]  37.791368957         1
[INPUT] 0    0    [1    /1   ]  4.74425225335        1
[INPUT] 0    0    [1    /1   ]  0.390783528131       1
[INPUT] 1    0    [1    /1   ]  8.59822726279        1
[INPUT] 1    0    [1    /1   ]  0.490704541602       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.990730299241, 1.0]], [0, [18354.98063594255, 1.0]], [0, [2230.950261139836, 1.0]], [0, [460.53415023472354, 1.0]], [0, [122.31167141211846, 1.0]], [0, [37.791368956996216, 1.0]], [0, [4.744252253348562, 1.0]], [0, [0.3907835281305611, 1.0]], [1, [8.598227262790793, 1.0]], [1, [0.49070454160244215, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.9907303]
bas 1, expnt(s) = [18354.98063594]
bas 2, expnt(s) = [2230.95026114]
bas 3, expnt(s) = [460.53415023]
bas 4, expnt(s) = [122.31167141]
bas 5, expnt(s) = [37.79136896]
bas 6, expnt(s) = [4.74425225]
bas 7, expnt(s) = [0.39078353]
bas 8, expnt(s) = [8.59822726]
bas 9, expnt(s) = [0.49070454]
CPU time:       122.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34199073e+03 2.00389701e+03 1.83549806e+04 3.98410222e+03
 2.23095026e+03 8.20129512e+02 4.60534150e+02 2.51166321e+02
 1.22311671e+02 9.29214440e+01 3.77913690e+01 3.85087563e+01
 4.74425225e+00 8.12158612e+00 3.90783528e-01 1.24872616e+00
 8.59822726e+00 4.29532018e+01 4.90704542e-01 1.19814530e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320152994637915
cond(S) = 86.01588575928743
E1 = -689.1204039010308  E_coul = 184.90707000155157
init E= -504.213333899479
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681251562563129  LUMO = 85.6669141788575
  mo_energy =
[-1.21648215e+02 -1.32821461e+01 -7.62206719e+00 -7.62206719e+00
 -7.62206719e+00 -1.65096894e+00 -6.81251563e-01 -6.81251563e-01
 -6.81251563e-01  8.56669142e+01  6.77451977e+02  3.72212523e+03
  1.58670277e+04  5.42709404e+04]
E1 = -706.5716031278535  E_coul = 198.9377417842895
cycle= 1 E= -507.633861343564  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440959
diis-c [-0.19444482  1.        ]
  HOMO = -0.236763258234404  LUMO = 87.000744831464
  mo_energy =
[-1.20259421e+02 -1.22540233e+01 -6.65353123e+00 -6.65353123e+00
 -6.65353123e+00 -1.16394021e+00 -2.36763258e-01 -2.36763258e-01
 -2.36763258e-01  8.70007448e+01  6.78824970e+02  3.72339108e+03
  1.58681808e+04  5.42720134e+04]
E1 = -706.5405624864475  E_coul = 198.9062794090952
cycle= 2 E= -507.634283077352  delta_E= -0.000422  |g|= 0.00471  |ddm|= 0.0141
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00508148
diis-c [-2.58144710e-05  1.89072712e-04  9.99810927e-01]
  HOMO = -0.236935844480105  LUMO = 86.9972611701129
  mo_energy =
[-1.20267955e+02 -1.22551953e+01 -6.65534580e+00 -6.65534580e+00
 -6.65534580e+00 -1.16400400e+00 -2.36935844e-01 -2.36935844e-01
 -2.36935844e-01  8.69972612e+01  6.78814554e+02  3.72337572e+03
  1.58681628e+04  5.42719942e+04]
E1 = -706.5401299521959  E_coul = 198.90584676718498
cycle= 3 E= -507.634283185011  delta_E= -1.08e-07  |g|= 9.68e-05  |ddm|= 0.000199
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000131851
diis-c [-3.91627737e-10  3.41748037e-05 -2.61413604e-02  1.02610719e+00]
  HOMO = -0.236938134944015  LUMO = 86.997214748168
  mo_energy =
[-1.20268072e+02 -1.22552116e+01 -6.65537354e+00 -6.65537354e+00
 -6.65537354e+00 -1.16400469e+00 -2.36938135e-01 -2.36938135e-01
 -2.36938135e-01  8.69972147e+01  6.78814431e+02  3.72337557e+03
  1.58681626e+04  5.42719940e+04]
E1 = -706.540122564678  E_coul = 198.9058393796255
cycle= 4 E= -507.634283185052  delta_E= -4.16e-11  |g|= 3.68e-07  |ddm|= 3.52e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.540122564678  E_coul = 198.9058393796255
  HOMO = -0.23693811904978  LUMO = 86.9972150801526
  mo_energy =
[-1.20268071e+02 -1.22552115e+01 -6.65537338e+00 -6.65537338e+00
 -6.65537338e+00 -1.16400468e+00 -2.36938119e-01 -2.36938119e-01
 -2.36938119e-01  8.69972151e+01  6.78814432e+02  3.72337557e+03
  1.58681626e+04  5.42719940e+04]
E1 = -706.5401226008046  E_coul = 198.90583941575244
Extra cycle  E= -507.634283185052  delta_E= 3.41e-13  |g|= 6.35e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34199073e+03 1.83549806e+04 2.23095026e+03 4.60534150e+02
 1.22311671e+02 3.77913690e+01 4.74425225e+00 3.90783528e-01
 8.59822726e+00 4.90704542e-01]
E = -507.63428318505214
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.9907303         1
[INPUT] 0    0    [1    /1   ]  18354.9806359        1
[INPUT] 0    0    [1    /1   ]  2230.95026114        1
[INPUT] 0    0    [1    /1   ]  460.534150235        1
[INPUT] 0    0    [1    /1   ]  122.311671412        1
[INPUT] 0    0    [1    /1   ]  37.791368957         1
[INPUT] 0    0    [1    /1   ]  4.74425225335        1
[INPUT] 0    0    [1    /1   ]  0.390783528131       1
[INPUT] 1    0    [1    /1   ]  8.59822726279        1
[INPUT] 1    0    [1    /1   ]  0.490704541602       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.990730299241, 1.0]], [0, [18354.98063594255, 1.0]], [0, [2230.950261139836, 1.0]], [0, [460.53415023472354, 1.0]], [0, [122.31167141211846, 1.0]], [0, [37.791368956996216, 1.0]], [0, [4.744252253348562, 1.0]], [0, [0.3907835281305611, 1.0]], [1, [8.598227262790793, 1.0]], [1, [0.49070454160244215, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.9907303]
bas 1, expnt(s) = [18354.98063594]
bas 2, expnt(s) = [2230.95026114]
bas 3, expnt(s) = [460.53415023]
bas 4, expnt(s) = [122.31167141]
bas 5, expnt(s) = [37.79136896]
bas 6, expnt(s) = [4.74425225]
bas 7, expnt(s) = [0.39078353]
bas 8, expnt(s) = [8.59822726]
bas 9, expnt(s) = [0.49070454]
CPU time:       122.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34199073e+03 2.00389701e+03 1.83549806e+04 3.98410222e+03
 2.23095026e+03 8.20129512e+02 4.60534150e+02 2.51166321e+02
 1.22311671e+02 9.29214440e+01 3.77913690e+01 3.85087563e+01
 4.74425225e+00 8.12158612e+00 3.90783528e-01 1.24872616e+00
 8.59822726e+00 4.29532018e+01 4.90704542e-01 1.19814530e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320152994637915
cond(S) = 86.01588575928743
E1 = -689.1204039010308  E_coul = 184.90707000155157
init E= -504.213333899479
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681251562563129  LUMO = 85.6669141788575
  mo_energy =
[-1.21648215e+02 -1.32821461e+01 -7.62206719e+00 -7.62206719e+00
 -7.62206719e+00 -1.65096894e+00 -6.81251563e-01 -6.81251563e-01
 -6.81251563e-01  8.56669142e+01  6.77451977e+02  3.72212523e+03
  1.58670277e+04  5.42709404e+04]
E1 = -706.5716031278535  E_coul = 198.9377417842895
cycle= 1 E= -507.633861343564  delta_E= -3.42  |g|= 0.316  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440959
diis-c [-0.19444482  1.        ]
  HOMO = -0.236763258234404  LUMO = 87.000744831464
  mo_energy =
[-1.20259421e+02 -1.22540233e+01 -6.65353123e+00 -6.65353123e+00
 -6.65353123e+00 -1.16394021e+00 -2.36763258e-01 -2.36763258e-01
 -2.36763258e-01  8.70007448e+01  6.78824970e+02  3.72339108e+03
  1.58681808e+04  5.42720134e+04]
E1 = -706.5405624864475  E_coul = 198.9062794090952
cycle= 2 E= -507.634283077352  delta_E= -0.000422  |g|= 0.00471  |ddm|= 0.0141
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00508148
diis-c [-2.58144710e-05  1.89072712e-04  9.99810927e-01]
  HOMO = -0.236935844480105  LUMO = 86.9972611701129
  mo_energy =
[-1.20267955e+02 -1.22551953e+01 -6.65534580e+00 -6.65534580e+00
 -6.65534580e+00 -1.16400400e+00 -2.36935844e-01 -2.36935844e-01
 -2.36935844e-01  8.69972612e+01  6.78814554e+02  3.72337572e+03
  1.58681628e+04  5.42719942e+04]
E1 = -706.5401299521959  E_coul = 198.90584676718498
cycle= 3 E= -507.634283185011  delta_E= -1.08e-07  |g|= 9.68e-05  |ddm|= 0.000199
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000131851
diis-c [-3.91627737e-10  3.41748037e-05 -2.61413604e-02  1.02610719e+00]
  HOMO = -0.236938134944015  LUMO = 86.997214748168
  mo_energy =
[-1.20268072e+02 -1.22552116e+01 -6.65537354e+00 -6.65537354e+00
 -6.65537354e+00 -1.16400469e+00 -2.36938135e-01 -2.36938135e-01
 -2.36938135e-01  8.69972147e+01  6.78814431e+02  3.72337557e+03
  1.58681626e+04  5.42719940e+04]
E1 = -706.540122564678  E_coul = 198.9058393796255
cycle= 4 E= -507.634283185052  delta_E= -4.16e-11  |g|= 3.68e-07  |ddm|= 3.52e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.540122564678  E_coul = 198.9058393796255
  HOMO = -0.23693811904978  LUMO = 86.9972150801526
  mo_energy =
[-1.20268071e+02 -1.22552115e+01 -6.65537338e+00 -6.65537338e+00
 -6.65537338e+00 -1.16400468e+00 -2.36938119e-01 -2.36938119e-01
 -2.36938119e-01  8.69972151e+01  6.78814432e+02  3.72337557e+03
  1.58681626e+04  5.42719940e+04]
E1 = -706.5401226008046  E_coul = 198.90583941575244
Extra cycle  E= -507.634283185052  delta_E= 3.41e-13  |g|= 6.35e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 86.01588575928743
E1 = -706.5401226008046  E_coul = 198.90583941575244
init E= -507.634283185052
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236938118864315  LUMO = 86.9972150842
  mo_energy =
[-1.20268071e+02 -1.22552115e+01 -6.65537338e+00 -6.65537338e+00
 -6.65537338e+00 -1.16400468e+00 -2.36938119e-01 -2.36938119e-01
 -2.36938119e-01  8.69972151e+01  6.78814432e+02  3.72337557e+03
  1.58681626e+04  5.42719940e+04]
E1 = -706.5401226013496  E_coul = 198.90583941629697
cycle= 1 E= -507.634283185053  delta_E= -4.55e-13  |g|= 1.26e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5401226013496  E_coul = 198.90583941629697
  HOMO = -0.236938118861701  LUMO = 86.9972150842578
  mo_energy =
[-1.20268071e+02 -1.22552115e+01 -6.65537338e+00 -6.65537338e+00
 -6.65537338e+00 -1.16400468e+00 -2.36938119e-01 -2.36938119e-01
 -2.36938119e-01  8.69972151e+01  6.78814432e+02  3.72337557e+03
  1.58681626e+04  5.42719940e+04]
E1 = -706.5401226013585  E_coul = 198.9058394163063
Extra cycle  E= -507.634283185052  delta_E= 4.55e-13  |g|= 1.21e-11  |ddm|= 4.4e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34199073e+03 1.83549806e+04 2.23095026e+03 4.60534150e+02
 1.22311671e+02 3.77913690e+01 4.74425225e+00 3.90783528e-01
 8.59822726e+00 4.90704542e-01]
grad_E = [-5.00656142e-07 -1.58967965e-06  1.00316982e-04 -2.93333691e-04
  2.64101160e-04  4.70918827e-04  2.80995424e-03 -7.91279599e-03
  6.34992101e-05 -5.62888978e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:46 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.99781103        1
[INPUT] 0    0    [1    /1   ]  18355.0030709        1
[INPUT] 0    0    [1    /1   ]  2229.53729253        1
[INPUT] 0    0    [1    /1   ]  463.584695363        1
[INPUT] 0    0    [1    /1   ]  123.520360948        1
[INPUT] 0    0    [1    /1   ]  38.0755071614        1
[INPUT] 0    0    [1    /1   ]  4.74588647635        1
[INPUT] 0    0    [1    /1   ]  0.390674895078       1
[INPUT] 1    0    [1    /1   ]  8.59800914059        1
[INPUT] 1    0    [1    /1   ]  0.49065072591        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.997811027799, 1.0]], [0, [18355.003070859097, 1.0]], [0, [2229.53729253101, 1.0]], [0, [463.58469536292085, 1.0]], [0, [123.52036094765936, 1.0]], [0, [38.075507161386945, 1.0]], [0, [4.745886476347852, 1.0]], [0, [0.39067489507828096, 1.0]], [1, [8.598009140589326, 1.0]], [1, [0.4906507259103399, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.99781103]
bas 1, expnt(s) = [18355.00307086]
bas 2, expnt(s) = [2229.53729253]
bas 3, expnt(s) = [463.58469536]
bas 4, expnt(s) = [123.52036095]
bas 5, expnt(s) = [38.07550716]
bas 6, expnt(s) = [4.74588648]
bas 7, expnt(s) = [0.3906749]
bas 8, expnt(s) = [8.59800914]
bas 9, expnt(s) = [0.49065073]
CPU time:       126.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34199781e+03 2.00389846e+03 1.83550031e+04 3.98410587e+03
 2.22953729e+03 8.19739910e+02 4.63584695e+02 2.52413072e+02
 1.23520361e+02 9.36092872e+01 3.80755072e+01 3.87257018e+01
 4.74588648e+00 8.12368422e+00 3.90674895e-01 1.24846581e+00
 8.59800914e+00 4.29518398e+01 4.90650726e-01 1.19798105e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320191501935604
cond(S) = 86.49959087533013
E1 = -689.1173160510565  E_coul = 184.90488992254024
init E= -504.212426128516
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681369829938969  LUMO = 86.7822971880984
  mo_energy =
[-1.21648304e+02 -1.32826422e+01 -7.62214962e+00 -7.62214962e+00
 -7.62214962e+00 -1.65110959e+00 -6.81369830e-01 -6.81369830e-01
 -6.81369830e-01  8.67822972e+01  6.84155520e+02  3.73524062e+03
  1.58791113e+04  5.42813463e+04]
E1 = -706.5707899697538  E_coul = 198.93647196804002
cycle= 1 E= -507.634318001714  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440868
diis-c [-0.19436454  1.        ]
  HOMO = -0.236907133545571  LUMO = 88.1176141758004
  mo_energy =
[-1.20259173e+02 -1.22544424e+01 -6.65356245e+00 -6.65356245e+00
 -6.65356245e+00 -1.16410257e+00 -2.36907134e-01 -2.36907134e-01
 -2.36907134e-01  8.81176142e+01  6.85529080e+02  3.73650788e+03
  1.58802663e+04  5.42824214e+04]
E1 = -706.5403452295224  E_coul = 198.90561423552347
cycle= 2 E= -507.634730993999  delta_E= -0.000413  |g|= 0.00465  |ddm|= 0.0139
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00502813
diis-c [-2.52790979e-05  1.23903615e-04  9.99876096e-01]
  HOMO = -0.237075772000806  LUMO = 88.1141721506373
  mo_energy =
[-1.20267563e+02 -1.22555889e+01 -6.65533754e+00 -6.65533754e+00
 -6.65533754e+00 -1.16416490e+00 -2.37075772e-01 -2.37075772e-01
 -2.37075772e-01  8.81141722e+01  6.85518807e+02  3.73649274e+03
  1.58802485e+04  5.42824024e+04]
E1 = -706.5399243769095  E_coul = 198.90519327884735
cycle= 3 E= -507.634731098062  delta_E= -1.04e-07  |g|= 9.48e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00012936
diis-c [-3.76751260e-10  3.43683027e-05 -2.59217989e-02  1.02588743e+00]
  HOMO = -0.23707798281031  LUMO = 88.1141269836873
  mo_energy =
[-1.20267677e+02 -1.22556047e+01 -6.65536437e+00 -6.65536437e+00
 -6.65536437e+00 -1.16416557e+00 -2.37077983e-01 -2.37077983e-01
 -2.37077983e-01  8.81141270e+01  6.85518689e+02  3.73649259e+03
  1.58802484e+04  5.42824022e+04]
E1 = -706.5399172722902  E_coul = 198.90518617418817
cycle= 4 E= -507.634731098102  delta_E= -3.98e-11  |g|= 3.58e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5399172722902  E_coul = 198.90518617418817
  HOMO = -0.237077967579742  LUMO = 88.1141273069198
  mo_energy =
[-1.20267676e+02 -1.22556046e+01 -6.65536421e+00 -6.65536421e+00
 -6.65536421e+00 -1.16416556e+00 -2.37077968e-01 -2.37077968e-01
 -2.37077968e-01  8.81141273e+01  6.85518690e+02  3.73649259e+03
  1.58802484e+04  5.42824022e+04]
E1 = -706.5399173068769  E_coul = 198.90518620877526
Extra cycle  E= -507.634731098102  delta_E= 3.41e-13  |g|= 6.12e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34199781e+03 1.83550031e+04 2.22953729e+03 4.63584695e+02
 1.23520361e+02 3.80755072e+01 4.74588648e+00 3.90674895e-01
 8.59800914e+00 4.90650726e-01]
E = -507.6347310981016
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7341.99781103        1
[INPUT] 0    0    [1    /1   ]  18355.0030709        1
[INPUT] 0    0    [1    /1   ]  2229.53729253        1
[INPUT] 0    0    [1    /1   ]  463.584695363        1
[INPUT] 0    0    [1    /1   ]  123.520360948        1
[INPUT] 0    0    [1    /1   ]  38.0755071614        1
[INPUT] 0    0    [1    /1   ]  4.74588647635        1
[INPUT] 0    0    [1    /1   ]  0.390674895078       1
[INPUT] 1    0    [1    /1   ]  8.59800914059        1
[INPUT] 1    0    [1    /1   ]  0.49065072591        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7341.997811027799, 1.0]], [0, [18355.003070859097, 1.0]], [0, [2229.53729253101, 1.0]], [0, [463.58469536292085, 1.0]], [0, [123.52036094765936, 1.0]], [0, [38.075507161386945, 1.0]], [0, [4.745886476347852, 1.0]], [0, [0.39067489507828096, 1.0]], [1, [8.598009140589326, 1.0]], [1, [0.4906507259103399, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7341.99781103]
bas 1, expnt(s) = [18355.00307086]
bas 2, expnt(s) = [2229.53729253]
bas 3, expnt(s) = [463.58469536]
bas 4, expnt(s) = [123.52036095]
bas 5, expnt(s) = [38.07550716]
bas 6, expnt(s) = [4.74588648]
bas 7, expnt(s) = [0.3906749]
bas 8, expnt(s) = [8.59800914]
bas 9, expnt(s) = [0.49065073]
CPU time:       127.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34199781e+03 2.00389846e+03 1.83550031e+04 3.98410587e+03
 2.22953729e+03 8.19739910e+02 4.63584695e+02 2.52413072e+02
 1.23520361e+02 9.36092872e+01 3.80755072e+01 3.87257018e+01
 4.74588648e+00 8.12368422e+00 3.90674895e-01 1.24846581e+00
 8.59800914e+00 4.29518398e+01 4.90650726e-01 1.19798105e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320191501935604
cond(S) = 86.49959087533013
E1 = -689.1173160510565  E_coul = 184.90488992254024
init E= -504.212426128516
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681369829938969  LUMO = 86.7822971880984
  mo_energy =
[-1.21648304e+02 -1.32826422e+01 -7.62214962e+00 -7.62214962e+00
 -7.62214962e+00 -1.65110959e+00 -6.81369830e-01 -6.81369830e-01
 -6.81369830e-01  8.67822972e+01  6.84155520e+02  3.73524062e+03
  1.58791113e+04  5.42813463e+04]
E1 = -706.5707899697538  E_coul = 198.93647196804002
cycle= 1 E= -507.634318001714  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440868
diis-c [-0.19436454  1.        ]
  HOMO = -0.236907133545571  LUMO = 88.1176141758004
  mo_energy =
[-1.20259173e+02 -1.22544424e+01 -6.65356245e+00 -6.65356245e+00
 -6.65356245e+00 -1.16410257e+00 -2.36907134e-01 -2.36907134e-01
 -2.36907134e-01  8.81176142e+01  6.85529080e+02  3.73650788e+03
  1.58802663e+04  5.42824214e+04]
E1 = -706.5403452295224  E_coul = 198.90561423552347
cycle= 2 E= -507.634730993999  delta_E= -0.000413  |g|= 0.00465  |ddm|= 0.0139
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00502813
diis-c [-2.52790979e-05  1.23903615e-04  9.99876096e-01]
  HOMO = -0.237075772000806  LUMO = 88.1141721506373
  mo_energy =
[-1.20267563e+02 -1.22555889e+01 -6.65533754e+00 -6.65533754e+00
 -6.65533754e+00 -1.16416490e+00 -2.37075772e-01 -2.37075772e-01
 -2.37075772e-01  8.81141722e+01  6.85518807e+02  3.73649274e+03
  1.58802485e+04  5.42824024e+04]
E1 = -706.5399243769095  E_coul = 198.90519327884735
cycle= 3 E= -507.634731098062  delta_E= -1.04e-07  |g|= 9.48e-05  |ddm|= 0.000194
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00012936
diis-c [-3.76751260e-10  3.43683027e-05 -2.59217989e-02  1.02588743e+00]
  HOMO = -0.23707798281031  LUMO = 88.1141269836873
  mo_energy =
[-1.20267677e+02 -1.22556047e+01 -6.65536437e+00 -6.65536437e+00
 -6.65536437e+00 -1.16416557e+00 -2.37077983e-01 -2.37077983e-01
 -2.37077983e-01  8.81141270e+01  6.85518689e+02  3.73649259e+03
  1.58802484e+04  5.42824022e+04]
E1 = -706.5399172722902  E_coul = 198.90518617418817
cycle= 4 E= -507.634731098102  delta_E= -3.98e-11  |g|= 3.58e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5399172722902  E_coul = 198.90518617418817
  HOMO = -0.237077967579742  LUMO = 88.1141273069198
  mo_energy =
[-1.20267676e+02 -1.22556046e+01 -6.65536421e+00 -6.65536421e+00
 -6.65536421e+00 -1.16416556e+00 -2.37077968e-01 -2.37077968e-01
 -2.37077968e-01  8.81141273e+01  6.85518690e+02  3.73649259e+03
  1.58802484e+04  5.42824022e+04]
E1 = -706.5399173068769  E_coul = 198.90518620877526
Extra cycle  E= -507.634731098102  delta_E= 3.41e-13  |g|= 6.12e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 86.49959087533013
E1 = -706.5399173068769  E_coul = 198.90518620877526
init E= -507.634731098102
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.237077967403252  LUMO = 88.1141273108238
  mo_energy =
[-1.20267676e+02 -1.22556046e+01 -6.65536421e+00 -6.65536421e+00
 -6.65536421e+00 -1.16416556e+00 -2.37077967e-01 -2.37077967e-01
 -2.37077967e-01  8.81141273e+01  6.85518690e+02  3.73649259e+03
  1.58802484e+04  5.42824022e+04]
E1 = -706.5399173073948  E_coul = 198.90518620929316
cycle= 1 E= -507.634731098102  delta_E= -5.68e-14  |g|= 1.21e-10  |ddm|= 2.36e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5399173073948  E_coul = 198.90518620929316
  HOMO = -0.237077967400779  LUMO = 88.1141273108772
  mo_energy =
[-1.20267676e+02 -1.22556046e+01 -6.65536421e+00 -6.65536421e+00
 -6.65536421e+00 -1.16416556e+00 -2.37077967e-01 -2.37077967e-01
 -2.37077967e-01  8.81141273e+01  6.85518690e+02  3.73649259e+03
  1.58802484e+04  5.42824022e+04]
E1 = -706.5399173074039  E_coul = 198.9051862093022
Extra cycle  E= -507.634731098102  delta_E= -5.68e-14  |g|= 1.2e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34199781e+03 1.83550031e+04 2.22953729e+03 4.63584695e+02
 1.23520361e+02 3.80755072e+01 4.74588648e+00 3.90674895e-01
 8.59800914e+00 4.90650726e-01]
grad_E = [-4.61723498e-07 -1.62904631e-06  9.64355751e-05 -2.95836048e-04
  4.32672241e-04  6.66639246e-04  3.76488547e-03 -1.04954485e-02
  8.03382288e-05 -7.41769003e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.01000953        1
[INPUT] 0    0    [1    /1   ]  18355.0415013        1
[INPUT] 0    0    [1    /1   ]  2227.1068401         1
[INPUT] 0    0    [1    /1   ]  468.965429725        1
[INPUT] 0    0    [1    /1   ]  125.079775315        1
[INPUT] 0    0    [1    /1   ]  38.376309008         1
[INPUT] 0    0    [1    /1   ]  4.74694238353        1
[INPUT] 0    0    [1    /1   ]  0.390692050614       1
[INPUT] 1    0    [1    /1   ]  8.59788402642        1
[INPUT] 1    0    [1    /1   ]  0.49063521331        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.0100095341295, 1.0]], [0, [18355.04150130332, 1.0]], [0, [2227.1068401014195, 1.0]], [0, [468.96542972545825, 1.0]], [0, [125.07977531479935, 1.0]], [0, [38.37630900797313, 1.0]], [0, [4.746942383529671, 1.0]], [0, [0.39069205061418544, 1.0]], [1, [8.597884026421823, 1.0]], [1, [0.4906352133095228, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.01000953]
bas 1, expnt(s) = [18355.0415013]
bas 2, expnt(s) = [2227.1068401]
bas 3, expnt(s) = [468.96542973]
bas 4, expnt(s) = [125.07977531]
bas 5, expnt(s) = [38.37630901]
bas 6, expnt(s) = [4.74694238]
bas 7, expnt(s) = [0.39069205]
bas 8, expnt(s) = [8.59788403]
bas 9, expnt(s) = [0.49063521]
CPU time:       131.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34201001e+03 2.00390096e+03 1.83550415e+04 3.98411213e+03
 2.22710684e+03 8.19069611e+02 4.68965430e+02 2.54607180e+02
 1.25079775e+02 9.44942416e+01 3.83763090e+01 3.89549298e+01
 4.74694238e+00 8.12503975e+00 3.90692051e-01 1.24850692e+00
 8.59788403e+00 4.29510585e+01 4.90635213e-01 1.19793371e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320172884052745
cond(S) = 87.12826664315223
E1 = -689.1182696244226  E_coul = 184.90528940715114
init E= -504.212980217271
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681390006046853  LUMO = 88.0828794746123
  mo_energy =
[-1.21648440e+02 -1.32827816e+01 -7.62206860e+00 -7.62206860e+00
 -7.62206860e+00 -1.65118449e+00 -6.81390006e-01 -6.81390006e-01
 -6.81390006e-01  8.80828795e+01  6.93684005e+02  3.75562029e+03
  1.58979978e+04  5.42975074e+04]
E1 = -706.572457927653  E_coul = 198.93742694925047
cycle= 1 E= -507.635030978402  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440164
diis-c [-0.19374404  1.        ]
  HOMO = -0.236911607609798  LUMO = 89.4197658069513
  mo_energy =
[-1.20259291e+02 -1.22545110e+01 -6.65344396e+00 -6.65344396e+00
 -6.65344396e+00 -1.16413197e+00 -2.36911608e-01 -2.36911608e-01
 -2.36911608e-01  8.94197658e+01  6.95057568e+02  3.75688837e+03
  1.58991543e+04  5.42985841e+04]
E1 = -706.5426638470307  E_coul = 198.90722925155097
cycle= 2 E= -507.63543459548  delta_E= -0.000404  |g|= 0.0046  |ddm|= 0.0136
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00497604
diis-c [-2.47603656e-05  5.54211560e-05  9.99944579e-01]
  HOMO = -0.237075909906994  LUMO = 89.4163672946534
  mo_energy =
[-1.20267525e+02 -1.22556293e+01 -6.65517569e+00 -6.65517569e+00
 -6.65517569e+00 -1.16419270e+00 -2.37075910e-01 -2.37075910e-01
 -2.37075910e-01  8.94163673e+01  6.95047438e+02  3.75687347e+03
  1.58991368e+04  5.42985654e+04]
E1 = -706.542255857172  E_coul = 198.90682116150188
cycle= 3 E= -507.63543469567  delta_E= -1e-07  |g|= 9.27e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000126753
diis-c [-3.61249820e-10  3.44681525e-05 -2.56695038e-02  1.02563504e+00]
  HOMO = -0.237078034503003  LUMO = 89.4163234887194
  mo_energy =
[-1.20267635e+02 -1.22556444e+01 -6.65520152e+00 -6.65520152e+00
 -6.65520152e+00 -1.16419334e+00 -2.37078035e-01 -2.37078035e-01
 -2.37078035e-01  8.94163235e+01  6.95047324e+02  3.75687333e+03
  1.58991367e+04  5.42985652e+04]
E1 = -706.5422490604435  E_coul = 198.9068143647365
cycle= 4 E= -507.635434695707  delta_E= -3.68e-11  |g|= 3.46e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5422490604435  E_coul = 198.9068143647365
  HOMO = -0.237078019992096  LUMO = 89.4163238026002
  mo_energy =
[-1.20267634e+02 -1.22556443e+01 -6.65520138e+00 -6.65520138e+00
 -6.65520138e+00 -1.16419333e+00 -2.37078020e-01 -2.37078020e-01
 -2.37078020e-01  8.94163238e+01  6.95047325e+02  3.75687333e+03
  1.58991367e+04  5.42985652e+04]
E1 = -706.5422490933531  E_coul = 198.90681439764626
Extra cycle  E= -507.635434695707  delta_E= 1.14e-13  |g|= 5.88e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34201001e+03 1.83550415e+04 2.22710684e+03 4.68965430e+02
 1.25079775e+02 3.83763090e+01 4.74694238e+00 3.90692051e-01
 8.59788403e+00 4.90635213e-01]
E = -507.63543469570686
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:49 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.01000953        1
[INPUT] 0    0    [1    /1   ]  18355.0415013        1
[INPUT] 0    0    [1    /1   ]  2227.1068401         1
[INPUT] 0    0    [1    /1   ]  468.965429725        1
[INPUT] 0    0    [1    /1   ]  125.079775315        1
[INPUT] 0    0    [1    /1   ]  38.376309008         1
[INPUT] 0    0    [1    /1   ]  4.74694238353        1
[INPUT] 0    0    [1    /1   ]  0.390692050614       1
[INPUT] 1    0    [1    /1   ]  8.59788402642        1
[INPUT] 1    0    [1    /1   ]  0.49063521331        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.0100095341295, 1.0]], [0, [18355.04150130332, 1.0]], [0, [2227.1068401014195, 1.0]], [0, [468.96542972545825, 1.0]], [0, [125.07977531479935, 1.0]], [0, [38.37630900797313, 1.0]], [0, [4.746942383529671, 1.0]], [0, [0.39069205061418544, 1.0]], [1, [8.597884026421823, 1.0]], [1, [0.4906352133095228, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.01000953]
bas 1, expnt(s) = [18355.0415013]
bas 2, expnt(s) = [2227.1068401]
bas 3, expnt(s) = [468.96542973]
bas 4, expnt(s) = [125.07977531]
bas 5, expnt(s) = [38.37630901]
bas 6, expnt(s) = [4.74694238]
bas 7, expnt(s) = [0.39069205]
bas 8, expnt(s) = [8.59788403]
bas 9, expnt(s) = [0.49063521]
CPU time:       131.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34201001e+03 2.00390096e+03 1.83550415e+04 3.98411213e+03
 2.22710684e+03 8.19069611e+02 4.68965430e+02 2.54607180e+02
 1.25079775e+02 9.44942416e+01 3.83763090e+01 3.89549298e+01
 4.74694238e+00 8.12503975e+00 3.90692051e-01 1.24850692e+00
 8.59788403e+00 4.29510585e+01 4.90635213e-01 1.19793371e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320172884052745
cond(S) = 87.12826664315223
E1 = -689.1182696244226  E_coul = 184.90528940715114
init E= -504.212980217271
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681390006046853  LUMO = 88.0828794746123
  mo_energy =
[-1.21648440e+02 -1.32827816e+01 -7.62206860e+00 -7.62206860e+00
 -7.62206860e+00 -1.65118449e+00 -6.81390006e-01 -6.81390006e-01
 -6.81390006e-01  8.80828795e+01  6.93684005e+02  3.75562029e+03
  1.58979978e+04  5.42975074e+04]
E1 = -706.572457927653  E_coul = 198.93742694925047
cycle= 1 E= -507.635030978402  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440164
diis-c [-0.19374404  1.        ]
  HOMO = -0.236911607609798  LUMO = 89.4197658069513
  mo_energy =
[-1.20259291e+02 -1.22545110e+01 -6.65344396e+00 -6.65344396e+00
 -6.65344396e+00 -1.16413197e+00 -2.36911608e-01 -2.36911608e-01
 -2.36911608e-01  8.94197658e+01  6.95057568e+02  3.75688837e+03
  1.58991543e+04  5.42985841e+04]
E1 = -706.5426638470307  E_coul = 198.90722925155097
cycle= 2 E= -507.63543459548  delta_E= -0.000404  |g|= 0.0046  |ddm|= 0.0136
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00497604
diis-c [-2.47603656e-05  5.54211560e-05  9.99944579e-01]
  HOMO = -0.237075909906994  LUMO = 89.4163672946534
  mo_energy =
[-1.20267525e+02 -1.22556293e+01 -6.65517569e+00 -6.65517569e+00
 -6.65517569e+00 -1.16419270e+00 -2.37075910e-01 -2.37075910e-01
 -2.37075910e-01  8.94163673e+01  6.95047438e+02  3.75687347e+03
  1.58991368e+04  5.42985654e+04]
E1 = -706.542255857172  E_coul = 198.90682116150188
cycle= 3 E= -507.63543469567  delta_E= -1e-07  |g|= 9.27e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000126753
diis-c [-3.61249820e-10  3.44681525e-05 -2.56695038e-02  1.02563504e+00]
  HOMO = -0.237078034503003  LUMO = 89.4163234887194
  mo_energy =
[-1.20267635e+02 -1.22556444e+01 -6.65520152e+00 -6.65520152e+00
 -6.65520152e+00 -1.16419334e+00 -2.37078035e-01 -2.37078035e-01
 -2.37078035e-01  8.94163235e+01  6.95047324e+02  3.75687333e+03
  1.58991367e+04  5.42985652e+04]
E1 = -706.5422490604435  E_coul = 198.9068143647365
cycle= 4 E= -507.635434695707  delta_E= -3.68e-11  |g|= 3.46e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5422490604435  E_coul = 198.9068143647365
  HOMO = -0.237078019992096  LUMO = 89.4163238026002
  mo_energy =
[-1.20267634e+02 -1.22556443e+01 -6.65520138e+00 -6.65520138e+00
 -6.65520138e+00 -1.16419333e+00 -2.37078020e-01 -2.37078020e-01
 -2.37078020e-01  8.94163238e+01  6.95047325e+02  3.75687333e+03
  1.58991367e+04  5.42985652e+04]
E1 = -706.5422490933531  E_coul = 198.90681439764626
Extra cycle  E= -507.635434695707  delta_E= 1.14e-13  |g|= 5.88e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.12826664315223
E1 = -706.5422490933531  E_coul = 198.90681439764626
init E= -507.635434695707
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.237078019825321  LUMO = 89.4163238063483
  mo_energy =
[-1.20267634e+02 -1.22556443e+01 -6.65520137e+00 -6.65520137e+00
 -6.65520137e+00 -1.16419333e+00 -2.37078020e-01 -2.37078020e-01
 -2.37078020e-01  8.94163238e+01  6.95047325e+02  3.75687333e+03
  1.58991367e+04  5.42985652e+04]
E1 = -706.542249093842  E_coul = 198.9068143981347
cycle= 1 E= -507.635434695707  delta_E= -3.98e-13  |g|= 1.19e-10  |ddm|= 2.23e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.542249093842  E_coul = 198.9068143981347
  HOMO = -0.237078019822997  LUMO = 89.416323806402
  mo_energy =
[-1.20267634e+02 -1.22556443e+01 -6.65520137e+00 -6.65520137e+00
 -6.65520137e+00 -1.16419333e+00 -2.37078020e-01 -2.37078020e-01
 -2.37078020e-01  8.94163238e+01  6.95047325e+02  3.75687333e+03
  1.58991367e+04  5.42985652e+04]
E1 = -706.5422490938498  E_coul = 198.9068143981427
Extra cycle  E= -507.635434695707  delta_E= 1.71e-13  |g|= 1.25e-11  |ddm|= 3.87e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34201001e+03 1.83550415e+04 2.22710684e+03 4.68965430e+02
 1.25079775e+02 3.83763090e+01 4.74694238e+00 3.90692051e-01
 8.59788403e+00 4.90635213e-01]
grad_E = [-3.63184434e-07 -1.71410093e-06  8.73761481e-05 -2.40559468e-04
  5.34378258e-04  6.81287950e-04  3.90885583e-03 -1.08197155e-02
  7.28048084e-05 -7.62370830e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.0231364         1
[INPUT] 0    0    [1    /1   ]  18355.0826132        1
[INPUT] 0    0    [1    /1   ]  2224.4955901         1
[INPUT] 0    0    [1    /1   ]  474.894719351        1
[INPUT] 0    0    [1    /1   ]  126.176263971        1
[INPUT] 0    0    [1    /1   ]  38.4978408486        1
[INPUT] 0    0    [1    /1   ]  4.74624149732        1
[INPUT] 0    0    [1    /1   ]  0.390911361186       1
[INPUT] 1    0    [1    /1   ]  8.59803099966        1
[INPUT] 1    0    [1    /1   ]  0.49069339665        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.023136403458, 1.0]], [0, [18355.08261315315, 1.0]], [0, [2224.4955900958767, 1.0]], [0, [474.8947193509238, 1.0]], [0, [126.17626397108889, 1.0]], [0, [38.497840848620314, 1.0]], [0, [4.746241497319078, 1.0]], [0, [0.39091136118634073, 1.0]], [1, [8.598030999657835, 1.0]], [1, [0.4906933966499117, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.0231364]
bas 1, expnt(s) = [18355.08261315]
bas 2, expnt(s) = [2224.4955901]
bas 3, expnt(s) = [474.89471935]
bas 4, expnt(s) = [126.17626397]
bas 5, expnt(s) = [38.49784085]
bas 6, expnt(s) = [4.7462415]
bas 7, expnt(s) = [0.39091136]
bas 8, expnt(s) = [8.598031]
bas 9, expnt(s) = [0.4906934]
CPU time:       135.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202314e+03 2.00390365e+03 1.83550826e+04 3.98411882e+03
 2.22449559e+03 8.18349245e+02 4.74894719e+02 2.57017698e+02
 1.26176264e+02 9.51148379e+01 3.84978408e+01 3.90474164e+01
 4.74624150e+00 8.12413999e+00 3.90911361e-01 1.24903251e+00
 8.59803100e+00 4.29519762e+01 4.90693397e-01 1.19811129e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32007428590238
cond(S) = 87.58361271752408
E1 = -689.1252058566143  E_coul = 184.9096428634805
init E= -504.215562993134
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681232973373592  LUMO = 88.8012353867964
  mo_energy =
[-1.21648652e+02 -1.32821679e+01 -7.62178034e+00 -7.62178034e+00
 -7.62178034e+00 -1.65108982e+00 -6.81232973e-01 -6.81232973e-01
 -6.81232973e-01  8.88012354e+01  7.01718954e+02  3.77509624e+03
  1.59161906e+04  5.43129535e+04]
E1 = -706.5765880955663  E_coul = 198.9408654363861
cycle= 1 E= -507.63572265918  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.438842
diis-c [-0.19258214  1.        ]
  HOMO = -0.236684549543506  LUMO = 90.1387177857818
  mo_energy =
[-1.20260168e+02 -1.22539104e+01 -6.65319303e+00 -6.65319303e+00
 -6.65319303e+00 -1.16391426e+00 -2.36684550e-01 -2.36684550e-01
 -2.36684550e-01  9.01387178e+01  7.03091349e+02  3.77636335e+03
  1.59173466e+04  5.43140297e+04]
E1 = -706.5471074274943  E_coul = 198.91098540487985
cycle= 2 E= -507.636122022614  delta_E= -0.000399  |g|= 0.00457  |ddm|= 0.0134
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00496163
diis-c [-2.46176215e-05  2.83061406e-05  9.99971694e-01]
  HOMO = -0.236846688521073  LUMO = 90.135336311897
  mo_energy =
[-1.20268329e+02 -1.22550144e+01 -6.65490328e+00 -6.65490328e+00
 -6.65490328e+00 -1.16397420e+00 -2.36846689e-01 -2.36846689e-01
 -2.36846689e-01  9.01353363e+01  7.03081265e+02  3.77634854e+03
  1.59173292e+04  5.43140112e+04]
E1 = -706.5467059380788  E_coul = 198.9105838171315
cycle= 3 E= -507.636122120947  delta_E= -9.83e-08  |g|= 9.17e-05  |ddm|= 0.000185
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000125688
diis-c [-3.54499659e-10  3.43300959e-05 -2.55316819e-02  1.02549735e+00]
  HOMO = -0.236848771055124  LUMO = 90.1352931488384
  mo_energy =
[-1.20268437e+02 -1.22550293e+01 -6.65492863e+00 -6.65492863e+00
 -6.65492863e+00 -1.16397482e+00 -2.36848771e-01 -2.36848771e-01
 -2.36848771e-01  9.01352931e+01  7.03081152e+02  3.77634840e+03
  1.59173291e+04  5.43140110e+04]
E1 = -706.5466992950443  E_coul = 198.91057717406102
cycle= 4 E= -507.636122120983  delta_E= -3.59e-11  |g|= 3.4e-07  |ddm|= 3.18e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5466992950443  E_coul = 198.91057717406102
  HOMO = -0.236848756903215  LUMO = 90.1352934585184
  mo_energy =
[-1.20268437e+02 -1.22550292e+01 -6.65492848e+00 -6.65492848e+00
 -6.65492848e+00 -1.16397482e+00 -2.36848757e-01 -2.36848757e-01
 -2.36848757e-01  9.01352935e+01  7.03081153e+02  3.77634841e+03
  1.59173291e+04  5.43140110e+04]
E1 = -706.5466993271037  E_coul = 198.91057720612065
Extra cycle  E= -507.636122120983  delta_E= 1.71e-13  |g|= 5.75e-09  |ddm|= 1.42e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202314e+03 1.83550826e+04 2.22449559e+03 4.74894719e+02
 1.26176264e+02 3.84978408e+01 4.74624150e+00 3.90911361e-01
 8.59803100e+00 4.90693397e-01]
E = -507.6361221209831
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.0231364         1
[INPUT] 0    0    [1    /1   ]  18355.0826132        1
[INPUT] 0    0    [1    /1   ]  2224.4955901         1
[INPUT] 0    0    [1    /1   ]  474.894719351        1
[INPUT] 0    0    [1    /1   ]  126.176263971        1
[INPUT] 0    0    [1    /1   ]  38.4978408486        1
[INPUT] 0    0    [1    /1   ]  4.74624149732        1
[INPUT] 0    0    [1    /1   ]  0.390911361186       1
[INPUT] 1    0    [1    /1   ]  8.59803099966        1
[INPUT] 1    0    [1    /1   ]  0.49069339665        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.023136403458, 1.0]], [0, [18355.08261315315, 1.0]], [0, [2224.4955900958767, 1.0]], [0, [474.8947193509238, 1.0]], [0, [126.17626397108889, 1.0]], [0, [38.497840848620314, 1.0]], [0, [4.746241497319078, 1.0]], [0, [0.39091136118634073, 1.0]], [1, [8.598030999657835, 1.0]], [1, [0.4906933966499117, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.0231364]
bas 1, expnt(s) = [18355.08261315]
bas 2, expnt(s) = [2224.4955901]
bas 3, expnt(s) = [474.89471935]
bas 4, expnt(s) = [126.17626397]
bas 5, expnt(s) = [38.49784085]
bas 6, expnt(s) = [4.7462415]
bas 7, expnt(s) = [0.39091136]
bas 8, expnt(s) = [8.598031]
bas 9, expnt(s) = [0.4906934]
CPU time:       136.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202314e+03 2.00390365e+03 1.83550826e+04 3.98411882e+03
 2.22449559e+03 8.18349245e+02 4.74894719e+02 2.57017698e+02
 1.26176264e+02 9.51148379e+01 3.84978408e+01 3.90474164e+01
 4.74624150e+00 8.12413999e+00 3.90911361e-01 1.24903251e+00
 8.59803100e+00 4.29519762e+01 4.90693397e-01 1.19811129e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32007428590238
cond(S) = 87.58361271752408
E1 = -689.1252058566143  E_coul = 184.9096428634805
init E= -504.215562993134
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681232973373592  LUMO = 88.8012353867964
  mo_energy =
[-1.21648652e+02 -1.32821679e+01 -7.62178034e+00 -7.62178034e+00
 -7.62178034e+00 -1.65108982e+00 -6.81232973e-01 -6.81232973e-01
 -6.81232973e-01  8.88012354e+01  7.01718954e+02  3.77509624e+03
  1.59161906e+04  5.43129535e+04]
E1 = -706.5765880955663  E_coul = 198.9408654363861
cycle= 1 E= -507.63572265918  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.438842
diis-c [-0.19258214  1.        ]
  HOMO = -0.236684549543506  LUMO = 90.1387177857818
  mo_energy =
[-1.20260168e+02 -1.22539104e+01 -6.65319303e+00 -6.65319303e+00
 -6.65319303e+00 -1.16391426e+00 -2.36684550e-01 -2.36684550e-01
 -2.36684550e-01  9.01387178e+01  7.03091349e+02  3.77636335e+03
  1.59173466e+04  5.43140297e+04]
E1 = -706.5471074274943  E_coul = 198.91098540487985
cycle= 2 E= -507.636122022614  delta_E= -0.000399  |g|= 0.00457  |ddm|= 0.0134
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00496163
diis-c [-2.46176215e-05  2.83061406e-05  9.99971694e-01]
  HOMO = -0.236846688521073  LUMO = 90.135336311897
  mo_energy =
[-1.20268329e+02 -1.22550144e+01 -6.65490328e+00 -6.65490328e+00
 -6.65490328e+00 -1.16397420e+00 -2.36846689e-01 -2.36846689e-01
 -2.36846689e-01  9.01353363e+01  7.03081265e+02  3.77634854e+03
  1.59173292e+04  5.43140112e+04]
E1 = -706.5467059380788  E_coul = 198.9105838171315
cycle= 3 E= -507.636122120947  delta_E= -9.83e-08  |g|= 9.17e-05  |ddm|= 0.000185
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000125688
diis-c [-3.54499659e-10  3.43300959e-05 -2.55316819e-02  1.02549735e+00]
  HOMO = -0.236848771055124  LUMO = 90.1352931488384
  mo_energy =
[-1.20268437e+02 -1.22550293e+01 -6.65492863e+00 -6.65492863e+00
 -6.65492863e+00 -1.16397482e+00 -2.36848771e-01 -2.36848771e-01
 -2.36848771e-01  9.01352931e+01  7.03081152e+02  3.77634840e+03
  1.59173291e+04  5.43140110e+04]
E1 = -706.5466992950443  E_coul = 198.91057717406102
cycle= 4 E= -507.636122120983  delta_E= -3.59e-11  |g|= 3.4e-07  |ddm|= 3.18e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5466992950443  E_coul = 198.91057717406102
  HOMO = -0.236848756903215  LUMO = 90.1352934585184
  mo_energy =
[-1.20268437e+02 -1.22550292e+01 -6.65492848e+00 -6.65492848e+00
 -6.65492848e+00 -1.16397482e+00 -2.36848757e-01 -2.36848757e-01
 -2.36848757e-01  9.01352935e+01  7.03081153e+02  3.77634841e+03
  1.59173291e+04  5.43140110e+04]
E1 = -706.5466993271037  E_coul = 198.91057720612065
Extra cycle  E= -507.636122120983  delta_E= 1.71e-13  |g|= 5.75e-09  |ddm|= 1.42e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.58361271752408
E1 = -706.5466993271037  E_coul = 198.91057720612065
init E= -507.636122120983
    CPU time for initialize scf      0.80 sec, wall time      0.05 sec
  HOMO = -0.236848756741359  LUMO = 90.1352934621926
  mo_energy =
[-1.20268437e+02 -1.22550292e+01 -6.65492848e+00 -6.65492848e+00
 -6.65492848e+00 -1.16397482e+00 -2.36848757e-01 -2.36848757e-01
 -2.36848757e-01  9.01352935e+01  7.03081153e+02  3.77634841e+03
  1.59173291e+04  5.43140110e+04]
E1 = -706.5466993275769  E_coul = 198.91057720659373
cycle= 1 E= -507.636122120983  delta_E= -5.68e-14  |g|= 1.11e-10  |ddm|= 2.15e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5466993275769  E_coul = 198.91057720659373
  HOMO = -0.236848756739114  LUMO = 90.1352934622441
  mo_energy =
[-1.20268437e+02 -1.22550292e+01 -6.65492848e+00 -6.65492848e+00
 -6.65492848e+00 -1.16397482e+00 -2.36848757e-01 -2.36848757e-01
 -2.36848757e-01  9.01352935e+01  7.03081153e+02  3.77634841e+03
  1.59173291e+04  5.43140110e+04]
E1 = -706.5466993275845  E_coul = 198.9105772066015
Extra cycle  E= -507.636122120983  delta_E= 1.14e-13  |g|= 7.32e-12  |ddm|= 3.73e-12
    CPU time for scf_cycle      1.02 sec, wall time      0.11 sec
exp = [7.34202314e+03 1.83550826e+04 2.22449559e+03 4.74894719e+02
 1.26176264e+02 3.84978408e+01 4.74624150e+00 3.90911361e-01
 8.59803100e+00 4.90693397e-01]
grad_E = [-2.11389622e-07 -1.82219546e-06  7.52996049e-05 -1.23022722e-04
  4.55731844e-04  3.13766783e-04  2.44234344e-03 -7.02209230e-03
  3.16220234e-05 -5.12053679e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02920103        1
[INPUT] 0    0    [1    /1   ]  18355.1013976        1
[INPUT] 0    0    [1    /1   ]  2223.29276107        1
[INPUT] 0    0    [1    /1   ]  477.754343079        1
[INPUT] 0    0    [1    /1   ]  126.17661032         1
[INPUT] 0    0    [1    /1   ]  38.3956025135        1
[INPUT] 0    0    [1    /1   ]  4.74452486647        1
[INPUT] 0    0    [1    /1   ]  0.39116266126        1
[INPUT] 1    0    [1    /1   ]  8.59834863344        1
[INPUT] 1    0    [1    /1   ]  0.490776002477       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.029201034918, 1.0]], [0, [18355.101397624854, 1.0]], [0, [2223.292761070115, 1.0]], [0, [477.75434307885075, 1.0]], [0, [126.17661031982537, 1.0]], [0, [38.39560251346363, 1.0]], [0, [4.744524866466205, 1.0]], [0, [0.3911626612603503, 1.0]], [1, [8.598348633438105, 1.0]], [1, [0.4907760024770985, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02920103]
bas 1, expnt(s) = [18355.10139762]
bas 2, expnt(s) = [2223.29276107]
bas 3, expnt(s) = [477.75434308]
bas 4, expnt(s) = [126.17661032]
bas 5, expnt(s) = [38.39560251]
bas 6, expnt(s) = [4.74452487]
bas 7, expnt(s) = [0.39116266]
bas 8, expnt(s) = [8.59834863]
bas 9, expnt(s) = [0.490776]
CPU time:       140.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202920e+03 2.00390489e+03 1.83551014e+04 3.98412188e+03
 2.22329276e+03 8.18017349e+02 4.77754343e+02 2.58177569e+02
 1.26176610e+02 9.51150337e+01 3.83956025e+01 3.89696172e+01
 4.74452487e+00 8.12193612e+00 3.91162661e-01 1.24963468e+00
 8.59834863e+00 4.29539597e+01 4.90776002e-01 1.19836341e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319970487284042
cond(S) = 87.60763668156491
E1 = -689.1333494973098  E_coul = 184.91470787591007
init E= -504.2186416214
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68102778832638  LUMO = 88.5715950977998
  mo_energy =
[-1.21648761e+02 -1.32813293e+01 -7.62148831e+00 -7.62148831e+00
 -7.62148831e+00 -1.65091600e+00 -6.81027788e-01 -6.81027788e-01
 -6.81027788e-01  8.85715951e+01  7.03562691e+02  3.78204580e+03
  1.59227872e+04  5.43184292e+04]
E1 = -706.5805829894575  E_coul = 198.94456765959495
cycle= 1 E= -507.636015329863  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437779
diis-c [-0.19165015  1.        ]
  HOMO = -0.236406530774041  LUMO = 89.9085497197563
  mo_energy =
[-1.20261040e+02 -1.22531389e+01 -6.65296492e+00 -6.65296492e+00
 -6.65296492e+00 -1.16362872e+00 -2.36406531e-01 -2.36406531e-01
 -2.36406531e-01  8.99085497e+01  7.04933745e+02  3.78331108e+03
  1.59239414e+04  5.43195036e+04]
E1 = -706.5509488330185  E_coul = 198.91453159824678
cycle= 2 E= -507.636417234772  delta_E= -0.000402  |g|= 0.00459  |ddm|= 0.0134
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0049873
diis-c [-2.48726493e-05  5.01982910e-05  9.99949802e-01]
  HOMO = -0.236569597456343  LUMO = 89.9051533232798
  mo_energy =
[-1.20269242e+02 -1.22542486e+01 -6.65468469e+00 -6.65468469e+00
 -6.65468469e+00 -1.16368901e+00 -2.36569597e-01 -2.36569597e-01
 -2.36569597e-01  8.99051533e+01  7.04923597e+02  3.78329620e+03
  1.59239240e+04  5.43194849e+04]
E1 = -706.5505447125083  E_coul = 198.91412737848802
cycle= 3 E= -507.63641733402  delta_E= -9.92e-08  |g|= 9.22e-05  |ddm|= 0.000185
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000126547
diis-c [-3.58854483e-10  3.41118882e-05 -2.55749943e-02  1.02554088e+00]
  HOMO = -0.236571698751363  LUMO = 89.9051098325783
  mo_energy =
[-1.20269351e+02 -1.22542636e+01 -6.65471025e+00 -6.65471025e+00
 -6.65471025e+00 -1.16368964e+00 -2.36571699e-01 -2.36571699e-01
 -2.36571699e-01  8.99051098e+01  7.04923483e+02  3.78329606e+03
  1.59239238e+04  5.43194848e+04]
E1 = -706.5505380068278  E_coul = 198.9141206727705
cycle= 4 E= -507.636417334057  delta_E= -3.69e-11  |g|= 3.43e-07  |ddm|= 3.21e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5505380068278  E_coul = 198.9141206727705
  HOMO = -0.236571684455215  LUMO = 89.9051101447576
  mo_energy =
[-1.20269350e+02 -1.22542635e+01 -6.65471011e+00 -6.65471011e+00
 -6.65471011e+00 -1.16368963e+00 -2.36571684e-01 -2.36571684e-01
 -2.36571684e-01  8.99051101e+01  7.04923484e+02  3.78329607e+03
  1.59239238e+04  5.43194848e+04]
E1 = -706.5505380392069  E_coul = 198.9141207051502
Extra cycle  E= -507.636417334057  delta_E= 5.12e-13  |g|= 5.8e-09  |ddm|= 1.43e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34202920e+03 1.83551014e+04 2.22329276e+03 4.77754343e+02
 1.26176610e+02 3.83956025e+01 4.74452487e+00 3.91162661e-01
 8.59834863e+00 4.90776002e-01]
E = -507.6364173340567
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:55 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02920103        1
[INPUT] 0    0    [1    /1   ]  18355.1013976        1
[INPUT] 0    0    [1    /1   ]  2223.29276107        1
[INPUT] 0    0    [1    /1   ]  477.754343079        1
[INPUT] 0    0    [1    /1   ]  126.17661032         1
[INPUT] 0    0    [1    /1   ]  38.3956025135        1
[INPUT] 0    0    [1    /1   ]  4.74452486647        1
[INPUT] 0    0    [1    /1   ]  0.39116266126        1
[INPUT] 1    0    [1    /1   ]  8.59834863344        1
[INPUT] 1    0    [1    /1   ]  0.490776002477       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.029201034918, 1.0]], [0, [18355.101397624854, 1.0]], [0, [2223.292761070115, 1.0]], [0, [477.75434307885075, 1.0]], [0, [126.17661031982537, 1.0]], [0, [38.39560251346363, 1.0]], [0, [4.744524866466205, 1.0]], [0, [0.3911626612603503, 1.0]], [1, [8.598348633438105, 1.0]], [1, [0.4907760024770985, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02920103]
bas 1, expnt(s) = [18355.10139762]
bas 2, expnt(s) = [2223.29276107]
bas 3, expnt(s) = [477.75434308]
bas 4, expnt(s) = [126.17661032]
bas 5, expnt(s) = [38.39560251]
bas 6, expnt(s) = [4.74452487]
bas 7, expnt(s) = [0.39116266]
bas 8, expnt(s) = [8.59834863]
bas 9, expnt(s) = [0.490776]
CPU time:       140.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202920e+03 2.00390489e+03 1.83551014e+04 3.98412188e+03
 2.22329276e+03 8.18017349e+02 4.77754343e+02 2.58177569e+02
 1.26176610e+02 9.51150337e+01 3.83956025e+01 3.89696172e+01
 4.74452487e+00 8.12193612e+00 3.91162661e-01 1.24963468e+00
 8.59834863e+00 4.29539597e+01 4.90776002e-01 1.19836341e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319970487284042
cond(S) = 87.60763668156491
E1 = -689.1333494973098  E_coul = 184.91470787591007
init E= -504.2186416214
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68102778832638  LUMO = 88.5715950977998
  mo_energy =
[-1.21648761e+02 -1.32813293e+01 -7.62148831e+00 -7.62148831e+00
 -7.62148831e+00 -1.65091600e+00 -6.81027788e-01 -6.81027788e-01
 -6.81027788e-01  8.85715951e+01  7.03562691e+02  3.78204580e+03
  1.59227872e+04  5.43184292e+04]
E1 = -706.5805829894575  E_coul = 198.94456765959495
cycle= 1 E= -507.636015329863  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437779
diis-c [-0.19165015  1.        ]
  HOMO = -0.236406530774041  LUMO = 89.9085497197563
  mo_energy =
[-1.20261040e+02 -1.22531389e+01 -6.65296492e+00 -6.65296492e+00
 -6.65296492e+00 -1.16362872e+00 -2.36406531e-01 -2.36406531e-01
 -2.36406531e-01  8.99085497e+01  7.04933745e+02  3.78331108e+03
  1.59239414e+04  5.43195036e+04]
E1 = -706.5509488330185  E_coul = 198.91453159824678
cycle= 2 E= -507.636417234772  delta_E= -0.000402  |g|= 0.00459  |ddm|= 0.0134
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.0049873
diis-c [-2.48726493e-05  5.01982910e-05  9.99949802e-01]
  HOMO = -0.236569597456343  LUMO = 89.9051533232798
  mo_energy =
[-1.20269242e+02 -1.22542486e+01 -6.65468469e+00 -6.65468469e+00
 -6.65468469e+00 -1.16368901e+00 -2.36569597e-01 -2.36569597e-01
 -2.36569597e-01  8.99051533e+01  7.04923597e+02  3.78329620e+03
  1.59239240e+04  5.43194849e+04]
E1 = -706.5505447125083  E_coul = 198.91412737848802
cycle= 3 E= -507.63641733402  delta_E= -9.92e-08  |g|= 9.22e-05  |ddm|= 0.000185
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000126547
diis-c [-3.58854483e-10  3.41118882e-05 -2.55749943e-02  1.02554088e+00]
  HOMO = -0.236571698751363  LUMO = 89.9051098325783
  mo_energy =
[-1.20269351e+02 -1.22542636e+01 -6.65471025e+00 -6.65471025e+00
 -6.65471025e+00 -1.16368964e+00 -2.36571699e-01 -2.36571699e-01
 -2.36571699e-01  8.99051098e+01  7.04923483e+02  3.78329606e+03
  1.59239238e+04  5.43194848e+04]
E1 = -706.5505380068278  E_coul = 198.9141206727705
cycle= 4 E= -507.636417334057  delta_E= -3.69e-11  |g|= 3.43e-07  |ddm|= 3.21e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5505380068278  E_coul = 198.9141206727705
  HOMO = -0.236571684455215  LUMO = 89.9051101447576
  mo_energy =
[-1.20269350e+02 -1.22542635e+01 -6.65471011e+00 -6.65471011e+00
 -6.65471011e+00 -1.16368963e+00 -2.36571684e-01 -2.36571684e-01
 -2.36571684e-01  8.99051101e+01  7.04923484e+02  3.78329607e+03
  1.59239238e+04  5.43194848e+04]
E1 = -706.5505380392069  E_coul = 198.9141207051502
Extra cycle  E= -507.636417334057  delta_E= 5.12e-13  |g|= 5.8e-09  |ddm|= 1.43e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.60763668156491
E1 = -706.5505380392069  E_coul = 198.9141207051502
init E= -507.636417334057
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236571684291529  LUMO = 89.9051101484645
  mo_energy =
[-1.20269350e+02 -1.22542635e+01 -6.65471010e+00 -6.65471010e+00
 -6.65471010e+00 -1.16368963e+00 -2.36571684e-01 -2.36571684e-01
 -2.36571684e-01  8.99051101e+01  7.04923484e+02  3.78329607e+03
  1.59239238e+04  5.43194848e+04]
E1 = -706.5505380396854  E_coul = 198.9141207056284
cycle= 1 E= -507.636417334057  delta_E= -2.84e-13  |g|= 1.13e-10  |ddm|= 2.17e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5505380396854  E_coul = 198.9141207056284
  HOMO = -0.23657168428926  LUMO = 89.9051101485142
  mo_energy =
[-1.20269350e+02 -1.22542635e+01 -6.65471010e+00 -6.65471010e+00
 -6.65471010e+00 -1.16368963e+00 -2.36571684e-01 -2.36571684e-01
 -2.36571684e-01  8.99051101e+01  7.04923484e+02  3.78329607e+03
  1.59239238e+04  5.43194848e+04]
E1 = -706.5505380396933  E_coul = 198.91412070563663
Extra cycle  E= -507.636417334057  delta_E= 3.41e-13  |g|= 1.94e-11  |ddm|= 3.86e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34202920e+03 1.83551014e+04 2.22329276e+03 4.77754343e+02
 1.26176610e+02 3.83956025e+01 4.74452487e+00 3.91162661e-01
 8.59834863e+00 4.90776002e-01]
grad_E = [-9.97266687e-08 -1.88998262e-06  6.72633627e-05 -1.01566487e-05
  1.96747137e-04 -9.61752806e-06  5.61859163e-04 -2.18503496e-03
  2.97253091e-05 -1.97635616e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.0288353         1
[INPUT] 0    0    [1    /1   ]  18355.100125         1
[INPUT] 0    0    [1    /1   ]  2223.36766757        1
[INPUT] 0    0    [1    /1   ]  477.662956981        1
[INPUT] 0    0    [1    /1   ]  125.834305031        1
[INPUT] 0    0    [1    /1   ]  38.2999153002        1
[INPUT] 0    0    [1    /1   ]  4.7438072103         1
[INPUT] 0    0    [1    /1   ]  0.391254980598       1
[INPUT] 1    0    [1    /1   ]  8.59847184614        1
[INPUT] 1    0    [1    /1   ]  0.490816552082       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.028835302046, 1.0]], [0, [18355.100125026085, 1.0]], [0, [2223.367667573652, 1.0]], [0, [477.66295698140533, 1.0]], [0, [125.83430503149467, 1.0]], [0, [38.29991530021279, 1.0]], [0, [4.743807210296314, 1.0]], [0, [0.3912549805978446, 1.0]], [1, [8.598471846136325, 1.0]], [1, [0.4908165520824787, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.0288353]
bas 1, expnt(s) = [18355.10012503]
bas 2, expnt(s) = [2223.36766757]
bas 3, expnt(s) = [477.66295698]
bas 4, expnt(s) = [125.83430503]
bas 5, expnt(s) = [38.2999153]
bas 6, expnt(s) = [4.74380721]
bas 7, expnt(s) = [0.39125498]
bas 8, expnt(s) = [8.59847185]
bas 9, expnt(s) = [0.49081655]
CPU time:       144.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202884e+03 2.00390481e+03 1.83551001e+04 3.98412167e+03
 2.22336767e+03 8.18038019e+02 4.77662957e+02 2.58140529e+02
 1.25834305e+02 9.49214394e+01 3.82999153e+01 3.88967562e+01
 4.74380721e+00 8.12101471e+00 3.91254981e-01 1.24985587e+00
 8.59847185e+00 4.29547291e+01 4.90816552e-01 1.19848718e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319924313756886
cond(S) = 87.48072046491907
E1 = -689.1369514409485  E_coul = 184.91690652256216
init E= -504.220044918386
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68093718103561  LUMO = 88.2172160743158
  mo_energy =
[-1.21648716e+02 -1.32810172e+01 -7.62136330e+00 -7.62136330e+00
 -7.62136330e+00 -1.65083921e+00 -6.80937181e-01 -6.80937181e-01
 -6.80937181e-01  8.82172161e+01  7.02208199e+02  3.78027468e+03
  1.59211823e+04  5.43169858e+04]
E1 = -706.5828218683304  E_coul = 198.94677483451056
cycle= 1 E= -507.63604703382  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437544
diis-c [-0.19144457  1.        ]
  HOMO = -0.236280744438545  LUMO = 89.553741487655
  mo_energy =
[-1.20261145e+02 -1.22528337e+01 -6.65283550e+00 -6.65283550e+00
 -6.65283550e+00 -1.16350790e+00 -2.36280744e-01 -2.36280744e-01
 -2.36280744e-01  8.95537415e+01  7.03578949e+02  3.78153935e+03
  1.59223358e+04  5.43180594e+04]
E1 = -706.5530036368514  E_coul = 198.91655193975055
cycle= 2 E= -507.636451697101  delta_E= -0.000405  |g|= 0.0046  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00500634
diis-c [-2.50624750e-05  7.02693971e-05  9.99929731e-01]
  HOMO = -0.236445019805224  LUMO = 89.5503315824754
  mo_energy =
[-1.20269392e+02 -1.22539512e+01 -6.65456734e+00 -6.65456734e+00
 -6.65456734e+00 -1.16356863e+00 -2.36445020e-01 -2.36445020e-01
 -2.36445020e-01  8.95503316e+01  7.03568751e+02  3.78152440e+03
  1.59223183e+04  5.43180407e+04]
E1 = -706.5525959897602  E_coul = 198.9161441923007
cycle= 3 E= -507.63645179746  delta_E= -1e-07  |g|= 9.28e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127369
diis-c [-3.63477932e-10  3.40443812e-05 -2.56429057e-02  1.02560886e+00]
  HOMO = -0.23644714498535  LUMO = 89.550287709461
  mo_energy =
[-1.20269502e+02 -1.22539663e+01 -6.65459317e+00 -6.65459317e+00
 -6.65459317e+00 -1.16356926e+00 -2.36447145e-01 -2.36447145e-01
 -2.36447145e-01  8.95502877e+01  7.03568637e+02  3.78152425e+03
  1.59223182e+04  5.43180405e+04]
E1 = -706.552589200354  E_coul = 198.91613740285752
cycle= 4 E= -507.636451797496  delta_E= -3.69e-11  |g|= 3.46e-07  |ddm|= 3.24e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.552589200354  E_coul = 198.91613740285752
  HOMO = -0.236447130494173  LUMO = 89.5502880243326
  mo_energy =
[-1.20269501e+02 -1.22539662e+01 -6.65459303e+00 -6.65459303e+00
 -6.65459303e+00 -1.16356926e+00 -2.36447130e-01 -2.36447130e-01
 -2.36447130e-01  8.95502880e+01  7.03568637e+02  3.78152426e+03
  1.59223182e+04  5.43180405e+04]
E1 = -706.552589233183  E_coul = 198.91613743568655
Extra cycle  E= -507.636451797496  delta_E=    0  |g|= 5.87e-09  |ddm|= 1.45e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202884e+03 1.83551001e+04 2.22336767e+03 4.77662957e+02
 1.25834305e+02 3.82999153e+01 4.74380721e+00 3.91254981e-01
 8.59847185e+00 4.90816552e-01]
E = -507.6364517974964
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:14:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.0288353         1
[INPUT] 0    0    [1    /1   ]  18355.100125         1
[INPUT] 0    0    [1    /1   ]  2223.36766757        1
[INPUT] 0    0    [1    /1   ]  477.662956981        1
[INPUT] 0    0    [1    /1   ]  125.834305031        1
[INPUT] 0    0    [1    /1   ]  38.2999153002        1
[INPUT] 0    0    [1    /1   ]  4.7438072103         1
[INPUT] 0    0    [1    /1   ]  0.391254980598       1
[INPUT] 1    0    [1    /1   ]  8.59847184614        1
[INPUT] 1    0    [1    /1   ]  0.490816552082       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.028835302046, 1.0]], [0, [18355.100125026085, 1.0]], [0, [2223.367667573652, 1.0]], [0, [477.66295698140533, 1.0]], [0, [125.83430503149467, 1.0]], [0, [38.29991530021279, 1.0]], [0, [4.743807210296314, 1.0]], [0, [0.3912549805978446, 1.0]], [1, [8.598471846136325, 1.0]], [1, [0.4908165520824787, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.0288353]
bas 1, expnt(s) = [18355.10012503]
bas 2, expnt(s) = [2223.36766757]
bas 3, expnt(s) = [477.66295698]
bas 4, expnt(s) = [125.83430503]
bas 5, expnt(s) = [38.2999153]
bas 6, expnt(s) = [4.74380721]
bas 7, expnt(s) = [0.39125498]
bas 8, expnt(s) = [8.59847185]
bas 9, expnt(s) = [0.49081655]
CPU time:       144.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202884e+03 2.00390481e+03 1.83551001e+04 3.98412167e+03
 2.22336767e+03 8.18038019e+02 4.77662957e+02 2.58140529e+02
 1.25834305e+02 9.49214394e+01 3.82999153e+01 3.88967562e+01
 4.74380721e+00 8.12101471e+00 3.91254981e-01 1.24985587e+00
 8.59847185e+00 4.29547291e+01 4.90816552e-01 1.19848718e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319924313756886
cond(S) = 87.48072046491907
E1 = -689.1369514409485  E_coul = 184.91690652256216
init E= -504.220044918386
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68093718103561  LUMO = 88.2172160743158
  mo_energy =
[-1.21648716e+02 -1.32810172e+01 -7.62136330e+00 -7.62136330e+00
 -7.62136330e+00 -1.65083921e+00 -6.80937181e-01 -6.80937181e-01
 -6.80937181e-01  8.82172161e+01  7.02208199e+02  3.78027468e+03
  1.59211823e+04  5.43169858e+04]
E1 = -706.5828218683304  E_coul = 198.94677483451056
cycle= 1 E= -507.63604703382  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437544
diis-c [-0.19144457  1.        ]
  HOMO = -0.236280744438545  LUMO = 89.553741487655
  mo_energy =
[-1.20261145e+02 -1.22528337e+01 -6.65283550e+00 -6.65283550e+00
 -6.65283550e+00 -1.16350790e+00 -2.36280744e-01 -2.36280744e-01
 -2.36280744e-01  8.95537415e+01  7.03578949e+02  3.78153935e+03
  1.59223358e+04  5.43180594e+04]
E1 = -706.5530036368514  E_coul = 198.91655193975055
cycle= 2 E= -507.636451697101  delta_E= -0.000405  |g|= 0.0046  |ddm|= 0.0135
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00500634
diis-c [-2.50624750e-05  7.02693971e-05  9.99929731e-01]
  HOMO = -0.236445019805224  LUMO = 89.5503315824754
  mo_energy =
[-1.20269392e+02 -1.22539512e+01 -6.65456734e+00 -6.65456734e+00
 -6.65456734e+00 -1.16356863e+00 -2.36445020e-01 -2.36445020e-01
 -2.36445020e-01  8.95503316e+01  7.03568751e+02  3.78152440e+03
  1.59223183e+04  5.43180407e+04]
E1 = -706.5525959897602  E_coul = 198.9161441923007
cycle= 3 E= -507.63645179746  delta_E= -1e-07  |g|= 9.28e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127369
diis-c [-3.63477932e-10  3.40443812e-05 -2.56429057e-02  1.02560886e+00]
  HOMO = -0.23644714498535  LUMO = 89.550287709461
  mo_energy =
[-1.20269502e+02 -1.22539663e+01 -6.65459317e+00 -6.65459317e+00
 -6.65459317e+00 -1.16356926e+00 -2.36447145e-01 -2.36447145e-01
 -2.36447145e-01  8.95502877e+01  7.03568637e+02  3.78152425e+03
  1.59223182e+04  5.43180405e+04]
E1 = -706.552589200354  E_coul = 198.91613740285752
cycle= 4 E= -507.636451797496  delta_E= -3.69e-11  |g|= 3.46e-07  |ddm|= 3.24e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.552589200354  E_coul = 198.91613740285752
  HOMO = -0.236447130494173  LUMO = 89.5502880243326
  mo_energy =
[-1.20269501e+02 -1.22539662e+01 -6.65459303e+00 -6.65459303e+00
 -6.65459303e+00 -1.16356926e+00 -2.36447130e-01 -2.36447130e-01
 -2.36447130e-01  8.95502880e+01  7.03568637e+02  3.78152426e+03
  1.59223182e+04  5.43180405e+04]
E1 = -706.552589233183  E_coul = 198.91613743568655
Extra cycle  E= -507.636451797496  delta_E=    0  |g|= 5.87e-09  |ddm|= 1.45e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.48072046491907
E1 = -706.552589233183  E_coul = 198.91613743568655
init E= -507.636451797496
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236447130327884  LUMO = 89.5502880280812
  mo_energy =
[-1.20269501e+02 -1.22539662e+01 -6.65459302e+00 -6.65459302e+00
 -6.65459302e+00 -1.16356926e+00 -2.36447130e-01 -2.36447130e-01
 -2.36447130e-01  8.95502880e+01  7.03568637e+02  3.78152426e+03
  1.59223182e+04  5.43180405e+04]
E1 = -706.5525892336692  E_coul = 198.91613743617273
cycle= 1 E= -507.636451797496  delta_E= -5.68e-14  |g|= 1.14e-10  |ddm|= 2.21e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5525892336692  E_coul = 198.91613743617273
  HOMO = -0.236447130325578  LUMO = 89.5502880281332
  mo_energy =
[-1.20269501e+02 -1.22539662e+01 -6.65459302e+00 -6.65459302e+00
 -6.65459302e+00 -1.16356926e+00 -2.36447130e-01 -2.36447130e-01
 -2.36447130e-01  8.95502880e+01  7.03568637e+02  3.78152426e+03
  1.59223182e+04  5.43180405e+04]
E1 = -706.5525892336775  E_coul = 198.916137436181
Extra cycle  E= -507.636451797497  delta_E= -5.68e-14  |g|= 1.85e-11  |ddm|= 3.86e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202884e+03 1.83551001e+04 2.22336767e+03 4.77662957e+02
 1.25834305e+02 3.82999153e+01 4.74380721e+00 3.91254981e-01
 8.59847185e+00 4.90816552e-01]
grad_E = [-8.14327771e-08 -1.90000714e-06  6.58347941e-05  2.80066359e-05
  3.09492000e-05 -6.47123189e-06 -2.34291321e-06 -3.21713453e-04
  3.23730818e-05 -4.60266060e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:01 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02805366        1
[INPUT] 0    0    [1    /1   ]  18355.0976539        1
[INPUT] 0    0    [1    /1   ]  2223.52352734        1
[INPUT] 0    0    [1    /1   ]  477.324122611        1
[INPUT] 0    0    [1    /1   ]  125.708852039        1
[INPUT] 0    0    [1    /1   ]  38.2736406551        1
[INPUT] 0    0    [1    /1   ]  4.74374106451        1
[INPUT] 0    0    [1    /1   ]  0.391268943903       1
[INPUT] 1    0    [1    /1   ]  8.59846197584        1
[INPUT] 1    0    [1    /1   ]  0.490827275084       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.028053656742, 1.0]], [0, [18355.097653874847, 1.0]], [0, [2223.5235273370436, 1.0]], [0, [477.32412261131367, 1.0]], [0, [125.70885203920614, 1.0]], [0, [38.273640655099214, 1.0]], [0, [4.743741064506524, 1.0]], [0, [0.391268943902848, 1.0]], [1, [8.59846197583633, 1.0]], [1, [0.49082727508387974, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02805366]
bas 1, expnt(s) = [18355.09765387]
bas 2, expnt(s) = [2223.52352734]
bas 3, expnt(s) = [477.32412261]
bas 4, expnt(s) = [125.70885204]
bas 5, expnt(s) = [38.27364066]
bas 6, expnt(s) = [4.74374106]
bas 7, expnt(s) = [0.39126894]
bas 8, expnt(s) = [8.59846198]
bas 9, expnt(s) = [0.49082728]
CPU time:       148.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202805e+03 2.00390465e+03 1.83550977e+04 3.98412127e+03
 2.22352353e+03 8.18081028e+02 4.77324123e+02 2.58003182e+02
 1.25708852e+02 9.48504552e+01 3.82736407e+01 3.88767414e+01
 4.74374106e+00 8.12092979e+00 3.91268944e-01 1.24988932e+00
 8.59846198e+00 4.29546675e+01 4.90827275e-01 1.19851991e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319911725762978
cond(S) = 87.43003992322315
E1 = -689.1376316587506  E_coul = 184.91733575780643
init E= -504.220295900944
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680916639605284  LUMO = 88.1076139353157
  mo_energy =
[-1.21648709e+02 -1.32809661e+01 -7.62133794e+00 -7.62133794e+00
 -7.62133794e+00 -1.65082447e+00 -6.80916640e-01 -6.80916640e-01
 -6.80916640e-01  8.81076139e+01  7.01507465e+02  3.77887681e+03
  1.59198832e+04  5.43158658e+04]
E1 = -706.5834551761718  E_coul = 198.9474072426914
cycle= 1 E= -507.63604793348  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437562
diis-c [-0.19146008  1.        ]
  HOMO = -0.236249955134607  LUMO = 89.4440296540666
  mo_energy =
[-1.20261119e+02 -1.22527738e+01 -6.65279824e+00 -6.65279824e+00
 -6.65279824e+00 -1.16348237e+00 -2.36249955e-01 -2.36249955e-01
 -2.36249955e-01  8.94440297e+01  7.02878229e+02  3.78014143e+03
  1.59210366e+04  5.43169393e+04]
E1 = -706.5535829174127  E_coul = 198.91712954360264
cycle= 2 E= -507.63645337381  delta_E= -0.000405  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501092
diis-c [-2.51082512e-05  7.61121833e-05  9.99923888e-01]
  HOMO = -0.236414593632514  LUMO = 89.4406160851455
  mo_energy =
[-1.20269379e+02 -1.22538937e+01 -6.65453366e+00 -6.65453366e+00
 -6.65453366e+00 -1.16354324e+00 -2.36414594e-01 -2.36414594e-01
 -2.36414594e-01  8.94406161e+01  7.02868018e+02  3.78012646e+03
  1.59210191e+04  5.43169206e+04]
E1 = -706.5531742097619  E_coul = 198.91672073527155
cycle= 3 E= -507.63645347449  delta_E= -1.01e-07  |g|= 9.3e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127593
diis-c [-3.64795565e-10  3.40345595e-05 -2.56642112e-02  1.02563018e+00]
  HOMO = -0.236416726005951  LUMO = 89.4405720990203
  mo_energy =
[-1.20269489e+02 -1.22539089e+01 -6.65455957e+00 -6.65455957e+00
 -6.65455957e+00 -1.16354388e+00 -2.36416726e-01 -2.36416726e-01
 -2.36416726e-01  8.94405721e+01  7.02867903e+02  3.78012631e+03
  1.59210189e+04  5.43169204e+04]
E1 = -706.5531673950127  E_coul = 198.91671392048497
cycle= 4 E= -507.636453474528  delta_E= -3.73e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5531673950127  E_coul = 198.91671392048497
  HOMO = -0.236416711455185  LUMO = 89.440572414674
  mo_energy =
[-1.20269489e+02 -1.22539088e+01 -6.65455943e+00 -6.65455943e+00
 -6.65455943e+00 -1.16354387e+00 -2.36416711e-01 -2.36416711e-01
 -2.36416711e-01  8.94405724e+01  7.02867904e+02  3.78012631e+03
  1.59210189e+04  5.43169204e+04]
E1 = -706.5531674279792  E_coul = 198.91671395345162
Extra cycle  E= -507.636453474528  delta_E= 5.68e-14  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202805e+03 1.83550977e+04 2.22352353e+03 4.77324123e+02
 1.25708852e+02 3.82736407e+01 4.74374106e+00 3.91268944e-01
 8.59846198e+00 4.90827275e-01]
E = -507.6364534745276
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:01 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02805366        1
[INPUT] 0    0    [1    /1   ]  18355.0976539        1
[INPUT] 0    0    [1    /1   ]  2223.52352734        1
[INPUT] 0    0    [1    /1   ]  477.324122611        1
[INPUT] 0    0    [1    /1   ]  125.708852039        1
[INPUT] 0    0    [1    /1   ]  38.2736406551        1
[INPUT] 0    0    [1    /1   ]  4.74374106451        1
[INPUT] 0    0    [1    /1   ]  0.391268943903       1
[INPUT] 1    0    [1    /1   ]  8.59846197584        1
[INPUT] 1    0    [1    /1   ]  0.490827275084       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.028053656742, 1.0]], [0, [18355.097653874847, 1.0]], [0, [2223.5235273370436, 1.0]], [0, [477.32412261131367, 1.0]], [0, [125.70885203920614, 1.0]], [0, [38.273640655099214, 1.0]], [0, [4.743741064506524, 1.0]], [0, [0.391268943902848, 1.0]], [1, [8.59846197583633, 1.0]], [1, [0.49082727508387974, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02805366]
bas 1, expnt(s) = [18355.09765387]
bas 2, expnt(s) = [2223.52352734]
bas 3, expnt(s) = [477.32412261]
bas 4, expnt(s) = [125.70885204]
bas 5, expnt(s) = [38.27364066]
bas 6, expnt(s) = [4.74374106]
bas 7, expnt(s) = [0.39126894]
bas 8, expnt(s) = [8.59846198]
bas 9, expnt(s) = [0.49082728]
CPU time:       149.33
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202805e+03 2.00390465e+03 1.83550977e+04 3.98412127e+03
 2.22352353e+03 8.18081028e+02 4.77324123e+02 2.58003182e+02
 1.25708852e+02 9.48504552e+01 3.82736407e+01 3.88767414e+01
 4.74374106e+00 8.12092979e+00 3.91268944e-01 1.24988932e+00
 8.59846198e+00 4.29546675e+01 4.90827275e-01 1.19851991e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319911725762978
cond(S) = 87.43003992322315
E1 = -689.1376316587506  E_coul = 184.91733575780643
init E= -504.220295900944
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680916639605284  LUMO = 88.1076139353157
  mo_energy =
[-1.21648709e+02 -1.32809661e+01 -7.62133794e+00 -7.62133794e+00
 -7.62133794e+00 -1.65082447e+00 -6.80916640e-01 -6.80916640e-01
 -6.80916640e-01  8.81076139e+01  7.01507465e+02  3.77887681e+03
  1.59198832e+04  5.43158658e+04]
E1 = -706.5834551761718  E_coul = 198.9474072426914
cycle= 1 E= -507.63604793348  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437562
diis-c [-0.19146008  1.        ]
  HOMO = -0.236249955134607  LUMO = 89.4440296540666
  mo_energy =
[-1.20261119e+02 -1.22527738e+01 -6.65279824e+00 -6.65279824e+00
 -6.65279824e+00 -1.16348237e+00 -2.36249955e-01 -2.36249955e-01
 -2.36249955e-01  8.94440297e+01  7.02878229e+02  3.78014143e+03
  1.59210366e+04  5.43169393e+04]
E1 = -706.5535829174127  E_coul = 198.91712954360264
cycle= 2 E= -507.63645337381  delta_E= -0.000405  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501092
diis-c [-2.51082512e-05  7.61121833e-05  9.99923888e-01]
  HOMO = -0.236414593632514  LUMO = 89.4406160851455
  mo_energy =
[-1.20269379e+02 -1.22538937e+01 -6.65453366e+00 -6.65453366e+00
 -6.65453366e+00 -1.16354324e+00 -2.36414594e-01 -2.36414594e-01
 -2.36414594e-01  8.94406161e+01  7.02868018e+02  3.78012646e+03
  1.59210191e+04  5.43169206e+04]
E1 = -706.5531742097619  E_coul = 198.91672073527155
cycle= 3 E= -507.63645347449  delta_E= -1.01e-07  |g|= 9.3e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127593
diis-c [-3.64795565e-10  3.40345595e-05 -2.56642112e-02  1.02563018e+00]
  HOMO = -0.236416726005951  LUMO = 89.4405720990203
  mo_energy =
[-1.20269489e+02 -1.22539089e+01 -6.65455957e+00 -6.65455957e+00
 -6.65455957e+00 -1.16354388e+00 -2.36416726e-01 -2.36416726e-01
 -2.36416726e-01  8.94405721e+01  7.02867903e+02  3.78012631e+03
  1.59210189e+04  5.43169204e+04]
E1 = -706.5531673950127  E_coul = 198.91671392048497
cycle= 4 E= -507.636453474528  delta_E= -3.73e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5531673950127  E_coul = 198.91671392048497
  HOMO = -0.236416711455185  LUMO = 89.440572414674
  mo_energy =
[-1.20269489e+02 -1.22539088e+01 -6.65455943e+00 -6.65455943e+00
 -6.65455943e+00 -1.16354387e+00 -2.36416711e-01 -2.36416711e-01
 -2.36416711e-01  8.94405724e+01  7.02867904e+02  3.78012631e+03
  1.59210189e+04  5.43169204e+04]
E1 = -706.5531674279792  E_coul = 198.91671395345162
Extra cycle  E= -507.636453474528  delta_E= 5.68e-14  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.43003992322315
E1 = -706.5531674279792  E_coul = 198.91671395345162
init E= -507.636453474528
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236416711288096  LUMO = 89.4405724184342
  mo_energy =
[-1.20269489e+02 -1.22539088e+01 -6.65455943e+00 -6.65455943e+00
 -6.65455943e+00 -1.16354387e+00 -2.36416711e-01 -2.36416711e-01
 -2.36416711e-01  8.94405724e+01  7.02867904e+02  3.78012631e+03
  1.59210189e+04  5.43169204e+04]
E1 = -706.553167428468  E_coul = 198.9167139539402
cycle= 1 E= -507.636453474528  delta_E= -1.71e-13  |g|= 1.18e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.553167428468  E_coul = 198.9167139539402
  HOMO = -0.23641671128577  LUMO = 89.4405724184875
  mo_energy =
[-1.20269489e+02 -1.22539088e+01 -6.65455943e+00 -6.65455943e+00
 -6.65455943e+00 -1.16354387e+00 -2.36416711e-01 -2.36416711e-01
 -2.36416711e-01  8.94405724e+01  7.02867904e+02  3.78012631e+03
  1.59210189e+04  5.43169204e+04]
E1 = -706.5531674284765  E_coul = 198.91671395394843
Extra cycle  E= -507.636453474528  delta_E= -2.84e-13  |g|= 6.74e-12  |ddm|= 3.86e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202805e+03 1.83550977e+04 2.22352353e+03 4.77324123e+02
 1.25708852e+02 3.82736407e+01 4.74374106e+00 3.91268944e-01
 8.59846198e+00 4.90827275e-01]
grad_E = [-8.75470725e-08 -1.89636831e-06  6.61824472e-05  2.93650843e-05
  5.56814603e-06  2.97677983e-06 -9.83889213e-06 -1.79397730e-05
  8.50051634e-06 -2.57942510e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:03 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02784836        1
[INPUT] 0    0    [1    /1   ]  18355.0970108        1
[INPUT] 0    0    [1    /1   ]  2223.56434312        1
[INPUT] 0    0    [1    /1   ]  477.232430062        1
[INPUT] 0    0    [1    /1   ]  125.687065105        1
[INPUT] 0    0    [1    /1   ]  38.2697503536        1
[INPUT] 0    0    [1    /1   ]  4.74374200156        1
[INPUT] 0    0    [1    /1   ]  0.39126992098        1
[INPUT] 1    0    [1    /1   ]  8.59845259546        1
[INPUT] 1    0    [1    /1   ]  0.490828004148       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027848356118, 1.0]], [0, [18355.097010832007, 1.0]], [0, [2223.564343122287, 1.0]], [0, [477.232430062472, 1.0]], [0, [125.68706510548584, 1.0]], [0, [38.26975035357791, 1.0]], [0, [4.743742001564509, 1.0]], [0, [0.39126992097988167, 1.0]], [1, [8.598452595462751, 1.0]], [1, [0.4908280041477818, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02784836]
bas 1, expnt(s) = [18355.09701083]
bas 2, expnt(s) = [2223.56434312]
bas 3, expnt(s) = [477.23243006]
bas 4, expnt(s) = [125.68706511]
bas 5, expnt(s) = [38.26975035]
bas 6, expnt(s) = [4.743742]
bas 7, expnt(s) = [0.39126992]
bas 8, expnt(s) = [8.5984526]
bas 9, expnt(s) = [0.490828]
CPU time:       153.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202785e+03 2.00390461e+03 1.83550970e+04 3.98412116e+03
 2.22356434e+03 8.18092291e+02 4.77232430e+02 2.57966009e+02
 1.25687065e+02 9.48381259e+01 3.82697504e+01 3.88737776e+01
 4.74374200e+00 8.12093099e+00 3.91269921e-01 1.24989166e+00
 8.59845260e+00 4.29546089e+01 4.90828004e-01 1.19852214e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319910971318457
cond(S) = 87.4206025000945
E1 = -689.13764237957  E_coul = 184.91733698439964
init E= -504.22030539517
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680914971009303  LUMO = 88.0901417302537
  mo_energy =
[-1.21648716e+02 -1.32809646e+01 -7.62133807e+00 -7.62133807e+00
 -7.62133807e+00 -1.65082358e+00 -6.80914971e-01 -6.80914971e-01
 -6.80914971e-01  8.80901417e+01  7.01362748e+02  3.77855242e+03
  1.59195800e+04  5.43156066e+04]
E1 = -706.5834789735618  E_coul = 198.94743109121453
cycle= 1 E= -507.636047882347  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437574
diis-c [-0.19147139  1.        ]
  HOMO = -0.236247709040021  LUMO = 89.4265389643456
  mo_energy =
[-1.20261121e+02 -1.22527716e+01 -6.65279726e+00 -6.65279726e+00
 -6.65279726e+00 -1.16348076e+00 -2.36247709e-01 -2.36247709e-01
 -2.36247709e-01  8.94265390e+01  7.02733520e+02  3.77981703e+03
  1.59207334e+04  5.43166802e+04]
E1 = -706.5535983067741  E_coul = 198.91714486643437
cycle= 2 E= -507.63645344034  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501154
diis-c [-2.51144314e-05  7.70522771e-05  9.99922948e-01]
  HOMO = -0.236412404021703  LUMO = 89.4231248437501
  mo_energy =
[-1.20269383e+02 -1.22538918e+01 -6.65453323e+00 -6.65453323e+00
 -6.65453323e+00 -1.16354165e+00 -2.36412404e-01 -2.36412404e-01
 -2.36412404e-01  8.94231248e+01  7.02723308e+02  3.77980205e+03
  1.59207159e+04  5.43166614e+04]
E1 = -706.5531894325562  E_coul = 198.91673589148755
cycle= 3 E= -507.636453541069  delta_E= -1.01e-07  |g|= 9.3e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127626
diis-c [-3.64994977e-10  3.40331801e-05 -2.56676160e-02  1.02563358e+00]
  HOMO = -0.236414537521092  LUMO = 89.4230808397747
  mo_energy =
[-1.20269493e+02 -1.22539070e+01 -6.65455916e+00 -6.65455916e+00
 -6.65455916e+00 -1.16354229e+00 -2.36414538e-01 -2.36414538e-01
 -2.36414538e-01  8.94230808e+01  7.02723192e+02  3.77980191e+03
  1.59207157e+04  5.43166612e+04]
E1 = -706.5531826138103  E_coul = 198.91672907270421
cycle= 4 E= -507.636453541106  delta_E= -3.74e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5531826138103  E_coul = 198.91672907270421
  HOMO = -0.236414522960915  LUMO = 89.4230811555518
  mo_energy =
[-1.20269492e+02 -1.22539069e+01 -6.65455901e+00 -6.65455901e+00
 -6.65455901e+00 -1.16354228e+00 -2.36414523e-01 -2.36414523e-01
 -2.36414523e-01  8.94230812e+01  7.02723193e+02  3.77980191e+03
  1.59207157e+04  5.43166612e+04]
E1 = -706.5531826467985  E_coul = 198.91672910569238
Extra cycle  E= -507.636453541106  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202785e+03 1.83550970e+04 2.22356434e+03 4.77232430e+02
 1.25687065e+02 3.82697504e+01 4.74374200e+00 3.91269921e-01
 8.59845260e+00 4.90828004e-01]
E = -507.6364535411061
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:04 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02784836        1
[INPUT] 0    0    [1    /1   ]  18355.0970108        1
[INPUT] 0    0    [1    /1   ]  2223.56434312        1
[INPUT] 0    0    [1    /1   ]  477.232430062        1
[INPUT] 0    0    [1    /1   ]  125.687065105        1
[INPUT] 0    0    [1    /1   ]  38.2697503536        1
[INPUT] 0    0    [1    /1   ]  4.74374200156        1
[INPUT] 0    0    [1    /1   ]  0.39126992098        1
[INPUT] 1    0    [1    /1   ]  8.59845259546        1
[INPUT] 1    0    [1    /1   ]  0.490828004148       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027848356118, 1.0]], [0, [18355.097010832007, 1.0]], [0, [2223.564343122287, 1.0]], [0, [477.232430062472, 1.0]], [0, [125.68706510548584, 1.0]], [0, [38.26975035357791, 1.0]], [0, [4.743742001564509, 1.0]], [0, [0.39126992097988167, 1.0]], [1, [8.598452595462751, 1.0]], [1, [0.4908280041477818, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02784836]
bas 1, expnt(s) = [18355.09701083]
bas 2, expnt(s) = [2223.56434312]
bas 3, expnt(s) = [477.23243006]
bas 4, expnt(s) = [125.68706511]
bas 5, expnt(s) = [38.26975035]
bas 6, expnt(s) = [4.743742]
bas 7, expnt(s) = [0.39126992]
bas 8, expnt(s) = [8.5984526]
bas 9, expnt(s) = [0.490828]
CPU time:       153.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202785e+03 2.00390461e+03 1.83550970e+04 3.98412116e+03
 2.22356434e+03 8.18092291e+02 4.77232430e+02 2.57966009e+02
 1.25687065e+02 9.48381259e+01 3.82697504e+01 3.88737776e+01
 4.74374200e+00 8.12093099e+00 3.91269921e-01 1.24989166e+00
 8.59845260e+00 4.29546089e+01 4.90828004e-01 1.19852214e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319910971318457
cond(S) = 87.4206025000945
E1 = -689.13764237957  E_coul = 184.91733698439964
init E= -504.22030539517
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680914971009303  LUMO = 88.0901417302537
  mo_energy =
[-1.21648716e+02 -1.32809646e+01 -7.62133807e+00 -7.62133807e+00
 -7.62133807e+00 -1.65082358e+00 -6.80914971e-01 -6.80914971e-01
 -6.80914971e-01  8.80901417e+01  7.01362748e+02  3.77855242e+03
  1.59195800e+04  5.43156066e+04]
E1 = -706.5834789735618  E_coul = 198.94743109121453
cycle= 1 E= -507.636047882347  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437574
diis-c [-0.19147139  1.        ]
  HOMO = -0.236247709040021  LUMO = 89.4265389643456
  mo_energy =
[-1.20261121e+02 -1.22527716e+01 -6.65279726e+00 -6.65279726e+00
 -6.65279726e+00 -1.16348076e+00 -2.36247709e-01 -2.36247709e-01
 -2.36247709e-01  8.94265390e+01  7.02733520e+02  3.77981703e+03
  1.59207334e+04  5.43166802e+04]
E1 = -706.5535983067741  E_coul = 198.91714486643437
cycle= 2 E= -507.63645344034  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501154
diis-c [-2.51144314e-05  7.70522771e-05  9.99922948e-01]
  HOMO = -0.236412404021703  LUMO = 89.4231248437501
  mo_energy =
[-1.20269383e+02 -1.22538918e+01 -6.65453323e+00 -6.65453323e+00
 -6.65453323e+00 -1.16354165e+00 -2.36412404e-01 -2.36412404e-01
 -2.36412404e-01  8.94231248e+01  7.02723308e+02  3.77980205e+03
  1.59207159e+04  5.43166614e+04]
E1 = -706.5531894325562  E_coul = 198.91673589148755
cycle= 3 E= -507.636453541069  delta_E= -1.01e-07  |g|= 9.3e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127626
diis-c [-3.64994977e-10  3.40331801e-05 -2.56676160e-02  1.02563358e+00]
  HOMO = -0.236414537521092  LUMO = 89.4230808397747
  mo_energy =
[-1.20269493e+02 -1.22539070e+01 -6.65455916e+00 -6.65455916e+00
 -6.65455916e+00 -1.16354229e+00 -2.36414538e-01 -2.36414538e-01
 -2.36414538e-01  8.94230808e+01  7.02723192e+02  3.77980191e+03
  1.59207157e+04  5.43166612e+04]
E1 = -706.5531826138103  E_coul = 198.91672907270421
cycle= 4 E= -507.636453541106  delta_E= -3.74e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5531826138103  E_coul = 198.91672907270421
  HOMO = -0.236414522960915  LUMO = 89.4230811555518
  mo_energy =
[-1.20269492e+02 -1.22539069e+01 -6.65455901e+00 -6.65455901e+00
 -6.65455901e+00 -1.16354228e+00 -2.36414523e-01 -2.36414523e-01
 -2.36414523e-01  8.94230812e+01  7.02723193e+02  3.77980191e+03
  1.59207157e+04  5.43166612e+04]
E1 = -706.5531826467985  E_coul = 198.91672910569238
Extra cycle  E= -507.636453541106  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.4206025000945
E1 = -706.5531826467985  E_coul = 198.91672910569238
init E= -507.636453541106
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.2364145227937  LUMO = 89.4230811593143
  mo_energy =
[-1.20269492e+02 -1.22539069e+01 -6.65455901e+00 -6.65455901e+00
 -6.65455901e+00 -1.16354228e+00 -2.36414523e-01 -2.36414523e-01
 -2.36414523e-01  8.94230812e+01  7.02723193e+02  3.77980191e+03
  1.59207157e+04  5.43166612e+04]
E1 = -706.5531826472875  E_coul = 198.91672910618158
cycle= 1 E= -507.636453541106  delta_E= 2.27e-13  |g|= 1.14e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5531826472875  E_coul = 198.91672910618158
  HOMO = -0.236414522791372  LUMO = 89.4230811593664
  mo_energy =
[-1.20269492e+02 -1.22539069e+01 -6.65455901e+00 -6.65455901e+00
 -6.65455901e+00 -1.16354228e+00 -2.36414523e-01 -2.36414523e-01
 -2.36414523e-01  8.94230812e+01  7.02723193e+02  3.77980191e+03
  1.59207157e+04  5.43166612e+04]
E1 = -706.5531826472958  E_coul = 198.91672910618988
Extra cycle  E= -507.636453541106  delta_E=    0  |g|= 4.08e-12  |ddm|= 3.91e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202785e+03 1.83550970e+04 2.22356434e+03 4.77232430e+02
 1.25687065e+02 3.82697504e+01 4.74374200e+00 3.91269921e-01
 8.59845260e+00 4.90828004e-01]
grad_E = [-9.00282420e-08 -1.89492249e-06  6.63402837e-05  2.81237722e-05
  6.13818663e-06  1.69519124e-06  8.58731058e-07  5.37887254e-06
 -1.76595080e-07  1.29498372e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.0278308         1
[INPUT] 0    0    [1    /1   ]  18355.0969578        1
[INPUT] 0    0    [1    /1   ]  2223.56777709        1
[INPUT] 0    0    [1    /1   ]  477.224352097        1
[INPUT] 0    0    [1    /1   ]  125.685896561        1
[INPUT] 0    0    [1    /1   ]  38.2695983321        1
[INPUT] 0    0    [1    /1   ]  4.74374110728        1
[INPUT] 0    0    [1    /1   ]  0.391269774269       1
[INPUT] 1    0    [1    /1   ]  8.59845179003        1
[INPUT] 1    0    [1    /1   ]  0.490827759768       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027830803986, 1.0]], [0, [18355.096957831076, 1.0]], [0, [2223.56777709096, 1.0]], [0, [477.22435209690315, 1.0]], [0, [125.68589656098648, 1.0]], [0, [38.26959833208034, 1.0]], [0, [4.743741107279277, 1.0]], [0, [0.39126977426868753, 1.0]], [1, [8.598451790027665, 1.0]], [1, [0.4908277597684901, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.0278308]
bas 1, expnt(s) = [18355.09695783]
bas 2, expnt(s) = [2223.56777709]
bas 3, expnt(s) = [477.2243521]
bas 4, expnt(s) = [125.68589656]
bas 5, expnt(s) = [38.26959833]
bas 6, expnt(s) = [4.74374111]
bas 7, expnt(s) = [0.39126977]
bas 8, expnt(s) = [8.59845179]
bas 9, expnt(s) = [0.49082776]
CPU time:       157.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202783e+03 2.00390461e+03 1.83550970e+04 3.98412115e+03
 2.22356778e+03 8.18093238e+02 4.77224352e+02 2.57962735e+02
 1.25685897e+02 9.48374646e+01 3.82695983e+01 3.88736618e+01
 4.74374111e+00 8.12092984e+00 3.91269774e-01 1.24989131e+00
 8.59845179e+00 4.29546039e+01 4.90827760e-01 1.19852139e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319911331073218
cond(S) = 87.42002566035289
E1 = -689.1376235495834  E_coul = 184.91732272523035
init E= -504.220300824353
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680915318046854  LUMO = 88.0893271294199
  mo_energy =
[-1.21648718e+02 -1.32809658e+01 -7.62133904e+00 -7.62133904e+00
 -7.62133904e+00 -1.65082379e+00 -6.80915318e-01 -6.80915318e-01
 -6.80915318e-01  8.80893271e+01  7.01352733e+02  3.77852707e+03
  1.59195561e+04  5.43155862e+04]
E1 = -706.5834580557313  E_coul = 198.9474101728543
cycle= 1 E= -507.636047882877  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437576
diis-c [-0.19147274  1.        ]
  HOMO = -0.236248367106301  LUMO = 89.425722814765
  mo_energy =
[-1.20261123e+02 -1.22527731e+01 -6.65279866e+00 -6.65279866e+00
 -6.65279866e+00 -1.16348127e+00 -2.36248367e-01 -2.36248367e-01
 -2.36248367e-01  8.94257228e+01  7.02723504e+02  3.77979168e+03
  1.59207095e+04  5.43166598e+04]
E1 = -706.5535769938497  E_coul = 198.917123547411
cycle= 2 E= -507.636453446439  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501157
diis-c [-2.51146845e-05  7.70945836e-05  9.99922905e-01]
  HOMO = -0.236413064576535  LUMO = 89.4223086683732
  mo_energy =
[-1.20269385e+02 -1.22538934e+01 -6.65453466e+00 -6.65453466e+00
 -6.65453466e+00 -1.16354216e+00 -2.36413065e-01 -2.36413065e-01
 -2.36413065e-01  8.94223087e+01  7.02713292e+02  3.77977670e+03
  1.59206919e+04  5.43166410e+04]
E1 = -706.5531681117851  E_coul = 198.91671456461555
cycle= 3 E= -507.63645354717  delta_E= -1.01e-07  |g|= 9.3e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127627
diis-c [-3.65003542e-10  3.40330712e-05 -2.56677664e-02  1.02563373e+00]
  HOMO = -0.236415198125812  LUMO = 89.4222646635512
  mo_energy =
[-1.20269495e+02 -1.22539086e+01 -6.65456059e+00 -6.65456059e+00
 -6.65456059e+00 -1.16354280e+00 -2.36415198e-01 -2.36415198e-01
 -2.36415198e-01  8.94222647e+01  7.02713176e+02  3.77977656e+03
  1.59206918e+04  5.43166408e+04]
E1 = -706.5531612928534  E_coul = 198.91670774564633
cycle= 4 E= -507.636453547207  delta_E= -3.74e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5531612928534  E_coul = 198.91670774564633
  HOMO = -0.236415183565208  LUMO = 89.4222649793353
  mo_energy =
[-1.20269495e+02 -1.22539085e+01 -6.65456044e+00 -6.65456044e+00
 -6.65456044e+00 -1.16354279e+00 -2.36415184e-01 -2.36415184e-01
 -2.36415184e-01  8.94222650e+01  7.02713177e+02  3.77977656e+03
  1.59206918e+04  5.43166408e+04]
E1 = -706.5531613258424  E_coul = 198.91670777863547
Extra cycle  E= -507.636453547207  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202783e+03 1.83550970e+04 2.22356778e+03 4.77224352e+02
 1.25685897e+02 3.82695983e+01 4.74374111e+00 3.91269774e-01
 8.59845179e+00 4.90827760e-01]
E = -507.636453547207
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:07 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.0278308         1
[INPUT] 0    0    [1    /1   ]  18355.0969578        1
[INPUT] 0    0    [1    /1   ]  2223.56777709        1
[INPUT] 0    0    [1    /1   ]  477.224352097        1
[INPUT] 0    0    [1    /1   ]  125.685896561        1
[INPUT] 0    0    [1    /1   ]  38.2695983321        1
[INPUT] 0    0    [1    /1   ]  4.74374110728        1
[INPUT] 0    0    [1    /1   ]  0.391269774269       1
[INPUT] 1    0    [1    /1   ]  8.59845179003        1
[INPUT] 1    0    [1    /1   ]  0.490827759768       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027830803986, 1.0]], [0, [18355.096957831076, 1.0]], [0, [2223.56777709096, 1.0]], [0, [477.22435209690315, 1.0]], [0, [125.68589656098648, 1.0]], [0, [38.26959833208034, 1.0]], [0, [4.743741107279277, 1.0]], [0, [0.39126977426868753, 1.0]], [1, [8.598451790027665, 1.0]], [1, [0.4908277597684901, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.0278308]
bas 1, expnt(s) = [18355.09695783]
bas 2, expnt(s) = [2223.56777709]
bas 3, expnt(s) = [477.2243521]
bas 4, expnt(s) = [125.68589656]
bas 5, expnt(s) = [38.26959833]
bas 6, expnt(s) = [4.74374111]
bas 7, expnt(s) = [0.39126977]
bas 8, expnt(s) = [8.59845179]
bas 9, expnt(s) = [0.49082776]
CPU time:       158.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202783e+03 2.00390461e+03 1.83550970e+04 3.98412115e+03
 2.22356778e+03 8.18093238e+02 4.77224352e+02 2.57962735e+02
 1.25685897e+02 9.48374646e+01 3.82695983e+01 3.88736618e+01
 4.74374111e+00 8.12092984e+00 3.91269774e-01 1.24989131e+00
 8.59845179e+00 4.29546039e+01 4.90827760e-01 1.19852139e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319911331073218
cond(S) = 87.42002566035289
E1 = -689.1376235495834  E_coul = 184.91732272523035
init E= -504.220300824353
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680915318046854  LUMO = 88.0893271294199
  mo_energy =
[-1.21648718e+02 -1.32809658e+01 -7.62133904e+00 -7.62133904e+00
 -7.62133904e+00 -1.65082379e+00 -6.80915318e-01 -6.80915318e-01
 -6.80915318e-01  8.80893271e+01  7.01352733e+02  3.77852707e+03
  1.59195561e+04  5.43155862e+04]
E1 = -706.5834580557313  E_coul = 198.9474101728543
cycle= 1 E= -507.636047882877  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437576
diis-c [-0.19147274  1.        ]
  HOMO = -0.236248367106301  LUMO = 89.425722814765
  mo_energy =
[-1.20261123e+02 -1.22527731e+01 -6.65279866e+00 -6.65279866e+00
 -6.65279866e+00 -1.16348127e+00 -2.36248367e-01 -2.36248367e-01
 -2.36248367e-01  8.94257228e+01  7.02723504e+02  3.77979168e+03
  1.59207095e+04  5.43166598e+04]
E1 = -706.5535769938497  E_coul = 198.917123547411
cycle= 2 E= -507.636453446439  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501157
diis-c [-2.51146845e-05  7.70945836e-05  9.99922905e-01]
  HOMO = -0.236413064576535  LUMO = 89.4223086683732
  mo_energy =
[-1.20269385e+02 -1.22538934e+01 -6.65453466e+00 -6.65453466e+00
 -6.65453466e+00 -1.16354216e+00 -2.36413065e-01 -2.36413065e-01
 -2.36413065e-01  8.94223087e+01  7.02713292e+02  3.77977670e+03
  1.59206919e+04  5.43166410e+04]
E1 = -706.5531681117851  E_coul = 198.91671456461555
cycle= 3 E= -507.63645354717  delta_E= -1.01e-07  |g|= 9.3e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127627
diis-c [-3.65003542e-10  3.40330712e-05 -2.56677664e-02  1.02563373e+00]
  HOMO = -0.236415198125812  LUMO = 89.4222646635512
  mo_energy =
[-1.20269495e+02 -1.22539086e+01 -6.65456059e+00 -6.65456059e+00
 -6.65456059e+00 -1.16354280e+00 -2.36415198e-01 -2.36415198e-01
 -2.36415198e-01  8.94222647e+01  7.02713176e+02  3.77977656e+03
  1.59206918e+04  5.43166408e+04]
E1 = -706.5531612928534  E_coul = 198.91670774564633
cycle= 4 E= -507.636453547207  delta_E= -3.74e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5531612928534  E_coul = 198.91670774564633
  HOMO = -0.236415183565208  LUMO = 89.4222649793353
  mo_energy =
[-1.20269495e+02 -1.22539085e+01 -6.65456044e+00 -6.65456044e+00
 -6.65456044e+00 -1.16354279e+00 -2.36415184e-01 -2.36415184e-01
 -2.36415184e-01  8.94222650e+01  7.02713177e+02  3.77977656e+03
  1.59206918e+04  5.43166408e+04]
E1 = -706.5531613258424  E_coul = 198.91670777863547
Extra cycle  E= -507.636453547207  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.42002566035289
E1 = -706.5531613258424  E_coul = 198.91670777863547
init E= -507.636453547207
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.23641518339799  LUMO = 89.422264983098
  mo_energy =
[-1.20269495e+02 -1.22539085e+01 -6.65456044e+00 -6.65456044e+00
 -6.65456044e+00 -1.16354279e+00 -2.36415183e-01 -2.36415183e-01
 -2.36415183e-01  8.94222650e+01  7.02713177e+02  3.77977656e+03
  1.59206918e+04  5.43166408e+04]
E1 = -706.5531613263317  E_coul = 198.91670777912464
cycle= 1 E= -507.636453547207  delta_E= -1.14e-13  |g|= 1.15e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5531613263317  E_coul = 198.91670777912464
  HOMO = -0.236415183395661  LUMO = 89.4222649831505
  mo_energy =
[-1.20269495e+02 -1.22539085e+01 -6.65456044e+00 -6.65456044e+00
 -6.65456044e+00 -1.16354279e+00 -2.36415183e-01 -2.36415183e-01
 -2.36415183e-01  8.94222650e+01  7.02713177e+02  3.77977656e+03
  1.59206918e+04  5.43166408e+04]
E1 = -706.55316132634  E_coul = 198.9167077791327
Extra cycle  E= -507.636453547207  delta_E= -2.27e-13  |g|= 1.26e-11  |ddm|= 3.86e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202783e+03 1.83550970e+04 2.22356778e+03 4.77224352e+02
 1.25685897e+02 3.82695983e+01 4.74374111e+00 3.91269774e-01
 8.59845179e+00 4.90827760e-01]
grad_E = [-9.02984927e-08 -1.89476627e-06  6.63581953e-05  2.79120872e-05
  6.68368298e-06  1.22259387e-06  7.31919481e-07  2.51746127e-06
 -6.90384411e-07  4.06151821e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02776948        1
[INPUT] 0    0    [1    /1   ]  18355.0967813        1
[INPUT] 0    0    [1    /1   ]  2223.57951748        1
[INPUT] 0    0    [1    /1   ]  477.195713291        1
[INPUT] 0    0    [1    /1   ]  125.681960105        1
[INPUT] 0    0    [1    /1   ]  38.269107438         1
[INPUT] 0    0    [1    /1   ]  4.74373610487        1
[INPUT] 0    0    [1    /1   ]  0.391269073988       1
[INPUT] 1    0    [1    /1   ]  8.59844994107        1
[INPUT] 1    0    [1    /1   ]  0.49082673563        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027769478621, 1.0]], [0, [18355.09678126814, 1.0]], [0, [2223.57951747563, 1.0]], [0, [477.195713291298, 1.0]], [0, [125.6819601047138, 1.0]], [0, [38.26910743800971, 1.0]], [0, [4.743736104865027, 1.0]], [0, [0.39126907398792254, 1.0]], [1, [8.598449941065812, 1.0]], [1, [0.490826735629735, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02776948]
bas 1, expnt(s) = [18355.09678127]
bas 2, expnt(s) = [2223.57951748]
bas 3, expnt(s) = [477.19571329]
bas 4, expnt(s) = [125.6819601]
bas 5, expnt(s) = [38.26910744]
bas 6, expnt(s) = [4.7437361]
bas 7, expnt(s) = [0.39126907]
bas 8, expnt(s) = [8.59844994]
bas 9, expnt(s) = [0.49082674]
CPU time:       162.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202777e+03 2.00390460e+03 1.83550968e+04 3.98412112e+03
 2.22357952e+03 8.18096478e+02 4.77195713e+02 2.57951124e+02
 1.25681960e+02 9.48352368e+01 3.82691074e+01 3.88732878e+01
 4.74373610e+00 8.12092342e+00 3.91269074e-01 1.24988963e+00
 8.59844994e+00 4.29545923e+01 4.90826736e-01 1.19851826e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319912851347304
cond(S) = 87.41803738723836
E1 = -689.1375485412871  E_coul = 184.91726665140013
init E= -504.220281889887
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680916845022921  LUMO = 88.0866217157414
  mo_energy =
[-1.21648724e+02 -1.32809702e+01 -7.62134291e+00 -7.62134291e+00
 -7.62134291e+00 -1.65082463e+00 -6.80916845e-01 -6.80916845e-01
 -6.80916845e-01  8.80866217e+01  7.01317950e+02  3.77843773e+03
  1.59194708e+04  5.43155131e+04]
E1 = -706.5833724117882  E_coul = 198.94732450912056
cycle= 1 E= -507.636047902668  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437582
diis-c [-0.1914776  1.       ]
  HOMO = -0.236251200133246  LUMO = 89.4230116024412
  mo_energy =
[-1.20261132e+02 -1.22527794e+01 -6.65280441e+00 -6.65280441e+00
 -6.65280441e+00 -1.16348341e+00 -2.36251200e-01 -2.36251200e-01
 -2.36251200e-01  8.94230116e+01  7.02688720e+02  3.77970234e+03
  1.59206242e+04  5.43165867e+04]
E1 = -706.5534900146428  E_coul = 198.9170365292467
cycle= 2 E= -507.636453485396  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501166
diis-c [-2.51155714e-05  7.72318710e-05  9.99922768e-01]
  HOMO = -0.236415905864683  LUMO = 89.4195973676064
  mo_energy =
[-1.20269394e+02 -1.22538997e+01 -6.65454050e+00 -6.65454050e+00
 -6.65454050e+00 -1.16354431e+00 -2.36415906e-01 -2.36415906e-01
 -2.36415906e-01  8.94195974e+01  7.02678508e+02  3.77968737e+03
  1.59206067e+04  5.43165679e+04]
E1 = -706.5530811061636  E_coul = 198.91662752002875
cycle= 3 E= -507.636453586135  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127632
diis-c [-3.65031878e-10  3.40326457e-05 -2.56682527e-02  1.02563422e+00]
  HOMO = -0.236418039578864  LUMO = 89.41955335994
  mo_energy =
[-1.20269505e+02 -1.22539149e+01 -6.65456643e+00 -6.65456643e+00
 -6.65456643e+00 -1.16354494e+00 -2.36418040e-01 -2.36418040e-01
 -2.36418040e-01  8.94195534e+01  7.02678392e+02  3.77968723e+03
  1.59206065e+04  5.43165677e+04]
E1 = -706.55307428661  E_coul = 198.91662070043785
cycle= 4 E= -507.636453586172  delta_E= -3.73e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.55307428661  E_coul = 198.91662070043785
  HOMO = -0.236418025016865  LUMO = 89.4195536757436
  mo_energy =
[-1.20269504e+02 -1.22539148e+01 -6.65456629e+00 -6.65456629e+00
 -6.65456629e+00 -1.16354494e+00 -2.36418025e-01 -2.36418025e-01
 -2.36418025e-01  8.94195537e+01  7.02678393e+02  3.77968723e+03
  1.59206065e+04  5.43165677e+04]
E1 = -706.5530743196027  E_coul = 198.91662073343042
Extra cycle  E= -507.636453586172  delta_E= -1.71e-13  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202777e+03 1.83550968e+04 2.22357952e+03 4.77195713e+02
 1.25681960e+02 3.82691074e+01 4.74373610e+00 3.91269074e-01
 8.59844994e+00 4.90826736e-01]
E = -507.6364535861723
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02776948        1
[INPUT] 0    0    [1    /1   ]  18355.0967813        1
[INPUT] 0    0    [1    /1   ]  2223.57951748        1
[INPUT] 0    0    [1    /1   ]  477.195713291        1
[INPUT] 0    0    [1    /1   ]  125.681960105        1
[INPUT] 0    0    [1    /1   ]  38.269107438         1
[INPUT] 0    0    [1    /1   ]  4.74373610487        1
[INPUT] 0    0    [1    /1   ]  0.391269073988       1
[INPUT] 1    0    [1    /1   ]  8.59844994107        1
[INPUT] 1    0    [1    /1   ]  0.49082673563        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027769478621, 1.0]], [0, [18355.09678126814, 1.0]], [0, [2223.57951747563, 1.0]], [0, [477.195713291298, 1.0]], [0, [125.6819601047138, 1.0]], [0, [38.26910743800971, 1.0]], [0, [4.743736104865027, 1.0]], [0, [0.39126907398792254, 1.0]], [1, [8.598449941065812, 1.0]], [1, [0.490826735629735, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02776948]
bas 1, expnt(s) = [18355.09678127]
bas 2, expnt(s) = [2223.57951748]
bas 3, expnt(s) = [477.19571329]
bas 4, expnt(s) = [125.6819601]
bas 5, expnt(s) = [38.26910744]
bas 6, expnt(s) = [4.7437361]
bas 7, expnt(s) = [0.39126907]
bas 8, expnt(s) = [8.59844994]
bas 9, expnt(s) = [0.49082674]
CPU time:       162.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202777e+03 2.00390460e+03 1.83550968e+04 3.98412112e+03
 2.22357952e+03 8.18096478e+02 4.77195713e+02 2.57951124e+02
 1.25681960e+02 9.48352368e+01 3.82691074e+01 3.88732878e+01
 4.74373610e+00 8.12092342e+00 3.91269074e-01 1.24988963e+00
 8.59844994e+00 4.29545923e+01 4.90826736e-01 1.19851826e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319912851347304
cond(S) = 87.41803738723836
E1 = -689.1375485412871  E_coul = 184.91726665140013
init E= -504.220281889887
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680916845022921  LUMO = 88.0866217157414
  mo_energy =
[-1.21648724e+02 -1.32809702e+01 -7.62134291e+00 -7.62134291e+00
 -7.62134291e+00 -1.65082463e+00 -6.80916845e-01 -6.80916845e-01
 -6.80916845e-01  8.80866217e+01  7.01317950e+02  3.77843773e+03
  1.59194708e+04  5.43155131e+04]
E1 = -706.5833724117882  E_coul = 198.94732450912056
cycle= 1 E= -507.636047902668  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437582
diis-c [-0.1914776  1.       ]
  HOMO = -0.236251200133246  LUMO = 89.4230116024412
  mo_energy =
[-1.20261132e+02 -1.22527794e+01 -6.65280441e+00 -6.65280441e+00
 -6.65280441e+00 -1.16348341e+00 -2.36251200e-01 -2.36251200e-01
 -2.36251200e-01  8.94230116e+01  7.02688720e+02  3.77970234e+03
  1.59206242e+04  5.43165867e+04]
E1 = -706.5534900146428  E_coul = 198.9170365292467
cycle= 2 E= -507.636453485396  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501166
diis-c [-2.51155714e-05  7.72318710e-05  9.99922768e-01]
  HOMO = -0.236415905864683  LUMO = 89.4195973676064
  mo_energy =
[-1.20269394e+02 -1.22538997e+01 -6.65454050e+00 -6.65454050e+00
 -6.65454050e+00 -1.16354431e+00 -2.36415906e-01 -2.36415906e-01
 -2.36415906e-01  8.94195974e+01  7.02678508e+02  3.77968737e+03
  1.59206067e+04  5.43165679e+04]
E1 = -706.5530811061636  E_coul = 198.91662752002875
cycle= 3 E= -507.636453586135  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127632
diis-c [-3.65031878e-10  3.40326457e-05 -2.56682527e-02  1.02563422e+00]
  HOMO = -0.236418039578864  LUMO = 89.41955335994
  mo_energy =
[-1.20269505e+02 -1.22539149e+01 -6.65456643e+00 -6.65456643e+00
 -6.65456643e+00 -1.16354494e+00 -2.36418040e-01 -2.36418040e-01
 -2.36418040e-01  8.94195534e+01  7.02678392e+02  3.77968723e+03
  1.59206065e+04  5.43165677e+04]
E1 = -706.55307428661  E_coul = 198.91662070043785
cycle= 4 E= -507.636453586172  delta_E= -3.73e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.55307428661  E_coul = 198.91662070043785
  HOMO = -0.236418025016865  LUMO = 89.4195536757436
  mo_energy =
[-1.20269504e+02 -1.22539148e+01 -6.65456629e+00 -6.65456629e+00
 -6.65456629e+00 -1.16354494e+00 -2.36418025e-01 -2.36418025e-01
 -2.36418025e-01  8.94195537e+01  7.02678393e+02  3.77968723e+03
  1.59206065e+04  5.43165677e+04]
E1 = -706.5530743196027  E_coul = 198.91662073343042
Extra cycle  E= -507.636453586172  delta_E= -1.71e-13  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.41803738723836
E1 = -706.5530743196027  E_coul = 198.91662073343042
init E= -507.636453586172
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236418024849624  LUMO = 89.4195536795055
  mo_energy =
[-1.20269504e+02 -1.22539148e+01 -6.65456628e+00 -6.65456628e+00
 -6.65456628e+00 -1.16354494e+00 -2.36418025e-01 -2.36418025e-01
 -2.36418025e-01  8.94195537e+01  7.02678393e+02  3.77968723e+03
  1.59206065e+04  5.43165677e+04]
E1 = -706.5530743200923  E_coul = 198.91662073391973
cycle= 1 E= -507.636453586173  delta_E= -2.27e-13  |g|= 1.15e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5530743200923  E_coul = 198.91662073391973
  HOMO = -0.236418024847293  LUMO = 89.4195536795571
  mo_energy =
[-1.20269504e+02 -1.22539148e+01 -6.65456628e+00 -6.65456628e+00
 -6.65456628e+00 -1.16354494e+00 -2.36418025e-01 -2.36418025e-01
 -2.36418025e-01  8.94195537e+01  7.02678393e+02  3.77968723e+03
  1.59206065e+04  5.43165677e+04]
E1 = -706.5530743201002  E_coul = 198.9166207339278
Extra cycle  E= -507.636453586172  delta_E= 1.14e-13  |g|= 2.42e-11  |ddm|= 3.89e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34202777e+03 1.83550968e+04 2.22357952e+03 4.77195713e+02
 1.25681960e+02 3.82691074e+01 4.74373610e+00 3.91269074e-01
 8.59844994e+00 4.90826736e-01]
grad_E = [-9.12686267e-08 -1.89420557e-06  6.64227552e-05  2.71328977e-05
  8.76979621e-06 -6.12346315e-07 -1.30040360e-06 -1.08852020e-05
 -1.63885727e-06 -3.50969491e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:12 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02765135        1
[INPUT] 0    0    [1    /1   ]  18355.0964664        1
[INPUT] 0    0    [1    /1   ]  2223.6013768         1
[INPUT] 0    0    [1    /1   ]  477.139452451        1
[INPUT] 0    0    [1    /1   ]  125.674249719        1
[INPUT] 0    0    [1    /1   ]  38.2681456398        1
[INPUT] 0    0    [1    /1   ]  4.74372532971        1
[INPUT] 0    0    [1    /1   ]  0.391267611483       1
[INPUT] 1    0    [1    /1   ]  8.59844727469        1
[INPUT] 1    0    [1    /1   ]  0.490824690283       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.02765134774, 1.0]], [0, [18355.096466356023, 1.0]], [0, [2223.601376798183, 1.0]], [0, [477.13945245105526, 1.0]], [0, [125.6742497193909, 1.0]], [0, [38.26814563976746, 1.0]], [0, [4.7437253297081945, 1.0]], [0, [0.391267611482669, 1.0]], [1, [8.598447274692438, 1.0]], [1, [0.49082469028288156, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02765135]
bas 1, expnt(s) = [18355.09646636]
bas 2, expnt(s) = [2223.6013768]
bas 3, expnt(s) = [477.13945245]
bas 4, expnt(s) = [125.67424972]
bas 5, expnt(s) = [38.26814564]
bas 6, expnt(s) = [4.74372533]
bas 7, expnt(s) = [0.39126761]
bas 8, expnt(s) = [8.59844727]
bas 9, expnt(s) = [0.49082469]
CPU time:       166.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202765e+03 2.00390457e+03 1.83550965e+04 3.98412107e+03
 2.22360138e+03 8.18102510e+02 4.77139452e+02 2.57928314e+02
 1.25674250e+02 9.48308733e+01 3.82681456e+01 3.88725551e+01
 4.74372533e+00 8.12090958e+00 3.91267611e-01 1.24988613e+00
 8.59844727e+00 4.29545757e+01 4.90824690e-01 1.19851202e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319915901830715
cond(S) = 87.41410939256954
E1 = -689.1374011475117  E_coul = 184.9171572476881
init E= -504.220243899824
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68091994133051  LUMO = 88.0813174801374
  mo_energy =
[-1.21648735e+02 -1.32809788e+01 -7.62135048e+00 -7.62135048e+00
 -7.62135048e+00 -1.65082626e+00 -6.80919941e-01 -6.80919941e-01
 -6.80919941e-01  8.80813175e+01  7.01249678e+02  3.77826134e+03
  1.59193003e+04  5.43153655e+04]
E1 = -706.583203119945  E_coul = 198.9471551449032
cycle= 1 E= -507.636047975042  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437592
diis-c [-0.19148709  1.        ]
  HOMO = -0.236256909964118  LUMO = 89.4176958312405
  mo_energy =
[-1.20261149e+02 -1.22527917e+01 -6.65281579e+00 -6.65281579e+00
 -6.65281579e+00 -1.16348770e+00 -2.36256910e-01 -2.36256910e-01
 -2.36256910e-01  8.94176958e+01  7.02620445e+02  3.77952594e+03
  1.59204537e+04  5.43164390e+04]
E1 = -706.5533180897995  E_coul = 198.91686449402678
cycle= 2 E= -507.636453595773  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501184
diis-c [-2.51173518e-05  7.74996854e-05  9.99922500e-01]
  HOMO = -0.236421631954987  LUMO = 89.4142814211767
  mo_energy =
[-1.20269412e+02 -1.22539121e+01 -6.65455205e+00 -6.65455205e+00
 -6.65455205e+00 -1.16354860e+00 -2.36421632e-01 -2.36421632e-01
 -2.36421632e-01  8.94142814e+01  7.02610232e+02  3.77951096e+03
  1.59204361e+04  5.43164202e+04]
E1 = -706.5529091293063  E_coul = 198.9164554327798
cycle= 3 E= -507.636453696526  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127642
diis-c [-3.65088262e-10  3.40317973e-05 -2.56692050e-02  1.02563517e+00]
  HOMO = -0.236423765993158  LUMO = 89.4142374079107
  mo_energy =
[-1.20269522e+02 -1.22539273e+01 -6.65457799e+00 -6.65457799e+00
 -6.65457799e+00 -1.16354924e+00 -2.36423766e-01 -2.36423766e-01
 -2.36423766e-01  8.94142374e+01  7.02610117e+02  3.77951082e+03
  1.59204360e+04  5.43164201e+04]
E1 = -706.5529023085315  E_coul = 198.91644861196767
cycle= 4 E= -507.636453696564  delta_E= -3.74e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5529023085315  E_coul = 198.91644861196767
  HOMO = -0.236423751428398  LUMO = 89.4142377237523
  mo_energy =
[-1.20269521e+02 -1.22539272e+01 -6.65457784e+00 -6.65457784e+00
 -6.65457784e+00 -1.16354923e+00 -2.36423751e-01 -2.36423751e-01
 -2.36423751e-01  8.94142377e+01  7.02610118e+02  3.77951082e+03
  1.59204360e+04  5.43164201e+04]
E1 = -706.5529023415311  E_coul = 198.91644864496718
Extra cycle  E= -507.636453696564  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202765e+03 1.83550965e+04 2.22360138e+03 4.77139452e+02
 1.25674250e+02 3.82681456e+01 4.74372533e+00 3.91267611e-01
 8.59844727e+00 4.90824690e-01]
E = -507.6364536965639
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:12 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02765135        1
[INPUT] 0    0    [1    /1   ]  18355.0964664        1
[INPUT] 0    0    [1    /1   ]  2223.6013768         1
[INPUT] 0    0    [1    /1   ]  477.139452451        1
[INPUT] 0    0    [1    /1   ]  125.674249719        1
[INPUT] 0    0    [1    /1   ]  38.2681456398        1
[INPUT] 0    0    [1    /1   ]  4.74372532971        1
[INPUT] 0    0    [1    /1   ]  0.391267611483       1
[INPUT] 1    0    [1    /1   ]  8.59844727469        1
[INPUT] 1    0    [1    /1   ]  0.490824690283       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.02765134774, 1.0]], [0, [18355.096466356023, 1.0]], [0, [2223.601376798183, 1.0]], [0, [477.13945245105526, 1.0]], [0, [125.6742497193909, 1.0]], [0, [38.26814563976746, 1.0]], [0, [4.7437253297081945, 1.0]], [0, [0.391267611482669, 1.0]], [1, [8.598447274692438, 1.0]], [1, [0.49082469028288156, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02765135]
bas 1, expnt(s) = [18355.09646636]
bas 2, expnt(s) = [2223.6013768]
bas 3, expnt(s) = [477.13945245]
bas 4, expnt(s) = [125.67424972]
bas 5, expnt(s) = [38.26814564]
bas 6, expnt(s) = [4.74372533]
bas 7, expnt(s) = [0.39126761]
bas 8, expnt(s) = [8.59844727]
bas 9, expnt(s) = [0.49082469]
CPU time:       167.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202765e+03 2.00390457e+03 1.83550965e+04 3.98412107e+03
 2.22360138e+03 8.18102510e+02 4.77139452e+02 2.57928314e+02
 1.25674250e+02 9.48308733e+01 3.82681456e+01 3.88725551e+01
 4.74372533e+00 8.12090958e+00 3.91267611e-01 1.24988613e+00
 8.59844727e+00 4.29545757e+01 4.90824690e-01 1.19851202e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319915901830715
cond(S) = 87.41410939256954
E1 = -689.1374011475117  E_coul = 184.9171572476881
init E= -504.220243899824
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68091994133051  LUMO = 88.0813174801374
  mo_energy =
[-1.21648735e+02 -1.32809788e+01 -7.62135048e+00 -7.62135048e+00
 -7.62135048e+00 -1.65082626e+00 -6.80919941e-01 -6.80919941e-01
 -6.80919941e-01  8.80813175e+01  7.01249678e+02  3.77826134e+03
  1.59193003e+04  5.43153655e+04]
E1 = -706.583203119945  E_coul = 198.9471551449032
cycle= 1 E= -507.636047975042  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437592
diis-c [-0.19148709  1.        ]
  HOMO = -0.236256909964118  LUMO = 89.4176958312405
  mo_energy =
[-1.20261149e+02 -1.22527917e+01 -6.65281579e+00 -6.65281579e+00
 -6.65281579e+00 -1.16348770e+00 -2.36256910e-01 -2.36256910e-01
 -2.36256910e-01  8.94176958e+01  7.02620445e+02  3.77952594e+03
  1.59204537e+04  5.43164390e+04]
E1 = -706.5533180897995  E_coul = 198.91686449402678
cycle= 2 E= -507.636453595773  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501184
diis-c [-2.51173518e-05  7.74996854e-05  9.99922500e-01]
  HOMO = -0.236421631954987  LUMO = 89.4142814211767
  mo_energy =
[-1.20269412e+02 -1.22539121e+01 -6.65455205e+00 -6.65455205e+00
 -6.65455205e+00 -1.16354860e+00 -2.36421632e-01 -2.36421632e-01
 -2.36421632e-01  8.94142814e+01  7.02610232e+02  3.77951096e+03
  1.59204361e+04  5.43164202e+04]
E1 = -706.5529091293063  E_coul = 198.9164554327798
cycle= 3 E= -507.636453696526  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000187
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127642
diis-c [-3.65088262e-10  3.40317973e-05 -2.56692050e-02  1.02563517e+00]
  HOMO = -0.236423765993158  LUMO = 89.4142374079107
  mo_energy =
[-1.20269522e+02 -1.22539273e+01 -6.65457799e+00 -6.65457799e+00
 -6.65457799e+00 -1.16354924e+00 -2.36423766e-01 -2.36423766e-01
 -2.36423766e-01  8.94142374e+01  7.02610117e+02  3.77951082e+03
  1.59204360e+04  5.43164201e+04]
E1 = -706.5529023085315  E_coul = 198.91644861196767
cycle= 4 E= -507.636453696564  delta_E= -3.74e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5529023085315  E_coul = 198.91644861196767
  HOMO = -0.236423751428398  LUMO = 89.4142377237523
  mo_energy =
[-1.20269521e+02 -1.22539272e+01 -6.65457784e+00 -6.65457784e+00
 -6.65457784e+00 -1.16354923e+00 -2.36423751e-01 -2.36423751e-01
 -2.36423751e-01  8.94142377e+01  7.02610118e+02  3.77951082e+03
  1.59204360e+04  5.43164201e+04]
E1 = -706.5529023415311  E_coul = 198.91644864496718
Extra cycle  E= -507.636453696564  delta_E=    0  |g|= 5.89e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.41410939256954
E1 = -706.5529023415311  E_coul = 198.91644864496718
init E= -507.636453696564
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236423751261115  LUMO = 89.4142377275145
  mo_energy =
[-1.20269521e+02 -1.22539272e+01 -6.65457784e+00 -6.65457784e+00
 -6.65457784e+00 -1.16354923e+00 -2.36423751e-01 -2.36423751e-01
 -2.36423751e-01  8.94142377e+01  7.02610118e+02  3.77951082e+03
  1.59204360e+04  5.43164201e+04]
E1 = -706.5529023420204  E_coul = 198.9164486454563
cycle= 1 E= -507.636453696564  delta_E= -2.27e-13  |g|= 1.14e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5529023420204  E_coul = 198.9164486454563
  HOMO = -0.236423751258792  LUMO = 89.4142377275659
  mo_energy =
[-1.20269521e+02 -1.22539272e+01 -6.65457784e+00 -6.65457784e+00
 -6.65457784e+00 -1.16354923e+00 -2.36423751e-01 -2.36423751e-01
 -2.36423751e-01  8.94142377e+01  7.02610118e+02  3.77951082e+03
  1.59204360e+04  5.43164201e+04]
E1 = -706.5529023420283  E_coul = 198.91644864546473
Extra cycle  E= -507.636453696564  delta_E= 4.55e-13  |g|= 1.3e-11  |ddm|= 3.9e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202765e+03 1.83550965e+04 2.22360138e+03 4.77139452e+02
 1.25674250e+02 3.82681456e+01 4.74372533e+00 3.91267611e-01
 8.59844727e+00 4.90824690e-01]
grad_E = [-9.31672759e-08 -1.89310741e-06  6.65494736e-05  2.56007472e-05
  1.28880603e-05 -4.26246391e-06 -6.05773795e-06 -3.85821818e-05
 -2.72341310e-06 -1.14602164e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02750129        1
[INPUT] 0    0    [1    /1   ]  18355.0961255        1
[INPUT] 0    0    [1    /1   ]  2223.62736996        1
[INPUT] 0    0    [1    /1   ]  477.065428738        1
[INPUT] 0    0    [1    /1   ]  125.664104165        1
[INPUT] 0    0    [1    /1   ]  38.2668778887        1
[INPUT] 0    0    [1    /1   ]  4.74371077557        1
[INPUT] 0    0    [1    /1   ]  0.391265653881       1
[INPUT] 1    0    [1    /1   ]  8.59844434553        1
[INPUT] 1    0    [1    /1   ]  0.490822002414       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027501286987, 1.0]], [0, [18355.096125458625, 1.0]], [0, [2223.62736996155, 1.0]], [0, [477.0654287375755, 1.0]], [0, [125.66410416491611, 1.0]], [0, [38.26687788870013, 1.0]], [0, [4.743710775566368, 1.0]], [0, [0.3912656538810034, 1.0]], [1, [8.598444345534682, 1.0]], [1, [0.49082200241449614, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02750129]
bas 1, expnt(s) = [18355.09612546]
bas 2, expnt(s) = [2223.62736996]
bas 3, expnt(s) = [477.06542874]
bas 4, expnt(s) = [125.66410416]
bas 5, expnt(s) = [38.26687789]
bas 6, expnt(s) = [4.74371078]
bas 7, expnt(s) = [0.39126565]
bas 8, expnt(s) = [8.59844435]
bas 9, expnt(s) = [0.490822]
CPU time:       170.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202750e+03 2.00390454e+03 1.83550961e+04 3.98412102e+03
 2.22362737e+03 8.18109682e+02 4.77065429e+02 2.57898303e+02
 1.25664104e+02 9.48251316e+01 3.82668779e+01 3.88715893e+01
 4.74371078e+00 8.12089090e+00 3.91265654e-01 1.24988144e+00
 8.59844435e+00 4.29545574e+01 4.90822002e-01 1.19850382e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319919918904034
cond(S) = 87.40887719056832
E1 = -689.1372089343162  E_coul = 184.9170150233162
init E= -504.220193911
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680924035210391  LUMO = 88.074330230305
  mo_energy =
[-1.21648750e+02 -1.32809899e+01 -7.62136033e+00 -7.62136033e+00
 -7.62136033e+00 -1.65082839e+00 -6.80924035e-01 -6.80924035e-01
 -6.80924035e-01  8.80743302e+01  7.01159816e+02  3.77802694e+03
  1.59190686e+04  5.43151616e+04]
E1 = -706.582981936304  E_coul = 198.9469337744725
cycle= 1 E= -507.636048161831  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437607
diis-c [-0.19149952  1.        ]
  HOMO = -0.236264440983216  LUMO = 89.4106933757475
  mo_energy =
[-1.20261171e+02 -1.22528078e+01 -6.65283066e+00 -6.65283066e+00
 -6.65283066e+00 -1.16349334e+00 -2.36264441e-01 -2.36264441e-01
 -2.36264441e-01  8.94106934e+01  7.02530579e+02  3.77929154e+03
  1.59202219e+04  5.43162351e+04]
E1 = -706.5530934304792  E_coul = 198.9166395976594
cycle= 2 E= -507.63645383282  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501207
diis-c [-2.51197212e-05  7.78515815e-05  9.99922148e-01]
  HOMO = -0.236429184440568  LUMO = 89.4072787340542
  mo_energy =
[-1.20269434e+02 -1.22539284e+01 -6.65456716e+00 -6.65456716e+00
 -6.65456716e+00 -1.16355424e+00 -2.36429184e-01 -2.36429184e-01
 -2.36429184e-01  8.94072787e+01  7.02520365e+02  3.77927656e+03
  1.59202044e+04  5.43162164e+04]
E1 = -706.5526844013566  E_coul = 198.91623046776337
cycle= 3 E= -507.636453933593  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127654
diis-c [-3.65162704e-10  3.40306280e-05 -2.56704545e-02  1.02563642e+00]
  HOMO = -0.236431318906107  LUMO = 89.4072347134041
  mo_energy =
[-1.20269545e+02 -1.22539436e+01 -6.65459310e+00 -6.65459310e+00
 -6.65459310e+00 -1.16355488e+00 -2.36431319e-01 -2.36431319e-01
 -2.36431319e-01  8.94072347e+01  7.02520250e+02  3.77927642e+03
  1.59202042e+04  5.43162162e+04]
E1 = -706.5526775789714  E_coul = 198.91622364534058
cycle= 4 E= -507.636453933631  delta_E= -3.76e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5526775789714  E_coul = 198.91622364534058
  HOMO = -0.236431304337705  LUMO = 89.4072350292948
  mo_energy =
[-1.20269544e+02 -1.22539435e+01 -6.65459295e+00 -6.65459295e+00
 -6.65459295e+00 -1.16355488e+00 -2.36431304e-01 -2.36431304e-01
 -2.36431304e-01  8.94072350e+01  7.02520251e+02  3.77927642e+03
  1.59202042e+04  5.43162162e+04]
E1 = -706.5526776119794  E_coul = 198.91622367834867
Extra cycle  E= -507.636453933631  delta_E= 5.68e-14  |g|= 5.9e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202750e+03 1.83550961e+04 2.22362737e+03 4.77065429e+02
 1.25664104e+02 3.82668779e+01 4.74371078e+00 3.91265654e-01
 8.59844435e+00 4.90822002e-01]
E = -507.6364539336308
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02750129        1
[INPUT] 0    0    [1    /1   ]  18355.0961255        1
[INPUT] 0    0    [1    /1   ]  2223.62736996        1
[INPUT] 0    0    [1    /1   ]  477.065428738        1
[INPUT] 0    0    [1    /1   ]  125.664104165        1
[INPUT] 0    0    [1    /1   ]  38.2668778887        1
[INPUT] 0    0    [1    /1   ]  4.74371077557        1
[INPUT] 0    0    [1    /1   ]  0.391265653881       1
[INPUT] 1    0    [1    /1   ]  8.59844434553        1
[INPUT] 1    0    [1    /1   ]  0.490822002414       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027501286987, 1.0]], [0, [18355.096125458625, 1.0]], [0, [2223.62736996155, 1.0]], [0, [477.0654287375755, 1.0]], [0, [125.66410416491611, 1.0]], [0, [38.26687788870013, 1.0]], [0, [4.743710775566368, 1.0]], [0, [0.3912656538810034, 1.0]], [1, [8.598444345534682, 1.0]], [1, [0.49082200241449614, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02750129]
bas 1, expnt(s) = [18355.09612546]
bas 2, expnt(s) = [2223.62736996]
bas 3, expnt(s) = [477.06542874]
bas 4, expnt(s) = [125.66410416]
bas 5, expnt(s) = [38.26687789]
bas 6, expnt(s) = [4.74371078]
bas 7, expnt(s) = [0.39126565]
bas 8, expnt(s) = [8.59844435]
bas 9, expnt(s) = [0.490822]
CPU time:       171.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202750e+03 2.00390454e+03 1.83550961e+04 3.98412102e+03
 2.22362737e+03 8.18109682e+02 4.77065429e+02 2.57898303e+02
 1.25664104e+02 9.48251316e+01 3.82668779e+01 3.88715893e+01
 4.74371078e+00 8.12089090e+00 3.91265654e-01 1.24988144e+00
 8.59844435e+00 4.29545574e+01 4.90822002e-01 1.19850382e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319919918904034
cond(S) = 87.40887719056832
E1 = -689.1372089343162  E_coul = 184.9170150233162
init E= -504.220193911
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680924035210391  LUMO = 88.074330230305
  mo_energy =
[-1.21648750e+02 -1.32809899e+01 -7.62136033e+00 -7.62136033e+00
 -7.62136033e+00 -1.65082839e+00 -6.80924035e-01 -6.80924035e-01
 -6.80924035e-01  8.80743302e+01  7.01159816e+02  3.77802694e+03
  1.59190686e+04  5.43151616e+04]
E1 = -706.582981936304  E_coul = 198.9469337744725
cycle= 1 E= -507.636048161831  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437607
diis-c [-0.19149952  1.        ]
  HOMO = -0.236264440983216  LUMO = 89.4106933757475
  mo_energy =
[-1.20261171e+02 -1.22528078e+01 -6.65283066e+00 -6.65283066e+00
 -6.65283066e+00 -1.16349334e+00 -2.36264441e-01 -2.36264441e-01
 -2.36264441e-01  8.94106934e+01  7.02530579e+02  3.77929154e+03
  1.59202219e+04  5.43162351e+04]
E1 = -706.5530934304792  E_coul = 198.9166395976594
cycle= 2 E= -507.63645383282  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501207
diis-c [-2.51197212e-05  7.78515815e-05  9.99922148e-01]
  HOMO = -0.236429184440568  LUMO = 89.4072787340542
  mo_energy =
[-1.20269434e+02 -1.22539284e+01 -6.65456716e+00 -6.65456716e+00
 -6.65456716e+00 -1.16355424e+00 -2.36429184e-01 -2.36429184e-01
 -2.36429184e-01  8.94072787e+01  7.02520365e+02  3.77927656e+03
  1.59202044e+04  5.43162164e+04]
E1 = -706.5526844013566  E_coul = 198.91623046776337
cycle= 3 E= -507.636453933593  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127654
diis-c [-3.65162704e-10  3.40306280e-05 -2.56704545e-02  1.02563642e+00]
  HOMO = -0.236431318906107  LUMO = 89.4072347134041
  mo_energy =
[-1.20269545e+02 -1.22539436e+01 -6.65459310e+00 -6.65459310e+00
 -6.65459310e+00 -1.16355488e+00 -2.36431319e-01 -2.36431319e-01
 -2.36431319e-01  8.94072347e+01  7.02520250e+02  3.77927642e+03
  1.59202042e+04  5.43162162e+04]
E1 = -706.5526775789714  E_coul = 198.91622364534058
cycle= 4 E= -507.636453933631  delta_E= -3.76e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5526775789714  E_coul = 198.91622364534058
  HOMO = -0.236431304337705  LUMO = 89.4072350292948
  mo_energy =
[-1.20269544e+02 -1.22539435e+01 -6.65459295e+00 -6.65459295e+00
 -6.65459295e+00 -1.16355488e+00 -2.36431304e-01 -2.36431304e-01
 -2.36431304e-01  8.94072350e+01  7.02520251e+02  3.77927642e+03
  1.59202042e+04  5.43162162e+04]
E1 = -706.5526776119794  E_coul = 198.91622367834867
Extra cycle  E= -507.636453933631  delta_E= 5.68e-14  |g|= 5.9e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.40887719056832
E1 = -706.5526776119794  E_coul = 198.91622367834867
init E= -507.636453933631
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236431304170382  LUMO = 89.4072350330585
  mo_energy =
[-1.20269544e+02 -1.22539435e+01 -6.65459295e+00 -6.65459295e+00
 -6.65459295e+00 -1.16355488e+00 -2.36431304e-01 -2.36431304e-01
 -2.36431304e-01  8.94072350e+01  7.02520251e+02  3.77927642e+03
  1.59202042e+04  5.43162162e+04]
E1 = -706.5526776124694  E_coul = 198.91622367883818
cycle= 1 E= -507.636453933631  delta_E= -5.12e-13  |g|= 1.16e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5526776124694  E_coul = 198.91622367883818
  HOMO = -0.23643130416805  LUMO = 89.4072350331101
  mo_energy =
[-1.20269544e+02 -1.22539435e+01 -6.65459295e+00 -6.65459295e+00
 -6.65459295e+00 -1.16355488e+00 -2.36431304e-01 -2.36431304e-01
 -2.36431304e-01  8.94072350e+01  7.02520251e+02  3.77927642e+03
  1.59202042e+04  5.43162162e+04]
E1 = -706.5526776124776  E_coul = 198.91622367884642
Extra cycle  E= -507.636453933631  delta_E= 1.14e-13  |g|= 1.08e-11  |ddm|= 3.92e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34202750e+03 1.83550961e+04 2.22362737e+03 4.77065429e+02
 1.25664104e+02 3.82668779e+01 4.74371078e+00 3.91265654e-01
 8.59844435e+00 4.90822002e-01]
grad_E = [-9.56449649e-08 -1.89167290e-06  6.67155856e-05  2.35910304e-05
  1.82945863e-05 -9.06632537e-06 -1.26024532e-05 -7.54821334e-05
 -3.69146802e-06 -2.19804338e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:18 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02724971        1
[INPUT] 0    0    [1    /1   ]  18355.0957225        1
[INPUT] 0    0    [1    /1   ]  2223.66588867        1
[INPUT] 0    0    [1    /1   ]  476.934044021        1
[INPUT] 0    0    [1    /1   ]  125.646086228        1
[INPUT] 0    0    [1    /1   ]  38.2646219731        1
[INPUT] 0    0    [1    /1   ]  4.74368478702        1
[INPUT] 0    0    [1    /1   ]  0.391262174437       1
[INPUT] 1    0    [1    /1   ]  8.59843955021        1
[INPUT] 1    0    [1    /1   ]  0.490817258304       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027249711192, 1.0]], [0, [18355.095722512084, 1.0]], [0, [2223.6658886681203, 1.0]], [0, [476.93404402058326, 1.0]], [0, [125.6460862283554, 1.0]], [0, [38.264621973107914, 1.0]], [0, [4.7436847870171786, 1.0]], [0, [0.3912621744367246, 1.0]], [1, [8.598439550205656, 1.0]], [1, [0.49081725830359235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02724971]
bas 1, expnt(s) = [18355.09572251]
bas 2, expnt(s) = [2223.66588867]
bas 3, expnt(s) = [476.93404402]
bas 4, expnt(s) = [125.64608623]
bas 5, expnt(s) = [38.26462197]
bas 6, expnt(s) = [4.74368479]
bas 7, expnt(s) = [0.39126217]
bas 8, expnt(s) = [8.59843955]
bas 9, expnt(s) = [0.49081726]
CPU time:       175.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202725e+03 2.00390449e+03 1.83550957e+04 3.98412095e+03
 2.22366589e+03 8.18120311e+02 4.76934044e+02 2.57845031e+02
 1.25646086e+02 9.48149342e+01 3.82646220e+01 3.88698706e+01
 4.74368479e+00 8.12085753e+00 3.91262174e-01 1.24987310e+00
 8.59843955e+00 4.29545274e+01 4.90817258e-01 1.19848934e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319927016185126
cond(S) = 87.3994140828887
E1 = -689.1368708952956  E_coul = 184.91676498774345
init E= -504.220105907552
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68093127668232  LUMO = 88.0619066414304
  mo_energy =
[-1.21648776e+02 -1.32810096e+01 -7.62137767e+00 -7.62137767e+00
 -7.62137767e+00 -1.65083214e+00 -6.80931277e-01 -6.80931277e-01
 -6.80931277e-01  8.80619066e+01  7.01000208e+02  3.77760457e+03
  1.59186371e+04  5.43147734e+04]
E1 = -706.5825925994853  E_coul = 198.94654385367258
cycle= 1 E= -507.636048745813  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437632
diis-c [-0.19152141  1.        ]
  HOMO = -0.236277751998715  LUMO = 89.3982428308135
  mo_energy =
[-1.20261209e+02 -1.22528362e+01 -6.65285686e+00 -6.65285686e+00
 -6.65285686e+00 -1.16350329e+00 -2.36277752e-01 -2.36277752e-01
 -2.36277752e-01  8.93982428e+01  7.02370963e+02  3.77886915e+03
  1.59197905e+04  5.43158469e+04]
E1 = -706.5526979090316  E_coul = 198.91624340275007
cycle= 2 E= -507.636454506282  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0050125
diis-c [-2.51239599e-05  7.84757629e-05  9.99921524e-01]
  HOMO = -0.23644253367847  LUMO = 89.3948277769372
  mo_energy =
[-1.20269474e+02 -1.22539570e+01 -6.65459378e+00 -6.65459378e+00
 -6.65459378e+00 -1.16356421e+00 -2.36442534e-01 -2.36442534e-01
 -2.36442534e-01  8.93948278e+01  7.02360748e+02  3.77885417e+03
  1.59197729e+04  5.43158281e+04]
E1 = -706.552288757794  E_coul = 198.9158341507034
cycle= 3 E= -507.636454607091  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127676
diis-c [-3.65295294e-10  3.40286117e-05 -2.56726794e-02  1.02563865e+00]
  HOMO = -0.236444668904554  LUMO = 89.3947837431565
  mo_energy =
[-1.20269585e+02 -1.22539722e+01 -6.65461973e+00 -6.65461973e+00
 -6.65461973e+00 -1.16356485e+00 -2.36444669e-01 -2.36444669e-01
 -2.36444669e-01  8.93947837e+01  7.02360633e+02  3.77885403e+03
  1.59197727e+04  5.43158280e+04]
E1 = -706.5522819325433  E_coul = 198.91582732541508
cycle= 4 E= -507.636454607128  delta_E= -3.76e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5522819325433  E_coul = 198.91582732541508
  HOMO = -0.236444654329672  LUMO = 89.3947840591362
  mo_energy =
[-1.20269584e+02 -1.22539721e+01 -6.65461958e+00 -6.65461958e+00
 -6.65461958e+00 -1.16356484e+00 -2.36444654e-01 -2.36444654e-01
 -2.36444654e-01  8.93947841e+01  7.02360634e+02  3.77885403e+03
  1.59197728e+04  5.43158280e+04]
E1 = -706.5522819655673  E_coul = 198.9158273584391
Extra cycle  E= -507.636454607128  delta_E=    0  |g|= 5.9e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202725e+03 1.83550957e+04 2.22366589e+03 4.76934044e+02
 1.25646086e+02 3.82646220e+01 4.74368479e+00 3.91262174e-01
 8.59843955e+00 4.90817258e-01]
E = -507.63645460712826
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:18 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02724971        1
[INPUT] 0    0    [1    /1   ]  18355.0957225        1
[INPUT] 0    0    [1    /1   ]  2223.66588867        1
[INPUT] 0    0    [1    /1   ]  476.934044021        1
[INPUT] 0    0    [1    /1   ]  125.646086228        1
[INPUT] 0    0    [1    /1   ]  38.2646219731        1
[INPUT] 0    0    [1    /1   ]  4.74368478702        1
[INPUT] 0    0    [1    /1   ]  0.391262174437       1
[INPUT] 1    0    [1    /1   ]  8.59843955021        1
[INPUT] 1    0    [1    /1   ]  0.490817258304       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.027249711192, 1.0]], [0, [18355.095722512084, 1.0]], [0, [2223.6658886681203, 1.0]], [0, [476.93404402058326, 1.0]], [0, [125.6460862283554, 1.0]], [0, [38.264621973107914, 1.0]], [0, [4.7436847870171786, 1.0]], [0, [0.3912621744367246, 1.0]], [1, [8.598439550205656, 1.0]], [1, [0.49081725830359235, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02724971]
bas 1, expnt(s) = [18355.09572251]
bas 2, expnt(s) = [2223.66588867]
bas 3, expnt(s) = [476.93404402]
bas 4, expnt(s) = [125.64608623]
bas 5, expnt(s) = [38.26462197]
bas 6, expnt(s) = [4.74368479]
bas 7, expnt(s) = [0.39126217]
bas 8, expnt(s) = [8.59843955]
bas 9, expnt(s) = [0.49081726]
CPU time:       175.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202725e+03 2.00390449e+03 1.83550957e+04 3.98412095e+03
 2.22366589e+03 8.18120311e+02 4.76934044e+02 2.57845031e+02
 1.25646086e+02 9.48149342e+01 3.82646220e+01 3.88698706e+01
 4.74368479e+00 8.12085753e+00 3.91262174e-01 1.24987310e+00
 8.59843955e+00 4.29545274e+01 4.90817258e-01 1.19848934e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319927016185126
cond(S) = 87.3994140828887
E1 = -689.1368708952956  E_coul = 184.91676498774345
init E= -504.220105907552
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68093127668232  LUMO = 88.0619066414304
  mo_energy =
[-1.21648776e+02 -1.32810096e+01 -7.62137767e+00 -7.62137767e+00
 -7.62137767e+00 -1.65083214e+00 -6.80931277e-01 -6.80931277e-01
 -6.80931277e-01  8.80619066e+01  7.01000208e+02  3.77760457e+03
  1.59186371e+04  5.43147734e+04]
E1 = -706.5825925994853  E_coul = 198.94654385367258
cycle= 1 E= -507.636048745813  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437632
diis-c [-0.19152141  1.        ]
  HOMO = -0.236277751998715  LUMO = 89.3982428308135
  mo_energy =
[-1.20261209e+02 -1.22528362e+01 -6.65285686e+00 -6.65285686e+00
 -6.65285686e+00 -1.16350329e+00 -2.36277752e-01 -2.36277752e-01
 -2.36277752e-01  8.93982428e+01  7.02370963e+02  3.77886915e+03
  1.59197905e+04  5.43158469e+04]
E1 = -706.5526979090316  E_coul = 198.91624340275007
cycle= 2 E= -507.636454506282  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0135
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0050125
diis-c [-2.51239599e-05  7.84757629e-05  9.99921524e-01]
  HOMO = -0.23644253367847  LUMO = 89.3948277769372
  mo_energy =
[-1.20269474e+02 -1.22539570e+01 -6.65459378e+00 -6.65459378e+00
 -6.65459378e+00 -1.16356421e+00 -2.36442534e-01 -2.36442534e-01
 -2.36442534e-01  8.93948278e+01  7.02360748e+02  3.77885417e+03
  1.59197729e+04  5.43158281e+04]
E1 = -706.552288757794  E_coul = 198.9158341507034
cycle= 3 E= -507.636454607091  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127676
diis-c [-3.65295294e-10  3.40286117e-05 -2.56726794e-02  1.02563865e+00]
  HOMO = -0.236444668904554  LUMO = 89.3947837431565
  mo_energy =
[-1.20269585e+02 -1.22539722e+01 -6.65461973e+00 -6.65461973e+00
 -6.65461973e+00 -1.16356485e+00 -2.36444669e-01 -2.36444669e-01
 -2.36444669e-01  8.93947837e+01  7.02360633e+02  3.77885403e+03
  1.59197727e+04  5.43158280e+04]
E1 = -706.5522819325433  E_coul = 198.91582732541508
cycle= 4 E= -507.636454607128  delta_E= -3.76e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5522819325433  E_coul = 198.91582732541508
  HOMO = -0.236444654329672  LUMO = 89.3947840591362
  mo_energy =
[-1.20269584e+02 -1.22539721e+01 -6.65461958e+00 -6.65461958e+00
 -6.65461958e+00 -1.16356484e+00 -2.36444654e-01 -2.36444654e-01
 -2.36444654e-01  8.93947841e+01  7.02360634e+02  3.77885403e+03
  1.59197728e+04  5.43158280e+04]
E1 = -706.5522819655673  E_coul = 198.9158273584391
Extra cycle  E= -507.636454607128  delta_E=    0  |g|= 5.9e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.3994140828887
E1 = -706.5522819655673  E_coul = 198.9158273584391
init E= -507.636454607128
    CPU time for initialize scf      0.80 sec, wall time      0.05 sec
  HOMO = -0.236444654162255  LUMO = 89.3947840629028
  mo_energy =
[-1.20269584e+02 -1.22539721e+01 -6.65461958e+00 -6.65461958e+00
 -6.65461958e+00 -1.16356484e+00 -2.36444654e-01 -2.36444654e-01
 -2.36444654e-01  8.93947841e+01  7.02360634e+02  3.77885403e+03
  1.59197728e+04  5.43158280e+04]
E1 = -706.552281966057  E_coul = 198.91582735892857
cycle= 1 E= -507.636454607128  delta_E= -1.14e-13  |g|= 1.14e-10  |ddm|= 2.22e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.552281966057  E_coul = 198.91582735892857
  HOMO = -0.23644465415993  LUMO = 89.3947840629544
  mo_energy =
[-1.20269584e+02 -1.22539721e+01 -6.65461958e+00 -6.65461958e+00
 -6.65461958e+00 -1.16356484e+00 -2.36444654e-01 -2.36444654e-01
 -2.36444654e-01  8.93947841e+01  7.02360634e+02  3.77885403e+03
  1.59197728e+04  5.43158280e+04]
E1 = -706.5522819660655  E_coul = 198.91582735893704
Extra cycle  E= -507.636454607128  delta_E= -1.14e-13  |g|= 1.03e-11  |ddm|= 3.92e-12
    CPU time for scf_cycle      1.02 sec, wall time      0.11 sec
exp = [7.34202725e+03 1.83550957e+04 2.22366589e+03 4.76934044e+02
 1.25646086e+02 3.82646220e+01 4.74368479e+00 3.91262174e-01
 8.59843955e+00 4.90817258e-01]
grad_E = [-9.99857492e-08 -1.88915587e-06  6.70086570e-05  2.00430202e-05
  2.78412662e-05 -1.75552184e-05 -2.43146355e-05 -1.40936248e-04
 -5.10260881e-06 -4.05967742e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02688897        1
[INPUT] 0    0    [1    /1   ]  18355.0956001        1
[INPUT] 0    0    [1    /1   ]  2223.70745605        1
[INPUT] 0    0    [1    /1   ]  476.725967412        1
[INPUT] 0    0    [1    /1   ]  125.617523151        1
[INPUT] 0    0    [1    /1   ]  38.2610355899        1
[INPUT] 0    0    [1    /1   ]  4.74364365991        1
[INPUT] 0    0    [1    /1   ]  0.391256696571       1
[INPUT] 1    0    [1    /1   ]  8.59843225173        1
[INPUT] 1    0    [1    /1   ]  0.49080981367        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.026888967044, 1.0]], [0, [18355.09560009523, 1.0]], [0, [2223.707456051738, 1.0]], [0, [476.72596741157554, 1.0]], [0, [125.61752315116918, 1.0]], [0, [38.2610355899381, 1.0]], [0, [4.743643659909561, 1.0]], [0, [0.3912566965706699, 1.0]], [1, [8.598432251727452, 1.0]], [1, [0.4908098136698691, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02688897]
bas 1, expnt(s) = [18355.0956001]
bas 2, expnt(s) = [2223.70745605]
bas 3, expnt(s) = [476.72596741]
bas 4, expnt(s) = [125.61752315]
bas 5, expnt(s) = [38.26103559]
bas 6, expnt(s) = [4.74364366]
bas 7, expnt(s) = [0.3912567]
bas 8, expnt(s) = [8.59843225]
bas 9, expnt(s) = [0.49080981]
CPU time:       179.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202689e+03 2.00390442e+03 1.83550956e+04 3.98412093e+03
 2.22370746e+03 8.18131781e+02 4.76725967e+02 2.57760657e+02
 1.25617523e+02 9.47987681e+01 3.82610356e+01 3.88671382e+01
 4.74364366e+00 8.12080472e+00 3.91256697e-01 1.24985998e+00
 8.59843225e+00 4.29544819e+01 4.90809814e-01 1.19846661e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319938162531464
cond(S) = 87.38397823762882
E1 = -689.136341790993  E_coul = 184.91637308963476
init E= -504.219968701358
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680942649383094  LUMO = 88.0421789538468
  mo_energy =
[-1.21648817e+02 -1.32810403e+01 -7.62140486e+00 -7.62140486e+00
 -7.62140486e+00 -1.65083800e+00 -6.80942649e-01 -6.80942649e-01
 -6.80942649e-01  8.80421790e+01  7.00747150e+02  3.77691942e+03
  1.59179023e+04  5.43140914e+04]
E1 = -706.5819826358659  E_coul = 198.94593232045327
cycle= 1 E= -507.636050315413  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437671
diis-c [-0.19155568  1.        ]
  HOMO = -0.236298654997557  LUMO = 89.3784725710269
  mo_energy =
[-1.20261270e+02 -1.22528806e+01 -6.65289797e+00 -6.65289797e+00
 -6.65289797e+00 -1.16351891e+00 -2.36298655e-01 -2.36298655e-01
 -2.36298655e-01  8.93784726e+01  7.02117893e+02  3.77818399e+03
  1.59190556e+04  5.43151648e+04]
E1 = -706.5520781206365  E_coul = 198.91562190257812
cycle= 2 E= -507.636456218058  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501318
diis-c [-2.51307371e-05  7.94638305e-05  9.99920536e-01]
  HOMO = -0.236463497461079  LUMO = 89.3750568627292
  mo_energy =
[-1.20269537e+02 -1.22540018e+01 -6.65463554e+00 -6.65463554e+00
 -6.65463554e+00 -1.16357986e+00 -2.36463497e-01 -2.36463497e-01
 -2.36463497e-01  8.93750569e+01  7.02107676e+02  3.77816900e+03
  1.59190381e+04  5.43151460e+04]
E1 = -706.5516687753782  E_coul = 198.9152124564546
cycle= 3 E= -507.636456318924  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127711
diis-c [-3.65506746e-10  3.40254325e-05 -2.56762122e-02  1.02564219e+00]
  HOMO = -0.236465633895993  LUMO = 89.3750128081068
  mo_energy =
[-1.20269648e+02 -1.22540171e+01 -6.65466151e+00 -6.65466151e+00
 -6.65466151e+00 -1.16358050e+00 -2.36465634e-01 -2.36465634e-01
 -2.36465634e-01  8.93750128e+01  7.02107561e+02  3.77816886e+03
  1.59190379e+04  5.43151459e+04]
E1 = -706.5516619455756  E_coul = 198.91520562661444
cycle= 4 E= -507.636456318961  delta_E= -3.75e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5516619455756  E_coul = 198.91520562661444
  HOMO = -0.236465619310811  LUMO = 89.3750131242291
  mo_energy =
[-1.20269647e+02 -1.22540170e+01 -6.65466136e+00 -6.65466136e+00
 -6.65466136e+00 -1.16358049e+00 -2.36465619e-01 -2.36465619e-01
 -2.36465619e-01  8.93750131e+01  7.02107562e+02  3.77816886e+03
  1.59190379e+04  5.43151459e+04]
E1 = -706.5516619786247  E_coul = 198.91520565966326
Extra cycle  E= -507.636456318961  delta_E= -3.41e-13  |g|= 5.9e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.08 sec
exp = [7.34202689e+03 1.83550956e+04 2.22370746e+03 4.76725967e+02
 1.25617523e+02 3.82610356e+01 4.74364366e+00 3.91256697e-01
 8.59843225e+00 4.90809814e-01]
E = -507.63645631896145
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02688897        1
[INPUT] 0    0    [1    /1   ]  18355.0956001        1
[INPUT] 0    0    [1    /1   ]  2223.70745605        1
[INPUT] 0    0    [1    /1   ]  476.725967412        1
[INPUT] 0    0    [1    /1   ]  125.617523151        1
[INPUT] 0    0    [1    /1   ]  38.2610355899        1
[INPUT] 0    0    [1    /1   ]  4.74364365991        1
[INPUT] 0    0    [1    /1   ]  0.391256696571       1
[INPUT] 1    0    [1    /1   ]  8.59843225173        1
[INPUT] 1    0    [1    /1   ]  0.49080981367        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.026888967044, 1.0]], [0, [18355.09560009523, 1.0]], [0, [2223.707456051738, 1.0]], [0, [476.72596741157554, 1.0]], [0, [125.61752315116918, 1.0]], [0, [38.2610355899381, 1.0]], [0, [4.743643659909561, 1.0]], [0, [0.3912566965706699, 1.0]], [1, [8.598432251727452, 1.0]], [1, [0.4908098136698691, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02688897]
bas 1, expnt(s) = [18355.0956001]
bas 2, expnt(s) = [2223.70745605]
bas 3, expnt(s) = [476.72596741]
bas 4, expnt(s) = [125.61752315]
bas 5, expnt(s) = [38.26103559]
bas 6, expnt(s) = [4.74364366]
bas 7, expnt(s) = [0.3912567]
bas 8, expnt(s) = [8.59843225]
bas 9, expnt(s) = [0.49080981]
CPU time:       180.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202689e+03 2.00390442e+03 1.83550956e+04 3.98412093e+03
 2.22370746e+03 8.18131781e+02 4.76725967e+02 2.57760657e+02
 1.25617523e+02 9.47987681e+01 3.82610356e+01 3.88671382e+01
 4.74364366e+00 8.12080472e+00 3.91256697e-01 1.24985998e+00
 8.59843225e+00 4.29544819e+01 4.90809814e-01 1.19846661e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319938162531464
cond(S) = 87.38397823762882
E1 = -689.136341790993  E_coul = 184.91637308963476
init E= -504.219968701358
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680942649383094  LUMO = 88.0421789538468
  mo_energy =
[-1.21648817e+02 -1.32810403e+01 -7.62140486e+00 -7.62140486e+00
 -7.62140486e+00 -1.65083800e+00 -6.80942649e-01 -6.80942649e-01
 -6.80942649e-01  8.80421790e+01  7.00747150e+02  3.77691942e+03
  1.59179023e+04  5.43140914e+04]
E1 = -706.5819826358659  E_coul = 198.94593232045327
cycle= 1 E= -507.636050315413  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437671
diis-c [-0.19155568  1.        ]
  HOMO = -0.236298654997557  LUMO = 89.3784725710269
  mo_energy =
[-1.20261270e+02 -1.22528806e+01 -6.65289797e+00 -6.65289797e+00
 -6.65289797e+00 -1.16351891e+00 -2.36298655e-01 -2.36298655e-01
 -2.36298655e-01  8.93784726e+01  7.02117893e+02  3.77818399e+03
  1.59190556e+04  5.43151648e+04]
E1 = -706.5520781206365  E_coul = 198.91562190257812
cycle= 2 E= -507.636456218058  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501318
diis-c [-2.51307371e-05  7.94638305e-05  9.99920536e-01]
  HOMO = -0.236463497461079  LUMO = 89.3750568627292
  mo_energy =
[-1.20269537e+02 -1.22540018e+01 -6.65463554e+00 -6.65463554e+00
 -6.65463554e+00 -1.16357986e+00 -2.36463497e-01 -2.36463497e-01
 -2.36463497e-01  8.93750569e+01  7.02107676e+02  3.77816900e+03
  1.59190381e+04  5.43151460e+04]
E1 = -706.5516687753782  E_coul = 198.9152124564546
cycle= 3 E= -507.636456318924  delta_E= -1.01e-07  |g|= 9.31e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127711
diis-c [-3.65506746e-10  3.40254325e-05 -2.56762122e-02  1.02564219e+00]
  HOMO = -0.236465633895993  LUMO = 89.3750128081068
  mo_energy =
[-1.20269648e+02 -1.22540171e+01 -6.65466151e+00 -6.65466151e+00
 -6.65466151e+00 -1.16358050e+00 -2.36465634e-01 -2.36465634e-01
 -2.36465634e-01  8.93750128e+01  7.02107561e+02  3.77816886e+03
  1.59190379e+04  5.43151459e+04]
E1 = -706.5516619455756  E_coul = 198.91520562661444
cycle= 4 E= -507.636456318961  delta_E= -3.75e-11  |g|= 3.47e-07  |ddm|= 3.26e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5516619455756  E_coul = 198.91520562661444
  HOMO = -0.236465619310811  LUMO = 89.3750131242291
  mo_energy =
[-1.20269647e+02 -1.22540170e+01 -6.65466136e+00 -6.65466136e+00
 -6.65466136e+00 -1.16358049e+00 -2.36465619e-01 -2.36465619e-01
 -2.36465619e-01  8.93750131e+01  7.02107562e+02  3.77816886e+03
  1.59190379e+04  5.43151459e+04]
E1 = -706.5516619786247  E_coul = 198.91520565966326
Extra cycle  E= -507.636456318961  delta_E= -3.41e-13  |g|= 5.9e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.38397823762882
E1 = -706.5516619786247  E_coul = 198.91520565966326
init E= -507.636456318961
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236465619143258  LUMO = 89.375013127996
  mo_energy =
[-1.20269647e+02 -1.22540170e+01 -6.65466136e+00 -6.65466136e+00
 -6.65466136e+00 -1.16358049e+00 -2.36465619e-01 -2.36465619e-01
 -2.36465619e-01  8.93750131e+01  7.02107562e+02  3.77816886e+03
  1.59190379e+04  5.43151459e+04]
E1 = -706.5516619791146  E_coul = 198.91520566015333
cycle= 1 E= -507.636456318961  delta_E= 2.27e-13  |g|= 1.16e-10  |ddm|= 2.23e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5516619791146  E_coul = 198.91520566015333
  HOMO = -0.236465619140932  LUMO = 89.3750131280493
  mo_energy =
[-1.20269647e+02 -1.22540170e+01 -6.65466136e+00 -6.65466136e+00
 -6.65466136e+00 -1.16358049e+00 -2.36465619e-01 -2.36465619e-01
 -2.36465619e-01  8.93750131e+01  7.02107562e+02  3.77816886e+03
  1.59190379e+04  5.43151459e+04]
E1 = -706.5516619791221  E_coul = 198.9152056601615
Extra cycle  E= -507.636456318961  delta_E= 6.82e-13  |g|= 8.02e-12  |ddm|= 3.88e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34202689e+03 1.83550956e+04 2.22370746e+03 4.76725967e+02
 1.25617523e+02 3.82610356e+01 4.74364366e+00 3.91256697e-01
 8.59843225e+00 4.90809814e-01]
grad_E = [-1.06715952e-07 -1.88524408e-06  6.74683077e-05  1.44729715e-05
  4.28291603e-05 -3.08858610e-05 -4.27823150e-05 -2.43854633e-04
 -7.14182338e-06 -6.98429357e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02638644        1
[INPUT] 0    0    [1    /1   ]  18355.0967437        1
[INPUT] 0    0    [1    /1   ]  2223.72592316        1
[INPUT] 0    0    [1    /1   ]  476.379321541        1
[INPUT] 0    0    [1    /1   ]  125.569866282        1
[INPUT] 0    0    [1    /1   ]  38.2550259715        1
[INPUT] 0    0    [1    /1   ]  4.74357545528        1
[INPUT] 0    0    [1    /1   ]  0.39124768087        1
[INPUT] 1    0    [1    /1   ]  8.59842041773        1
[INPUT] 1    0    [1    /1   ]  0.490797588353       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.0263864406625, 1.0]], [0, [18355.09674370614, 1.0]], [0, [2223.7259231581684, 1.0]], [0, [476.37932154104334, 1.0]], [0, [125.56986628151658, 1.0]], [0, [38.25502597148431, 1.0]], [0, [4.743575455281113, 1.0]], [0, [0.3912476808703946, 1.0]], [1, [8.598420417727478, 1.0]], [1, [0.4907975883527804, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02638644]
bas 1, expnt(s) = [18355.09674371]
bas 2, expnt(s) = [2223.72592316]
bas 3, expnt(s) = [476.37932154]
bas 4, expnt(s) = [125.56986628]
bas 5, expnt(s) = [38.25502597]
bas 6, expnt(s) = [4.74357546]
bas 7, expnt(s) = [0.39124768]
bas 8, expnt(s) = [8.59842042]
bas 9, expnt(s) = [0.49079759]
CPU time:       184.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202639e+03 2.00390431e+03 1.83550967e+04 3.98412112e+03
 2.22372592e+03 8.18136877e+02 4.76379322e+02 2.57620074e+02
 1.25569866e+02 9.47717932e+01 3.82550260e+01 3.88625595e+01
 4.74357546e+00 8.12071715e+00 3.91247681e-01 1.24983838e+00
 8.59842042e+00 4.29544080e+01 4.90797588e-01 1.19842930e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319956485004916
cond(S) = 87.35709233089314
E1 = -689.1354754232509  E_coul = 184.91572947167967
init E= -504.219745951571
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680961330567263  LUMO = 88.0091799711651
  mo_energy =
[-1.21648884e+02 -1.32810910e+01 -7.62144954e+00 -7.62144954e+00
 -7.62144954e+00 -1.65084760e+00 -6.80961331e-01 -6.80961331e-01
 -6.80961331e-01  8.80091800e+01  7.00324831e+02  3.77573565e+03
  1.59165437e+04  5.43127793e+04]
E1 = -706.5809825157633  E_coul = 198.9449278994936
cycle= 1 E= -507.63605461627  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437735
diis-c [-0.19161171  1.        ]
  HOMO = -0.236333000744291  LUMO = 89.3454029862259
  mo_energy =
[-1.20261370e+02 -1.22529537e+01 -6.65296551e+00 -6.65296551e+00
 -6.65296551e+00 -1.16354459e+00 -2.36333001e-01 -2.36333001e-01
 -2.36333001e-01  8.93454030e+01  7.01695554e+02  3.77700018e+03
  1.59176970e+04  5.43138526e+04]
E1 = -706.5510615598695  E_coul = 198.91460080301647
cycle= 2 E= -507.636460756853  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501432
diis-c [-2.51421832e-05  8.11088845e-05  9.99918891e-01]
  HOMO = -0.236497945089314  LUMO = 89.3419861840477
  mo_energy =
[-1.20269641e+02 -1.22540757e+01 -6.65470420e+00 -6.65470420e+00
 -6.65470420e+00 -1.16360557e+00 -2.36497945e-01 -2.36497945e-01
 -2.36497945e-01  8.93419862e+01  7.01685335e+02  3.77698520e+03
  1.59176794e+04  5.43138338e+04]
E1 = -706.550651889831  E_coul = 198.91419103201775
cycle= 3 E= -507.636460857813  delta_E= -1.01e-07  |g|= 9.32e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127771
diis-c [-3.65861996e-10  3.40202850e-05 -2.56821274e-02  1.02564811e+00]
  HOMO = -0.236500083548979  LUMO = 89.3419420945823
  mo_energy =
[-1.20269752e+02 -1.22540909e+01 -6.65473019e+00 -6.65473019e+00
 -6.65473019e+00 -1.16360621e+00 -2.36500084e-01 -2.36500084e-01
 -2.36500084e-01  8.93419421e+01  7.01685220e+02  3.77698505e+03
  1.59176792e+04  5.43138337e+04]
E1 = -706.5506450524089  E_coul = 198.914184194558
cycle= 4 E= -507.636460857851  delta_E= -3.76e-11  |g|= 3.48e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5506450524089  E_coul = 198.914184194558
  HOMO = -0.236500068946546  LUMO = 89.3419424109408
  mo_energy =
[-1.20269751e+02 -1.22540908e+01 -6.65473004e+00 -6.65473004e+00
 -6.65473004e+00 -1.16360620e+00 -2.36500069e-01 -2.36500069e-01
 -2.36500069e-01  8.93419424e+01  7.01685221e+02  3.77698506e+03
  1.59176792e+04  5.43138337e+04]
E1 = -706.5506450854995  E_coul = 198.91418422764846
Extra cycle  E= -507.636460857851  delta_E= -1.71e-13  |g|= 5.91e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34202639e+03 1.83550967e+04 2.22372592e+03 4.76379322e+02
 1.25569866e+02 3.82550260e+01 4.74357546e+00 3.91247681e-01
 8.59842042e+00 4.90797588e-01]
E = -507.63646085785103
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:24 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02638644        1
[INPUT] 0    0    [1    /1   ]  18355.0967437        1
[INPUT] 0    0    [1    /1   ]  2223.72592316        1
[INPUT] 0    0    [1    /1   ]  476.379321541        1
[INPUT] 0    0    [1    /1   ]  125.569866282        1
[INPUT] 0    0    [1    /1   ]  38.2550259715        1
[INPUT] 0    0    [1    /1   ]  4.74357545528        1
[INPUT] 0    0    [1    /1   ]  0.39124768087        1
[INPUT] 1    0    [1    /1   ]  8.59842041773        1
[INPUT] 1    0    [1    /1   ]  0.490797588353       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.0263864406625, 1.0]], [0, [18355.09674370614, 1.0]], [0, [2223.7259231581684, 1.0]], [0, [476.37932154104334, 1.0]], [0, [125.56986628151658, 1.0]], [0, [38.25502597148431, 1.0]], [0, [4.743575455281113, 1.0]], [0, [0.3912476808703946, 1.0]], [1, [8.598420417727478, 1.0]], [1, [0.4907975883527804, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02638644]
bas 1, expnt(s) = [18355.09674371]
bas 2, expnt(s) = [2223.72592316]
bas 3, expnt(s) = [476.37932154]
bas 4, expnt(s) = [125.56986628]
bas 5, expnt(s) = [38.25502597]
bas 6, expnt(s) = [4.74357546]
bas 7, expnt(s) = [0.39124768]
bas 8, expnt(s) = [8.59842042]
bas 9, expnt(s) = [0.49079759]
CPU time:       184.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202639e+03 2.00390431e+03 1.83550967e+04 3.98412112e+03
 2.22372592e+03 8.18136877e+02 4.76379322e+02 2.57620074e+02
 1.25569866e+02 9.47717932e+01 3.82550260e+01 3.88625595e+01
 4.74357546e+00 8.12071715e+00 3.91247681e-01 1.24983838e+00
 8.59842042e+00 4.29544080e+01 4.90797588e-01 1.19842930e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319956485004916
cond(S) = 87.35709233089314
E1 = -689.1354754232509  E_coul = 184.91572947167967
init E= -504.219745951571
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680961330567263  LUMO = 88.0091799711651
  mo_energy =
[-1.21648884e+02 -1.32810910e+01 -7.62144954e+00 -7.62144954e+00
 -7.62144954e+00 -1.65084760e+00 -6.80961331e-01 -6.80961331e-01
 -6.80961331e-01  8.80091800e+01  7.00324831e+02  3.77573565e+03
  1.59165437e+04  5.43127793e+04]
E1 = -706.5809825157633  E_coul = 198.9449278994936
cycle= 1 E= -507.63605461627  delta_E= -3.42  |g|= 0.313  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437735
diis-c [-0.19161171  1.        ]
  HOMO = -0.236333000744291  LUMO = 89.3454029862259
  mo_energy =
[-1.20261370e+02 -1.22529537e+01 -6.65296551e+00 -6.65296551e+00
 -6.65296551e+00 -1.16354459e+00 -2.36333001e-01 -2.36333001e-01
 -2.36333001e-01  8.93454030e+01  7.01695554e+02  3.77700018e+03
  1.59176970e+04  5.43138526e+04]
E1 = -706.5510615598695  E_coul = 198.91460080301647
cycle= 2 E= -507.636460756853  delta_E= -0.000406  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501432
diis-c [-2.51421832e-05  8.11088845e-05  9.99918891e-01]
  HOMO = -0.236497945089314  LUMO = 89.3419861840477
  mo_energy =
[-1.20269641e+02 -1.22540757e+01 -6.65470420e+00 -6.65470420e+00
 -6.65470420e+00 -1.16360557e+00 -2.36497945e-01 -2.36497945e-01
 -2.36497945e-01  8.93419862e+01  7.01685335e+02  3.77698520e+03
  1.59176794e+04  5.43138338e+04]
E1 = -706.550651889831  E_coul = 198.91419103201775
cycle= 3 E= -507.636460857813  delta_E= -1.01e-07  |g|= 9.32e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000127771
diis-c [-3.65861996e-10  3.40202850e-05 -2.56821274e-02  1.02564811e+00]
  HOMO = -0.236500083548979  LUMO = 89.3419420945823
  mo_energy =
[-1.20269752e+02 -1.22540909e+01 -6.65473019e+00 -6.65473019e+00
 -6.65473019e+00 -1.16360621e+00 -2.36500084e-01 -2.36500084e-01
 -2.36500084e-01  8.93419421e+01  7.01685220e+02  3.77698505e+03
  1.59176792e+04  5.43138337e+04]
E1 = -706.5506450524089  E_coul = 198.914184194558
cycle= 4 E= -507.636460857851  delta_E= -3.76e-11  |g|= 3.48e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5506450524089  E_coul = 198.914184194558
  HOMO = -0.236500068946546  LUMO = 89.3419424109408
  mo_energy =
[-1.20269751e+02 -1.22540908e+01 -6.65473004e+00 -6.65473004e+00
 -6.65473004e+00 -1.16360620e+00 -2.36500069e-01 -2.36500069e-01
 -2.36500069e-01  8.93419424e+01  7.01685221e+02  3.77698506e+03
  1.59176792e+04  5.43138337e+04]
E1 = -706.5506450854995  E_coul = 198.91418422764846
Extra cycle  E= -507.636460857851  delta_E= -1.71e-13  |g|= 5.91e-09  |ddm|= 1.46e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.35709233089314
E1 = -706.5506450854995  E_coul = 198.91418422764846
init E= -507.636460857851
    CPU time for initialize scf      0.90 sec, wall time      0.06 sec
  HOMO = -0.236500068778767  LUMO = 89.3419424147137
  mo_energy =
[-1.20269751e+02 -1.22540908e+01 -6.65473004e+00 -6.65473004e+00
 -6.65473004e+00 -1.16360620e+00 -2.36500069e-01 -2.36500069e-01
 -2.36500069e-01  8.93419424e+01  7.01685221e+02  3.77698506e+03
  1.59176792e+04  5.43138337e+04]
E1 = -706.5506450859903  E_coul = 198.91418422813933
cycle= 1 E= -507.636460857851  delta_E= 1.14e-13  |g|= 1.14e-10  |ddm|= 2.23e-10
    CPU time for cycle= 1      0.07 sec, wall time      0.01 sec
E1 = -706.5506450859903  E_coul = 198.91418422813933
  HOMO = -0.236500068776428  LUMO = 89.3419424147666
  mo_energy =
[-1.20269751e+02 -1.22540908e+01 -6.65473004e+00 -6.65473004e+00
 -6.65473004e+00 -1.16360620e+00 -2.36500069e-01 -2.36500069e-01
 -2.36500069e-01  8.93419424e+01  7.01685221e+02  3.77698506e+03
  1.59176792e+04  5.43138337e+04]
E1 = -706.5506450859982  E_coul = 198.91418422814738
Extra cycle  E= -507.636460857851  delta_E= 1.14e-13  |g|= 1.44e-11  |ddm|= 3.89e-12
    CPU time for scf_cycle      1.03 sec, wall time      0.13 sec
exp = [7.34202639e+03 1.83550967e+04 2.22372592e+03 4.76379322e+02
 1.25569866e+02 3.82550260e+01 4.74357546e+00 3.91247681e-01
 8.59842042e+00 4.90797588e-01]
grad_E = [-1.17554837e-07 -1.87892217e-06  6.82224007e-05  5.32124992e-06
  6.74538643e-05 -5.27903110e-05 -7.31657107e-05 -4.13027966e-04
 -1.03865483e-05 -1.17901524e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02580847        1
[INPUT] 0    0    [1    /1   ]  18355.1020994        1
[INPUT] 0    0    [1    /1   ]  2223.62591112        1
[INPUT] 0    0    [1    /1   ]  475.806030706        1
[INPUT] 0    0    [1    /1   ]  125.490866169        1
[INPUT] 0    0    [1    /1   ]  38.2449983417        1
[INPUT] 0    0    [1    /1   ]  4.74346357408        1
[INPUT] 0    0    [1    /1   ]  0.391233066858       1
[INPUT] 1    0    [1    /1   ]  8.59840141341        1
[INPUT] 1    0    [1    /1   ]  0.49077782117        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.025808467546, 1.0]], [0, [18355.102099386222, 1.0]], [0, [2223.6259111230106, 1.0]], [0, [475.8060307059095, 1.0]], [0, [125.49086616866873, 1.0]], [0, [38.2449983417083, 1.0]], [0, [4.743463574080132, 1.0]], [0, [0.39123306685848164, 1.0]], [1, [8.598401413413082, 1.0]], [1, [0.49077782116957147, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02580847]
bas 1, expnt(s) = [18355.10209939]
bas 2, expnt(s) = [2223.62591112]
bas 3, expnt(s) = [475.80603071]
bas 4, expnt(s) = [125.49086617]
bas 5, expnt(s) = [38.24499834]
bas 6, expnt(s) = [4.74346357]
bas 7, expnt(s) = [0.39123307]
bas 8, expnt(s) = [8.59840141]
bas 9, expnt(s) = [0.49077782]
CPU time:       188.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202581e+03 2.00390419e+03 1.83551021e+04 3.98412199e+03
 2.22362591e+03 8.18109280e+02 4.75806031e+02 2.57387517e+02
 1.25490866e+02 9.47270716e+01 3.82449983e+01 3.88549191e+01
 4.74346357e+00 8.12057350e+00 3.91233067e-01 1.24980337e+00
 8.59840141e+00 4.29542893e+01 4.90777821e-01 1.19836896e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319986155090184
cond(S) = 87.3096280357216
E1 = -689.1340805403177  E_coul = 184.91468789251655
init E= -504.219392647801
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680991539111219  LUMO = 87.9542658568896
  mo_energy =
[-1.21648996e+02 -1.32811732e+01 -7.62152189e+00 -7.62152189e+00
 -7.62152189e+00 -1.65086309e+00 -6.80991539e-01 -6.80991539e-01
 -6.80991539e-01  8.79542659e+01  6.99624515e+02  3.77366903e+03
  1.59139510e+04  5.43101572e+04]
E1 = -706.5793687937023  E_coul = 198.943302724712
cycle= 1 E= -507.63606606899  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.437837
diis-c [-0.19170164  1.        ]
  HOMO = -0.236388573889975  LUMO = 89.2903729327705
  mo_energy =
[-1.20261533e+02 -1.22530724e+01 -6.65307488e+00 -6.65307488e+00
 -6.65307488e+00 -1.16358613e+00 -2.36388574e-01 -2.36388574e-01
 -2.36388574e-01  8.92903729e+01  7.00995209e+02  3.77493351e+03
  1.59151041e+04  5.43112305e+04]
E1 = -706.5494204622648  E_coul = 198.91294785647077
cycle= 2 E= -507.636472605794  delta_E= -0.000407  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501626
diis-c [-2.51615042e-05  8.38265526e-05  9.99916173e-01]
  HOMO = -0.236553688305684  LUMO = 89.2869543124693
  mo_energy =
[-1.20269811e+02 -1.22541955e+01 -6.65481541e+00 -6.65481541e+00
 -6.65481541e+00 -1.16364718e+00 -2.36553688e-01 -2.36553688e-01
 -2.36553688e-01  8.92869543e+01  7.00984985e+02  3.77491852e+03
  1.59150866e+04  5.43112117e+04]
E1 = -706.5490102511224  E_coul = 198.91253754421098
cycle= 3 E= -507.636472706911  delta_E= -1.01e-07  |g|= 9.33e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00012787
diis-c [-3.66457913e-10  3.40118857e-05 -2.56919741e-02  1.02565796e+00]
  HOMO = -0.236555830141855  LUMO = 89.2869101650824
  mo_energy =
[-1.20269922e+02 -1.22542108e+01 -6.65484144e+00 -6.65484144e+00
 -6.65484144e+00 -1.16364782e+00 -2.36555830e-01 -2.36555830e-01
 -2.36555830e-01  8.92869102e+01  7.00984870e+02  3.77491837e+03
  1.59150864e+04  5.43112115e+04]
E1 = -706.5490034010058  E_coul = 198.91253069405704
cycle= 4 E= -507.636472706949  delta_E= -3.74e-11  |g|= 3.48e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5490034010058  E_coul = 198.91253069405704
  HOMO = -0.236555815510626  LUMO = 89.2869104818332
  mo_energy =
[-1.20269921e+02 -1.22542107e+01 -6.65484130e+00 -6.65484130e+00
 -6.65484130e+00 -1.16364782e+00 -2.36555816e-01 -2.36555816e-01
 -2.36555816e-01  8.92869105e+01  7.00984871e+02  3.77491838e+03
  1.59150864e+04  5.43112115e+04]
E1 = -706.5490034341663  E_coul = 198.91253072721747
Extra cycle  E= -507.636472706949  delta_E=    0  |g|= 5.92e-09  |ddm|= 1.47e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34202581e+03 1.83551021e+04 2.22362591e+03 4.75806031e+02
 1.25490866e+02 3.82449983e+01 4.74346357e+00 3.91233067e-01
 8.59840141e+00 4.90777821e-01]
E = -507.6364727069488
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:27 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02580847        1
[INPUT] 0    0    [1    /1   ]  18355.1020994        1
[INPUT] 0    0    [1    /1   ]  2223.62591112        1
[INPUT] 0    0    [1    /1   ]  475.806030706        1
[INPUT] 0    0    [1    /1   ]  125.490866169        1
[INPUT] 0    0    [1    /1   ]  38.2449983417        1
[INPUT] 0    0    [1    /1   ]  4.74346357408        1
[INPUT] 0    0    [1    /1   ]  0.391233066858       1
[INPUT] 1    0    [1    /1   ]  8.59840141341        1
[INPUT] 1    0    [1    /1   ]  0.49077782117        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.025808467546, 1.0]], [0, [18355.102099386222, 1.0]], [0, [2223.6259111230106, 1.0]], [0, [475.8060307059095, 1.0]], [0, [125.49086616866873, 1.0]], [0, [38.2449983417083, 1.0]], [0, [4.743463574080132, 1.0]], [0, [0.39123306685848164, 1.0]], [1, [8.598401413413082, 1.0]], [1, [0.49077782116957147, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02580847]
bas 1, expnt(s) = [18355.10209939]
bas 2, expnt(s) = [2223.62591112]
bas 3, expnt(s) = [475.80603071]
bas 4, expnt(s) = [125.49086617]
bas 5, expnt(s) = [38.24499834]
bas 6, expnt(s) = [4.74346357]
bas 7, expnt(s) = [0.39123307]
bas 8, expnt(s) = [8.59840141]
bas 9, expnt(s) = [0.49077782]
CPU time:       189.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202581e+03 2.00390419e+03 1.83551021e+04 3.98412199e+03
 2.22362591e+03 8.18109280e+02 4.75806031e+02 2.57387517e+02
 1.25490866e+02 9.47270716e+01 3.82449983e+01 3.88549191e+01
 4.74346357e+00 8.12057350e+00 3.91233067e-01 1.24980337e+00
 8.59840141e+00 4.29542893e+01 4.90777821e-01 1.19836896e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319986155090184
cond(S) = 87.3096280357216
E1 = -689.1340805403177  E_coul = 184.91468789251655
init E= -504.219392647801
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680991539111219  LUMO = 87.9542658568896
  mo_energy =
[-1.21648996e+02 -1.32811732e+01 -7.62152189e+00 -7.62152189e+00
 -7.62152189e+00 -1.65086309e+00 -6.80991539e-01 -6.80991539e-01
 -6.80991539e-01  8.79542659e+01  6.99624515e+02  3.77366903e+03
  1.59139510e+04  5.43101572e+04]
E1 = -706.5793687937023  E_coul = 198.943302724712
cycle= 1 E= -507.63606606899  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.437837
diis-c [-0.19170164  1.        ]
  HOMO = -0.236388573889975  LUMO = 89.2903729327705
  mo_energy =
[-1.20261533e+02 -1.22530724e+01 -6.65307488e+00 -6.65307488e+00
 -6.65307488e+00 -1.16358613e+00 -2.36388574e-01 -2.36388574e-01
 -2.36388574e-01  8.92903729e+01  7.00995209e+02  3.77493351e+03
  1.59151041e+04  5.43112305e+04]
E1 = -706.5494204622648  E_coul = 198.91294785647077
cycle= 2 E= -507.636472605794  delta_E= -0.000407  |g|= 0.00461  |ddm|= 0.0136
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501626
diis-c [-2.51615042e-05  8.38265526e-05  9.99916173e-01]
  HOMO = -0.236553688305684  LUMO = 89.2869543124693
  mo_energy =
[-1.20269811e+02 -1.22541955e+01 -6.65481541e+00 -6.65481541e+00
 -6.65481541e+00 -1.16364718e+00 -2.36553688e-01 -2.36553688e-01
 -2.36553688e-01  8.92869543e+01  7.00984985e+02  3.77491852e+03
  1.59150866e+04  5.43112117e+04]
E1 = -706.5490102511224  E_coul = 198.91253754421098
cycle= 3 E= -507.636472706911  delta_E= -1.01e-07  |g|= 9.33e-05  |ddm|= 0.000188
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00012787
diis-c [-3.66457913e-10  3.40118857e-05 -2.56919741e-02  1.02565796e+00]
  HOMO = -0.236555830141855  LUMO = 89.2869101650824
  mo_energy =
[-1.20269922e+02 -1.22542108e+01 -6.65484144e+00 -6.65484144e+00
 -6.65484144e+00 -1.16364782e+00 -2.36555830e-01 -2.36555830e-01
 -2.36555830e-01  8.92869102e+01  7.00984870e+02  3.77491837e+03
  1.59150864e+04  5.43112115e+04]
E1 = -706.5490034010058  E_coul = 198.91253069405704
cycle= 4 E= -507.636472706949  delta_E= -3.74e-11  |g|= 3.48e-07  |ddm|= 3.27e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5490034010058  E_coul = 198.91253069405704
  HOMO = -0.236555815510626  LUMO = 89.2869104818332
  mo_energy =
[-1.20269921e+02 -1.22542107e+01 -6.65484130e+00 -6.65484130e+00
 -6.65484130e+00 -1.16364782e+00 -2.36555816e-01 -2.36555816e-01
 -2.36555816e-01  8.92869105e+01  7.00984871e+02  3.77491838e+03
  1.59150864e+04  5.43112115e+04]
E1 = -706.5490034341663  E_coul = 198.91253072721747
Extra cycle  E= -507.636472706949  delta_E=    0  |g|= 5.92e-09  |ddm|= 1.47e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.3096280357216
E1 = -706.5490034341663  E_coul = 198.91253072721747
init E= -507.636472706949
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236555815342465  LUMO = 89.2869104856124
  mo_energy =
[-1.20269921e+02 -1.22542107e+01 -6.65484129e+00 -6.65484129e+00
 -6.65484129e+00 -1.16364782e+00 -2.36555815e-01 -2.36555815e-01
 -2.36555815e-01  8.92869105e+01  7.00984871e+02  3.77491838e+03
  1.59150864e+04  5.43112115e+04]
E1 = -706.5490034346583  E_coul = 198.91253072770948
cycle= 1 E= -507.636472706949  delta_E=    0  |g|= 1.19e-10  |ddm|= 2.23e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5490034346583  E_coul = 198.91253072770948
  HOMO = -0.236555815340122  LUMO = 89.2869104856656
  mo_energy =
[-1.20269921e+02 -1.22542107e+01 -6.65484129e+00 -6.65484129e+00
 -6.65484129e+00 -1.16364782e+00 -2.36555815e-01 -2.36555815e-01
 -2.36555815e-01  8.92869105e+01  7.00984871e+02  3.77491838e+03
  1.59150864e+04  5.43112115e+04]
E1 = -706.5490034346666  E_coul = 198.91253072771772
Extra cycle  E= -507.636472706949  delta_E= -1.14e-13  |g|= 1.03e-11  |ddm|= 3.9e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34202581e+03 1.83551021e+04 2.22362591e+03 4.75806031e+02
 1.25490866e+02 3.82449983e+01 4.74346357e+00 3.91233067e-01
 8.59840141e+00 4.90777821e-01]
grad_E = [-1.34537217e-07 -1.86896947e-06  6.94398894e-05 -9.48796269e-06
  1.07298410e-04 -8.82373645e-05 -1.22338304e-04 -6.86771250e-04
 -1.55737821e-05 -1.95657601e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02547958        1
[INPUT] 0    0    [1    /1   ]  18355.1200113        1
[INPUT] 0    0    [1    /1   ]  2223.122921          1
[INPUT] 0    0    [1    /1   ]  474.83745503         1
[INPUT] 0    0    [1    /1   ]  125.356929623        1
[INPUT] 0    0    [1    /1   ]  38.2278317277        1
[INPUT] 0    0    [1    /1   ]  4.74327692259        1
[INPUT] 0    0    [1    /1   ]  0.391209137924       1
[INPUT] 1    0    [1    /1   ]  8.5983705884         1
[INPUT] 1    0    [1    /1   ]  0.490745569206       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.025479577591, 1.0]], [0, [18355.1200113222, 1.0]], [0, [2223.122921003045, 1.0]], [0, [474.83745503011374, 1.0]], [0, [125.3569296227917, 1.0]], [0, [38.22783172772118, 1.0]], [0, [4.743276922594977, 1.0]], [0, [0.39120913792399986, 1.0]], [1, [8.598370588401112, 1.0]], [1, [0.49074556920550894, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02547958]
bas 1, expnt(s) = [18355.12001132]
bas 2, expnt(s) = [2223.122921]
bas 3, expnt(s) = [474.83745503]
bas 4, expnt(s) = [125.35692962]
bas 5, expnt(s) = [38.22783173]
bas 6, expnt(s) = [4.74327692]
bas 7, expnt(s) = [0.39120914]
bas 8, expnt(s) = [8.59837059]
bas 9, expnt(s) = [0.49074557]
CPU time:       193.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202548e+03 2.00390413e+03 1.83551200e+04 3.98412491e+03
 2.22312292e+03 8.17970482e+02 4.74837455e+02 2.56994454e+02
 1.25356930e+02 9.46512348e+01 3.82278317e+01 3.88418381e+01
 4.74327692e+00 8.12033385e+00 3.91209138e-01 1.24974603e+00
 8.59837059e+00 4.29540968e+01 4.90745569e-01 1.19827052e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320034677615837
cond(S) = 87.22181033308112
E1 = -689.1318200984855  E_coul = 184.9129856644059
init E= -504.21883443408
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681040827635689  LUMO = 87.8606306358419
  mo_energy =
[-1.21649183e+02 -1.32813082e+01 -7.62164027e+00 -7.62164027e+00
 -7.62164027e+00 -1.65088828e+00 -6.81040828e-01 -6.81040828e-01
 -6.81040828e-01  8.78606306e+01  6.98436597e+02  3.76989895e+03
  1.59086859e+04  5.43045710e+04]
E1 = -706.576744411793  E_coul = 198.94064786701742
cycle= 1 E= -507.636096544776  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.438003
diis-c [-0.19184659  1.        ]
  HOMO = -0.236479341357451  LUMO = 89.1965439167145
  mo_energy =
[-1.20261805e+02 -1.22532669e+01 -6.65325376e+00 -6.65325376e+00
 -6.65325376e+00 -1.16365402e+00 -2.36479341e-01 -2.36479341e-01
 -2.36479341e-01  8.91965439e+01  6.99807244e+02  3.77116337e+03
  1.59098389e+04  5.43056440e+04]
E1 = -706.5467493513842  E_coul = 198.91024559341614
cycle= 2 E= -507.636503757968  delta_E= -0.000407  |g|= 0.00462  |ddm|= 0.0136
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501963
diis-c [-2.51951438e-05  8.84110487e-05  9.99911589e-01]
  HOMO = -0.236644747166817  LUMO = 89.1931222017132
  mo_energy =
[-1.20270094e+02 -1.22543921e+01 -6.65499743e+00 -6.65499743e+00
 -6.65499743e+00 -1.16371517e+00 -2.36644747e-01 -2.36644747e-01
 -2.36644747e-01  8.91931222e+01  6.99797013e+02  3.77114835e+03
  1.59098213e+04  5.43056252e+04]
E1 = -706.5463382157554  E_coul = 198.90983435640115
cycle= 3 E= -507.636503859354  delta_E= -1.01e-07  |g|= 9.34e-05  |ddm|= 0.000189
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000128041
diis-c [-3.67486637e-10  3.39983201e-05 -2.57087940e-02  1.02567480e+00]
  HOMO = -0.23664689478008  LUMO = 89.1930779556892
  mo_energy =
[-1.20270205e+02 -1.22544074e+01 -6.65502354e+00 -6.65502354e+00
 -6.65502354e+00 -1.16371581e+00 -2.36646895e-01 -2.36646895e-01
 -2.36646895e-01  8.91930780e+01  6.99796897e+02  3.77114821e+03
  1.59098211e+04  5.43056250e+04]
E1 = -706.546331343952  E_coul = 198.9098274845596
cycle= 4 E= -507.636503859392  delta_E= -3.81e-11  |g|= 3.49e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.546331343952  E_coul = 198.9098274845596
  HOMO = -0.236646880099529  LUMO = 89.1930782731119
  mo_energy =
[-1.20270204e+02 -1.22544073e+01 -6.65502339e+00 -6.65502339e+00
 -6.65502339e+00 -1.16371581e+00 -2.36646880e-01 -2.36646880e-01
 -2.36646880e-01  8.91930783e+01  6.99796898e+02  3.77114821e+03
  1.59098211e+04  5.43056250e+04]
E1 = -706.5463313772314  E_coul = 198.90982751783912
Extra cycle  E= -507.636503859392  delta_E= 1.71e-13  |g|= 5.93e-09  |ddm|= 1.47e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34202548e+03 1.83551200e+04 2.22312292e+03 4.74837455e+02
 1.25356930e+02 3.82278317e+01 4.74327692e+00 3.91209138e-01
 8.59837059e+00 4.90745569e-01]
E = -507.63650385939223
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02547958        1
[INPUT] 0    0    [1    /1   ]  18355.1200113        1
[INPUT] 0    0    [1    /1   ]  2223.122921          1
[INPUT] 0    0    [1    /1   ]  474.83745503         1
[INPUT] 0    0    [1    /1   ]  125.356929623        1
[INPUT] 0    0    [1    /1   ]  38.2278317277        1
[INPUT] 0    0    [1    /1   ]  4.74327692259        1
[INPUT] 0    0    [1    /1   ]  0.391209137924       1
[INPUT] 1    0    [1    /1   ]  8.5983705884         1
[INPUT] 1    0    [1    /1   ]  0.490745569206       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.025479577591, 1.0]], [0, [18355.1200113222, 1.0]], [0, [2223.122921003045, 1.0]], [0, [474.83745503011374, 1.0]], [0, [125.3569296227917, 1.0]], [0, [38.22783172772118, 1.0]], [0, [4.743276922594977, 1.0]], [0, [0.39120913792399986, 1.0]], [1, [8.598370588401112, 1.0]], [1, [0.49074556920550894, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02547958]
bas 1, expnt(s) = [18355.12001132]
bas 2, expnt(s) = [2223.122921]
bas 3, expnt(s) = [474.83745503]
bas 4, expnt(s) = [125.35692962]
bas 5, expnt(s) = [38.22783173]
bas 6, expnt(s) = [4.74327692]
bas 7, expnt(s) = [0.39120914]
bas 8, expnt(s) = [8.59837059]
bas 9, expnt(s) = [0.49074557]
CPU time:       193.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202548e+03 2.00390413e+03 1.83551200e+04 3.98412491e+03
 2.22312292e+03 8.17970482e+02 4.74837455e+02 2.56994454e+02
 1.25356930e+02 9.46512348e+01 3.82278317e+01 3.88418381e+01
 4.74327692e+00 8.12033385e+00 3.91209138e-01 1.24974603e+00
 8.59837059e+00 4.29540968e+01 4.90745569e-01 1.19827052e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320034677615837
cond(S) = 87.22181033308112
E1 = -689.1318200984855  E_coul = 184.9129856644059
init E= -504.21883443408
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681040827635689  LUMO = 87.8606306358419
  mo_energy =
[-1.21649183e+02 -1.32813082e+01 -7.62164027e+00 -7.62164027e+00
 -7.62164027e+00 -1.65088828e+00 -6.81040828e-01 -6.81040828e-01
 -6.81040828e-01  8.78606306e+01  6.98436597e+02  3.76989895e+03
  1.59086859e+04  5.43045710e+04]
E1 = -706.576744411793  E_coul = 198.94064786701742
cycle= 1 E= -507.636096544776  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.438003
diis-c [-0.19184659  1.        ]
  HOMO = -0.236479341357451  LUMO = 89.1965439167145
  mo_energy =
[-1.20261805e+02 -1.22532669e+01 -6.65325376e+00 -6.65325376e+00
 -6.65325376e+00 -1.16365402e+00 -2.36479341e-01 -2.36479341e-01
 -2.36479341e-01  8.91965439e+01  6.99807244e+02  3.77116337e+03
  1.59098389e+04  5.43056440e+04]
E1 = -706.5467493513842  E_coul = 198.91024559341614
cycle= 2 E= -507.636503757968  delta_E= -0.000407  |g|= 0.00462  |ddm|= 0.0136
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501963
diis-c [-2.51951438e-05  8.84110487e-05  9.99911589e-01]
  HOMO = -0.236644747166817  LUMO = 89.1931222017132
  mo_energy =
[-1.20270094e+02 -1.22543921e+01 -6.65499743e+00 -6.65499743e+00
 -6.65499743e+00 -1.16371517e+00 -2.36644747e-01 -2.36644747e-01
 -2.36644747e-01  8.91931222e+01  6.99797013e+02  3.77114835e+03
  1.59098213e+04  5.43056252e+04]
E1 = -706.5463382157554  E_coul = 198.90983435640115
cycle= 3 E= -507.636503859354  delta_E= -1.01e-07  |g|= 9.34e-05  |ddm|= 0.000189
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000128041
diis-c [-3.67486637e-10  3.39983201e-05 -2.57087940e-02  1.02567480e+00]
  HOMO = -0.23664689478008  LUMO = 89.1930779556892
  mo_energy =
[-1.20270205e+02 -1.22544074e+01 -6.65502354e+00 -6.65502354e+00
 -6.65502354e+00 -1.16371581e+00 -2.36646895e-01 -2.36646895e-01
 -2.36646895e-01  8.91930780e+01  6.99796897e+02  3.77114821e+03
  1.59098211e+04  5.43056250e+04]
E1 = -706.546331343952  E_coul = 198.9098274845596
cycle= 4 E= -507.636503859392  delta_E= -3.81e-11  |g|= 3.49e-07  |ddm|= 3.28e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.546331343952  E_coul = 198.9098274845596
  HOMO = -0.236646880099529  LUMO = 89.1930782731119
  mo_energy =
[-1.20270204e+02 -1.22544073e+01 -6.65502339e+00 -6.65502339e+00
 -6.65502339e+00 -1.16371581e+00 -2.36646880e-01 -2.36646880e-01
 -2.36646880e-01  8.91930783e+01  6.99796898e+02  3.77114821e+03
  1.59098211e+04  5.43056250e+04]
E1 = -706.5463313772314  E_coul = 198.90982751783912
Extra cycle  E= -507.636503859392  delta_E= 1.71e-13  |g|= 5.93e-09  |ddm|= 1.47e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.22181033308112
E1 = -706.5463313772314  E_coul = 198.90982751783912
init E= -507.636503859392
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236646879930707  LUMO = 89.1930782769017
  mo_energy =
[-1.20270204e+02 -1.22544073e+01 -6.65502339e+00 -6.65502339e+00
 -6.65502339e+00 -1.16371581e+00 -2.36646880e-01 -2.36646880e-01
 -2.36646880e-01  8.91930783e+01  6.99796898e+02  3.77114821e+03
  1.59098211e+04  5.43056250e+04]
E1 = -706.5463313777254  E_coul = 198.90982751833326
cycle= 1 E= -507.636503859392  delta_E= 5.68e-14  |g|= 1.15e-10  |ddm|= 2.24e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5463313777254  E_coul = 198.90982751833326
  HOMO = -0.236646879928356  LUMO = 89.1930782769562
  mo_energy =
[-1.20270204e+02 -1.22544073e+01 -6.65502339e+00 -6.65502339e+00
 -6.65502339e+00 -1.16371581e+00 -2.36646880e-01 -2.36646880e-01
 -2.36646880e-01  8.91930783e+01  6.99796898e+02  3.77114821e+03
  1.59098211e+04  5.43056250e+04]
E1 = -706.5463313777338  E_coul = 198.90982751834147
Extra cycle  E= -507.636503859392  delta_E= -2.27e-13  |g|= 1.51e-11  |ddm|= 3.9e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202548e+03 1.83551200e+04 2.22312292e+03 4.74837455e+02
 1.25356930e+02 3.82278317e+01 4.74327692e+00 3.91209138e-01
 8.59837059e+00 4.90745569e-01]
grad_E = [-1.60883487e-07 -1.85344654e-06  7.14224035e-05 -3.36834953e-05
  1.72389911e-04 -1.46157780e-04 -2.02615777e-04 -1.13381337e-03
 -2.40070440e-05 -3.22634406e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02654547        1
[INPUT] 0    0    [1    /1   ]  18355.1732055        1
[INPUT] 0    0    [1    /1   ]  2221.41459627        1
[INPUT] 0    0    [1    /1   ]  473.169145645        1
[INPUT] 0    0    [1    /1   ]  125.125079812        1
[INPUT] 0    0    [1    /1   ]  38.1977047982        1
[INPUT] 0    0    [1    /1   ]  4.74296124417        1
[INPUT] 0    0    [1    /1   ]  0.391169825245       1
[INPUT] 1    0    [1    /1   ]  8.5983205894         1
[INPUT] 1    0    [1    /1   ]  0.490692866014       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.026545471802, 1.0]], [0, [18355.173205527604, 1.0]], [0, [2221.41459626989, 1.0]], [0, [473.1691456448758, 1.0]], [0, [125.12507981245997, 1.0]], [0, [38.197704798218574, 1.0]], [0, [4.742961244172475, 1.0]], [0, [0.3911698252446249, 1.0]], [1, [8.598320589402938, 1.0]], [1, [0.49069286601394935, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02654547]
bas 1, expnt(s) = [18355.17320553]
bas 2, expnt(s) = [2221.41459627]
bas 3, expnt(s) = [473.16914564]
bas 4, expnt(s) = [125.12507981]
bas 5, expnt(s) = [38.1977048]
bas 6, expnt(s) = [4.74296124]
bas 7, expnt(s) = [0.39116983]
bas 8, expnt(s) = [8.59832059]
bas 9, expnt(s) = [0.49069287]
CPU time:       197.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202655e+03 2.00390435e+03 1.83551732e+04 3.98413357e+03
 2.22141460e+03 8.17499019e+02 4.73169146e+02 2.56316956e+02
 1.25125080e+02 9.45199101e+01 3.81977048e+01 3.88188777e+01
 4.74296124e+00 8.11992852e+00 3.91169825e-01 1.24965184e+00
 8.59832059e+00 4.29537846e+01 4.90692866e-01 1.19810967e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32011425755914
cond(S) = 87.0515940926724
E1 = -689.1281674561899  E_coul = 184.91019665140837
init E= -504.217970804782
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681121366082054  LUMO = 87.697232082611
  mo_energy =
[-1.21649504e+02 -1.32815310e+01 -7.62183457e+00 -7.62183457e+00
 -7.62183457e+00 -1.65092920e+00 -6.81121366e-01 -6.81121366e-01
 -6.81121366e-01  8.76972321e+01  6.96378811e+02  3.76270318e+03
  1.58973864e+04  5.42920343e+04]
E1 = -706.5724784723405  E_coul = 198.93630128905065
cycle= 1 E= -507.63617718329  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.438268
diis-c [-0.19207842  1.        ]
  HOMO = -0.236627902633467  LUMO = 89.0328167078094
  mo_energy =
[-1.20262261e+02 -1.22535876e+01 -6.65354716e+00 -6.65354716e+00
 -6.65354716e+00 -1.16376519e+00 -2.36627903e-01 -2.36627903e-01
 -2.36627903e-01  8.90328167e+01  6.97749388e+02  3.76396752e+03
  1.58985391e+04  5.42931070e+04]
E1 = -706.5424016970967  E_coul = 198.90581611763508
cycle= 2 E= -507.636585579462  delta_E= -0.000408  |g|= 0.00463  |ddm|= 0.0136
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00502567
diis-c [-2.52555900e-05  9.62896548e-05  9.99903710e-01]
  HOMO = -0.236793820753888  LUMO = 89.0293896042695
  mo_energy =
[-1.20270570e+02 -1.22547162e+01 -6.65529634e+00 -6.65529634e+00
 -6.65529634e+00 -1.16382654e+00 -2.36793821e-01 -2.36793821e-01
 -2.36793821e-01  8.90293896e+01  6.97739144e+02  3.76395248e+03
  1.58985214e+04  5.42930882e+04]
E1 = -706.5419889424593  E_coul = 198.90540326113936
cycle= 3 E= -507.63658568132  delta_E= -1.02e-07  |g|= 9.36e-05  |ddm|= 0.000189
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000128345
diis-c [-3.69314993e-10  3.39764025e-05 -2.57382183e-02  1.02570424e+00]
  HOMO = -0.236795978505752  LUMO = 89.0293451863307
  mo_energy =
[-1.20270682e+02 -1.22547316e+01 -6.65532257e+00 -6.65532257e+00
 -6.65532257e+00 -1.16382718e+00 -2.36795979e-01 -2.36795979e-01
 -2.36795979e-01  8.90293452e+01  6.97739028e+02  3.76395234e+03
  1.58985213e+04  5.42930880e+04]
E1 = -706.5419820326695  E_coul = 198.90539635131142
cycle= 4 E= -507.636585681358  delta_E= -3.81e-11  |g|= 3.51e-07  |ddm|= 3.3e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5419820326695  E_coul = 198.90539635131142
  HOMO = -0.236795963738496  LUMO = 89.0293455049258
  mo_energy =
[-1.20270681e+02 -1.22547315e+01 -6.65532242e+00 -6.65532242e+00
 -6.65532242e+00 -1.16382718e+00 -2.36795964e-01 -2.36795964e-01
 -2.36795964e-01  8.90293455e+01  6.97739029e+02  3.76395234e+03
  1.58985213e+04  5.42930880e+04]
E1 = -706.5419820661585  E_coul = 198.9053963848007
Extra cycle  E= -507.636585681358  delta_E= 2.27e-13  |g|= 5.96e-09  |ddm|= 1.48e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34202655e+03 1.83551732e+04 2.22141460e+03 4.73169146e+02
 1.25125080e+02 3.81977048e+01 4.74296124e+00 3.91169825e-01
 8.59832059e+00 4.90692866e-01]
E = -507.6365856813578
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.02654547        1
[INPUT] 0    0    [1    /1   ]  18355.1732055        1
[INPUT] 0    0    [1    /1   ]  2221.41459627        1
[INPUT] 0    0    [1    /1   ]  473.169145645        1
[INPUT] 0    0    [1    /1   ]  125.125079812        1
[INPUT] 0    0    [1    /1   ]  38.1977047982        1
[INPUT] 0    0    [1    /1   ]  4.74296124417        1
[INPUT] 0    0    [1    /1   ]  0.391169825245       1
[INPUT] 1    0    [1    /1   ]  8.5983205894         1
[INPUT] 1    0    [1    /1   ]  0.490692866014       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.026545471802, 1.0]], [0, [18355.173205527604, 1.0]], [0, [2221.41459626989, 1.0]], [0, [473.1691456448758, 1.0]], [0, [125.12507981245997, 1.0]], [0, [38.197704798218574, 1.0]], [0, [4.742961244172475, 1.0]], [0, [0.3911698252446249, 1.0]], [1, [8.598320589402938, 1.0]], [1, [0.49069286601394935, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.02654547]
bas 1, expnt(s) = [18355.17320553]
bas 2, expnt(s) = [2221.41459627]
bas 3, expnt(s) = [473.16914564]
bas 4, expnt(s) = [125.12507981]
bas 5, expnt(s) = [38.1977048]
bas 6, expnt(s) = [4.74296124]
bas 7, expnt(s) = [0.39116983]
bas 8, expnt(s) = [8.59832059]
bas 9, expnt(s) = [0.49069287]
CPU time:       198.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34202655e+03 2.00390435e+03 1.83551732e+04 3.98413357e+03
 2.22141460e+03 8.17499019e+02 4.73169146e+02 2.56316956e+02
 1.25125080e+02 9.45199101e+01 3.81977048e+01 3.88188777e+01
 4.74296124e+00 8.11992852e+00 3.91169825e-01 1.24965184e+00
 8.59832059e+00 4.29537846e+01 4.90692866e-01 1.19810967e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32011425755914
cond(S) = 87.0515940926724
E1 = -689.1281674561899  E_coul = 184.91019665140837
init E= -504.217970804782
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681121366082054  LUMO = 87.697232082611
  mo_energy =
[-1.21649504e+02 -1.32815310e+01 -7.62183457e+00 -7.62183457e+00
 -7.62183457e+00 -1.65092920e+00 -6.81121366e-01 -6.81121366e-01
 -6.81121366e-01  8.76972321e+01  6.96378811e+02  3.76270318e+03
  1.58973864e+04  5.42920343e+04]
E1 = -706.5724784723405  E_coul = 198.93630128905065
cycle= 1 E= -507.63617718329  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.438268
diis-c [-0.19207842  1.        ]
  HOMO = -0.236627902633467  LUMO = 89.0328167078094
  mo_energy =
[-1.20262261e+02 -1.22535876e+01 -6.65354716e+00 -6.65354716e+00
 -6.65354716e+00 -1.16376519e+00 -2.36627903e-01 -2.36627903e-01
 -2.36627903e-01  8.90328167e+01  6.97749388e+02  3.76396752e+03
  1.58985391e+04  5.42931070e+04]
E1 = -706.5424016970967  E_coul = 198.90581611763508
cycle= 2 E= -507.636585579462  delta_E= -0.000408  |g|= 0.00463  |ddm|= 0.0136
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00502567
diis-c [-2.52555900e-05  9.62896548e-05  9.99903710e-01]
  HOMO = -0.236793820753888  LUMO = 89.0293896042695
  mo_energy =
[-1.20270570e+02 -1.22547162e+01 -6.65529634e+00 -6.65529634e+00
 -6.65529634e+00 -1.16382654e+00 -2.36793821e-01 -2.36793821e-01
 -2.36793821e-01  8.90293896e+01  6.97739144e+02  3.76395248e+03
  1.58985214e+04  5.42930882e+04]
E1 = -706.5419889424593  E_coul = 198.90540326113936
cycle= 3 E= -507.63658568132  delta_E= -1.02e-07  |g|= 9.36e-05  |ddm|= 0.000189
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000128345
diis-c [-3.69314993e-10  3.39764025e-05 -2.57382183e-02  1.02570424e+00]
  HOMO = -0.236795978505752  LUMO = 89.0293451863307
  mo_energy =
[-1.20270682e+02 -1.22547316e+01 -6.65532257e+00 -6.65532257e+00
 -6.65532257e+00 -1.16382718e+00 -2.36795979e-01 -2.36795979e-01
 -2.36795979e-01  8.90293452e+01  6.97739028e+02  3.76395234e+03
  1.58985213e+04  5.42930880e+04]
E1 = -706.5419820326695  E_coul = 198.90539635131142
cycle= 4 E= -507.636585681358  delta_E= -3.81e-11  |g|= 3.51e-07  |ddm|= 3.3e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5419820326695  E_coul = 198.90539635131142
  HOMO = -0.236795963738496  LUMO = 89.0293455049258
  mo_energy =
[-1.20270681e+02 -1.22547315e+01 -6.65532242e+00 -6.65532242e+00
 -6.65532242e+00 -1.16382718e+00 -2.36795964e-01 -2.36795964e-01
 -2.36795964e-01  8.90293455e+01  6.97739029e+02  3.76395234e+03
  1.58985213e+04  5.42930880e+04]
E1 = -706.5419820661585  E_coul = 198.9053963848007
Extra cycle  E= -507.636585681358  delta_E= 2.27e-13  |g|= 5.96e-09  |ddm|= 1.48e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 87.0515940926724
E1 = -706.5419820661585  E_coul = 198.9053963848007
init E= -507.636585681358
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236795963568509  LUMO = 89.0293455087322
  mo_energy =
[-1.20270681e+02 -1.22547315e+01 -6.65532242e+00 -6.65532242e+00
 -6.65532242e+00 -1.16382718e+00 -2.36795964e-01 -2.36795964e-01
 -2.36795964e-01  8.90293455e+01  6.97739029e+02  3.76395234e+03
  1.58985213e+04  5.42930880e+04]
E1 = -706.5419820666569  E_coul = 198.90539638529899
cycle= 1 E= -507.636585681358  delta_E= -1.14e-13  |g|= 1.21e-10  |ddm|= 2.26e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5419820666569  E_coul = 198.90539638529899
  HOMO = -0.236795963566139  LUMO = 89.0293455087872
  mo_energy =
[-1.20270681e+02 -1.22547315e+01 -6.65532242e+00 -6.65532242e+00
 -6.65532242e+00 -1.16382718e+00 -2.36795964e-01 -2.36795964e-01
 -2.36795964e-01  8.90293455e+01  6.97739029e+02  3.76395234e+03
  1.58985213e+04  5.42930880e+04]
E1 = -706.5419820666652  E_coul = 198.90539638530703
Extra cycle  E= -507.636585681358  delta_E= -2.84e-13  |g|= 1.82e-11  |ddm|= 3.92e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34202655e+03 1.83551732e+04 2.22141460e+03 4.73169146e+02
 1.25125080e+02 3.81977048e+01 4.74296124e+00 3.91169825e-01
 8.59832059e+00 4.90692866e-01]
grad_E = [-2.00619543e-07 -1.82999494e-06  7.46553362e-05 -7.33198217e-05
  2.79005828e-04 -2.41076629e-04 -3.33820380e-04 -1.86529590e-03
 -3.77796594e-05 -5.30402139e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:35 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.03247818        1
[INPUT] 0    0    [1    /1   ]  18355.3230328        1
[INPUT] 0    0    [1    /1   ]  2216.29508366        1
[INPUT] 0    0    [1    /1   ]  470.203434723        1
[INPUT] 0    0    [1    /1   ]  124.710158257        1
[INPUT] 0    0    [1    /1   ]  38.1428003004        1
[INPUT] 0    0    [1    /1   ]  4.74241360675        1
[INPUT] 0    0    [1    /1   ]  0.391104567319       1
[INPUT] 1    0    [1    /1   ]  8.59823911846        1
[INPUT] 1    0    [1    /1   ]  0.490606077758       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.032478178138, 1.0]], [0, [18355.323032822285, 1.0]], [0, [2216.2950836583123, 1.0]], [0, [470.20343472332013, 1.0]], [0, [124.71015825668792, 1.0]], [0, [38.142800300391386, 1.0]], [0, [4.742413606748359, 1.0]], [0, [0.39110456731881516, 1.0]], [1, [8.598239118457819, 1.0]], [1, [0.49060607775827625, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.03247818]
bas 1, expnt(s) = [18355.32303282]
bas 2, expnt(s) = [2216.29508366]
bas 3, expnt(s) = [470.20343472]
bas 4, expnt(s) = [124.71015826]
bas 5, expnt(s) = [38.1428003]
bas 6, expnt(s) = [4.74241361]
bas 7, expnt(s) = [0.39110457]
bas 8, expnt(s) = [8.59823912]
bas 9, expnt(s) = [0.49060608]
CPU time:       202.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34203248e+03 2.00390556e+03 1.83553230e+04 3.98415796e+03
 2.21629508e+03 8.16085594e+02 4.70203435e+02 2.55111110e+02
 1.24710158e+02 9.42847377e+01 3.81428003e+01 3.87770222e+01
 4.74241361e+00 8.11922535e+00 3.91104567e-01 1.24949548e+00
 8.59823912e+00 4.29532758e+01 4.90606078e-01 1.19784479e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320246035317275
cond(S) = 86.70370932797225
E1 = -689.1222648081243  E_coul = 184.90558525217017
init E= -504.216679555954
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681253969727862  LUMO = 87.401703810661
  mo_energy =
[-1.21650069e+02 -1.32819039e+01 -7.62215669e+00 -7.62215669e+00
 -7.62215669e+00 -1.65099600e+00 -6.81253970e-01 -6.81253970e-01
 -6.81253970e-01  8.74017038e+01  6.92692972e+02  3.74817361e+03
  1.58717761e+04  5.42625386e+04]
E1 = -706.5655145707067  E_coul = 198.92912396882585
cycle= 1 E= -507.636390601881  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.438686
diis-c [-0.19244571  1.        ]
  HOMO = -0.236873133640229  LUMO = 88.7367164484742
  mo_energy =
[-1.20263046e+02 -1.22541227e+01 -6.65403304e+00 -6.65403304e+00
 -6.65403304e+00 -1.16394890e+00 -2.36873134e-01 -2.36873134e-01
 -2.36873134e-01  8.87367164e+01  6.94063453e+02  3.74943788e+03
  1.58729284e+04  5.42636108e+04]
E1 = -706.5352893809618  E_coul = 198.89848823367345
cycle= 2 E= -507.636801147288  delta_E= -0.000411  |g|= 0.00464  |ddm|= 0.0137
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00503702
diis-c [-2.53692349e-05  1.10250159e-04  9.99889750e-01]
  HOMO = -0.2370399891258  LUMO = 88.7332796203012
  mo_energy =
[-1.20271390e+02 -1.22552577e+01 -6.65579223e+00 -6.65579223e+00
 -6.65579223e+00 -1.16401059e+00 -2.37039989e-01 -2.37039989e-01
 -2.37039989e-01  8.87332796e+01  6.94053185e+02  3.74942279e+03
  1.58729107e+04  5.42635919e+04]
E1 = -706.5348736788684  E_coul = 198.89807242886005
cycle= 3 E= -507.636801250008  delta_E= -1.03e-07  |g|= 9.41e-05  |ddm|= 0.000191
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000128906
diis-c [-3.72708873e-10  3.39412187e-05 -2.57916382e-02  1.02575770e+00]
  HOMO = -0.237042165391473  LUMO = 88.7332348915383
  mo_energy =
[-1.20271502e+02 -1.22552733e+01 -6.65581868e+00 -6.65581868e+00
 -6.65581868e+00 -1.16401125e+00 -2.37042165e-01 -2.37042165e-01
 -2.37042165e-01  8.87332349e+01  6.94053068e+02  3.74942265e+03
  1.58729106e+04  5.42635917e+04]
E1 = -706.5348666998807  E_coul = 198.89806544983355
cycle= 4 E= -507.636801250047  delta_E= -3.88e-11  |g|= 3.53e-07  |ddm|= 3.33e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5348666998807  E_coul = 198.89806544983355
  HOMO = -0.237042150465493  LUMO = 88.7332352122568
  mo_energy =
[-1.20271501e+02 -1.22552732e+01 -6.65581853e+00 -6.65581853e+00
 -6.65581853e+00 -1.16401124e+00 -2.37042150e-01 -2.37042150e-01
 -2.37042150e-01  8.87332352e+01  6.94053069e+02  3.74942265e+03
  1.58729106e+04  5.42635917e+04]
E1 = -706.5348667337526  E_coul = 198.89806548370555
Extra cycle  E= -507.636801250047  delta_E= 1.14e-13  |g|= 6.02e-09  |ddm|= 1.5e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34203248e+03 1.83553230e+04 2.21629508e+03 4.70203435e+02
 1.24710158e+02 3.81428003e+01 4.74241361e+00 3.91104567e-01
 8.59823912e+00 4.90606078e-01]
E = -507.63680125004703
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:35 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.03247818        1
[INPUT] 0    0    [1    /1   ]  18355.3230328        1
[INPUT] 0    0    [1    /1   ]  2216.29508366        1
[INPUT] 0    0    [1    /1   ]  470.203434723        1
[INPUT] 0    0    [1    /1   ]  124.710158257        1
[INPUT] 0    0    [1    /1   ]  38.1428003004        1
[INPUT] 0    0    [1    /1   ]  4.74241360675        1
[INPUT] 0    0    [1    /1   ]  0.391104567319       1
[INPUT] 1    0    [1    /1   ]  8.59823911846        1
[INPUT] 1    0    [1    /1   ]  0.490606077758       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.032478178138, 1.0]], [0, [18355.323032822285, 1.0]], [0, [2216.2950836583123, 1.0]], [0, [470.20343472332013, 1.0]], [0, [124.71015825668792, 1.0]], [0, [38.142800300391386, 1.0]], [0, [4.742413606748359, 1.0]], [0, [0.39110456731881516, 1.0]], [1, [8.598239118457819, 1.0]], [1, [0.49060607775827625, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.03247818]
bas 1, expnt(s) = [18355.32303282]
bas 2, expnt(s) = [2216.29508366]
bas 3, expnt(s) = [470.20343472]
bas 4, expnt(s) = [124.71015826]
bas 5, expnt(s) = [38.1428003]
bas 6, expnt(s) = [4.74241361]
bas 7, expnt(s) = [0.39110457]
bas 8, expnt(s) = [8.59823912]
bas 9, expnt(s) = [0.49060608]
CPU time:       202.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34203248e+03 2.00390556e+03 1.83553230e+04 3.98415796e+03
 2.21629508e+03 8.16085594e+02 4.70203435e+02 2.55111110e+02
 1.24710158e+02 9.42847377e+01 3.81428003e+01 3.87770222e+01
 4.74241361e+00 8.11922535e+00 3.91104567e-01 1.24949548e+00
 8.59823912e+00 4.29532758e+01 4.90606078e-01 1.19784479e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320246035317275
cond(S) = 86.70370932797225
E1 = -689.1222648081243  E_coul = 184.90558525217017
init E= -504.216679555954
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681253969727862  LUMO = 87.401703810661
  mo_energy =
[-1.21650069e+02 -1.32819039e+01 -7.62215669e+00 -7.62215669e+00
 -7.62215669e+00 -1.65099600e+00 -6.81253970e-01 -6.81253970e-01
 -6.81253970e-01  8.74017038e+01  6.92692972e+02  3.74817361e+03
  1.58717761e+04  5.42625386e+04]
E1 = -706.5655145707067  E_coul = 198.92912396882585
cycle= 1 E= -507.636390601881  delta_E= -3.42  |g|= 0.314  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.438686
diis-c [-0.19244571  1.        ]
  HOMO = -0.236873133640229  LUMO = 88.7367164484742
  mo_energy =
[-1.20263046e+02 -1.22541227e+01 -6.65403304e+00 -6.65403304e+00
 -6.65403304e+00 -1.16394890e+00 -2.36873134e-01 -2.36873134e-01
 -2.36873134e-01  8.87367164e+01  6.94063453e+02  3.74943788e+03
  1.58729284e+04  5.42636108e+04]
E1 = -706.5352893809618  E_coul = 198.89848823367345
cycle= 2 E= -507.636801147288  delta_E= -0.000411  |g|= 0.00464  |ddm|= 0.0137
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00503702
diis-c [-2.53692349e-05  1.10250159e-04  9.99889750e-01]
  HOMO = -0.2370399891258  LUMO = 88.7332796203012
  mo_energy =
[-1.20271390e+02 -1.22552577e+01 -6.65579223e+00 -6.65579223e+00
 -6.65579223e+00 -1.16401059e+00 -2.37039989e-01 -2.37039989e-01
 -2.37039989e-01  8.87332796e+01  6.94053185e+02  3.74942279e+03
  1.58729107e+04  5.42635919e+04]
E1 = -706.5348736788684  E_coul = 198.89807242886005
cycle= 3 E= -507.636801250008  delta_E= -1.03e-07  |g|= 9.41e-05  |ddm|= 0.000191
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000128906
diis-c [-3.72708873e-10  3.39412187e-05 -2.57916382e-02  1.02575770e+00]
  HOMO = -0.237042165391473  LUMO = 88.7332348915383
  mo_energy =
[-1.20271502e+02 -1.22552733e+01 -6.65581868e+00 -6.65581868e+00
 -6.65581868e+00 -1.16401125e+00 -2.37042165e-01 -2.37042165e-01
 -2.37042165e-01  8.87332349e+01  6.94053068e+02  3.74942265e+03
  1.58729106e+04  5.42635917e+04]
E1 = -706.5348666998807  E_coul = 198.89806544983355
cycle= 4 E= -507.636801250047  delta_E= -3.88e-11  |g|= 3.53e-07  |ddm|= 3.33e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5348666998807  E_coul = 198.89806544983355
  HOMO = -0.237042150465493  LUMO = 88.7332352122568
  mo_energy =
[-1.20271501e+02 -1.22552732e+01 -6.65581853e+00 -6.65581853e+00
 -6.65581853e+00 -1.16401124e+00 -2.37042150e-01 -2.37042150e-01
 -2.37042150e-01  8.87332352e+01  6.94053069e+02  3.74942265e+03
  1.58729106e+04  5.42635917e+04]
E1 = -706.5348667337526  E_coul = 198.89806548370555
Extra cycle  E= -507.636801250047  delta_E= 1.14e-13  |g|= 6.02e-09  |ddm|= 1.5e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 86.70370932797225
E1 = -706.5348667337526  E_coul = 198.89806548370555
init E= -507.636801250047
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.237042150293378  LUMO = 88.733235216102
  mo_energy =
[-1.20271501e+02 -1.22552732e+01 -6.65581852e+00 -6.65581852e+00
 -6.65581852e+00 -1.16401124e+00 -2.37042150e-01 -2.37042150e-01
 -2.37042150e-01  8.87332352e+01  6.94053069e+02  3.74942265e+03
  1.58729106e+04  5.42635917e+04]
E1 = -706.5348667342572  E_coul = 198.89806548421006
cycle= 1 E= -507.636801250047  delta_E= -1.14e-13  |g|= 1.22e-10  |ddm|= 2.29e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5348667342572  E_coul = 198.89806548421006
  HOMO = -0.237042150290973  LUMO = 88.7332352161569
  mo_energy =
[-1.20271501e+02 -1.22552732e+01 -6.65581852e+00 -6.65581852e+00
 -6.65581852e+00 -1.16401124e+00 -2.37042150e-01 -2.37042150e-01
 -2.37042150e-01  8.87332352e+01  6.94053069e+02  3.74942265e+03
  1.58729106e+04  5.42635917e+04]
E1 = -706.5348667342654  E_coul = 198.89806548421828
Extra cycle  E= -507.636801250047  delta_E=    0  |g|= 1.46e-11  |ddm|= 4e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34203248e+03 1.83553230e+04 2.21629508e+03 4.70203435e+02
 1.24710158e+02 3.81428003e+01 4.74241361e+00 3.91104567e-01
 8.59823912e+00 4.90606078e-01]
grad_E = [-2.58308041e-07 -1.79657019e-06  7.99759414e-05 -1.38894857e-04
  4.55372415e-04 -3.98282529e-04 -5.49574161e-04 -3.07229683e-03
 -6.04631455e-05 -8.73231944e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:38 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.05318218        1
[INPUT] 0    0    [1    /1   ]  18355.7334157        1
[INPUT] 0    0    [1    /1   ]  2201.8046651         1
[INPUT] 0    0    [1    /1   ]  464.714580452        1
[INPUT] 0    0    [1    /1   ]  123.935878201        1
[INPUT] 0    0    [1    /1   ]  38.0380627649        1
[INPUT] 0    0    [1    /1   ]  4.74142887028        1
[INPUT] 0    0    [1    /1   ]  0.390994609424       1
[INPUT] 1    0    [1    /1   ]  8.59810537748        1
[INPUT] 1    0    [1    /1   ]  0.490461499952       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.0531821769955, 1.0]], [0, [18355.733415694147, 1.0]], [0, [2201.8046650989204, 1.0]], [0, [464.7145804519797, 1.0]], [0, [123.93587820073256, 1.0]], [0, [38.038062764916866, 1.0]], [0, [4.741428870282888, 1.0]], [0, [0.3909946094240144, 1.0]], [1, [8.598105377481696, 1.0]], [1, [0.49046149995172245, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.05318218]
bas 1, expnt(s) = [18355.73341569]
bas 2, expnt(s) = [2201.8046651]
bas 3, expnt(s) = [464.71458045]
bas 4, expnt(s) = [123.9358782]
bas 5, expnt(s) = [38.03806276]
bas 6, expnt(s) = [4.74142887]
bas 7, expnt(s) = [0.39099461]
bas 8, expnt(s) = [8.59810538]
bas 9, expnt(s) = [0.4904615]
CPU time:       206.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34205318e+03 2.00390980e+03 1.83557334e+04 3.98422476e+03
 2.20180467e+03 8.12080561e+02 4.64714580e+02 2.52874332e+02
 1.23935878e+02 9.38453613e+01 3.80380628e+01 3.86971354e+01
 4.74142887e+00 8.11796088e+00 3.90994609e-01 1.24923200e+00
 8.59810538e+00 4.29524407e+01 4.90461500e-01 1.19740356e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320467364337397
cond(S) = 85.96073717970869
E1 = -689.1127490086491  E_coul = 184.89785828185174
init E= -504.214890726797
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681474773890085  LUMO = 86.8432919146928
  mo_energy =
[-1.21651108e+02 -1.32825417e+01 -7.62269854e+00 -7.62269854e+00
 -7.62269854e+00 -1.65110594e+00 -6.81474774e-01 -6.81474774e-01
 -6.81474774e-01  8.68432919e+01  6.85809252e+02  3.71708336e+03
  1.58110315e+04  5.41905837e+04]
E1 = -706.554082581126  E_coul = 198.9171260979995
cycle= 1 E= -507.636956483126  delta_E= -3.42  |g|= 0.315  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.439333
diis-c [-0.19301391  1.        ]
  HOMO = -0.237283066550938  LUMO = 88.1772734751644
  mo_energy =
[-1.20264434e+02 -1.22550331e+01 -6.65484877e+00 -6.65484877e+00
 -6.65484877e+00 -1.16425660e+00 -2.37283067e-01 -2.37283067e-01
 -2.37283067e-01  8.81772735e+01  6.87179617e+02  3.71834769e+03
  1.58121831e+04  5.41916551e+04]
E1 = -706.5235745028223  E_coul = 198.88620337513584
cycle= 2 E= -507.637371127686  delta_E= -0.000415  |g|= 0.00466  |ddm|= 0.0139
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00505946
diis-c [-2.55945945e-05  1.35969027e-04  9.99864031e-01]
  HOMO = -0.237451725922156  LUMO = 88.1738182870785
  mo_energy =
[-1.20272846e+02 -1.22561804e+01 -6.65662706e+00 -6.65662706e+00
 -6.65662706e+00 -1.16431897e+00 -2.37451726e-01 -2.37451726e-01
 -2.37451726e-01  8.81738183e+01  6.87169306e+02  3.71833253e+03
  1.58121653e+04  5.41916361e+04]
E1 = -706.5231531605983  E_coul = 198.88578192853655
cycle= 3 E= -507.637371232062  delta_E= -1.04e-07  |g|= 9.5e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000129996
diis-c [-3.79366257e-10  3.38860751e-05 -2.58932021e-02  1.02585932e+00]
  HOMO = -0.237453937766624  LUMO = 88.173772969294
  mo_energy =
[-1.20272960e+02 -1.22561962e+01 -6.65665394e+00 -6.65665394e+00
 -6.65665394e+00 -1.16431963e+00 -2.37453938e-01 -2.37453938e-01
 -2.37453938e-01  8.81737730e+01  6.87169187e+02  3.71833238e+03
  1.58121652e+04  5.41916359e+04]
E1 = -706.5231460489548  E_coul = 198.8857748168535
cycle= 4 E= -507.637371232101  delta_E= -3.94e-11  |g|= 3.59e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5231460489548  E_coul = 198.8857748168535
  HOMO = -0.237453922534543  LUMO = 88.173773294053
  mo_energy =
[-1.20272959e+02 -1.22561961e+01 -6.65665378e+00 -6.65665378e+00
 -6.65665378e+00 -1.16431962e+00 -2.37453923e-01 -2.37453923e-01
 -2.37453923e-01  8.81737733e+01  6.87169188e+02  3.71833238e+03
  1.58121652e+04  5.41916359e+04]
E1 = -706.5231460835631  E_coul = 198.885774851462
Extra cycle  E= -507.637371232101  delta_E= 1.14e-13  |g|= 6.12e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34205318e+03 1.83557334e+04 2.20180467e+03 4.64714580e+02
 1.23935878e+02 3.80380628e+01 4.74142887e+00 3.90994609e-01
 8.59810538e+00 4.90461500e-01]
E = -507.63737123210115
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:38 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.05318218        1
[INPUT] 0    0    [1    /1   ]  18355.7334157        1
[INPUT] 0    0    [1    /1   ]  2201.8046651         1
[INPUT] 0    0    [1    /1   ]  464.714580452        1
[INPUT] 0    0    [1    /1   ]  123.935878201        1
[INPUT] 0    0    [1    /1   ]  38.0380627649        1
[INPUT] 0    0    [1    /1   ]  4.74142887028        1
[INPUT] 0    0    [1    /1   ]  0.390994609424       1
[INPUT] 1    0    [1    /1   ]  8.59810537748        1
[INPUT] 1    0    [1    /1   ]  0.490461499952       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.0531821769955, 1.0]], [0, [18355.733415694147, 1.0]], [0, [2201.8046650989204, 1.0]], [0, [464.7145804519797, 1.0]], [0, [123.93587820073256, 1.0]], [0, [38.038062764916866, 1.0]], [0, [4.741428870282888, 1.0]], [0, [0.3909946094240144, 1.0]], [1, [8.598105377481696, 1.0]], [1, [0.49046149995172245, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.05318218]
bas 1, expnt(s) = [18355.73341569]
bas 2, expnt(s) = [2201.8046651]
bas 3, expnt(s) = [464.71458045]
bas 4, expnt(s) = [123.9358782]
bas 5, expnt(s) = [38.03806276]
bas 6, expnt(s) = [4.74142887]
bas 7, expnt(s) = [0.39099461]
bas 8, expnt(s) = [8.59810538]
bas 9, expnt(s) = [0.4904615]
CPU time:       207.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34205318e+03 2.00390980e+03 1.83557334e+04 3.98422476e+03
 2.20180467e+03 8.12080561e+02 4.64714580e+02 2.52874332e+02
 1.23935878e+02 9.38453613e+01 3.80380628e+01 3.86971354e+01
 4.74142887e+00 8.11796088e+00 3.90994609e-01 1.24923200e+00
 8.59810538e+00 4.29524407e+01 4.90461500e-01 1.19740356e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320467364337397
cond(S) = 85.96073717970869
E1 = -689.1127490086491  E_coul = 184.89785828185174
init E= -504.214890726797
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681474773890085  LUMO = 86.8432919146928
  mo_energy =
[-1.21651108e+02 -1.32825417e+01 -7.62269854e+00 -7.62269854e+00
 -7.62269854e+00 -1.65110594e+00 -6.81474774e-01 -6.81474774e-01
 -6.81474774e-01  8.68432919e+01  6.85809252e+02  3.71708336e+03
  1.58110315e+04  5.41905837e+04]
E1 = -706.554082581126  E_coul = 198.9171260979995
cycle= 1 E= -507.636956483126  delta_E= -3.42  |g|= 0.315  |ddm|= 0.302
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.439333
diis-c [-0.19301391  1.        ]
  HOMO = -0.237283066550938  LUMO = 88.1772734751644
  mo_energy =
[-1.20264434e+02 -1.22550331e+01 -6.65484877e+00 -6.65484877e+00
 -6.65484877e+00 -1.16425660e+00 -2.37283067e-01 -2.37283067e-01
 -2.37283067e-01  8.81772735e+01  6.87179617e+02  3.71834769e+03
  1.58121831e+04  5.41916551e+04]
E1 = -706.5235745028223  E_coul = 198.88620337513584
cycle= 2 E= -507.637371127686  delta_E= -0.000415  |g|= 0.00466  |ddm|= 0.0139
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00505946
diis-c [-2.55945945e-05  1.35969027e-04  9.99864031e-01]
  HOMO = -0.237451725922156  LUMO = 88.1738182870785
  mo_energy =
[-1.20272846e+02 -1.22561804e+01 -6.65662706e+00 -6.65662706e+00
 -6.65662706e+00 -1.16431897e+00 -2.37451726e-01 -2.37451726e-01
 -2.37451726e-01  8.81738183e+01  6.87169306e+02  3.71833253e+03
  1.58121653e+04  5.41916361e+04]
E1 = -706.5231531605983  E_coul = 198.88578192853655
cycle= 3 E= -507.637371232062  delta_E= -1.04e-07  |g|= 9.5e-05  |ddm|= 0.000193
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000129996
diis-c [-3.79366257e-10  3.38860751e-05 -2.58932021e-02  1.02585932e+00]
  HOMO = -0.237453937766624  LUMO = 88.173772969294
  mo_energy =
[-1.20272960e+02 -1.22561962e+01 -6.65665394e+00 -6.65665394e+00
 -6.65665394e+00 -1.16431963e+00 -2.37453938e-01 -2.37453938e-01
 -2.37453938e-01  8.81737730e+01  6.87169187e+02  3.71833238e+03
  1.58121652e+04  5.41916359e+04]
E1 = -706.5231460489548  E_coul = 198.8857748168535
cycle= 4 E= -507.637371232101  delta_E= -3.94e-11  |g|= 3.59e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5231460489548  E_coul = 198.8857748168535
  HOMO = -0.237453922534543  LUMO = 88.173773294053
  mo_energy =
[-1.20272959e+02 -1.22561961e+01 -6.65665378e+00 -6.65665378e+00
 -6.65665378e+00 -1.16431962e+00 -2.37453923e-01 -2.37453923e-01
 -2.37453923e-01  8.81737733e+01  6.87169188e+02  3.71833238e+03
  1.58121652e+04  5.41916359e+04]
E1 = -706.5231460835631  E_coul = 198.885774851462
Extra cycle  E= -507.637371232101  delta_E= 1.14e-13  |g|= 6.12e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 85.96073717970869
E1 = -706.5231460835631  E_coul = 198.885774851462
init E= -507.637371232101
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.237453922358297  LUMO = 88.1737732979651
  mo_energy =
[-1.20272959e+02 -1.22561961e+01 -6.65665378e+00 -6.65665378e+00
 -6.65665378e+00 -1.16431962e+00 -2.37453922e-01 -2.37453922e-01
 -2.37453922e-01  8.81737733e+01  6.87169188e+02  3.71833238e+03
  1.58121652e+04  5.41916359e+04]
E1 = -706.5231460840813  E_coul = 198.88577485197965
cycle= 1 E= -507.637371232102  delta_E= -5.12e-13  |g|= 1.24e-10  |ddm|= 2.35e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5231460840813  E_coul = 198.88577485197965
  HOMO = -0.237453922355827  LUMO = 88.1737732980231
  mo_energy =
[-1.20272959e+02 -1.22561961e+01 -6.65665378e+00 -6.65665378e+00
 -6.65665378e+00 -1.16431962e+00 -2.37453922e-01 -2.37453922e-01
 -2.37453922e-01  8.81737733e+01  6.87169188e+02  3.71833238e+03
  1.58121652e+04  5.41916359e+04]
E1 = -706.5231460840895  E_coul = 198.885774851988
Extra cycle  E= -507.637371232101  delta_E= 1.71e-13  |g|= 9.64e-12  |ddm|= 4.08e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34205318e+03 1.83557334e+04 2.20180467e+03 4.64714580e+02
 1.23935878e+02 3.80380628e+01 4.74142887e+00 3.90994609e-01
 8.59810538e+00 4.90461500e-01]
grad_E = [-3.37268238e-07 -1.75530674e-06  8.88856923e-05 -2.49091388e-04
  7.51775819e-04 -6.63198505e-04 -9.06378976e-04 -5.08931533e-03
 -9.81696609e-05 -1.44606211e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:41 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.11623004        1
[INPUT] 0    0    [1    /1   ]  18356.8440775        1
[INPUT] 0    0    [1    /1   ]  2161.85091767        1
[INPUT] 0    0    [1    /1   ]  454.008003741        1
[INPUT] 0    0    [1    /1   ]  122.41182358         1
[INPUT] 0    0    [1    /1   ]  37.8269379031        1
[INPUT] 0    0    [1    /1   ]  4.73955853105        1
[INPUT] 0    0    [1    /1   ]  0.390804166374       1
[INPUT] 1    0    [1    /1   ]  8.59788118862        1
[INPUT] 1    0    [1    /1   ]  0.490214769933       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.1162300446085, 1.0]], [0, [18356.844077484035, 1.0]], [0, [2161.8509176718753, 1.0]], [0, [454.0080037409992, 1.0]], [0, [122.41182358032988, 1.0]], [0, [37.82693790312877, 1.0]], [0, [4.739558531046544, 1.0]], [0, [0.3908041663744131, 1.0]], [1, [8.597881188622644, 1.0]], [1, [0.4902147699329015, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.11623004]
bas 1, expnt(s) = [18356.84407748]
bas 2, expnt(s) = [2161.85091767]
bas 3, expnt(s) = [454.00800374]
bas 4, expnt(s) = [122.41182358]
bas 5, expnt(s) = [37.8269379]
bas 6, expnt(s) = [4.73955853]
bas 7, expnt(s) = [0.39080417]
bas 8, expnt(s) = [8.59788119]
bas 9, expnt(s) = [0.49021477]
CPU time:       211.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34211623e+03 2.00392270e+03 1.83568441e+04 3.98440557e+03
 2.16185092e+03 8.01003346e+02 4.54008004e+02 2.48492140e+02
 1.22411824e+02 9.29785031e+01 3.78269379e+01 3.85359362e+01
 4.73955853e+00 8.11555906e+00 3.90804166e-01 1.24877562e+00
 8.59788119e+00 4.29510408e+01 4.90214770e-01 1.19665065e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320849343372377
cond(S) = 84.34625718821273
E1 = -689.0974743761425  E_coul = 184.8845715079179
init E= -504.212902868225
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681851164380405  LUMO = 85.7302222477258
  mo_energy =
[-1.21653125e+02 -1.32836779e+01 -7.62363499e+00 -7.62363499e+00
 -7.62363499e+00 -1.65129077e+00 -6.81851164e-01 -6.81851164e-01
 -6.81851164e-01  8.57302222e+01  6.72258396e+02  3.64652861e+03
  1.56610970e+04  5.40097174e+04]
E1 = -706.5350645569488  E_coul = 198.89659435483017
cycle= 1 E= -507.638470202119  delta_E= -3.43  |g|= 0.316  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440277
diis-c [-0.19384373  1.        ]
  HOMO = -0.237985727588844  LUMO = 87.0622484094921
  mo_energy =
[-1.20267004e+02 -1.22566387e+01 -6.65625341e+00 -6.65625341e+00
 -6.65625341e+00 -1.16478614e+00 -2.37985728e-01 -2.37985728e-01
 -2.37985728e-01  8.70622484e+01  6.73628684e+02  3.64779354e+03
  1.56622477e+04  5.40107875e+04]
E1 = -706.5039820570167  E_coul = 198.86508887579814
cycle= 2 E= -507.638893181219  delta_E= -0.000423  |g|= 0.00471  |ddm|= 0.0142
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510659
diis-c [-2.60705720e-05  1.85753535e-04  9.99814246e-01]
  HOMO = -0.238158094693862  LUMO = 87.0587564941739
  mo_energy =
[-1.20275552e+02 -1.22578110e+01 -6.65807060e+00 -6.65807060e+00
 -6.65807060e+00 -1.16484988e+00 -2.38158095e-01 -2.38158095e-01
 -2.38158095e-01  8.70587565e+01  6.73618286e+02  3.64777822e+03
  1.56622297e+04  5.40107682e+04]
E1 = -706.5035491821761  E_coul = 198.864655893178
cycle= 3 E= -507.638893288998  delta_E= -1.08e-07  |g|= 9.67e-05  |ddm|= 0.000199
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132251
diis-c [-3.93392290e-10  3.38067195e-05 -2.60977275e-02  1.02606392e+00]
  HOMO = -0.238160379728526  LUMO = 87.058709989054
  mo_energy =
[-1.20275670e+02 -1.22578273e+01 -6.65809835e+00 -6.65809835e+00
 -6.65809835e+00 -1.16485057e+00 -2.38160380e-01 -2.38160380e-01
 -2.38160380e-01  8.70587100e+01  6.73618164e+02  3.64777807e+03
  1.56622295e+04  5.40107680e+04]
E1 = -706.5035417980508  E_coul = 198.8646485090115
cycle= 4 E= -507.638893289039  delta_E= -4.12e-11  |g|= 3.7e-07  |ddm|= 3.52e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5035417980508  E_coul = 198.8646485090115
  HOMO = -0.238160363863232  LUMO = 87.0587103219727
  mo_energy =
[-1.20275669e+02 -1.22578272e+01 -6.65809819e+00 -6.65809819e+00
 -6.65809819e+00 -1.16485056e+00 -2.38160364e-01 -2.38160364e-01
 -2.38160364e-01  8.70587103e+01  6.73618165e+02  3.64777807e+03
  1.56622295e+04  5.40107680e+04]
E1 = -706.503541834181  E_coul = 198.86464854514145
Extra cycle  E= -507.63889328904  delta_E= -1.71e-13  |g|= 6.33e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34211623e+03 1.83568441e+04 2.16185092e+03 4.54008004e+02
 1.22411824e+02 3.78269379e+01 4.73955853e+00 3.90804166e-01
 8.59788119e+00 4.90214770e-01]
E = -507.6388932890395
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:41 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.11623004        1
[INPUT] 0    0    [1    /1   ]  18356.8440775        1
[INPUT] 0    0    [1    /1   ]  2161.85091767        1
[INPUT] 0    0    [1    /1   ]  454.008003741        1
[INPUT] 0    0    [1    /1   ]  122.41182358         1
[INPUT] 0    0    [1    /1   ]  37.8269379031        1
[INPUT] 0    0    [1    /1   ]  4.73955853105        1
[INPUT] 0    0    [1    /1   ]  0.390804166374       1
[INPUT] 1    0    [1    /1   ]  8.59788118862        1
[INPUT] 1    0    [1    /1   ]  0.490214769933       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.1162300446085, 1.0]], [0, [18356.844077484035, 1.0]], [0, [2161.8509176718753, 1.0]], [0, [454.0080037409992, 1.0]], [0, [122.41182358032988, 1.0]], [0, [37.82693790312877, 1.0]], [0, [4.739558531046544, 1.0]], [0, [0.3908041663744131, 1.0]], [1, [8.597881188622644, 1.0]], [1, [0.4902147699329015, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.11623004]
bas 1, expnt(s) = [18356.84407748]
bas 2, expnt(s) = [2161.85091767]
bas 3, expnt(s) = [454.00800374]
bas 4, expnt(s) = [122.41182358]
bas 5, expnt(s) = [37.8269379]
bas 6, expnt(s) = [4.73955853]
bas 7, expnt(s) = [0.39080417]
bas 8, expnt(s) = [8.59788119]
bas 9, expnt(s) = [0.49021477]
CPU time:       211.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34211623e+03 2.00392270e+03 1.83568441e+04 3.98440557e+03
 2.16185092e+03 8.01003346e+02 4.54008004e+02 2.48492140e+02
 1.22411824e+02 9.29785031e+01 3.78269379e+01 3.85359362e+01
 4.73955853e+00 8.11555906e+00 3.90804166e-01 1.24877562e+00
 8.59788119e+00 4.29510408e+01 4.90214770e-01 1.19665065e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320849343372377
cond(S) = 84.34625718821273
E1 = -689.0974743761425  E_coul = 184.8845715079179
init E= -504.212902868225
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.681851164380405  LUMO = 85.7302222477258
  mo_energy =
[-1.21653125e+02 -1.32836779e+01 -7.62363499e+00 -7.62363499e+00
 -7.62363499e+00 -1.65129077e+00 -6.81851164e-01 -6.81851164e-01
 -6.81851164e-01  8.57302222e+01  6.72258396e+02  3.64652861e+03
  1.56610970e+04  5.40097174e+04]
E1 = -706.5350645569488  E_coul = 198.89659435483017
cycle= 1 E= -507.638470202119  delta_E= -3.43  |g|= 0.316  |ddm|= 0.303
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440277
diis-c [-0.19384373  1.        ]
  HOMO = -0.237985727588844  LUMO = 87.0622484094921
  mo_energy =
[-1.20267004e+02 -1.22566387e+01 -6.65625341e+00 -6.65625341e+00
 -6.65625341e+00 -1.16478614e+00 -2.37985728e-01 -2.37985728e-01
 -2.37985728e-01  8.70622484e+01  6.73628684e+02  3.64779354e+03
  1.56622477e+04  5.40107875e+04]
E1 = -706.5039820570167  E_coul = 198.86508887579814
cycle= 2 E= -507.638893181219  delta_E= -0.000423  |g|= 0.00471  |ddm|= 0.0142
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00510659
diis-c [-2.60705720e-05  1.85753535e-04  9.99814246e-01]
  HOMO = -0.238158094693862  LUMO = 87.0587564941739
  mo_energy =
[-1.20275552e+02 -1.22578110e+01 -6.65807060e+00 -6.65807060e+00
 -6.65807060e+00 -1.16484988e+00 -2.38158095e-01 -2.38158095e-01
 -2.38158095e-01  8.70587565e+01  6.73618286e+02  3.64777822e+03
  1.56622297e+04  5.40107682e+04]
E1 = -706.5035491821761  E_coul = 198.864655893178
cycle= 3 E= -507.638893288998  delta_E= -1.08e-07  |g|= 9.67e-05  |ddm|= 0.000199
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000132251
diis-c [-3.93392290e-10  3.38067195e-05 -2.60977275e-02  1.02606392e+00]
  HOMO = -0.238160379728526  LUMO = 87.058709989054
  mo_energy =
[-1.20275670e+02 -1.22578273e+01 -6.65809835e+00 -6.65809835e+00
 -6.65809835e+00 -1.16485057e+00 -2.38160380e-01 -2.38160380e-01
 -2.38160380e-01  8.70587100e+01  6.73618164e+02  3.64777807e+03
  1.56622295e+04  5.40107680e+04]
E1 = -706.5035417980508  E_coul = 198.8646485090115
cycle= 4 E= -507.638893289039  delta_E= -4.12e-11  |g|= 3.7e-07  |ddm|= 3.52e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5035417980508  E_coul = 198.8646485090115
  HOMO = -0.238160363863232  LUMO = 87.0587103219727
  mo_energy =
[-1.20275669e+02 -1.22578272e+01 -6.65809819e+00 -6.65809819e+00
 -6.65809819e+00 -1.16485056e+00 -2.38160364e-01 -2.38160364e-01
 -2.38160364e-01  8.70587103e+01  6.73618165e+02  3.64777807e+03
  1.56622295e+04  5.40107680e+04]
E1 = -706.503541834181  E_coul = 198.86464854514145
Extra cycle  E= -507.63889328904  delta_E= -1.71e-13  |g|= 6.33e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 84.34625718821273
E1 = -706.503541834181  E_coul = 198.86464854514145
init E= -507.63889328904
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.238160363678368  LUMO = 87.0587103260231
  mo_energy =
[-1.20275669e+02 -1.22578272e+01 -6.65809819e+00 -6.65809819e+00
 -6.65809819e+00 -1.16485056e+00 -2.38160364e-01 -2.38160364e-01
 -2.38160364e-01  8.70587103e+01  6.73618165e+02  3.64777807e+03
  1.56622295e+04  5.40107680e+04]
E1 = -706.5035418347255  E_coul = 198.86464854568592
cycle= 1 E= -507.63889328904  delta_E= -1.14e-13  |g|= 1.27e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5035418347255  E_coul = 198.86464854568592
  HOMO = -0.238160363675768  LUMO = 87.0587103260819
  mo_energy =
[-1.20275669e+02 -1.22578272e+01 -6.65809819e+00 -6.65809819e+00
 -6.65809819e+00 -1.16485056e+00 -2.38160364e-01 -2.38160364e-01
 -2.38160364e-01  8.70587103e+01  6.73618165e+02  3.64777807e+03
  1.56622295e+04  5.40107680e+04]
E1 = -706.5035418347351  E_coul = 198.86464854569513
Extra cycle  E= -507.63889328904  delta_E= -3.41e-13  |g|= 6.46e-12  |ddm|= 4.35e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34211623e+03 1.83568441e+04 2.16185092e+03 4.54008004e+02
 1.22411824e+02 3.78269379e+01 4.73955853e+00 3.90804166e-01
 8.59788119e+00 4.90214770e-01]
grad_E = [-4.33857242e-07 -1.72661979e-06  1.04400750e-04 -4.40040069e-04
  1.26580696e-03 -1.12525657e-03 -1.49820228e-03 -8.54879430e-03
 -1.61541901e-04 -2.42777080e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.2997718         1
[INPUT] 0    0    [1    /1   ]  18359.8765646        1
[INPUT] 0    0    [1    /1   ]  2051.56607466        1
[INPUT] 0    0    [1    /1   ]  431.516582766        1
[INPUT] 0    0    [1    /1   ]  119.182440859        1
[INPUT] 0    0    [1    /1   ]  37.3695377455        1
[INPUT] 0    0    [1    /1   ]  4.73566720329        1
[INPUT] 0    0    [1    /1   ]  0.390454665739       1
[INPUT] 1    0    [1    /1   ]  8.59748177786        1
[INPUT] 1    0    [1    /1   ]  0.489769016957       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.2997717979615, 1.0]], [0, [18359.876564638686, 1.0]], [0, [2051.5660746624744, 1.0]], [0, [431.5165827662528, 1.0]], [0, [119.18244085923726, 1.0]], [0, [37.36953774549159, 1.0]], [0, [4.7356672032907685, 1.0]], [0, [0.3904546657389898, 1.0]], [1, [8.59748177785747, 1.0]], [1, [0.48976901695706315, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.2997718]
bas 1, expnt(s) = [18359.87656464]
bas 2, expnt(s) = [2051.56607466]
bas 3, expnt(s) = [431.51658277]
bas 4, expnt(s) = [119.18244086]
bas 5, expnt(s) = [37.36953775]
bas 6, expnt(s) = [4.7356672]
bas 7, expnt(s) = [0.39045467]
bas 8, expnt(s) = [8.59748178]
bas 9, expnt(s) = [0.48976902]
CPU time:       215.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34229977e+03 2.00396028e+03 1.83598766e+04 3.98489922e+03
 2.05156607e+03 7.70156803e+02 4.31516583e+02 2.39201083e+02
 1.19182441e+02 9.11326986e+01 3.73695377e+01 3.81859253e+01
 4.73566720e+00 8.11056120e+00 3.90454666e-01 1.24793794e+00
 8.59748178e+00 4.29485467e+01 4.89769017e-01 1.19529066e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321548688634394
cond(S) = 81.060019315182
E1 = -689.0733848112743  E_coul = 184.86038958291488
init E= -504.212995228359
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.682529185904283  LUMO = 83.3495364205609
  mo_energy =
[-1.21657371e+02 -1.32858849e+01 -7.62534813e+00 -7.62534813e+00
 -7.62534813e+00 -1.65162156e+00 -6.82529186e-01 -6.82529186e-01
 -6.82529186e-01  8.33495364e+01  6.43616684e+02  3.47498074e+03
  1.52726007e+04  5.35381097e+04]
E1 = -706.5022974339485  E_coul = 198.8596506501207
cycle= 1 E= -507.642646783828  delta_E= -3.43  |g|= 0.319  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441423
diis-c [-0.19485403  1.        ]
  HOMO = -0.239260316963836  LUMO = 84.677543453903
  mo_energy =
[-1.20272083e+02 -1.22596921e+01 -6.65880147e+00 -6.65880147e+00
 -6.65880147e+00 -1.16575548e+00 -2.39260317e-01 -2.39260317e-01
 -2.39260317e-01  8.46775435e+01  6.44987166e+02  3.47624817e+03
  1.52737503e+04  5.35391775e+04]
E1 = -706.4699348822927  E_coul = 198.82684649267944
cycle= 2 E= -507.643088389613  delta_E= -0.000442  |g|= 0.00482  |ddm|= 0.0149
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00521353
diis-c [-2.71646775e-05  2.88425591e-04  9.99711574e-01]
  HOMO = -0.23944108418531  LUMO = 84.6739718474027
  mo_energy =
[-1.20280932e+02 -1.22609206e+01 -6.66070586e+00 -6.66070586e+00
 -6.66070586e+00 -1.16582236e+00 -2.39441084e-01 -2.39441084e-01
 -2.39441084e-01  8.46739718e+01  6.44976584e+02  3.47623252e+03
  1.52737318e+04  5.35391577e+04]
E1 = -706.4694759536849  E_coul = 198.82638744852756
cycle= 3 E= -507.643088505157  delta_E= -1.16e-07  |g|= 0.000101  |ddm|= 0.000212
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000137329
diis-c [-4.26306999e-10  3.37317481e-05 -2.65430616e-02  1.02650933e+00]
  HOMO = -0.23944353608324  LUMO = 84.6739227240582
  mo_energy =
[-1.20281057e+02 -1.22609381e+01 -6.66073559e+00 -6.66073559e+00
 -6.66073559e+00 -1.16582309e+00 -2.39443536e-01 -2.39443536e-01
 -2.39443536e-01  8.46739227e+01  6.44976454e+02  3.47623236e+03
  1.52737316e+04  5.35391576e+04]
E1 = -706.469467947422  E_coul = 198.8263794422186
cycle= 4 E= -507.643088505203  delta_E= -4.61e-11  |g|= 3.94e-07  |ddm|= 3.82e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.469467947422  E_coul = 198.8263794422186
  HOMO = -0.239443518759035  LUMO = 84.673923074993
  mo_energy =
[-1.20281057e+02 -1.22609380e+01 -6.66073542e+00 -6.66073542e+00
 -6.66073542e+00 -1.16582309e+00 -2.39443519e-01 -2.39443519e-01
 -2.39443519e-01  8.46739231e+01  6.44976456e+02  3.47623236e+03
  1.52737316e+04  5.35391576e+04]
E1 = -706.4694679870544  E_coul = 198.82637948185106
Extra cycle  E= -507.643088505203  delta_E= 1.14e-13  |g|= 6.82e-09  |ddm|= 1.78e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34229977e+03 1.83598766e+04 2.05156607e+03 4.31516583e+02
 1.19182441e+02 3.73695377e+01 4.73566720e+00 3.90454666e-01
 8.59748178e+00 4.89769017e-01]
E = -507.6430885052033
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.2997718         1
[INPUT] 0    0    [1    /1   ]  18359.8765646        1
[INPUT] 0    0    [1    /1   ]  2051.56607466        1
[INPUT] 0    0    [1    /1   ]  431.516582766        1
[INPUT] 0    0    [1    /1   ]  119.182440859        1
[INPUT] 0    0    [1    /1   ]  37.3695377455        1
[INPUT] 0    0    [1    /1   ]  4.73566720329        1
[INPUT] 0    0    [1    /1   ]  0.390454665739       1
[INPUT] 1    0    [1    /1   ]  8.59748177786        1
[INPUT] 1    0    [1    /1   ]  0.489769016957       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.2997717979615, 1.0]], [0, [18359.876564638686, 1.0]], [0, [2051.5660746624744, 1.0]], [0, [431.5165827662528, 1.0]], [0, [119.18244085923726, 1.0]], [0, [37.36953774549159, 1.0]], [0, [4.7356672032907685, 1.0]], [0, [0.3904546657389898, 1.0]], [1, [8.59748177785747, 1.0]], [1, [0.48976901695706315, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.2997718]
bas 1, expnt(s) = [18359.87656464]
bas 2, expnt(s) = [2051.56607466]
bas 3, expnt(s) = [431.51658277]
bas 4, expnt(s) = [119.18244086]
bas 5, expnt(s) = [37.36953775]
bas 6, expnt(s) = [4.7356672]
bas 7, expnt(s) = [0.39045467]
bas 8, expnt(s) = [8.59748178]
bas 9, expnt(s) = [0.48976902]
CPU time:       216.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34229977e+03 2.00396028e+03 1.83598766e+04 3.98489922e+03
 2.05156607e+03 7.70156803e+02 4.31516583e+02 2.39201083e+02
 1.19182441e+02 9.11326986e+01 3.73695377e+01 3.81859253e+01
 4.73566720e+00 8.11056120e+00 3.90454666e-01 1.24793794e+00
 8.59748178e+00 4.29485467e+01 4.89769017e-01 1.19529066e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321548688634394
cond(S) = 81.060019315182
E1 = -689.0733848112743  E_coul = 184.86038958291488
init E= -504.212995228359
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.682529185904283  LUMO = 83.3495364205609
  mo_energy =
[-1.21657371e+02 -1.32858849e+01 -7.62534813e+00 -7.62534813e+00
 -7.62534813e+00 -1.65162156e+00 -6.82529186e-01 -6.82529186e-01
 -6.82529186e-01  8.33495364e+01  6.43616684e+02  3.47498074e+03
  1.52726007e+04  5.35381097e+04]
E1 = -706.5022974339485  E_coul = 198.8596506501207
cycle= 1 E= -507.642646783828  delta_E= -3.43  |g|= 0.319  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441423
diis-c [-0.19485403  1.        ]
  HOMO = -0.239260316963836  LUMO = 84.677543453903
  mo_energy =
[-1.20272083e+02 -1.22596921e+01 -6.65880147e+00 -6.65880147e+00
 -6.65880147e+00 -1.16575548e+00 -2.39260317e-01 -2.39260317e-01
 -2.39260317e-01  8.46775435e+01  6.44987166e+02  3.47624817e+03
  1.52737503e+04  5.35391775e+04]
E1 = -706.4699348822927  E_coul = 198.82684649267944
cycle= 2 E= -507.643088389613  delta_E= -0.000442  |g|= 0.00482  |ddm|= 0.0149
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00521353
diis-c [-2.71646775e-05  2.88425591e-04  9.99711574e-01]
  HOMO = -0.23944108418531  LUMO = 84.6739718474027
  mo_energy =
[-1.20280932e+02 -1.22609206e+01 -6.66070586e+00 -6.66070586e+00
 -6.66070586e+00 -1.16582236e+00 -2.39441084e-01 -2.39441084e-01
 -2.39441084e-01  8.46739718e+01  6.44976584e+02  3.47623252e+03
  1.52737318e+04  5.35391577e+04]
E1 = -706.4694759536849  E_coul = 198.82638744852756
cycle= 3 E= -507.643088505157  delta_E= -1.16e-07  |g|= 0.000101  |ddm|= 0.000212
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000137329
diis-c [-4.26306999e-10  3.37317481e-05 -2.65430616e-02  1.02650933e+00]
  HOMO = -0.23944353608324  LUMO = 84.6739227240582
  mo_energy =
[-1.20281057e+02 -1.22609381e+01 -6.66073559e+00 -6.66073559e+00
 -6.66073559e+00 -1.16582309e+00 -2.39443536e-01 -2.39443536e-01
 -2.39443536e-01  8.46739227e+01  6.44976454e+02  3.47623236e+03
  1.52737316e+04  5.35391576e+04]
E1 = -706.469467947422  E_coul = 198.8263794422186
cycle= 4 E= -507.643088505203  delta_E= -4.61e-11  |g|= 3.94e-07  |ddm|= 3.82e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.469467947422  E_coul = 198.8263794422186
  HOMO = -0.239443518759035  LUMO = 84.673923074993
  mo_energy =
[-1.20281057e+02 -1.22609380e+01 -6.66073542e+00 -6.66073542e+00
 -6.66073542e+00 -1.16582309e+00 -2.39443519e-01 -2.39443519e-01
 -2.39443519e-01  8.46739231e+01  6.44976456e+02  3.47623236e+03
  1.52737316e+04  5.35391576e+04]
E1 = -706.4694679870544  E_coul = 198.82637948185106
Extra cycle  E= -507.643088505203  delta_E= 1.14e-13  |g|= 6.82e-09  |ddm|= 1.78e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 81.060019315182
E1 = -706.4694679870544  E_coul = 198.82637948185106
init E= -507.643088505203
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.239443518554061  LUMO = 84.6739230793609
  mo_energy =
[-1.20281057e+02 -1.22609380e+01 -6.66073542e+00 -6.66073542e+00
 -6.66073542e+00 -1.16582309e+00 -2.39443519e-01 -2.39443519e-01
 -2.39443519e-01  8.46739231e+01  6.44976456e+02  3.47623236e+03
  1.52737316e+04  5.35391576e+04]
E1 = -706.4694679876612  E_coul = 198.82637948245792
cycle= 1 E= -507.643088505203  delta_E=    0  |g|= 1.36e-10  |ddm|= 2.77e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.4694679876612  E_coul = 198.82637948245792
  HOMO = -0.239443518551147  LUMO = 84.673923079424
  mo_energy =
[-1.20281057e+02 -1.22609380e+01 -6.66073542e+00 -6.66073542e+00
 -6.66073542e+00 -1.16582309e+00 -2.39443519e-01 -2.39443519e-01
 -2.39443519e-01  8.46739231e+01  6.44976456e+02  3.47623236e+03
  1.52737316e+04  5.35391576e+04]
E1 = -706.469467987672  E_coul = 198.82637948246867
Extra cycle  E= -507.643088505203  delta_E= -5.68e-14  |g|= 9.17e-12  |ddm|= 4.98e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34229977e+03 1.83598766e+04 2.05156607e+03 4.31516583e+02
 1.19182441e+02 3.73695377e+01 4.73566720e+00 3.90454666e-01
 8.59748178e+00 4.89769017e-01]
grad_E = [-4.71648106e-07 -1.80608469e-06  1.33661089e-04 -7.91532349e-04
  2.21519987e-03 -1.98902612e-03 -2.45390818e-03 -1.48562934e-02
 -2.67639668e-04 -4.21071659e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.85743841        1
[INPUT] 0    0    [1    /1   ]  18368.7694189        1
[INPUT] 0    0    [1    /1   ]  1726.11218834        1
[INPUT] 0    0    [1    /1   ]  377.046217416        1
[INPUT] 0    0    [1    /1   ]  111.305009574        1
[INPUT] 0    0    [1    /1   ]  36.2352268473        1
[INPUT] 0    0    [1    /1   ]  4.72593420375        1
[INPUT] 0    0    [1    /1   ]  0.38971539135        1
[INPUT] 1    0    [1    /1   ]  8.59663719607        1
[INPUT] 1    0    [1    /1   ]  0.488835511541       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.85743840545, 1.0]], [0, [18368.769418877353, 1.0]], [0, [1726.1121883412166, 1.0]], [0, [377.04621741598237, 1.0]], [0, [111.30500957365275, 1.0]], [0, [36.235226847275044, 1.0]], [0, [4.725934203750965, 1.0]], [0, [0.38971539134958033, 1.0]], [1, [8.596637196065153, 1.0]], [1, [0.488835511540534, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.85743841]
bas 1, expnt(s) = [18368.76941888]
bas 2, expnt(s) = [1726.11218834]
bas 3, expnt(s) = [377.04621742]
bas 4, expnt(s) = [111.30500957]
bas 5, expnt(s) = [36.23522685]
bas 6, expnt(s) = [4.7259342]
bas 7, expnt(s) = [0.38971539]
bas 8, expnt(s) = [8.5966372]
bas 9, expnt(s) = [0.48883551]
CPU time:       220.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34285744e+03 2.00407443e+03 1.83687694e+04 3.98634673e+03
 1.72611219e+03 6.76576312e+02 3.77046217e+02 2.16177737e+02
 1.11305010e+02 8.65767059e+01 3.62352268e+01 3.73132659e+01
 4.72593420e+00 8.09805603e+00 3.89715391e-01 1.24616541e+00
 8.59663720e+00 4.29432729e+01 4.88835512e-01 1.19244355e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.323028958750303
cond(S) = 77.93237039398234
E1 = -689.0434998622293  E_coul = 184.8098437116731
init E= -504.233656150556
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.683937711951521  LUMO = 77.5321889939582
  mo_energy =
[-1.21667500e+02 -1.32911845e+01 -7.62892902e+00 -7.62892902e+00
 -7.62892902e+00 -1.65233634e+00 -6.83937712e-01 -6.83937712e-01
 -6.83937712e-01  7.75321890e+01  5.74538082e+02  2.99918994e+03
  1.41453203e+04  5.21912794e+04]
E1 = -706.4404106412352  E_coul = 198.78522773855425
cycle= 1 E= -507.655182902681  delta_E= -3.42  |g|= 0.325  |ddm|= 0.304
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.441785
diis-c [-0.19517431  1.        ]
  HOMO = -0.241923397934873  LUMO = 78.8504591904999
  mo_energy =
[-1.20283034e+02 -1.22666546e+01 -6.66397589e+00 -6.66397589e+00
 -6.66397589e+00 -1.16783338e+00 -2.41923398e-01 -2.41923398e-01
 -2.41923398e-01  7.88504592e+01  5.75910109e+02  3.00046807e+03
  1.41464702e+04  5.21923442e+04]
E1 = -706.4045886610753  E_coul = 198.7489134613068
cycle= 2 E= -507.655675199768  delta_E= -0.000492  |g|= 0.00509  |ddm|= 0.0169
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00549513
diis-c [-3.01442096e-05  5.17190602e-04  9.99482809e-01]
  HOMO = -0.242127551323398  LUMO = 78.8466850080243
  mo_energy =
[-1.20292682e+02 -1.22680389e+01 -6.66611966e+00 -6.66611966e+00
 -6.66611966e+00 -1.16790901e+00 -2.42127551e-01 -2.42127551e-01
 -2.42127551e-01  7.88466850e+01  5.75899088e+02  3.00045170e+03
  1.41464505e+04  5.21923231e+04]
E1 = -706.4040570329936  E_coul = 198.7483816955568
cycle= 3 E= -507.655675337437  delta_E= -1.38e-07  |g|= 0.000111  |ddm|= 0.000248
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000150826
diis-c [-5.23765249e-10  3.39746109e-05 -2.76655539e-02  1.02763158e+00]
  HOMO = -0.242130475934686  LUMO = 78.8466289919601
  mo_energy =
[-1.20292828e+02 -1.22680597e+01 -6.66615493e+00 -6.66615493e+00
 -6.66615493e+00 -1.16790990e+00 -2.42130476e-01 -2.42130476e-01
 -2.42130476e-01  7.88466290e+01  5.75898939e+02  3.00045151e+03
  1.41464503e+04  5.21923229e+04]
E1 = -706.4040472478661  E_coul = 198.74837191036943
cycle= 4 E= -507.655675337497  delta_E= -5.98e-11  |g|= 4.6e-07  |ddm|= 4.67e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.4040472478661  E_coul = 198.74837191036943
  HOMO = -0.242130454359585  LUMO = 78.8466293906064
  mo_energy =
[-1.20292827e+02 -1.22680596e+01 -6.66615472e+00 -6.66615472e+00
 -6.66615472e+00 -1.16790989e+00 -2.42130454e-01 -2.42130454e-01
 -2.42130454e-01  7.88466294e+01  5.75898941e+02  3.00045151e+03
  1.41464503e+04  5.21923229e+04]
E1 = -706.4040472977059  E_coul = 198.7483719602096
Extra cycle  E= -507.655675337496  delta_E= 3.41e-13  |g|= 8.16e-09  |ddm|= 2.3e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34285744e+03 1.83687694e+04 1.72611219e+03 3.77046217e+02
 1.11305010e+02 3.62352268e+01 4.72593420e+00 3.89715391e-01
 8.59663720e+00 4.88835512e-01]
E = -507.6556753374963
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7342.85743841        1
[INPUT] 0    0    [1    /1   ]  18368.7694189        1
[INPUT] 0    0    [1    /1   ]  1726.11218834        1
[INPUT] 0    0    [1    /1   ]  377.046217416        1
[INPUT] 0    0    [1    /1   ]  111.305009574        1
[INPUT] 0    0    [1    /1   ]  36.2352268473        1
[INPUT] 0    0    [1    /1   ]  4.72593420375        1
[INPUT] 0    0    [1    /1   ]  0.38971539135        1
[INPUT] 1    0    [1    /1   ]  8.59663719607        1
[INPUT] 1    0    [1    /1   ]  0.488835511541       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7342.85743840545, 1.0]], [0, [18368.769418877353, 1.0]], [0, [1726.1121883412166, 1.0]], [0, [377.04621741598237, 1.0]], [0, [111.30500957365275, 1.0]], [0, [36.235226847275044, 1.0]], [0, [4.725934203750965, 1.0]], [0, [0.38971539134958033, 1.0]], [1, [8.596637196065153, 1.0]], [1, [0.488835511540534, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7342.85743841]
bas 1, expnt(s) = [18368.76941888]
bas 2, expnt(s) = [1726.11218834]
bas 3, expnt(s) = [377.04621742]
bas 4, expnt(s) = [111.30500957]
bas 5, expnt(s) = [36.23522685]
bas 6, expnt(s) = [4.7259342]
bas 7, expnt(s) = [0.38971539]
bas 8, expnt(s) = [8.5966372]
bas 9, expnt(s) = [0.48883551]
CPU time:       220.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34285744e+03 2.00407443e+03 1.83687694e+04 3.98634673e+03
 1.72611219e+03 6.76576312e+02 3.77046217e+02 2.16177737e+02
 1.11305010e+02 8.65767059e+01 3.62352268e+01 3.73132659e+01
 4.72593420e+00 8.09805603e+00 3.89715391e-01 1.24616541e+00
 8.59663720e+00 4.29432729e+01 4.88835512e-01 1.19244355e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.323028958750303
cond(S) = 77.93237039398234
E1 = -689.0434998622293  E_coul = 184.8098437116731
init E= -504.233656150556
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.683937711951521  LUMO = 77.5321889939582
  mo_energy =
[-1.21667500e+02 -1.32911845e+01 -7.62892902e+00 -7.62892902e+00
 -7.62892902e+00 -1.65233634e+00 -6.83937712e-01 -6.83937712e-01
 -6.83937712e-01  7.75321890e+01  5.74538082e+02  2.99918994e+03
  1.41453203e+04  5.21912794e+04]
E1 = -706.4404106412352  E_coul = 198.78522773855425
cycle= 1 E= -507.655182902681  delta_E= -3.42  |g|= 0.325  |ddm|= 0.304
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441785
diis-c [-0.19517431  1.        ]
  HOMO = -0.241923397934873  LUMO = 78.8504591904999
  mo_energy =
[-1.20283034e+02 -1.22666546e+01 -6.66397589e+00 -6.66397589e+00
 -6.66397589e+00 -1.16783338e+00 -2.41923398e-01 -2.41923398e-01
 -2.41923398e-01  7.88504592e+01  5.75910109e+02  3.00046807e+03
  1.41464702e+04  5.21923442e+04]
E1 = -706.4045886610753  E_coul = 198.7489134613068
cycle= 2 E= -507.655675199768  delta_E= -0.000492  |g|= 0.00509  |ddm|= 0.0169
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00549513
diis-c [-3.01442096e-05  5.17190602e-04  9.99482809e-01]
  HOMO = -0.242127551323398  LUMO = 78.8466850080243
  mo_energy =
[-1.20292682e+02 -1.22680389e+01 -6.66611966e+00 -6.66611966e+00
 -6.66611966e+00 -1.16790901e+00 -2.42127551e-01 -2.42127551e-01
 -2.42127551e-01  7.88466850e+01  5.75899088e+02  3.00045170e+03
  1.41464505e+04  5.21923231e+04]
E1 = -706.4040570329936  E_coul = 198.7483816955568
cycle= 3 E= -507.655675337437  delta_E= -1.38e-07  |g|= 0.000111  |ddm|= 0.000248
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000150826
diis-c [-5.23765249e-10  3.39746109e-05 -2.76655539e-02  1.02763158e+00]
  HOMO = -0.242130475934686  LUMO = 78.8466289919601
  mo_energy =
[-1.20292828e+02 -1.22680597e+01 -6.66615493e+00 -6.66615493e+00
 -6.66615493e+00 -1.16790990e+00 -2.42130476e-01 -2.42130476e-01
 -2.42130476e-01  7.88466290e+01  5.75898939e+02  3.00045151e+03
  1.41464503e+04  5.21923229e+04]
E1 = -706.4040472478661  E_coul = 198.74837191036943
cycle= 4 E= -507.655675337497  delta_E= -5.98e-11  |g|= 4.6e-07  |ddm|= 4.67e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.4040472478661  E_coul = 198.74837191036943
  HOMO = -0.242130454359585  LUMO = 78.8466293906064
  mo_energy =
[-1.20292827e+02 -1.22680596e+01 -6.66615472e+00 -6.66615472e+00
 -6.66615472e+00 -1.16790989e+00 -2.42130454e-01 -2.42130454e-01
 -2.42130454e-01  7.88466294e+01  5.75898941e+02  3.00045151e+03
  1.41464503e+04  5.21923229e+04]
E1 = -706.4040472977059  E_coul = 198.7483719602096
Extra cycle  E= -507.655675337496  delta_E= 3.41e-13  |g|= 8.16e-09  |ddm|= 2.3e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 77.93237039398234
E1 = -706.4040472977059  E_coul = 198.7483719602096
init E= -507.655675337496
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.242130454094076  LUMO = 78.8466293958501
  mo_energy =
[-1.20292827e+02 -1.22680596e+01 -6.66615471e+00 -6.66615471e+00
 -6.66615471e+00 -1.16790989e+00 -2.42130454e-01 -2.42130454e-01
 -2.42130454e-01  7.88466294e+01  5.75898941e+02  3.00045151e+03
  1.41464503e+04  5.21923229e+04]
E1 = -706.4040472985013  E_coul = 198.74837196100475
cycle= 1 E= -507.655675337497  delta_E= -2.27e-13  |g|= 1.68e-10  |ddm|= 3.68e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.4040472985013  E_coul = 198.74837196100475
  HOMO = -0.242130454090185  LUMO = 78.84662939593
  mo_energy =
[-1.20292827e+02 -1.22680596e+01 -6.66615471e+00 -6.66615471e+00
 -6.66615471e+00 -1.16790989e+00 -2.42130454e-01 -2.42130454e-01
 -2.42130454e-01  7.88466294e+01  5.75898941e+02  3.00045151e+03
  1.41464503e+04  5.21923229e+04]
E1 = -706.4040472985155  E_coul = 198.7483719610192
Extra cycle  E= -507.655675337496  delta_E= 2.27e-13  |g|= 9.86e-12  |ddm|= 6.8e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34285744e+03 1.83687694e+04 1.72611219e+03 3.77046217e+02
 1.11305010e+02 3.62352268e+01 4.72593420e+00 3.89715391e-01
 8.59663720e+00 4.88835512e-01]
grad_E = [ 1.31017625e-06 -2.46002052e-06  1.88048967e-04 -1.47288792e-03
  4.10966930e-03 -3.76402504e-03 -3.44624400e-03 -2.83865558e-02
 -4.00188887e-04 -7.96237125e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7344.36782098        1
[INPUT] 0    0    [1    /1   ]  18392.3903875        1
[INPUT] 0    0    [1    /1   ]  858.589005243        1
[INPUT] 0    0    [1    /1   ]  249.64652031         1
[INPUT] 0    0    [1    /1   ]  92.4921597599        1
[INPUT] 0    0    [1    /1   ]  33.478660536         1
[INPUT] 0    0    [1    /1   ]  4.70013936014        1
[INPUT] 0    0    [1    /1   ]  0.388360908253       1
[INPUT] 1    0    [1    /1   ]  8.59503585506        1
[INPUT] 1    0    [1    /1   ]  0.487159572117       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7344.36782098269, 1.0]], [0, [18392.390387459593, 1.0]], [0, [858.5890052428937, 1.0]], [0, [249.64652031043798, 1.0]], [0, [92.49215975994865, 1.0]], [0, [33.47866053601013, 1.0]], [0, [4.700139360143585, 1.0]], [0, [0.3883609082533934, 1.0]], [1, [8.595035855059045, 1.0]], [1, [0.48715957211690925, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7344.36782098]
bas 1, expnt(s) = [18392.39038746]
bas 2, expnt(s) = [858.58900524]
bas 3, expnt(s) = [249.64652031]
bas 4, expnt(s) = [92.49215976]
bas 5, expnt(s) = [33.47866054]
bas 6, expnt(s) = [4.70013936]
bas 7, expnt(s) = [0.38836091]
bas 8, expnt(s) = [8.59503586]
bas 9, expnt(s) = [0.48715957]
CPU time:       224.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34436782e+03 2.00438359e+03 1.83923904e+04 3.99019074e+03
 8.58589005e+02 4.00731993e+02 2.49646520e+02 1.58675239e+02
 9.24921598e+01 7.53518145e+01 3.34786605e+01 3.51634177e+01
 4.70013936e+00 8.06488308e+00 3.88360908e-01 1.24291565e+00
 8.59503586e+00 4.29332740e+01 4.87159572e-01 1.18733547e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.325764076304054
cond(S) = 131.99356643196452
E1 = -688.6260419389045  E_coul = 184.72393365871082
init E= -503.902108280194
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.686372935987865  LUMO = 63.2391047607306
  mo_energy =
[-1.21574147e+02 -1.32996653e+01 -7.63486006e+00 -7.63486006e+00
 -7.63486006e+00 -1.65345483e+00 -6.86372936e-01 -6.86372936e-01
 -6.86372936e-01  6.32391048e+01  4.17066225e+02  1.72919255e+03
  1.09977573e+04  4.87034157e+04]
E1 = -706.1441308085169  E_coul = 198.69144074876465
cycle= 1 E= -507.452690059752  delta_E= -3.55  |g|= 0.35  |ddm|= 0.303
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.508994
diis-c [-0.25907538  1.        ]
  HOMO = -0.246477487407843  LUMO = 64.5339855078407
  mo_energy =
[-1.20183949e+02 -1.22762040e+01 -6.67000060e+00 -6.67000060e+00
 -6.67000060e+00 -1.17135963e+00 -2.46477487e-01 -2.46477487e-01
 -2.46477487e-01  6.45339855e+01  4.18446547e+02  1.73051840e+03
  1.09989079e+04  4.87044548e+04]
E1 = -706.0972827371895  E_coul = 198.64393678806462
cycle= 2 E= -507.453345949125  delta_E= -0.000656  |g|= 0.00591  |ddm|= 0.0245
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00620345
diis-c [-3.83784084e-05  6.34329790e-04  9.99365670e-01]
  HOMO = -0.246762561838981  LUMO = 64.5296839733235
  mo_energy =
[-1.20195997e+02 -1.22781224e+01 -6.67293870e+00 -6.67293870e+00
 -6.67293870e+00 -1.17146655e+00 -2.46762562e-01 -2.46762562e-01
 -2.46762562e-01  6.45296840e+01  4.18434572e+02  1.73050093e+03
  1.09988846e+04  4.87044298e+04]
E1 = -706.09649788075  E_coul = 198.64315171173638
cycle= 3 E= -507.453346169014  delta_E= -2.2e-07  |g|= 0.00014  |ddm|= 0.000394
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000187639
diis-c [-9.05532134e-10  3.53291557e-05 -3.05139799e-02  1.03047865e+00]
  HOMO = -0.246767130696977  LUMO = 64.5296092255575
  mo_energy =
[-1.20196206e+02 -1.22781548e+01 -6.67299267e+00 -6.67299267e+00
 -6.67299267e+00 -1.17146799e+00 -2.46767131e-01 -2.46767131e-01
 -2.46767131e-01  6.45296092e+01  4.18434374e+02  1.73050068e+03
  1.09988843e+04  4.87044295e+04]
E1 = -706.0964817087422  E_coul = 198.64313553961577
cycle= 4 E= -507.453346169126  delta_E= -1.13e-10  |g|= 6.94e-07  |ddm|= 8.08e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.0964817087422  E_coul = 198.64313553961577
  HOMO = -0.246767091155193  LUMO = 64.5296097844196
  mo_energy =
[-1.20196205e+02 -1.22781545e+01 -6.67299229e+00 -6.67299229e+00
 -6.67299229e+00 -1.17146797e+00 -2.46767091e-01 -2.46767091e-01
 -2.46767091e-01  6.45296098e+01  4.18434376e+02  1.73050068e+03
  1.09988843e+04  4.87044295e+04]
E1 = -706.096481802378  E_coul = 198.64313563325146
Extra cycle  E= -507.453346169127  delta_E= -5.68e-14  |g|= 1.35e-08  |ddm|= 4.81e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34436782e+03 1.83923904e+04 8.58589005e+02 2.49646520e+02
 9.24921598e+01 3.34786605e+01 4.70013936e+00 3.88360908e-01
 8.59503586e+00 4.87159572e-01]
E = -507.4533461691265
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.00847666        1
[INPUT] 0    0    [1    /1   ]  18371.1315157        1
[INPUT] 0    0    [1    /1   ]  1639.35987003        1
[INPUT] 0    0    [1    /1   ]  364.306247705        1
[INPUT] 0    0    [1    /1   ]  109.423724592        1
[INPUT] 0    0    [1    /1   ]  35.9595702161        1
[INPUT] 0    0    [1    /1   ]  4.72335471939        1
[INPUT] 0    0    [1    /1   ]  0.38957994304        1
[INPUT] 1    0    [1    /1   ]  8.59647706196        1
[INPUT] 1    0    [1    /1   ]  0.488667917598       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.008476663174, 1.0]], [0, [18371.13151573558, 1.0]], [0, [1639.3598700313842, 1.0]], [0, [364.30624770542795, 1.0]], [0, [109.42372459228234, 1.0]], [0, [35.95957021614855, 1.0]], [0, [4.723354719390227, 1.0]], [0, [0.38957994303996163, 1.0]], [1, [8.596477061964542, 1.0]], [1, [0.4886679175981715, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.00847666]
bas 1, expnt(s) = [18371.13151574]
bas 2, expnt(s) = [1639.35987003]
bas 3, expnt(s) = [364.30624771]
bas 4, expnt(s) = [109.42372459]
bas 5, expnt(s) = [35.95957022]
bas 6, expnt(s) = [4.72335472]
bas 7, expnt(s) = [0.38957994]
bas 8, expnt(s) = [8.59647706]
bas 9, expnt(s) = [0.48866792]
CPU time:       225.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34300848e+03 2.00410535e+03 1.83711315e+04 3.98673119e+03
 1.63935987e+03 6.50909708e+02 3.64306248e+02 2.10675963e+02
 1.09423725e+02 8.54768766e+01 3.59595702e+01 3.71001695e+01
 4.72335472e+00 8.09474078e+00 3.89579943e-01 1.24584056e+00
 8.59647706e+00 4.29422730e+01 4.88667918e-01 1.19193254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.323308811032277
cond(S) = 78.70826276173058
E1 = -689.0469610469702  E_coul = 184.80051953778053
init E= -504.24644150919
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.684186007593792  LUMO = 76.1318400718951
  mo_energy =
[-1.21669944e+02 -1.32924402e+01 -7.62959870e+00 -7.62959870e+00
 -7.62959870e+00 -1.65246773e+00 -6.84186008e-01 -6.84186008e-01
 -6.84186008e-01  7.61318401e+01  5.58389556e+02  2.87580207e+03
  1.38444252e+04  5.18390313e+04]
E1 = -706.4316060830114  E_coul = 198.7724437827458
cycle= 1 E= -507.659162300266  delta_E= -3.41  |g|= 0.327  |ddm|= 0.304
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441547
diis-c [-0.19496374  1.        ]
  HOMO = -0.242405004736864  LUMO = 77.4478554212133
  mo_energy =
[-1.20285311e+02 -1.22681856e+01 -6.66488899e+00 -6.66488899e+00
 -6.66488899e+00 -1.16822925e+00 -2.42405005e-01 -2.42405005e-01
 -2.42405005e-01  7.74478554e+01  5.59762275e+02  2.87708395e+03
  1.38455760e+04  5.18400961e+04]
E1 = -706.3948730733623  E_coul = 198.7352050199843
cycle= 2 E= -507.659668053378  delta_E= -0.000506  |g|= 0.00516  |ddm|= 0.0174
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00556858
diis-c [-3.09475579e-05  5.61686063e-04  9.99438314e-01]
  HOMO = -0.242615502123747  LUMO = 77.4440309860288
  mo_energy =
[-1.20295166e+02 -1.22696117e+01 -6.66709668e+00 -6.66709668e+00
 -6.66709668e+00 -1.16830727e+00 -2.42615502e-01 -2.42615502e-01
 -2.42615502e-01  7.74440310e+01  5.59751150e+02  2.87706743e+03
  1.38455560e+04  5.18400747e+04]
E1 = -706.3943217416218  E_coul = 198.73465354443456
cycle= 3 E= -507.659668197187  delta_E= -1.44e-07  |g|= 0.000113  |ddm|= 0.000258
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000154323
diis-c [-5.51598020e-10  3.41019102e-05 -2.79384061e-02  1.02790430e+00]
  HOMO = -0.242618555819777  LUMO = 77.4439732239644
  mo_energy =
[-1.20295317e+02 -1.22696335e+01 -6.66713344e+00 -6.66713344e+00
 -6.66713344e+00 -1.16830820e+00 -2.42618556e-01 -2.42618556e-01
 -2.42618556e-01  7.74439732e+01  5.59750997e+02  2.87706723e+03
  1.38455558e+04  5.18400745e+04]
E1 = -706.3943114671273  E_coul = 198.7346432698768
cycle= 4 E= -507.65966819725  delta_E= -6.33e-11  |g|= 4.77e-07  |ddm|= 4.91e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.3943114671273  E_coul = 198.7346432698768
  HOMO = -0.242618533040375  LUMO = 77.4439736350129
  mo_energy =
[-1.20295316e+02 -1.22696333e+01 -6.66713322e+00 -6.66713322e+00
 -6.66713322e+00 -1.16830819e+00 -2.42618533e-01 -2.42618533e-01
 -2.42618533e-01  7.74439736e+01  5.59750999e+02  2.87706723e+03
  1.38455558e+04  5.18400745e+04]
E1 = -706.3943115198553  E_coul = 198.73464332260437
Extra cycle  E= -507.659668197251  delta_E= -3.98e-13  |g|= 8.53e-09  |ddm|= 2.45e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34300848e+03 1.83711315e+04 1.63935987e+03 3.64306248e+02
 1.09423725e+02 3.59595702e+01 4.72335472e+00 3.89579943e-01
 8.59647706e+00 4.88667918e-01]
E = -507.6596681972509
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.00847666        1
[INPUT] 0    0    [1    /1   ]  18371.1315157        1
[INPUT] 0    0    [1    /1   ]  1639.35987003        1
[INPUT] 0    0    [1    /1   ]  364.306247705        1
[INPUT] 0    0    [1    /1   ]  109.423724592        1
[INPUT] 0    0    [1    /1   ]  35.9595702161        1
[INPUT] 0    0    [1    /1   ]  4.72335471939        1
[INPUT] 0    0    [1    /1   ]  0.38957994304        1
[INPUT] 1    0    [1    /1   ]  8.59647706196        1
[INPUT] 1    0    [1    /1   ]  0.488667917598       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.008476663174, 1.0]], [0, [18371.13151573558, 1.0]], [0, [1639.3598700313842, 1.0]], [0, [364.30624770542795, 1.0]], [0, [109.42372459228234, 1.0]], [0, [35.95957021614855, 1.0]], [0, [4.723354719390227, 1.0]], [0, [0.38957994303996163, 1.0]], [1, [8.596477061964542, 1.0]], [1, [0.4886679175981715, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.00847666]
bas 1, expnt(s) = [18371.13151574]
bas 2, expnt(s) = [1639.35987003]
bas 3, expnt(s) = [364.30624771]
bas 4, expnt(s) = [109.42372459]
bas 5, expnt(s) = [35.95957022]
bas 6, expnt(s) = [4.72335472]
bas 7, expnt(s) = [0.38957994]
bas 8, expnt(s) = [8.59647706]
bas 9, expnt(s) = [0.48866792]
CPU time:       225.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34300848e+03 2.00410535e+03 1.83711315e+04 3.98673119e+03
 1.63935987e+03 6.50909708e+02 3.64306248e+02 2.10675963e+02
 1.09423725e+02 8.54768766e+01 3.59595702e+01 3.71001695e+01
 4.72335472e+00 8.09474078e+00 3.89579943e-01 1.24584056e+00
 8.59647706e+00 4.29422730e+01 4.88667918e-01 1.19193254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.323308811032277
cond(S) = 78.70826276173058
E1 = -689.0469610469702  E_coul = 184.80051953778053
init E= -504.24644150919
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.684186007593792  LUMO = 76.1318400718951
  mo_energy =
[-1.21669944e+02 -1.32924402e+01 -7.62959870e+00 -7.62959870e+00
 -7.62959870e+00 -1.65246773e+00 -6.84186008e-01 -6.84186008e-01
 -6.84186008e-01  7.61318401e+01  5.58389556e+02  2.87580207e+03
  1.38444252e+04  5.18390313e+04]
E1 = -706.4316060830114  E_coul = 198.7724437827458
cycle= 1 E= -507.659162300266  delta_E= -3.41  |g|= 0.327  |ddm|= 0.304
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441547
diis-c [-0.19496374  1.        ]
  HOMO = -0.242405004736864  LUMO = 77.4478554212133
  mo_energy =
[-1.20285311e+02 -1.22681856e+01 -6.66488899e+00 -6.66488899e+00
 -6.66488899e+00 -1.16822925e+00 -2.42405005e-01 -2.42405005e-01
 -2.42405005e-01  7.74478554e+01  5.59762275e+02  2.87708395e+03
  1.38455760e+04  5.18400961e+04]
E1 = -706.3948730733623  E_coul = 198.7352050199843
cycle= 2 E= -507.659668053378  delta_E= -0.000506  |g|= 0.00516  |ddm|= 0.0174
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00556858
diis-c [-3.09475579e-05  5.61686063e-04  9.99438314e-01]
  HOMO = -0.242615502123747  LUMO = 77.4440309860288
  mo_energy =
[-1.20295166e+02 -1.22696117e+01 -6.66709668e+00 -6.66709668e+00
 -6.66709668e+00 -1.16830727e+00 -2.42615502e-01 -2.42615502e-01
 -2.42615502e-01  7.74440310e+01  5.59751150e+02  2.87706743e+03
  1.38455560e+04  5.18400747e+04]
E1 = -706.3943217416218  E_coul = 198.73465354443456
cycle= 3 E= -507.659668197187  delta_E= -1.44e-07  |g|= 0.000113  |ddm|= 0.000258
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000154323
diis-c [-5.51598020e-10  3.41019102e-05 -2.79384061e-02  1.02790430e+00]
  HOMO = -0.242618555819777  LUMO = 77.4439732239644
  mo_energy =
[-1.20295317e+02 -1.22696335e+01 -6.66713344e+00 -6.66713344e+00
 -6.66713344e+00 -1.16830820e+00 -2.42618556e-01 -2.42618556e-01
 -2.42618556e-01  7.74439732e+01  5.59750997e+02  2.87706723e+03
  1.38455558e+04  5.18400745e+04]
E1 = -706.3943114671273  E_coul = 198.7346432698768
cycle= 4 E= -507.65966819725  delta_E= -6.33e-11  |g|= 4.77e-07  |ddm|= 4.91e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.3943114671273  E_coul = 198.7346432698768
  HOMO = -0.242618533040375  LUMO = 77.4439736350129
  mo_energy =
[-1.20295316e+02 -1.22696333e+01 -6.66713322e+00 -6.66713322e+00
 -6.66713322e+00 -1.16830819e+00 -2.42618533e-01 -2.42618533e-01
 -2.42618533e-01  7.74439736e+01  5.59750999e+02  2.87706723e+03
  1.38455558e+04  5.18400745e+04]
E1 = -706.3943115198553  E_coul = 198.73464332260437
Extra cycle  E= -507.659668197251  delta_E= -3.98e-13  |g|= 8.53e-09  |ddm|= 2.45e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 78.70826276173058
E1 = -706.3943115198553  E_coul = 198.73464332260437
init E= -507.659668197251
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.242618532757214  LUMO = 77.4439736404952
  mo_energy =
[-1.20295316e+02 -1.22696333e+01 -6.66713322e+00 -6.66713322e+00
 -6.66713322e+00 -1.16830819e+00 -2.42618533e-01 -2.42618533e-01
 -2.42618533e-01  7.74439736e+01  5.59750999e+02  2.87706723e+03
  1.38455558e+04  5.18400745e+04]
E1 = -706.3943115207042  E_coul = 198.73464332345364
cycle= 1 E= -507.659668197251  delta_E= 3.41e-13  |g|= 1.78e-10  |ddm|= 3.95e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.3943115207042  E_coul = 198.73464332345364
  HOMO = -0.242618532753043  LUMO = 77.4439736405813
  mo_energy =
[-1.20295316e+02 -1.22696333e+01 -6.66713322e+00 -6.66713322e+00
 -6.66713322e+00 -1.16830819e+00 -2.42618533e-01 -2.42618533e-01
 -2.42618533e-01  7.74439736e+01  5.59750999e+02  2.87706723e+03
  1.38455558e+04  5.18400745e+04]
E1 = -706.3943115207194  E_coul = 198.73464332346884
Extra cycle  E= -507.659668197251  delta_E=    0  |g|= 1.21e-11  |ddm|= 7.29e-12
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34300848e+03 1.83711315e+04 1.63935987e+03 3.64306248e+02
 1.09423725e+02 3.59595702e+01 4.72335472e+00 3.89579943e-01
 8.59647706e+00 4.88667918e-01]
grad_E = [ 2.74630162e-06 -2.69600542e-06  1.86134751e-04 -1.52946759e-03
  4.33205256e-03 -3.92689876e-03 -3.46836550e-03 -3.09262701e-02
 -4.01108729e-04 -8.64419616e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7344.2732265         1
[INPUT] 0    0    [1    /1   ]  18390.7662996        1
[INPUT] 0    0    [1    /1   ]  917.252285892        1
[INPUT] 0    0    [1    /1   ]  264.339697796        1
[INPUT] 0    0    [1    /1   ]  92.4551492073        1
[INPUT] 0    0    [1    /1   ]  33.2263909899        1
[INPUT] 0    0    [1    /1   ]  4.70075498429        1
[INPUT] 0    0    [1    /1   ]  0.389383142829       1
[INPUT] 1    0    [1    /1   ]  8.59670028332        1
[INPUT] 1    0    [1    /1   ]  0.488711272068       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7344.2732264970755, 1.0]], [0, [18390.766299600542, 1.0]], [0, [917.2522858920854, 1.0]], [0, [264.3396977963106, 1.0]], [0, [92.45514920732109, 1.0]], [0, [33.22639098986393, 1.0]], [0, [4.700754984285825, 1.0]], [0, [0.3893831428292755, 1.0]], [1, [8.596700283318713, 1.0]], [1, [0.4887112720678384, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7344.2732265]
bas 1, expnt(s) = [18390.7662996]
bas 2, expnt(s) = [917.25228589]
bas 3, expnt(s) = [264.3396978]
bas 4, expnt(s) = [92.45514921]
bas 5, expnt(s) = [33.22639099]
bas 6, expnt(s) = [4.70075498]
bas 7, expnt(s) = [0.38938314]
bas 8, expnt(s) = [8.59670028]
bas 9, expnt(s) = [0.48871127]
CPU time:       229.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34427323e+03 2.00436423e+03 1.83907663e+04 3.98992648e+03
 9.17252286e+02 4.21096495e+02 2.64339698e+02 1.65629166e+02
 9.24551492e+01 7.53291995e+01 3.32263910e+01 3.49645065e+01
 4.70075498e+00 8.06567532e+00 3.89383143e-01 1.24536852e+00
 8.59670028e+00 4.29436668e+01 4.88711272e-01 1.19206473e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32374428371496
cond(S) = 117.03804061295666
E1 = -688.8113449601358  E_coul = 184.799330706003
init E= -504.012014254133
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.684006673446011  LUMO = 63.0892914600979
  mo_energy =
[-1.21594186e+02 -1.32959244e+01 -7.62991298e+00 -7.62991298e+00
 -7.62991298e+00 -1.65213206e+00 -6.84006673e-01 -6.84006673e-01
 -6.84006673e-01  6.30892915e+01  4.27292417e+02  1.82683667e+03
  1.12345111e+04  4.89487186e+04]
E1 = -706.3201943820446  E_coul = 198.8073629725552
cycle= 1 E= -507.512831409489  delta_E= -3.5  |g|= 0.347  |ddm|= 0.302
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.493908
diis-c [-0.24394476  1.        ]
  HOMO = -0.242355443386157  LUMO = 64.3871788405339
  mo_energy =
[-1.20199404e+02 -1.22701253e+01 -6.66268792e+00 -6.66268792e+00
 -6.66268792e+00 -1.16839875e+00 -2.42355443e-01 -2.42355443e-01
 -2.42355443e-01  6.43871788e+01  4.28677299e+02  1.82816450e+03
  1.12356728e+04  4.89497733e+04]
E1 = -706.2731666778943  E_coul = 198.75967732872462
cycle= 2 E= -507.51348934917  delta_E= -0.000658  |g|= 0.00593  |ddm|= 0.0241
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00626966
diis-c [-3.91797152e-05  7.26443062e-04  9.99273557e-01]
  HOMO = -0.242643143144732  LUMO = 64.3828606337147
  mo_energy =
[-1.20211498e+02 -1.22720511e+01 -6.66563453e+00 -6.66563453e+00
 -6.66563453e+00 -1.16850641e+00 -2.42643143e-01 -2.42643143e-01
 -2.42643143e-01  6.43828606e+01  4.28665117e+02  1.82814670e+03
  1.12356494e+04  4.89497482e+04]
E1 = -706.2723777805068  E_coul = 198.7588882096571
cycle= 3 E= -507.51348957085  delta_E= -2.22e-07  |g|= 0.000141  |ddm|= 0.000389
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000190231
diis-c [-9.23481836e-10  3.46684925e-05 -3.06257989e-02  1.03059113e+00]
  HOMO = -0.242647793415543  LUMO = 64.3827851121336
  mo_energy =
[-1.20211710e+02 -1.22720839e+01 -6.66568905e+00 -6.66568905e+00
 -6.66568905e+00 -1.16850787e+00 -2.42647793e-01 -2.42647793e-01
 -2.42647793e-01  6.43827851e+01  4.28664917e+02  1.82814644e+03
  1.12356491e+04  4.89497479e+04]
E1 = -706.272361422864  E_coul = 198.75887185189922
cycle= 4 E= -507.513489570965  delta_E= -1.15e-10  |g|= 6.96e-07  |ddm|= 8.05e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.272361422864  E_coul = 198.75887185189922
  HOMO = -0.242647753294524  LUMO = 64.3827856757703
  mo_energy =
[-1.20211708e+02 -1.22720837e+01 -6.66568867e+00 -6.66568867e+00
 -6.66568867e+00 -1.16850785e+00 -2.42647753e-01 -2.42647753e-01
 -2.42647753e-01  6.43827857e+01  4.28664918e+02  1.82814644e+03
  1.12356491e+04  4.89497479e+04]
E1 = -706.2723615173176  E_coul = 198.75887194635263
Extra cycle  E= -507.513489570965  delta_E= -1.14e-13  |g|= 1.36e-08  |ddm|= 4.77e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34427323e+03 1.83907663e+04 9.17252286e+02 2.64339698e+02
 9.24551492e+01 3.32263910e+01 4.70075498e+00 3.89383143e-01
 8.59670028e+00 4.88711272e-01]
E = -507.5134895709649
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.15544334        1
[INPUT] 0    0    [1    /1   ]  18373.4131202        1
[INPUT] 0    0    [1    /1   ]  1555.4494023         1
[INPUT] 0    0    [1    /1   ]  352.68991775         1
[INPUT] 0    0    [1    /1   ]  107.451939323        1
[INPUT] 0    0    [1    /1   ]  35.641968861         1
[INPUT] 0    0    [1    /1   ]  4.72072858115        1
[INPUT] 0    0    [1    /1   ]  0.389557074429       1
[INPUT] 1    0    [1    /1   ]  8.59650300077        1
[INPUT] 1    0    [1    /1   ]  0.488672955482       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.155443337473, 1.0]], [0, [18373.413120214078, 1.0]], [0, [1555.449402299149, 1.0]], [0, [352.6899177503146, 1.0]], [0, [107.45193932291848, 1.0]], [0, [35.64196886101678, 1.0]], [0, [4.720728581145889, 1.0]], [0, [0.3895570744285647, 1.0]], [1, [8.596503000770127, 1.0]], [1, [0.4886729554815949, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.15544334]
bas 1, expnt(s) = [18373.41312021]
bas 2, expnt(s) = [1555.4494023]
bas 3, expnt(s) = [352.68991775]
bas 4, expnt(s) = [107.45193932]
bas 5, expnt(s) = [35.64196886]
bas 6, expnt(s) = [4.72072858]
bas 7, expnt(s) = [0.38955707]
bas 8, expnt(s) = [8.596503]
bas 9, expnt(s) = [0.48867296]
CPU time:       230.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34315544e+03 2.00413543e+03 1.83734131e+04 3.98710253e+03
 1.55544940e+03 6.25758764e+02 3.52689918e+02 2.05617374e+02
 1.07451939e+02 8.43190525e+01 3.56419689e+01 3.68541407e+01
 4.72072858e+00 8.09136510e+00 3.89557074e-01 1.24578571e+00
 8.59650300e+00 4.29424349e+01 4.88672955e-01 1.19194790e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32336299726336
cond(S) = 79.91198919084968
E1 = -689.0642718760301  E_coul = 184.7996599937815
init E= -504.264611882249
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.684169661229483  LUMO = 74.6186664842152
  mo_energy =
[-1.21671752e+02 -1.32931789e+01 -7.62970943e+00 -7.62970943e+00
 -7.62970943e+00 -1.65244240e+00 -6.84169661e-01 -6.84169661e-01
 -6.84169661e-01  7.46186665e+01  5.42822043e+02  2.75678531e+03
  1.35521443e+04  5.15002596e+04]
E1 = -706.4370461992455  E_coul = 198.7731601144934
cycle= 1 E= -507.663886084752  delta_E= -3.4  |g|= 0.328  |ddm|= 0.304
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441366
diis-c [-0.19480386  1.        ]
  HOMO = -0.242423972862151  LUMO = 75.9326495890267
  mo_energy =
[-1.20286344e+02 -1.22689123e+01 -6.66493559e+00 -6.66493559e+00
 -6.66493559e+00 -1.16828461e+00 -2.42423973e-01 -2.42423973e-01
 -2.42423973e-01  7.59326496e+01  5.44196018e+02  2.75807169e+03
  1.35532970e+04  5.15013254e+04]
E1 = -706.3992904593233  E_coul = 198.7348835277094
cycle= 2 E= -507.664406931614  delta_E= -0.000521  |g|= 0.00525  |ddm|= 0.018
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00565151
diis-c [-3.18672751e-05  6.08899927e-04  9.99391100e-01]
  HOMO = -0.242641791368501  LUMO = 75.9287697213278
  mo_energy =
[-1.20296428e+02 -1.22703859e+01 -6.66721512e+00 -6.66721512e+00
 -6.66721512e+00 -1.16836537e+00 -2.42641791e-01 -2.42641791e-01
 -2.42641791e-01  7.59287697e+01  5.44184765e+02  2.75805498e+03
  1.35532767e+04  5.15013036e+04]
E1 = -706.3987167612149  E_coul = 198.73430967870178
cycle= 3 E= -507.664407082513  delta_E= -1.51e-07  |g|= 0.000116  |ddm|= 0.00027
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000158278
diis-c [-5.84063583e-10  3.41990154e-05 -2.82404602e-02  1.02820626e+00]
  HOMO = -0.242644995222222  LUMO = 75.9287100200207
  mo_energy =
[-1.20296585e+02 -1.22704087e+01 -6.66725359e+00 -6.66725359e+00
 -6.66725359e+00 -1.16836635e+00 -2.42644995e-01 -2.42644995e-01
 -2.42644995e-01  7.59287100e+01  5.44184607e+02  2.75805478e+03
  1.35532765e+04  5.15013034e+04]
E1 = -706.3987059244184  E_coul = 198.73429884183736
cycle= 4 E= -507.664407082581  delta_E= -6.79e-11  |g|= 4.97e-07  |ddm|= 5.19e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.3987059244184  E_coul = 198.73429884183736
  HOMO = -0.242644971019287  LUMO = 75.9287104452392
  mo_energy =
[-1.20296584e+02 -1.22704085e+01 -6.66725335e+00 -6.66725335e+00
 -6.66725335e+00 -1.16836634e+00 -2.42644971e-01 -2.42644971e-01
 -2.42644971e-01  7.59287104e+01  5.44184608e+02  2.75805478e+03
  1.35532765e+04  5.15013034e+04]
E1 = -706.3987059805224  E_coul = 198.73429889794144
Extra cycle  E= -507.664407082581  delta_E= 1.14e-13  |g|= 8.96e-09  |ddm|= 2.62e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34315544e+03 1.83734131e+04 1.55544940e+03 3.52689918e+02
 1.07451939e+02 3.56419689e+01 4.72072858e+00 3.89557074e-01
 8.59650300e+00 4.88672955e-01]
E = -507.66440708258096
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:53 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.15544334        1
[INPUT] 0    0    [1    /1   ]  18373.4131202        1
[INPUT] 0    0    [1    /1   ]  1555.4494023         1
[INPUT] 0    0    [1    /1   ]  352.68991775         1
[INPUT] 0    0    [1    /1   ]  107.451939323        1
[INPUT] 0    0    [1    /1   ]  35.641968861         1
[INPUT] 0    0    [1    /1   ]  4.72072858115        1
[INPUT] 0    0    [1    /1   ]  0.389557074429       1
[INPUT] 1    0    [1    /1   ]  8.59650300077        1
[INPUT] 1    0    [1    /1   ]  0.488672955482       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.155443337473, 1.0]], [0, [18373.413120214078, 1.0]], [0, [1555.449402299149, 1.0]], [0, [352.6899177503146, 1.0]], [0, [107.45193932291848, 1.0]], [0, [35.64196886101678, 1.0]], [0, [4.720728581145889, 1.0]], [0, [0.3895570744285647, 1.0]], [1, [8.596503000770127, 1.0]], [1, [0.4886729554815949, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.15544334]
bas 1, expnt(s) = [18373.41312021]
bas 2, expnt(s) = [1555.4494023]
bas 3, expnt(s) = [352.68991775]
bas 4, expnt(s) = [107.45193932]
bas 5, expnt(s) = [35.64196886]
bas 6, expnt(s) = [4.72072858]
bas 7, expnt(s) = [0.38955707]
bas 8, expnt(s) = [8.596503]
bas 9, expnt(s) = [0.48867296]
CPU time:       230.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34315544e+03 2.00413543e+03 1.83734131e+04 3.98710253e+03
 1.55544940e+03 6.25758764e+02 3.52689918e+02 2.05617374e+02
 1.07451939e+02 8.43190525e+01 3.56419689e+01 3.68541407e+01
 4.72072858e+00 8.09136510e+00 3.89557074e-01 1.24578571e+00
 8.59650300e+00 4.29424349e+01 4.88672955e-01 1.19194790e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32336299726336
cond(S) = 79.91198919084968
E1 = -689.0642718760301  E_coul = 184.7996599937815
init E= -504.264611882249
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.684169661229483  LUMO = 74.6186664842152
  mo_energy =
[-1.21671752e+02 -1.32931789e+01 -7.62970943e+00 -7.62970943e+00
 -7.62970943e+00 -1.65244240e+00 -6.84169661e-01 -6.84169661e-01
 -6.84169661e-01  7.46186665e+01  5.42822043e+02  2.75678531e+03
  1.35521443e+04  5.15002596e+04]
E1 = -706.4370461992455  E_coul = 198.7731601144934
cycle= 1 E= -507.663886084752  delta_E= -3.4  |g|= 0.328  |ddm|= 0.304
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441366
diis-c [-0.19480386  1.        ]
  HOMO = -0.242423972862151  LUMO = 75.9326495890267
  mo_energy =
[-1.20286344e+02 -1.22689123e+01 -6.66493559e+00 -6.66493559e+00
 -6.66493559e+00 -1.16828461e+00 -2.42423973e-01 -2.42423973e-01
 -2.42423973e-01  7.59326496e+01  5.44196018e+02  2.75807169e+03
  1.35532970e+04  5.15013254e+04]
E1 = -706.3992904593233  E_coul = 198.7348835277094
cycle= 2 E= -507.664406931614  delta_E= -0.000521  |g|= 0.00525  |ddm|= 0.018
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00565151
diis-c [-3.18672751e-05  6.08899927e-04  9.99391100e-01]
  HOMO = -0.242641791368501  LUMO = 75.9287697213278
  mo_energy =
[-1.20296428e+02 -1.22703859e+01 -6.66721512e+00 -6.66721512e+00
 -6.66721512e+00 -1.16836537e+00 -2.42641791e-01 -2.42641791e-01
 -2.42641791e-01  7.59287697e+01  5.44184765e+02  2.75805498e+03
  1.35532767e+04  5.15013036e+04]
E1 = -706.3987167612149  E_coul = 198.73430967870178
cycle= 3 E= -507.664407082513  delta_E= -1.51e-07  |g|= 0.000116  |ddm|= 0.00027
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000158278
diis-c [-5.84063583e-10  3.41990154e-05 -2.82404602e-02  1.02820626e+00]
  HOMO = -0.242644995222222  LUMO = 75.9287100200207
  mo_energy =
[-1.20296585e+02 -1.22704087e+01 -6.66725359e+00 -6.66725359e+00
 -6.66725359e+00 -1.16836635e+00 -2.42644995e-01 -2.42644995e-01
 -2.42644995e-01  7.59287100e+01  5.44184607e+02  2.75805478e+03
  1.35532765e+04  5.15013034e+04]
E1 = -706.3987059244184  E_coul = 198.73429884183736
cycle= 4 E= -507.664407082581  delta_E= -6.79e-11  |g|= 4.97e-07  |ddm|= 5.19e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.3987059244184  E_coul = 198.73429884183736
  HOMO = -0.242644971019287  LUMO = 75.9287104452392
  mo_energy =
[-1.20296584e+02 -1.22704085e+01 -6.66725335e+00 -6.66725335e+00
 -6.66725335e+00 -1.16836634e+00 -2.42644971e-01 -2.42644971e-01
 -2.42644971e-01  7.59287104e+01  5.44184608e+02  2.75805478e+03
  1.35532765e+04  5.15013034e+04]
E1 = -706.3987059805224  E_coul = 198.73429889794144
Extra cycle  E= -507.664407082581  delta_E= 1.14e-13  |g|= 8.96e-09  |ddm|= 2.62e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 79.91198919084968
E1 = -706.3987059805224  E_coul = 198.73429889794144
init E= -507.664407082581
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.242644970715028  LUMO = 75.9287104509959
  mo_energy =
[-1.20296584e+02 -1.22704085e+01 -6.66725335e+00 -6.66725335e+00
 -6.66725335e+00 -1.16836634e+00 -2.42644971e-01 -2.42644971e-01
 -2.42644971e-01  7.59287105e+01  5.44184608e+02  2.75805478e+03
  1.35532765e+04  5.15013034e+04]
E1 = -706.3987059814369  E_coul = 198.73429889885566
cycle= 1 E= -507.664407082581  delta_E= -3.41e-13  |g|= 1.87e-10  |ddm|= 4.26e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.3987059814369  E_coul = 198.73429889885566
  HOMO = -0.242644970710504  LUMO = 75.9287104510862
  mo_energy =
[-1.20296584e+02 -1.22704085e+01 -6.66725335e+00 -6.66725335e+00
 -6.66725335e+00 -1.16836634e+00 -2.42644971e-01 -2.42644971e-01
 -2.42644971e-01  7.59287105e+01  5.44184608e+02  2.75805478e+03
  1.35532765e+04  5.15013034e+04]
E1 = -706.3987059814528  E_coul = 198.734298898872
Extra cycle  E= -507.664407082581  delta_E= 4.55e-13  |g|= 8.76e-12  |ddm|= 7.97e-12
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34315544e+03 1.83734131e+04 1.55544940e+03 3.52689918e+02
 1.07451939e+02 3.56419689e+01 4.72072858e+00 3.89557074e-01
 8.59650300e+00 4.88672955e-01]
grad_E = [ 4.88152054e-06 -2.93323020e-06  1.67471322e-04 -1.46433994e-03
  4.24354928e-03 -3.69094607e-03 -3.20130162e-03 -3.11977699e-02
 -3.52106467e-04 -8.66320493e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.81978112        1
[INPUT] 0    0    [1    /1   ]  18383.7077623        1
[INPUT] 0    0    [1    /1   ]  1176.70080929        1
[INPUT] 0    0    [1    /1   ]  301.555557596        1
[INPUT] 0    0    [1    /1   ]  96.1421759895        1
[INPUT] 0    0    [1    /1   ]  33.5231990744        1
[INPUT] 0    0    [1    /1   ]  4.70792779113        1
[INPUT] 0    0    [1    /1   ]  0.390137497139       1
[INPUT] 1    0    [1    /1   ]  8.59783372273        1
[INPUT] 1    0    [1    /1   ]  0.489798561936       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.8197811231, 1.0]], [0, [18383.707762348724, 1.0]], [0, [1176.7008092941408, 1.0]], [0, [301.5555575957956, 1.0]], [0, [96.14217598950734, 1.0]], [0, [33.52319907441035, 1.0]], [0, [4.707927791128178, 1.0]], [0, [0.39013749713916507, 1.0]], [1, [8.597833722727744, 1.0]], [1, [0.4897985619362396, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.81978112]
bas 1, expnt(s) = [18383.70776235]
bas 2, expnt(s) = [1176.70080929]
bas 3, expnt(s) = [301.5555576]
bas 4, expnt(s) = [96.14217599]
bas 5, expnt(s) = [33.52319907]
bas 6, expnt(s) = [4.70792779]
bas 7, expnt(s) = [0.3901375]
bas 8, expnt(s) = [8.59783372]
bas 9, expnt(s) = [0.48979856]
CPU time:       234.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34381978e+03 2.00427141e+03 1.83837078e+04 3.98877790e+03
 1.17670081e+03 5.07591760e+02 3.01555558e+02 1.82827082e+02
 9.61421760e+01 7.75711955e+01 3.35231991e+01 3.51984968e+01
 4.70792779e+00 8.07490402e+00 3.90137497e-01 1.24717758e+00
 8.59783372e+00 4.29507444e+01 4.89798562e-01 1.19538080e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.322180645420467
cond(S) = 90.9458809922211
E1 = -689.1517776702523  E_coul = 184.85185395821875
init E= -504.299923712034
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.682390290843361  LUMO = 65.68348109919
  mo_energy =
[-1.21657700e+02 -1.32936179e+01 -7.62645002e+00 -7.62645002e+00
 -7.62645002e+00 -1.65138525e+00 -6.82390291e-01 -6.82390291e-01
 -6.82390291e-01  6.56834811e+01  4.66245467e+02  2.20137760e+03
  1.21902067e+04  4.99725132e+04]
E1 = -706.5324325707611  E_coul = 198.8774000189553
cycle= 1 E= -507.655032551806  delta_E= -3.36  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.452629
diis-c [-0.20487311  1.        ]
  HOMO = -0.239478425026779  LUMO = 66.9874253029743
  mo_energy =
[-1.20262097e+02 -1.22667636e+01 -6.65848135e+00 -6.65848135e+00
 -6.65848135e+00 -1.16638245e+00 -2.39478425e-01 -2.39478425e-01
 -2.39478425e-01  6.69874253e+01  4.67630944e+02  2.20269363e+03
  1.21913763e+04  4.99735890e+04]
E1 = -706.4877212044477  E_coul = 198.8320658762261
cycle= 2 E= -507.655655328222  delta_E= -0.000623  |g|= 0.00577  |ddm|= 0.022
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00616702
diis-c [-3.78718509e-05  8.83698314e-04  9.99116302e-01]
  HOMO = -0.239748781425687  LUMO = 66.9831954696693
  mo_energy =
[-1.20273710e+02 -1.22685711e+01 -6.66125463e+00 -6.66125463e+00
 -6.66125463e+00 -1.16648315e+00 -2.39748781e-01 -2.39748781e-01
 -2.39748781e-01  6.69831955e+01  4.67618749e+02  2.20267563e+03
  1.21913537e+04  4.99735647e+04]
E1 = -706.4869888296932  E_coul = 198.83133329855062
cycle= 3 E= -507.655655531143  delta_E= -2.03e-07  |g|= 0.000136  |ddm|= 0.000351
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000184284
diis-c [-8.32778098e-10  3.41363269e-05 -3.01716298e-02  1.03013749e+00]
  HOMO = -0.239753108713532  LUMO = 66.9831229441644
  mo_energy =
[-1.20273910e+02 -1.22686016e+01 -6.66130538e+00 -6.66130538e+00
 -6.66130538e+00 -1.16648449e+00 -2.39753109e-01 -2.39753109e-01
 -2.39753109e-01  6.69831229e+01  4.67618554e+02  2.20267538e+03
  1.21913534e+04  4.99735644e+04]
E1 = -706.4869738268403  E_coul = 198.83131829559377
cycle= 4 E= -507.655655531247  delta_E= -1.04e-10  |g|= 6.37e-07  |ddm|= 7.21e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.4869738268403  E_coul = 198.83131829559377
  HOMO = -0.239753073135053  LUMO = 66.9831234709552
  mo_energy =
[-1.20273908e+02 -1.22686014e+01 -6.66130504e+00 -6.66130504e+00
 -6.66130504e+00 -1.16648448e+00 -2.39753073e-01 -2.39753073e-01
 -2.39753073e-01  6.69831235e+01  4.67618556e+02  2.20267538e+03
  1.21913534e+04  4.99735644e+04]
E1 = -706.4869739096548  E_coul = 198.83131837840833
Extra cycle  E= -507.655655531246  delta_E= 1.14e-13  |g|= 1.22e-08  |ddm|= 4.02e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34381978e+03 1.83837078e+04 1.17670081e+03 3.01555558e+02
 9.61421760e+01 3.35231991e+01 4.70792779e+00 3.90137497e-01
 8.59783372e+00 4.89798562e-01]
E = -507.65565553124645
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:56 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.410254          1
[INPUT] 0    0    [1    /1   ]  18377.3616907        1
[INPUT] 0    0    [1    /1   ]  1410.17815257        1
[INPUT] 0    0    [1    /1   ]  333.077033265        1
[INPUT] 0    0    [1    /1   ]  103.1140131          1
[INPUT] 0    0    [1    /1   ]  34.8293022519        1
[INPUT] 0    0    [1    /1   ]  4.71581876287        1
[INPUT] 0    0    [1    /1   ]  0.389779698972       1
[INPUT] 1    0    [1    /1   ]  8.597013407          1
[INPUT] 1    0    [1    /1   ]  0.489104688455       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.410254001171, 1.0]], [0, [18377.36169073289, 1.0]], [0, [1410.17815257321, 1.0]], [0, [333.0770332649985, 1.0]], [0, [103.11401309984335, 1.0]], [0, [34.829302251908594, 1.0]], [0, [4.7158187628714545, 1.0]], [0, [0.38977969897185144, 1.0]], [1, [8.597013407001045, 1.0]], [1, [0.4891046884553558, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.410254]
bas 1, expnt(s) = [18377.36169073]
bas 2, expnt(s) = [1410.17815257]
bas 3, expnt(s) = [333.07703326]
bas 4, expnt(s) = [103.1140131]
bas 5, expnt(s) = [34.82930225]
bas 6, expnt(s) = [4.71581876]
bas 7, expnt(s) = [0.3897797]
bas 8, expnt(s) = [8.59701341]
bas 9, expnt(s) = [0.48910469]
CPU time:       235.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34341025e+03 2.00418759e+03 1.83773617e+04 3.98774516e+03
 1.41017815e+03 5.81393953e+02 3.33077033e+02 1.96980638e+02
 1.03114013e+02 8.17529234e+01 3.48293023e+01 3.62220983e+01
 4.71581876e+00 8.08505268e+00 3.89779699e-01 1.24631963e+00
 8.59701341e+00 4.29456220e+01 4.89104688e-01 1.19326437e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3229157245857
cond(S) = 82.58752928159967
E1 = -689.1219861381068  E_coul = 184.81900805291224
init E= -504.302978085195
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.683490651062212  LUMO = 71.1538393145461
  mo_energy =
[-1.21672122e+02 -1.32933279e+01 -7.62852872e+00 -7.62852872e+00
 -7.62852872e+00 -1.65201875e+00 -6.83490651e-01 -6.83490651e-01
 -6.83490651e-01  7.11538393e+01  5.13181582e+02  2.54569200e+03
  1.30368291e+04  5.09125993e+04]
E1 = -706.4813121328269  E_coul = 198.80953522658882
cycle= 1 E= -507.671776906238  delta_E= -3.37  |g|= 0.331  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.442212
diis-c [-0.19555141  1.        ]
  HOMO = -0.241319849631484  LUMO = 72.4640324924714
  mo_energy =
[-1.20283352e+02 -1.22682470e+01 -6.66275903e+00 -6.66275903e+00
 -6.66275903e+00 -1.16755951e+00 -2.41319850e-01 -2.41319850e-01
 -2.41319850e-01  7.24640325e+01  5.14559618e+02  2.54698880e+03
  1.30379880e+04  5.09136694e+04]
E1 = -706.4410536140585  E_coul = 198.76871915499459
cycle= 2 E= -507.672334459064  delta_E= -0.000558  |g|= 0.00544  |ddm|= 0.0194
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00584853
diis-c [-3.41001244e-05  7.32882860e-04  9.99267117e-01]
  HOMO = -0.241556161559819  LUMO = 72.4600199012539
  mo_energy =
[-1.20293995e+02 -1.22698385e+01 -6.66521454e+00 -6.66521454e+00
 -6.66521454e+00 -1.16764722e+00 -2.41556162e-01 -2.41556162e-01
 -2.41556162e-01  7.24600199e+01  5.14548004e+02  2.54697158e+03
  1.30379668e+04  5.09136467e+04]
E1 = -706.4404242265654  E_coul = 198.76808959859702
cycle= 3 E= -507.672334627968  delta_E= -1.69e-07  |g|= 0.000124  |ddm|= 0.000298
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000167963
diis-c [-6.68058153e-10  3.42099194e-05 -2.89742881e-02  1.02894008e+00]
  HOMO = -0.241559755538524  LUMO = 72.4599554481538
  mo_energy =
[-1.20294167e+02 -1.22698639e+01 -6.66525733e+00 -6.66525733e+00
 -6.66525733e+00 -1.16764833e+00 -2.41559756e-01 -2.41559756e-01
 -2.41559756e-01  7.24599554e+01  5.14547832e+02  2.54697136e+03
  1.30379665e+04  5.09136464e+04]
E1 = -706.4404119493986  E_coul = 198.76807732135046
cycle= 4 E= -507.672334628048  delta_E= -7.98e-11  |g|= 5.46e-07  |ddm|= 5.88e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.4404119493986  E_coul = 198.76807732135046
  HOMO = -0.241559727562575  LUMO = 72.4599559092451
  mo_energy =
[-1.20294166e+02 -1.22698638e+01 -6.66525706e+00 -6.66525706e+00
 -6.66525706e+00 -1.16764832e+00 -2.41559728e-01 -2.41559728e-01
 -2.41559728e-01  7.24599559e+01  5.14547834e+02  2.54697137e+03
  1.30379665e+04  5.09136464e+04]
E1 = -706.4404120143455  E_coul = 198.7680773862974
Extra cycle  E= -507.672334628048  delta_E=    0  |g|= 1.01e-08  |ddm|= 3.08e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34341025e+03 1.83773617e+04 1.41017815e+03 3.33077033e+02
 1.03114013e+02 3.48293023e+01 4.71581876e+00 3.89779699e-01
 8.59701341e+00 4.89104688e-01]
E = -507.67233462804813
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:57 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.410254          1
[INPUT] 0    0    [1    /1   ]  18377.3616907        1
[INPUT] 0    0    [1    /1   ]  1410.17815257        1
[INPUT] 0    0    [1    /1   ]  333.077033265        1
[INPUT] 0    0    [1    /1   ]  103.1140131          1
[INPUT] 0    0    [1    /1   ]  34.8293022519        1
[INPUT] 0    0    [1    /1   ]  4.71581876287        1
[INPUT] 0    0    [1    /1   ]  0.389779698972       1
[INPUT] 1    0    [1    /1   ]  8.597013407          1
[INPUT] 1    0    [1    /1   ]  0.489104688455       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.410254001171, 1.0]], [0, [18377.36169073289, 1.0]], [0, [1410.17815257321, 1.0]], [0, [333.0770332649985, 1.0]], [0, [103.11401309984335, 1.0]], [0, [34.829302251908594, 1.0]], [0, [4.7158187628714545, 1.0]], [0, [0.38977969897185144, 1.0]], [1, [8.597013407001045, 1.0]], [1, [0.4891046884553558, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.410254]
bas 1, expnt(s) = [18377.36169073]
bas 2, expnt(s) = [1410.17815257]
bas 3, expnt(s) = [333.07703326]
bas 4, expnt(s) = [103.1140131]
bas 5, expnt(s) = [34.82930225]
bas 6, expnt(s) = [4.71581876]
bas 7, expnt(s) = [0.3897797]
bas 8, expnt(s) = [8.59701341]
bas 9, expnt(s) = [0.48910469]
CPU time:       235.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34341025e+03 2.00418759e+03 1.83773617e+04 3.98774516e+03
 1.41017815e+03 5.81393953e+02 3.33077033e+02 1.96980638e+02
 1.03114013e+02 8.17529234e+01 3.48293023e+01 3.62220983e+01
 4.71581876e+00 8.08505268e+00 3.89779699e-01 1.24631963e+00
 8.59701341e+00 4.29456220e+01 4.89104688e-01 1.19326437e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3229157245857
cond(S) = 82.58752928159967
E1 = -689.1219861381068  E_coul = 184.81900805291224
init E= -504.302978085195
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.683490651062212  LUMO = 71.1538393145461
  mo_energy =
[-1.21672122e+02 -1.32933279e+01 -7.62852872e+00 -7.62852872e+00
 -7.62852872e+00 -1.65201875e+00 -6.83490651e-01 -6.83490651e-01
 -6.83490651e-01  7.11538393e+01  5.13181582e+02  2.54569200e+03
  1.30368291e+04  5.09125993e+04]
E1 = -706.4813121328269  E_coul = 198.80953522658882
cycle= 1 E= -507.671776906238  delta_E= -3.37  |g|= 0.331  |ddm|= 0.303
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.442212
diis-c [-0.19555141  1.        ]
  HOMO = -0.241319849631484  LUMO = 72.4640324924714
  mo_energy =
[-1.20283352e+02 -1.22682470e+01 -6.66275903e+00 -6.66275903e+00
 -6.66275903e+00 -1.16755951e+00 -2.41319850e-01 -2.41319850e-01
 -2.41319850e-01  7.24640325e+01  5.14559618e+02  2.54698880e+03
  1.30379880e+04  5.09136694e+04]
E1 = -706.4410536140585  E_coul = 198.76871915499459
cycle= 2 E= -507.672334459064  delta_E= -0.000558  |g|= 0.00544  |ddm|= 0.0194
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00584853
diis-c [-3.41001244e-05  7.32882860e-04  9.99267117e-01]
  HOMO = -0.241556161559819  LUMO = 72.4600199012539
  mo_energy =
[-1.20293995e+02 -1.22698385e+01 -6.66521454e+00 -6.66521454e+00
 -6.66521454e+00 -1.16764722e+00 -2.41556162e-01 -2.41556162e-01
 -2.41556162e-01  7.24600199e+01  5.14548004e+02  2.54697158e+03
  1.30379668e+04  5.09136467e+04]
E1 = -706.4404242265654  E_coul = 198.76808959859702
cycle= 3 E= -507.672334627968  delta_E= -1.69e-07  |g|= 0.000124  |ddm|= 0.000298
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000167963
diis-c [-6.68058153e-10  3.42099194e-05 -2.89742881e-02  1.02894008e+00]
  HOMO = -0.241559755538524  LUMO = 72.4599554481538
  mo_energy =
[-1.20294167e+02 -1.22698639e+01 -6.66525733e+00 -6.66525733e+00
 -6.66525733e+00 -1.16764833e+00 -2.41559756e-01 -2.41559756e-01
 -2.41559756e-01  7.24599554e+01  5.14547832e+02  2.54697136e+03
  1.30379665e+04  5.09136464e+04]
E1 = -706.4404119493986  E_coul = 198.76807732135046
cycle= 4 E= -507.672334628048  delta_E= -7.98e-11  |g|= 5.46e-07  |ddm|= 5.88e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.4404119493986  E_coul = 198.76807732135046
  HOMO = -0.241559727562575  LUMO = 72.4599559092451
  mo_energy =
[-1.20294166e+02 -1.22698638e+01 -6.66525706e+00 -6.66525706e+00
 -6.66525706e+00 -1.16764832e+00 -2.41559728e-01 -2.41559728e-01
 -2.41559728e-01  7.24599559e+01  5.14547834e+02  2.54697137e+03
  1.30379665e+04  5.09136464e+04]
E1 = -706.4404120143455  E_coul = 198.7680773862974
Extra cycle  E= -507.672334628048  delta_E=    0  |g|= 1.01e-08  |ddm|= 3.08e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 82.58752928159967
E1 = -706.4404120143455  E_coul = 198.7680773862974
init E= -507.672334628048
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.241559727201261  LUMO = 72.4599559156973
  mo_energy =
[-1.20294166e+02 -1.22698638e+01 -6.66525705e+00 -6.66525705e+00
 -6.66525705e+00 -1.16764832e+00 -2.41559727e-01 -2.41559727e-01
 -2.41559727e-01  7.24599559e+01  5.14547834e+02  2.54697137e+03
  1.30379665e+04  5.09136464e+04]
E1 = -706.4404120154319  E_coul = 198.76807738738387
cycle= 1 E= -507.672334628048  delta_E= 1.14e-13  |g|= 2.14e-10  |ddm|= 5.1e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.4404120154319  E_coul = 198.76807738738387
  HOMO = -0.241559727195778  LUMO = 72.4599559158017
  mo_energy =
[-1.20294166e+02 -1.22698638e+01 -6.66525705e+00 -6.66525705e+00
 -6.66525705e+00 -1.16764832e+00 -2.41559727e-01 -2.41559727e-01
 -2.41559727e-01  7.24599559e+01  5.14547834e+02  2.54697137e+03
  1.30379665e+04  5.09136464e+04]
E1 = -706.4404120154525  E_coul = 198.76807738740462
Extra cycle  E= -507.672334628048  delta_E= 1.71e-13  |g|= 1.28e-11  |ddm|= 9.79e-12
    CPU time for scf_cycle      0.99 sec, wall time      0.11 sec
exp = [7.34341025e+03 1.83773617e+04 1.41017815e+03 3.33077033e+02
 1.03114013e+02 3.48293023e+01 4.71581876e+00 3.89779699e-01
 8.59701341e+00 4.89104688e-01]
grad_E = [ 1.10030739e-05 -3.29257465e-06  7.93466470e-05 -1.03040940e-03
  3.26219346e-03 -2.21098604e-03 -1.13576563e-03 -2.62845958e-02
 -7.64338343e-05 -7.07644740e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.45556563        1
[INPUT] 0    0    [1    /1   ]  18378.0119839        1
[INPUT] 0    0    [1    /1   ]  1385.88563096        1
[INPUT] 0    0    [1    /1   ]  332.436816416        1
[INPUT] 0    0    [1    /1   ]  99.9185995423        1
[INPUT] 0    0    [1    /1   ]  33.9482507395        1
[INPUT] 0    0    [1    /1   ]  4.71317619207        1
[INPUT] 0    0    [1    /1   ]  0.390533645592       1
[INPUT] 1    0    [1    /1   ]  8.59828266738        1
[INPUT] 1    0    [1    /1   ]  0.490326784399       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.45556563028, 1.0]], [0, [18378.011983897315, 1.0]], [0, [1385.8856309561902, 1.0]], [0, [332.43681641634333, 1.0]], [0, [99.9185995422535, 1.0]], [0, [33.94825073954728, 1.0]], [0, [4.713176192071236, 1.0]], [0, [0.3905336455919872, 1.0]], [1, [8.598282667382554, 1.0]], [1, [0.49032678439946686, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.45556563]
bas 1, expnt(s) = [18378.0119839]
bas 2, expnt(s) = [1385.88563096]
bas 3, expnt(s) = [332.43681642]
bas 4, expnt(s) = [99.91859954]
bas 5, expnt(s) = [33.94825074]
bas 6, expnt(s) = [4.71317619]
bas 7, expnt(s) = [0.39053365]
bas 8, expnt(s) = [8.59828267]
bas 9, expnt(s) = [0.49032678]
CPU time:       239.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34345557e+03 2.00419686e+03 1.83780120e+04 3.98785099e+03
 1.38588563e+03 5.73866097e+02 3.32436816e+02 1.96696603e+02
 9.99185995e+01 7.98453774e+01 3.39482507e+01 3.55326890e+01
 4.71317619e+00 8.08165451e+00 3.90533646e-01 1.24812725e+00
 8.59828267e+00 4.29535478e+01 4.90326784e-01 1.19699246e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321361542443835
cond(S) = 80.50292686422623
E1 = -689.205287276491  E_coul = 184.87636768344012
init E= -504.328919593051
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68162083122745  LUMO = 68.2365005140601
  mo_energy =
[-1.21668057e+02 -1.32903863e+01 -7.62482154e+00 -7.62482154e+00
 -7.62482154e+00 -1.65089675e+00 -6.81620831e-01 -6.81620831e-01
 -6.81620831e-01  6.82365005e+01  5.01293861e+02  2.50606057e+03
  1.29482815e+04  5.08134456e+04]
E1 = -706.5842003914922  E_coul = 198.9059990717639
cycle= 1 E= -507.678201319728  delta_E= -3.35  |g|= 0.333  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441912
diis-c [-0.19528637  1.        ]
  HOMO = -0.238069097830212  LUMO = 69.5452726445989
  mo_energy =
[-1.20273878e+02 -1.22631515e+01 -6.65664798e+00 -6.65664798e+00
 -6.65664798e+00 -1.16521138e+00 -2.38069098e-01 -2.38069098e-01
 -2.38069098e-01  6.95452726e+01  5.02677287e+02  2.50736398e+03
  1.29494478e+04  5.08145229e+04]
E1 = -706.5416247192272  E_coul = 198.86283223101952
cycle= 2 E= -507.678792488208  delta_E= -0.000591  |g|= 0.00562  |ddm|= 0.0204
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00603375
diis-c [-3.62465343e-05  9.03376153e-04  9.99096624e-01]
  HOMO = -0.238323425935309  LUMO = 69.541136366653
  mo_energy =
[-1.20285037e+02 -1.22648532e+01 -6.65926477e+00 -6.65926477e+00
 -6.65926477e+00 -1.16530584e+00 -2.38323426e-01 -2.38323426e-01
 -2.38323426e-01  6.95411364e+01  5.02665193e+02  2.50734607e+03
  1.29494257e+04  5.08144993e+04]
E1 = -706.5409428606025  E_coul = 198.8621501858606
cycle= 3 E= -507.678792674742  delta_E= -1.87e-07  |g|= 0.000131  |ddm|= 0.000321
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000177466
diis-c [-7.53934031e-10  3.37110825e-05 -2.96883280e-02  1.02965462e+00]
  HOMO = -0.238327426388359  LUMO = 69.5410672929279
  mo_energy =
[-1.20285224e+02 -1.22648814e+01 -6.65931182e+00 -6.65931182e+00
 -6.65931182e+00 -1.16530707e+00 -2.38327426e-01 -2.38327426e-01
 -2.38327426e-01  6.95410673e+01  5.02665007e+02  2.50734583e+03
  1.29494254e+04  5.08144990e+04]
E1 = -706.5409291400978  E_coul = 198.8621364652631
cycle= 4 E= -507.678792674835  delta_E= -9.28e-11  |g|= 5.91e-07  |ddm|= 6.51e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5409291400978  E_coul = 198.8621364652631
  HOMO = -0.238327394490164  LUMO = 69.541067789649
  mo_energy =
[-1.20285223e+02 -1.22648812e+01 -6.65931152e+00 -6.65931152e+00
 -6.65931152e+00 -1.16530706e+00 -2.38327394e-01 -2.38327394e-01
 -2.38327394e-01  6.95410678e+01  5.02665008e+02  2.50734583e+03
  1.29494254e+04  5.08144990e+04]
E1 = -706.5409292139902  E_coul = 198.86213653915556
Extra cycle  E= -507.678792674835  delta_E=    0  |g|= 1.12e-08  |ddm|= 3.5e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34345557e+03 1.83780120e+04 1.38588563e+03 3.32436816e+02
 9.99185995e+01 3.39482507e+01 4.71317619e+00 3.90533646e-01
 8.59828267e+00 4.90326784e-01]
E = -507.67879267483465
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:15:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.45556563        1
[INPUT] 0    0    [1    /1   ]  18378.0119839        1
[INPUT] 0    0    [1    /1   ]  1385.88563096        1
[INPUT] 0    0    [1    /1   ]  332.436816416        1
[INPUT] 0    0    [1    /1   ]  99.9185995423        1
[INPUT] 0    0    [1    /1   ]  33.9482507395        1
[INPUT] 0    0    [1    /1   ]  4.71317619207        1
[INPUT] 0    0    [1    /1   ]  0.390533645592       1
[INPUT] 1    0    [1    /1   ]  8.59828266738        1
[INPUT] 1    0    [1    /1   ]  0.490326784399       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.45556563028, 1.0]], [0, [18378.011983897315, 1.0]], [0, [1385.8856309561902, 1.0]], [0, [332.43681641634333, 1.0]], [0, [99.9185995422535, 1.0]], [0, [33.94825073954728, 1.0]], [0, [4.713176192071236, 1.0]], [0, [0.3905336455919872, 1.0]], [1, [8.598282667382554, 1.0]], [1, [0.49032678439946686, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.45556563]
bas 1, expnt(s) = [18378.0119839]
bas 2, expnt(s) = [1385.88563096]
bas 3, expnt(s) = [332.43681642]
bas 4, expnt(s) = [99.91859954]
bas 5, expnt(s) = [33.94825074]
bas 6, expnt(s) = [4.71317619]
bas 7, expnt(s) = [0.39053365]
bas 8, expnt(s) = [8.59828267]
bas 9, expnt(s) = [0.49032678]
CPU time:       240.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34345557e+03 2.00419686e+03 1.83780120e+04 3.98785099e+03
 1.38588563e+03 5.73866097e+02 3.32436816e+02 1.96696603e+02
 9.99185995e+01 7.98453774e+01 3.39482507e+01 3.55326890e+01
 4.71317619e+00 8.08165451e+00 3.90533646e-01 1.24812725e+00
 8.59828267e+00 4.29535478e+01 4.90326784e-01 1.19699246e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321361542443835
cond(S) = 80.50292686422623
E1 = -689.205287276491  E_coul = 184.87636768344012
init E= -504.328919593051
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68162083122745  LUMO = 68.2365005140601
  mo_energy =
[-1.21668057e+02 -1.32903863e+01 -7.62482154e+00 -7.62482154e+00
 -7.62482154e+00 -1.65089675e+00 -6.81620831e-01 -6.81620831e-01
 -6.81620831e-01  6.82365005e+01  5.01293861e+02  2.50606057e+03
  1.29482815e+04  5.08134456e+04]
E1 = -706.5842003914922  E_coul = 198.9059990717639
cycle= 1 E= -507.678201319728  delta_E= -3.35  |g|= 0.333  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.441912
diis-c [-0.19528637  1.        ]
  HOMO = -0.238069097830212  LUMO = 69.5452726445989
  mo_energy =
[-1.20273878e+02 -1.22631515e+01 -6.65664798e+00 -6.65664798e+00
 -6.65664798e+00 -1.16521138e+00 -2.38069098e-01 -2.38069098e-01
 -2.38069098e-01  6.95452726e+01  5.02677287e+02  2.50736398e+03
  1.29494478e+04  5.08145229e+04]
E1 = -706.5416247192272  E_coul = 198.86283223101952
cycle= 2 E= -507.678792488208  delta_E= -0.000591  |g|= 0.00562  |ddm|= 0.0204
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00603375
diis-c [-3.62465343e-05  9.03376153e-04  9.99096624e-01]
  HOMO = -0.238323425935309  LUMO = 69.541136366653
  mo_energy =
[-1.20285037e+02 -1.22648532e+01 -6.65926477e+00 -6.65926477e+00
 -6.65926477e+00 -1.16530584e+00 -2.38323426e-01 -2.38323426e-01
 -2.38323426e-01  6.95411364e+01  5.02665193e+02  2.50734607e+03
  1.29494257e+04  5.08144993e+04]
E1 = -706.5409428606025  E_coul = 198.8621501858606
cycle= 3 E= -507.678792674742  delta_E= -1.87e-07  |g|= 0.000131  |ddm|= 0.000321
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000177466
diis-c [-7.53934031e-10  3.37110825e-05 -2.96883280e-02  1.02965462e+00]
  HOMO = -0.238327426388359  LUMO = 69.5410672929279
  mo_energy =
[-1.20285224e+02 -1.22648814e+01 -6.65931182e+00 -6.65931182e+00
 -6.65931182e+00 -1.16530707e+00 -2.38327426e-01 -2.38327426e-01
 -2.38327426e-01  6.95410673e+01  5.02665007e+02  2.50734583e+03
  1.29494254e+04  5.08144990e+04]
E1 = -706.5409291400978  E_coul = 198.8621364652631
cycle= 4 E= -507.678792674835  delta_E= -9.28e-11  |g|= 5.91e-07  |ddm|= 6.51e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5409291400978  E_coul = 198.8621364652631
  HOMO = -0.238327394490164  LUMO = 69.541067789649
  mo_energy =
[-1.20285223e+02 -1.22648812e+01 -6.65931152e+00 -6.65931152e+00
 -6.65931152e+00 -1.16530706e+00 -2.38327394e-01 -2.38327394e-01
 -2.38327394e-01  6.95410678e+01  5.02665008e+02  2.50734583e+03
  1.29494254e+04  5.08144990e+04]
E1 = -706.5409292139902  E_coul = 198.86213653915556
Extra cycle  E= -507.678792674835  delta_E=    0  |g|= 1.12e-08  |ddm|= 3.5e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 80.50292686422623
E1 = -706.5409292139902  E_coul = 198.86213653915556
init E= -507.678792674835
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.238327394068106  LUMO = 69.5410677967879
  mo_energy =
[-1.20285223e+02 -1.22648812e+01 -6.65931151e+00 -6.65931151e+00
 -6.65931151e+00 -1.16530706e+00 -2.38327394e-01 -2.38327394e-01
 -2.38327394e-01  6.95410678e+01  5.02665008e+02  2.50734583e+03
  1.29494254e+04  5.08144990e+04]
E1 = -706.5409292152552  E_coul = 198.86213654042083
cycle= 1 E= -507.678792674834  delta_E= 2.27e-13  |g|= 2.42e-10  |ddm|= 5.92e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5409292152552  E_coul = 198.86213654042083
  HOMO = -0.238327394061574  LUMO = 69.5410677969073
  mo_energy =
[-1.20285223e+02 -1.22648812e+01 -6.65931151e+00 -6.65931151e+00
 -6.65931151e+00 -1.16530706e+00 -2.38327394e-01 -2.38327394e-01
 -2.38327394e-01  6.95410678e+01  5.02665008e+02  2.50734583e+03
  1.29494254e+04  5.08144990e+04]
E1 = -706.5409292152799  E_coul = 198.86213654044516
Extra cycle  E= -507.678792674835  delta_E= -3.41e-13  |g|= 1.04e-11  |ddm|= 1.15e-11
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34345557e+03 1.83780120e+04 1.38588563e+03 3.32436816e+02
 9.99185995e+01 3.39482507e+01 4.71317619e+00 3.90533646e-01
 8.59828267e+00 4.90326784e-01]
grad_E = [ 1.37040704e-05 -3.37971736e-06 -9.99675461e-06 -2.18901253e-04
  7.66001361e-04  7.50906616e-04  1.96460897e-03 -1.06432057e-02
  2.93329409e-04 -2.42910231e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.34239341        1
[INPUT] 0    0    [1    /1   ]  18376.2524083        1
[INPUT] 0    0    [1    /1   ]  1450.56462822        1
[INPUT] 0    0    [1    /1   ]  342.049852555        1
[INPUT] 0    0    [1    /1   ]  98.9830551151        1
[INPUT] 0    0    [1    /1   ]  33.3953220818        1
[INPUT] 0    0    [1    /1   ]  4.71246032707        1
[INPUT] 0    0    [1    /1   ]  0.391137287898       1
[INPUT] 1    0    [1    /1   ]  8.59903551113        1
[INPUT] 1    0    [1    /1   ]  0.491253059773       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.342393411381, 1.0]], [0, [18376.252408275457, 1.0]], [0, [1450.5646282161981, 1.0]], [0, [342.04985255508376, 1.0]], [0, [98.98305511506734, 1.0]], [0, [33.39532208182798, 1.0]], [0, [4.712460327067974, 1.0]], [0, [0.3911372878975401, 1.0]], [1, [8.599035511129745, 1.0]], [1, [0.4912530597731555, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.34239341]
bas 1, expnt(s) = [18376.25240828]
bas 2, expnt(s) = [1450.56462822]
bas 3, expnt(s) = [342.04985256]
bas 4, expnt(s) = [98.98305512]
bas 5, expnt(s) = [33.39532208]
bas 6, expnt(s) = [4.71246033]
bas 7, expnt(s) = [0.39113729]
bas 8, expnt(s) = [8.59903551]
bas 9, expnt(s) = [0.49125306]
CPU time:       244.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34334239e+03 2.00417370e+03 1.83762524e+04 3.98756463e+03
 1.45056463e+03 5.93837797e+02 3.42049853e+02 2.00947256e+02
 9.89830551e+01 7.92840205e+01 3.33953221e+01 3.50977480e+01
 4.71246033e+00 8.08073388e+00 3.91137288e-01 1.24957388e+00
 8.59903551e+00 4.29582490e+01 4.91253060e-01 1.19981967e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3201293778831
cond(S) = 76.59504232279834
E1 = -689.253697715047  E_coul = 184.91760667920929
init E= -504.336091035838
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680216686202115  LUMO = 66.9210953188775
  mo_energy =
[-1.21664734e+02 -1.32871374e+01 -7.62218734e+00 -7.62218734e+00
 -7.62218734e+00 -1.64999073e+00 -6.80216686e-01 -6.80216686e-01
 -6.80216686e-01  6.69210953e+01  5.04369425e+02  2.58943961e+03
  1.31699577e+04  5.10661470e+04]
E1 = -706.6510946179935  E_coul = 198.97164703078602
cycle= 1 E= -507.679447587208  delta_E= -3.34  |g|= 0.334  |ddm|=  0.3
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.439561
diis-c [-0.19321423  1.        ]
  HOMO = -0.235609291718279  LUMO = 68.2295117640793
  mo_energy =
[-1.20268102e+02 -1.22584847e+01 -6.65248283e+00 -6.65248283e+00
 -6.65248283e+00 -1.16333618e+00 -2.35609292e-01 -2.35609292e-01
 -2.35609292e-01  6.82295118e+01  5.05754682e+02  2.59074133e+03
  1.31711252e+04  5.10672266e+04]
E1 = -706.6073511032457  E_coul = 198.92729534473347
cycle= 2 E= -507.680055758512  delta_E= -0.000608  |g|= 0.00571  |ddm|= 0.0207
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00613196
diis-c [-3.73877050e-05  1.04950467e-03  9.98950495e-01]
  HOMO = -0.235872800963632  LUMO = 68.22530533504
  mo_energy =
[-1.20279528e+02 -1.22602409e+01 -6.65517863e+00 -6.65517863e+00
 -6.65517863e+00 -1.16343405e+00 -2.35872801e-01 -2.35872801e-01
 -2.35872801e-01  6.82253053e+01  5.05742229e+02  2.59072288e+03
  1.31711027e+04  5.10672025e+04]
E1 = -706.6066433000029  E_coul = 198.92658734591163
cycle= 3 E= -507.680055954091  delta_E= -1.96e-07  |g|= 0.000135  |ddm|= 0.00033
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000182633
diis-c [-8.00110799e-10  3.31102985e-05 -3.00700238e-02  1.03003691e+00]
  HOMO = -0.235877028283799  LUMO = 68.2252336579264
  mo_energy =
[-1.20279723e+02 -1.22602705e+01 -6.65522799e+00 -6.65522799e+00
 -6.65522799e+00 -1.16343536e+00 -2.35877028e-01 -2.35877028e-01
 -2.35877028e-01  6.82252337e+01  5.05742034e+02  2.59072263e+03
  1.31711024e+04  5.10672022e+04]
E1 = -706.606628807239  E_coul = 198.92657285304767
cycle= 4 E= -507.680055954191  delta_E= -1e-10  |g|= 6.12e-07  |ddm|= 6.81e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.606628807239  E_coul = 198.92657285304767
  HOMO = -0.235876994351913  LUMO = 68.2252341734194
  mo_energy =
[-1.20279722e+02 -1.22602703e+01 -6.65522767e+00 -6.65522767e+00
 -6.65522767e+00 -1.16343535e+00 -2.35876994e-01 -2.35876994e-01
 -2.35876994e-01  6.82252342e+01  5.05742036e+02  2.59072263e+03
  1.31711024e+04  5.10672022e+04]
E1 = -706.6066288855918  E_coul = 198.92657293140053
Extra cycle  E= -507.680055954191  delta_E=    0  |g|= 1.17e-08  |ddm|= 3.68e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34334239e+03 1.83762524e+04 1.45056463e+03 3.42049853e+02
 9.89830551e+01 3.33953221e+01 4.71246033e+00 3.91137288e-01
 8.59903551e+00 4.91253060e-01]
E = -507.6800559541913
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.34239341        1
[INPUT] 0    0    [1    /1   ]  18376.2524083        1
[INPUT] 0    0    [1    /1   ]  1450.56462822        1
[INPUT] 0    0    [1    /1   ]  342.049852555        1
[INPUT] 0    0    [1    /1   ]  98.9830551151        1
[INPUT] 0    0    [1    /1   ]  33.3953220818        1
[INPUT] 0    0    [1    /1   ]  4.71246032707        1
[INPUT] 0    0    [1    /1   ]  0.391137287898       1
[INPUT] 1    0    [1    /1   ]  8.59903551113        1
[INPUT] 1    0    [1    /1   ]  0.491253059773       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.342393411381, 1.0]], [0, [18376.252408275457, 1.0]], [0, [1450.5646282161981, 1.0]], [0, [342.04985255508376, 1.0]], [0, [98.98305511506734, 1.0]], [0, [33.39532208182798, 1.0]], [0, [4.712460327067974, 1.0]], [0, [0.3911372878975401, 1.0]], [1, [8.599035511129745, 1.0]], [1, [0.4912530597731555, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.34239341]
bas 1, expnt(s) = [18376.25240828]
bas 2, expnt(s) = [1450.56462822]
bas 3, expnt(s) = [342.04985256]
bas 4, expnt(s) = [98.98305512]
bas 5, expnt(s) = [33.39532208]
bas 6, expnt(s) = [4.71246033]
bas 7, expnt(s) = [0.39113729]
bas 8, expnt(s) = [8.59903551]
bas 9, expnt(s) = [0.49125306]
CPU time:       244.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34334239e+03 2.00417370e+03 1.83762524e+04 3.98756463e+03
 1.45056463e+03 5.93837797e+02 3.42049853e+02 2.00947256e+02
 9.89830551e+01 7.92840205e+01 3.33953221e+01 3.50977480e+01
 4.71246033e+00 8.08073388e+00 3.91137288e-01 1.24957388e+00
 8.59903551e+00 4.29582490e+01 4.91253060e-01 1.19981967e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3201293778831
cond(S) = 76.59504232279834
E1 = -689.253697715047  E_coul = 184.91760667920929
init E= -504.336091035838
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680216686202115  LUMO = 66.9210953188775
  mo_energy =
[-1.21664734e+02 -1.32871374e+01 -7.62218734e+00 -7.62218734e+00
 -7.62218734e+00 -1.64999073e+00 -6.80216686e-01 -6.80216686e-01
 -6.80216686e-01  6.69210953e+01  5.04369425e+02  2.58943961e+03
  1.31699577e+04  5.10661470e+04]
E1 = -706.6510946179935  E_coul = 198.97164703078602
cycle= 1 E= -507.679447587208  delta_E= -3.34  |g|= 0.334  |ddm|=  0.3
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.439561
diis-c [-0.19321423  1.        ]
  HOMO = -0.235609291718279  LUMO = 68.2295117640793
  mo_energy =
[-1.20268102e+02 -1.22584847e+01 -6.65248283e+00 -6.65248283e+00
 -6.65248283e+00 -1.16333618e+00 -2.35609292e-01 -2.35609292e-01
 -2.35609292e-01  6.82295118e+01  5.05754682e+02  2.59074133e+03
  1.31711252e+04  5.10672266e+04]
E1 = -706.6073511032457  E_coul = 198.92729534473347
cycle= 2 E= -507.680055758512  delta_E= -0.000608  |g|= 0.00571  |ddm|= 0.0207
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00613196
diis-c [-3.73877050e-05  1.04950467e-03  9.98950495e-01]
  HOMO = -0.235872800963632  LUMO = 68.22530533504
  mo_energy =
[-1.20279528e+02 -1.22602409e+01 -6.65517863e+00 -6.65517863e+00
 -6.65517863e+00 -1.16343405e+00 -2.35872801e-01 -2.35872801e-01
 -2.35872801e-01  6.82253053e+01  5.05742229e+02  2.59072288e+03
  1.31711027e+04  5.10672025e+04]
E1 = -706.6066433000029  E_coul = 198.92658734591163
cycle= 3 E= -507.680055954091  delta_E= -1.96e-07  |g|= 0.000135  |ddm|= 0.00033
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000182633
diis-c [-8.00110799e-10  3.31102985e-05 -3.00700238e-02  1.03003691e+00]
  HOMO = -0.235877028283799  LUMO = 68.2252336579264
  mo_energy =
[-1.20279723e+02 -1.22602705e+01 -6.65522799e+00 -6.65522799e+00
 -6.65522799e+00 -1.16343536e+00 -2.35877028e-01 -2.35877028e-01
 -2.35877028e-01  6.82252337e+01  5.05742034e+02  2.59072263e+03
  1.31711024e+04  5.10672022e+04]
E1 = -706.606628807239  E_coul = 198.92657285304767
cycle= 4 E= -507.680055954191  delta_E= -1e-10  |g|= 6.12e-07  |ddm|= 6.81e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.606628807239  E_coul = 198.92657285304767
  HOMO = -0.235876994351913  LUMO = 68.2252341734194
  mo_energy =
[-1.20279722e+02 -1.22602703e+01 -6.65522767e+00 -6.65522767e+00
 -6.65522767e+00 -1.16343535e+00 -2.35876994e-01 -2.35876994e-01
 -2.35876994e-01  6.82252342e+01  5.05742036e+02  2.59072263e+03
  1.31711024e+04  5.10672022e+04]
E1 = -706.6066288855918  E_coul = 198.92657293140053
Extra cycle  E= -507.680055954191  delta_E=    0  |g|= 1.17e-08  |ddm|= 3.68e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 76.59504232279834
E1 = -706.6066288855918  E_coul = 198.92657293140053
init E= -507.680055954191
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.235876993898223  LUMO = 68.2252341808982
  mo_energy =
[-1.20279722e+02 -1.22602703e+01 -6.65522766e+00 -6.65522766e+00
 -6.65522766e+00 -1.16343535e+00 -2.35876994e-01 -2.35876994e-01
 -2.35876994e-01  6.82252342e+01  5.05742036e+02  2.59072263e+03
  1.31711024e+04  5.10672022e+04]
E1 = -706.6066288869474  E_coul = 198.92657293275607
cycle= 1 E= -507.680055954191  delta_E= -5.68e-14  |g|= 2.6e-10  |ddm|= 6.28e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.6066288869474  E_coul = 198.92657293275607
  HOMO = -0.23587699389114  LUMO = 68.2252341810264
  mo_energy =
[-1.20279722e+02 -1.22602703e+01 -6.65522766e+00 -6.65522766e+00
 -6.65522766e+00 -1.16343535e+00 -2.35876994e-01 -2.35876994e-01
 -2.35876994e-01  6.82252342e+01  5.05742036e+02  2.59072263e+03
  1.31711024e+04  5.10672022e+04]
E1 = -706.6066288869732  E_coul = 198.92657293278202
Extra cycle  E= -507.680055954191  delta_E= 1.71e-13  |g|= 1.34e-11  |ddm|= 1.23e-11
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34334239e+03 1.83762524e+04 1.45056463e+03 3.42049853e+02
 9.89830551e+01 3.33953221e+01 4.71246033e+00 3.91137288e-01
 8.59903551e+00 4.91253060e-01]
grad_E = [ 1.11320598e-05 -3.31263592e-06 -1.16346733e-06  1.76741861e-04
 -9.30834802e-04  1.86726056e-03  2.61199623e-03  2.21602402e-03
  1.47708042e-04  1.11015373e-02]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.38351532        1
[INPUT] 0    0    [1    /1   ]  18376.9107527        1
[INPUT] 0    0    [1    /1   ]  1426.48890547        1
[INPUT] 0    0    [1    /1   ]  337.861389265        1
[INPUT] 0    0    [1    /1   ]  98.6968554763        1
[INPUT] 0    0    [1    /1   ]  33.318878492         1
[INPUT] 0    0    [1    /1   ]  4.71092871812        1
[INPUT] 0    0    [1    /1   ]  0.391060296046       1
[INPUT] 1    0    [1    /1   ]  8.59882740435        1
[INPUT] 1    0    [1    /1   ]  0.49111011952        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.383515324848, 1.0]], [0, [18376.910752722026, 1.0]], [0, [1426.4889054726425, 1.0]], [0, [337.86138926493186, 1.0]], [0, [98.6968554762968, 1.0]], [0, [33.318878492014555, 1.0]], [0, [4.710928718123949, 1.0]], [0, [0.3910602960464964, 1.0]], [1, [8.598827404347858, 1.0]], [1, [0.49111011952023875, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.38351532]
bas 1, expnt(s) = [18376.91075272]
bas 2, expnt(s) = [1426.48890547]
bas 3, expnt(s) = [337.86138926]
bas 4, expnt(s) = [98.69685548]
bas 5, expnt(s) = [33.31887849]
bas 6, expnt(s) = [4.71092872]
bas 7, expnt(s) = [0.3910603]
bas 8, expnt(s) = [8.5988274]
bas 9, expnt(s) = [0.49111012]
CPU time:       248.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34338352e+03 2.00418211e+03 1.83769108e+04 3.98767177e+03
 1.42648891e+03 5.86430194e+02 3.37861389e+02 1.99098940e+02
 9.86968555e+01 7.91120269e+01 3.33188785e+01 3.50374754e+01
 4.71092872e+00 8.07876404e+00 3.91060296e-01 1.24938940e+00
 8.59882740e+00 4.29569494e+01 4.91110120e-01 1.19938330e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320350643360694
cond(S) = 77.29811157457388
E1 = -689.246345492302  E_coul = 184.90947401923722
init E= -504.336871473065
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680423667591927  LUMO = 66.6438003962696
  mo_energy =
[-1.21666069e+02 -1.32874854e+01 -7.62277760e+00 -7.62277760e+00
 -7.62277760e+00 -1.65005699e+00 -6.80423668e-01 -6.80423668e-01
 -6.80423668e-01  6.66438004e+01  5.00118076e+02  2.55336727e+03
  1.30824685e+04  5.09671975e+04]
E1 = -706.6367382436938  E_coul = 198.95694176447103
cycle= 1 E= -507.679796479223  delta_E= -3.34  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440105
diis-c [-0.19369205  1.        ]
  HOMO = -0.236019074760273  LUMO = 67.9509937117065
  mo_energy =
[-1.20270360e+02 -1.22592182e+01 -6.65349617e+00 -6.65349617e+00
 -6.65349617e+00 -1.16360431e+00 -2.36019075e-01 -2.36019075e-01
 -2.36019075e-01  6.79509937e+01  5.01502327e+02  2.55466908e+03
  1.30836348e+04  5.09682755e+04]
E1 = -706.5927113568862  E_coul = 198.91230221274355
cycle= 2 E= -507.680409144143  delta_E= -0.000613  |g|= 0.00572  |ddm|= 0.0209
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00615827
diis-c [-3.77062461e-05  1.06008727e-03  9.98939913e-01]
  HOMO = -0.236284445797806  LUMO = 67.9467693132025
  mo_energy =
[-1.20281851e+02 -1.22609870e+01 -6.65621199e+00 -6.65621199e+00
 -6.65621199e+00 -1.16370289e+00 -2.36284446e-01 -2.36284446e-01
 -2.36284446e-01  6.79467693e+01  5.01489846e+02  2.55465059e+03
  1.30836121e+04  5.09682513e+04]
E1 = -706.5919974935236  E_coul = 198.91158815182868
cycle= 3 E= -507.680409341695  delta_E= -1.98e-07  |g|= 0.000136  |ddm|= 0.000333
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000183678
diis-c [-8.10281450e-10  3.29904039e-05 -3.01151782e-02  1.03008219e+00]
  HOMO = -0.236288712918108  LUMO = 67.946697105054
  mo_energy =
[-1.20282048e+02 -1.22610169e+01 -6.65626182e+00 -6.65626182e+00
 -6.65626182e+00 -1.16370422e+00 -2.36288713e-01 -2.36288713e-01
 -2.36288713e-01  6.79466971e+01  5.01489649e+02  2.55465034e+03
  1.30836119e+04  5.09682510e+04]
E1 = -706.5919828441915  E_coul = 198.91157350239533
cycle= 4 E= -507.680409341796  delta_E= -1.01e-10  |g|= 6.17e-07  |ddm|= 6.88e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5919828441915  E_coul = 198.91157350239533
  HOMO = -0.23628867859795  LUMO = 67.9466976244861
  mo_energy =
[-1.20282047e+02 -1.22610166e+01 -6.65626150e+00 -6.65626150e+00
 -6.65626150e+00 -1.16370420e+00 -2.36288679e-01 -2.36288679e-01
 -2.36288679e-01  6.79466976e+01  5.01489651e+02  2.55465034e+03
  1.30836119e+04  5.09682510e+04]
E1 = -706.591982923465  E_coul = 198.91157358166856
Extra cycle  E= -507.680409341796  delta_E= -2.27e-13  |g|= 1.18e-08  |ddm|= 3.73e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34338352e+03 1.83769108e+04 1.42648891e+03 3.37861389e+02
 9.86968555e+01 3.33188785e+01 4.71092872e+00 3.91060296e-01
 8.59882740e+00 4.91110120e-01]
E = -507.68040934179646
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.38351532        1
[INPUT] 0    0    [1    /1   ]  18376.9107527        1
[INPUT] 0    0    [1    /1   ]  1426.48890547        1
[INPUT] 0    0    [1    /1   ]  337.861389265        1
[INPUT] 0    0    [1    /1   ]  98.6968554763        1
[INPUT] 0    0    [1    /1   ]  33.318878492         1
[INPUT] 0    0    [1    /1   ]  4.71092871812        1
[INPUT] 0    0    [1    /1   ]  0.391060296046       1
[INPUT] 1    0    [1    /1   ]  8.59882740435        1
[INPUT] 1    0    [1    /1   ]  0.49111011952        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.383515324848, 1.0]], [0, [18376.910752722026, 1.0]], [0, [1426.4889054726425, 1.0]], [0, [337.86138926493186, 1.0]], [0, [98.6968554762968, 1.0]], [0, [33.318878492014555, 1.0]], [0, [4.710928718123949, 1.0]], [0, [0.3910602960464964, 1.0]], [1, [8.598827404347858, 1.0]], [1, [0.49111011952023875, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.38351532]
bas 1, expnt(s) = [18376.91075272]
bas 2, expnt(s) = [1426.48890547]
bas 3, expnt(s) = [337.86138926]
bas 4, expnt(s) = [98.69685548]
bas 5, expnt(s) = [33.31887849]
bas 6, expnt(s) = [4.71092872]
bas 7, expnt(s) = [0.3910603]
bas 8, expnt(s) = [8.5988274]
bas 9, expnt(s) = [0.49111012]
CPU time:       249.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34338352e+03 2.00418211e+03 1.83769108e+04 3.98767177e+03
 1.42648891e+03 5.86430194e+02 3.37861389e+02 1.99098940e+02
 9.86968555e+01 7.91120269e+01 3.33188785e+01 3.50374754e+01
 4.71092872e+00 8.07876404e+00 3.91060296e-01 1.24938940e+00
 8.59882740e+00 4.29569494e+01 4.91110120e-01 1.19938330e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320350643360694
cond(S) = 77.29811157457388
E1 = -689.246345492302  E_coul = 184.90947401923722
init E= -504.336871473065
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680423667591927  LUMO = 66.6438003962696
  mo_energy =
[-1.21666069e+02 -1.32874854e+01 -7.62277760e+00 -7.62277760e+00
 -7.62277760e+00 -1.65005699e+00 -6.80423668e-01 -6.80423668e-01
 -6.80423668e-01  6.66438004e+01  5.00118076e+02  2.55336727e+03
  1.30824685e+04  5.09671975e+04]
E1 = -706.6367382436938  E_coul = 198.95694176447103
cycle= 1 E= -507.679796479223  delta_E= -3.34  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440105
diis-c [-0.19369205  1.        ]
  HOMO = -0.236019074760273  LUMO = 67.9509937117065
  mo_energy =
[-1.20270360e+02 -1.22592182e+01 -6.65349617e+00 -6.65349617e+00
 -6.65349617e+00 -1.16360431e+00 -2.36019075e-01 -2.36019075e-01
 -2.36019075e-01  6.79509937e+01  5.01502327e+02  2.55466908e+03
  1.30836348e+04  5.09682755e+04]
E1 = -706.5927113568862  E_coul = 198.91230221274355
cycle= 2 E= -507.680409144143  delta_E= -0.000613  |g|= 0.00572  |ddm|= 0.0209
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00615827
diis-c [-3.77062461e-05  1.06008727e-03  9.98939913e-01]
  HOMO = -0.236284445797806  LUMO = 67.9467693132025
  mo_energy =
[-1.20281851e+02 -1.22609870e+01 -6.65621199e+00 -6.65621199e+00
 -6.65621199e+00 -1.16370289e+00 -2.36284446e-01 -2.36284446e-01
 -2.36284446e-01  6.79467693e+01  5.01489846e+02  2.55465059e+03
  1.30836121e+04  5.09682513e+04]
E1 = -706.5919974935236  E_coul = 198.91158815182868
cycle= 3 E= -507.680409341695  delta_E= -1.98e-07  |g|= 0.000136  |ddm|= 0.000333
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000183678
diis-c [-8.10281450e-10  3.29904039e-05 -3.01151782e-02  1.03008219e+00]
  HOMO = -0.236288712918108  LUMO = 67.946697105054
  mo_energy =
[-1.20282048e+02 -1.22610169e+01 -6.65626182e+00 -6.65626182e+00
 -6.65626182e+00 -1.16370422e+00 -2.36288713e-01 -2.36288713e-01
 -2.36288713e-01  6.79466971e+01  5.01489649e+02  2.55465034e+03
  1.30836119e+04  5.09682510e+04]
E1 = -706.5919828441915  E_coul = 198.91157350239533
cycle= 4 E= -507.680409341796  delta_E= -1.01e-10  |g|= 6.17e-07  |ddm|= 6.88e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5919828441915  E_coul = 198.91157350239533
  HOMO = -0.23628867859795  LUMO = 67.9466976244861
  mo_energy =
[-1.20282047e+02 -1.22610166e+01 -6.65626150e+00 -6.65626150e+00
 -6.65626150e+00 -1.16370420e+00 -2.36288679e-01 -2.36288679e-01
 -2.36288679e-01  6.79466976e+01  5.01489651e+02  2.55465034e+03
  1.30836119e+04  5.09682510e+04]
E1 = -706.591982923465  E_coul = 198.91157358166856
Extra cycle  E= -507.680409341796  delta_E= -2.27e-13  |g|= 1.18e-08  |ddm|= 3.73e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 77.29811157457388
E1 = -706.591982923465  E_coul = 198.91157358166856
init E= -507.680409341796
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236288678138387  LUMO = 67.9466976320411
  mo_energy =
[-1.20282047e+02 -1.22610166e+01 -6.65626149e+00 -6.65626149e+00
 -6.65626149e+00 -1.16370420e+00 -2.36288678e-01 -2.36288678e-01
 -2.36288678e-01  6.79466976e+01  5.01489651e+02  2.55465034e+03
  1.30836119e+04  5.09682510e+04]
E1 = -706.5919829248377  E_coul = 198.9115735830413
cycle= 1 E= -507.680409341796  delta_E= 1.14e-13  |g|= 2.61e-10  |ddm|= 6.36e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5919829248377  E_coul = 198.9115735830413
  HOMO = -0.236288678131209  LUMO = 67.9466976321709
  mo_energy =
[-1.20282047e+02 -1.22610166e+01 -6.65626149e+00 -6.65626149e+00
 -6.65626149e+00 -1.16370420e+00 -2.36288678e-01 -2.36288678e-01
 -2.36288678e-01  6.79466976e+01  5.01489651e+02  2.55465034e+03
  1.30836119e+04  5.09682510e+04]
E1 = -706.5919829248642  E_coul = 198.91157358306782
Extra cycle  E= -507.680409341796  delta_E=    0  |g|= 1.07e-11  |ddm|= 1.25e-11
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34338352e+03 1.83769108e+04 1.42648891e+03 3.37861389e+02
 9.86968555e+01 3.33188785e+01 4.71092872e+00 3.91060296e-01
 8.59882740e+00 4.91110120e-01]
grad_E = [ 1.20122390e-05 -3.33900275e-06 -3.88625733e-06  4.75179021e-05
 -2.36329683e-04  8.58105488e-04  1.46973375e-03  9.11803606e-04
 -7.21310693e-05  5.48225387e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:08 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40164782        1
[INPUT] 0    0    [1    /1   ]  18377.229346         1
[INPUT] 0    0    [1    /1   ]  1415.0195406         1
[INPUT] 0    0    [1    /1   ]  334.911082113        1
[INPUT] 0    0    [1    /1   ]  97.8997699168        1
[INPUT] 0    0    [1    /1   ]  33.0741877269        1
[INPUT] 0    0    [1    /1   ]  4.7091451943         1
[INPUT] 0    0    [1    /1   ]  0.39103267664        1
[INPUT] 1    0    [1    /1   ]  8.59891119691        1
[INPUT] 1    0    [1    /1   ]  0.491052553147       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.401647818015, 1.0]], [0, [18377.22934603018, 1.0]], [0, [1415.019540601787, 1.0]], [0, [334.9110821130277, 1.0]], [0, [97.89976991676035, 1.0]], [0, [33.074187726859485, 1.0]], [0, [4.709145194304613, 1.0]], [0, [0.3910326766396716, 1.0]], [1, [8.59891119691489, 1.0]], [1, [0.49105255314716684, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40164782]
bas 1, expnt(s) = [18377.22934603]
bas 2, expnt(s) = [1415.0195406]
bas 3, expnt(s) = [334.91108211]
bas 4, expnt(s) = [97.89976992]
bas 5, expnt(s) = [33.07418773]
bas 6, expnt(s) = [4.70914519]
bas 7, expnt(s) = [0.39103268]
bas 8, expnt(s) = [8.5989112]
bas 9, expnt(s) = [0.49105255]
CPU time:       253.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340165e+03 2.00418583e+03 1.83772293e+04 3.98772362e+03
 1.41501954e+03 5.82890332e+02 3.34911082e+02 1.97793567e+02
 9.78997699e+01 7.86323541e+01 3.30741877e+01 3.48443137e+01
 4.70914519e+00 8.07647001e+00 3.91032677e-01 1.24932322e+00
 8.59891120e+00 4.29574727e+01 4.91052553e-01 1.19920756e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32046367342708
cond(S) = 77.20201377500699
E1 = -689.2447083164002  E_coul = 184.90613718515698
init E= -504.338571131243
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68050205248809  LUMO = 65.8740041698759
  mo_energy =
[-1.21666450e+02 -1.32877197e+01 -7.62305257e+00 -7.62305257e+00
 -7.62305257e+00 -1.65005505e+00 -6.80502052e-01 -6.80502052e-01
 -6.80502052e-01  6.58740042e+01  4.94933169e+02  2.53025427e+03
  1.30344725e+04  5.09142169e+04]
E1 = -706.6315154552545  E_coul = 198.9516454445412
cycle= 1 E= -507.679870010713  delta_E= -3.34  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440257
diis-c [-0.19382646  1.        ]
  HOMO = -0.236192989943471  LUMO = 67.1795345203356
  mo_energy =
[-1.20270852e+02 -1.22595965e+01 -6.65389249e+00 -6.65389249e+00
 -6.65389249e+00 -1.16371435e+00 -2.36192990e-01 -2.36192990e-01
 -2.36192990e-01  6.71795345e+01  4.96317156e+02  2.53155625e+03
  1.30356383e+04  5.09152942e+04]
E1 = -706.5867725157831  E_coul = 198.90627910419593
cycle= 2 E= -507.680493411587  delta_E= -0.000623  |g|= 0.00577  |ddm|= 0.0212
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00621353
diis-c [-3.83677064e-05  1.11226363e-03  9.98887736e-01]
  HOMO = -0.236463549328062  LUMO = 67.1752697886572
  mo_energy =
[-1.20282502e+02 -1.22613989e+01 -6.65665866e+00 -6.65665866e+00
 -6.65665866e+00 -1.16381492e+00 -2.36463549e-01 -2.36463549e-01
 -2.36463549e-01  6.71752698e+01  4.96304542e+02  2.53153757e+03
  1.30356154e+04  5.09152697e+04]
E1 = -706.5860425336688  E_coul = 198.9055489190971
cycle= 3 E= -507.680493614572  delta_E= -2.03e-07  |g|= 0.000138  |ddm|= 0.00034
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000186426
diis-c [-8.37232645e-10  3.28100484e-05 -3.02979281e-02  1.03026512e+00]
  HOMO = -0.236467938283335  LUMO = 67.1751961395127
  mo_energy =
[-1.20282703e+02 -1.22614296e+01 -6.65670984e+00 -6.65670984e+00
 -6.65670984e+00 -1.16381629e+00 -2.36467938e-01 -2.36467938e-01
 -2.36467938e-01  6.71751961e+01  4.96304341e+02  2.53153731e+03
  1.30356151e+04  5.09152694e+04]
E1 = -706.5860274318196  E_coul = 198.90553381714187
cycle= 4 E= -507.680493614678  delta_E= -1.06e-10  |g|= 6.31e-07  |ddm|= 7.08e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5860274318196  E_coul = 198.90553381714187
  HOMO = -0.236467902804748  LUMO = 67.1751966694217
  mo_energy =
[-1.20282702e+02 -1.22614294e+01 -6.65670951e+00 -6.65670951e+00
 -6.65670951e+00 -1.16381627e+00 -2.36467903e-01 -2.36467903e-01
 -2.36467903e-01  6.71751967e+01  4.96304343e+02  2.53153731e+03
  1.30356151e+04  5.09152694e+04]
E1 = -706.5860275137744  E_coul = 198.9055338990968
Extra cycle  E= -507.680493614678  delta_E= 1.14e-13  |g|= 1.21e-08  |ddm|= 3.86e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34340165e+03 1.83772293e+04 1.41501954e+03 3.34911082e+02
 9.78997699e+01 3.30741877e+01 4.70914519e+00 3.91032677e-01
 8.59891120e+00 4.91052553e-01]
E = -507.68049361467763
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:08 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40164782        1
[INPUT] 0    0    [1    /1   ]  18377.229346         1
[INPUT] 0    0    [1    /1   ]  1415.0195406         1
[INPUT] 0    0    [1    /1   ]  334.911082113        1
[INPUT] 0    0    [1    /1   ]  97.8997699168        1
[INPUT] 0    0    [1    /1   ]  33.0741877269        1
[INPUT] 0    0    [1    /1   ]  4.7091451943         1
[INPUT] 0    0    [1    /1   ]  0.39103267664        1
[INPUT] 1    0    [1    /1   ]  8.59891119691        1
[INPUT] 1    0    [1    /1   ]  0.491052553147       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.401647818015, 1.0]], [0, [18377.22934603018, 1.0]], [0, [1415.019540601787, 1.0]], [0, [334.9110821130277, 1.0]], [0, [97.89976991676035, 1.0]], [0, [33.074187726859485, 1.0]], [0, [4.709145194304613, 1.0]], [0, [0.3910326766396716, 1.0]], [1, [8.59891119691489, 1.0]], [1, [0.49105255314716684, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40164782]
bas 1, expnt(s) = [18377.22934603]
bas 2, expnt(s) = [1415.0195406]
bas 3, expnt(s) = [334.91108211]
bas 4, expnt(s) = [97.89976992]
bas 5, expnt(s) = [33.07418773]
bas 6, expnt(s) = [4.70914519]
bas 7, expnt(s) = [0.39103268]
bas 8, expnt(s) = [8.5989112]
bas 9, expnt(s) = [0.49105255]
CPU time:       253.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340165e+03 2.00418583e+03 1.83772293e+04 3.98772362e+03
 1.41501954e+03 5.82890332e+02 3.34911082e+02 1.97793567e+02
 9.78997699e+01 7.86323541e+01 3.30741877e+01 3.48443137e+01
 4.70914519e+00 8.07647001e+00 3.91032677e-01 1.24932322e+00
 8.59891120e+00 4.29574727e+01 4.91052553e-01 1.19920756e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32046367342708
cond(S) = 77.20201377500699
E1 = -689.2447083164002  E_coul = 184.90613718515698
init E= -504.338571131243
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.68050205248809  LUMO = 65.8740041698759
  mo_energy =
[-1.21666450e+02 -1.32877197e+01 -7.62305257e+00 -7.62305257e+00
 -7.62305257e+00 -1.65005505e+00 -6.80502052e-01 -6.80502052e-01
 -6.80502052e-01  6.58740042e+01  4.94933169e+02  2.53025427e+03
  1.30344725e+04  5.09142169e+04]
E1 = -706.6315154552545  E_coul = 198.9516454445412
cycle= 1 E= -507.679870010713  delta_E= -3.34  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440257
diis-c [-0.19382646  1.        ]
  HOMO = -0.236192989943471  LUMO = 67.1795345203356
  mo_energy =
[-1.20270852e+02 -1.22595965e+01 -6.65389249e+00 -6.65389249e+00
 -6.65389249e+00 -1.16371435e+00 -2.36192990e-01 -2.36192990e-01
 -2.36192990e-01  6.71795345e+01  4.96317156e+02  2.53155625e+03
  1.30356383e+04  5.09152942e+04]
E1 = -706.5867725157831  E_coul = 198.90627910419593
cycle= 2 E= -507.680493411587  delta_E= -0.000623  |g|= 0.00577  |ddm|= 0.0212
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00621353
diis-c [-3.83677064e-05  1.11226363e-03  9.98887736e-01]
  HOMO = -0.236463549328062  LUMO = 67.1752697886572
  mo_energy =
[-1.20282502e+02 -1.22613989e+01 -6.65665866e+00 -6.65665866e+00
 -6.65665866e+00 -1.16381492e+00 -2.36463549e-01 -2.36463549e-01
 -2.36463549e-01  6.71752698e+01  4.96304542e+02  2.53153757e+03
  1.30356154e+04  5.09152697e+04]
E1 = -706.5860425336688  E_coul = 198.9055489190971
cycle= 3 E= -507.680493614572  delta_E= -2.03e-07  |g|= 0.000138  |ddm|= 0.00034
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000186426
diis-c [-8.37232645e-10  3.28100484e-05 -3.02979281e-02  1.03026512e+00]
  HOMO = -0.236467938283335  LUMO = 67.1751961395127
  mo_energy =
[-1.20282703e+02 -1.22614296e+01 -6.65670984e+00 -6.65670984e+00
 -6.65670984e+00 -1.16381629e+00 -2.36467938e-01 -2.36467938e-01
 -2.36467938e-01  6.71751961e+01  4.96304341e+02  2.53153731e+03
  1.30356151e+04  5.09152694e+04]
E1 = -706.5860274318196  E_coul = 198.90553381714187
cycle= 4 E= -507.680493614678  delta_E= -1.06e-10  |g|= 6.31e-07  |ddm|= 7.08e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5860274318196  E_coul = 198.90553381714187
  HOMO = -0.236467902804748  LUMO = 67.1751966694217
  mo_energy =
[-1.20282702e+02 -1.22614294e+01 -6.65670951e+00 -6.65670951e+00
 -6.65670951e+00 -1.16381627e+00 -2.36467903e-01 -2.36467903e-01
 -2.36467903e-01  6.71751967e+01  4.96304343e+02  2.53153731e+03
  1.30356151e+04  5.09152694e+04]
E1 = -706.5860275137744  E_coul = 198.9055338990968
Extra cycle  E= -507.680493614678  delta_E= 1.14e-13  |g|= 1.21e-08  |ddm|= 3.86e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 77.20201377500699
E1 = -706.5860275137744  E_coul = 198.9055338990968
init E= -507.680493614678
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236467902326985  LUMO = 67.1751966771793
  mo_energy =
[-1.20282702e+02 -1.22614294e+01 -6.65670950e+00 -6.65670950e+00
 -6.65670950e+00 -1.16381627e+00 -2.36467902e-01 -2.36467902e-01
 -2.36467902e-01  6.71751967e+01  4.96304343e+02  2.53153731e+03
  1.30356151e+04  5.09152694e+04]
E1 = -706.5860275152006  E_coul = 198.9055339005231
cycle= 1 E= -507.680493614678  delta_E= 1.14e-13  |g|= 2.68e-10  |ddm|= 6.61e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5860275152006  E_coul = 198.9055339005231
  HOMO = -0.236467902319491  LUMO = 67.1751966773127
  mo_energy =
[-1.20282702e+02 -1.22614294e+01 -6.65670950e+00 -6.65670950e+00
 -6.65670950e+00 -1.16381627e+00 -2.36467902e-01 -2.36467902e-01
 -2.36467902e-01  6.71751967e+01  4.96304343e+02  2.53153731e+03
  1.30356151e+04  5.09152694e+04]
E1 = -706.5860275152286  E_coul = 198.90553390055098
Extra cycle  E= -507.680493614678  delta_E= -1.14e-13  |g|= 1.08e-11  |ddm|= 1.3e-11
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34340165e+03 1.83772293e+04 1.41501954e+03 3.34911082e+02
 9.78997699e+01 3.30741877e+01 4.70914519e+00 3.91032677e-01
 8.59891120e+00 4.91052553e-01]
grad_E = [ 1.24242705e-05 -3.34982529e-06 -5.10269705e-06  2.47807875e-05
 -8.37555463e-05  3.96663119e-04  1.09027210e-03  6.23190367e-04
 -3.16706273e-05  2.91291776e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:11 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40512149        1
[INPUT] 0    0    [1    /1   ]  18377.3195362        1
[INPUT] 0    0    [1    /1   ]  1411.94336485        1
[INPUT] 0    0    [1    /1   ]  333.170203476        1
[INPUT] 0    0    [1    /1   ]  97.26278391          1
[INPUT] 0    0    [1    /1   ]  32.8558625392        1
[INPUT] 0    0    [1    /1   ]  4.70699335282        1
[INPUT] 0    0    [1    /1   ]  0.390993475687       1
[INPUT] 1    0    [1    /1   ]  8.59899561422        1
[INPUT] 1    0    [1    /1   ]  0.490995509027       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.40512149029, 1.0]], [0, [18377.319536221912, 1.0]], [0, [1411.9433648537881, 1.0]], [0, [333.1702034755346, 1.0]], [0, [97.26278390996538, 1.0]], [0, [32.855862539209966, 1.0]], [0, [4.706993352824988, 1.0]], [0, [0.3909934756870715, 1.0]], [1, [8.598995614215905, 1.0]], [1, [0.4909955090267683, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40512149]
bas 1, expnt(s) = [18377.31953622]
bas 2, expnt(s) = [1411.94336485]
bas 3, expnt(s) = [333.17020348]
bas 4, expnt(s) = [97.26278391]
bas 5, expnt(s) = [32.85586254]
bas 6, expnt(s) = [4.70699335]
bas 7, expnt(s) = [0.39099348]
bas 8, expnt(s) = [8.59899561]
bas 9, expnt(s) = [0.49099551]
CPU time:       257.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340512e+03 2.00418654e+03 1.83773195e+04 3.98773830e+03
 1.41194336e+03 5.81939695e+02 3.33170203e+02 1.97021962e+02
 9.72627839e+01 7.82483244e+01 3.28558625e+01 3.46716635e+01
 4.70699335e+00 8.07370195e+00 3.90993476e-01 1.24922929e+00
 8.59899561e+00 4.29579998e+01 4.90995509e-01 1.19903343e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32058026048151
cond(S) = 76.88266735720444
E1 = -689.2416001901656  E_coul = 184.90215331891295
init E= -504.339446871253
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680588683314065  LUMO = 65.2224730552064
  mo_energy =
[-1.21666922e+02 -1.32879581e+01 -7.62338643e+00 -7.62338643e+00
 -7.62338643e+00 -1.65004064e+00 -6.80588683e-01 -6.80588683e-01
 -6.80588683e-01  6.52224731e+01  4.91194576e+02  2.51922000e+03
  1.30163557e+04  5.08950695e+04]
E1 = -706.6246129998216  E_coul = 198.94471673515116
cycle= 1 E= -507.67989626467  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440215
diis-c [-0.19378946  1.        ]
  HOMO = -0.236382798988952  LUMO = 66.5264626217021
  mo_energy =
[-1.20271656e+02 -1.22600315e+01 -6.65441230e+00 -6.65441230e+00
 -6.65441230e+00 -1.16382783e+00 -2.36382799e-01 -2.36382799e-01
 -2.36382799e-01  6.65264626e+01  4.92578051e+02  2.52052148e+03
  1.30175206e+04  5.08961457e+04]
E1 = -706.5792375110913  E_coul = 198.89870819329937
cycle= 2 E= -507.680529317792  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0215
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0062636
diis-c [-3.89710545e-05  1.16078963e-03  9.98839210e-01]
  HOMO = -0.236657905436254  LUMO = 66.5221613897789
  mo_energy =
[-1.20283448e+02 -1.22618634e+01 -6.65722289e+00 -6.65722289e+00
 -6.65722289e+00 -1.16393015e+00 -2.36657905e-01 -2.36657905e-01
 -2.36657905e-01  6.65221614e+01  4.92565311e+02  2.52050260e+03
  1.30174975e+04  5.08961210e+04]
E1 = -706.5784933209733  E_coul = 198.89796379531182
cycle= 3 E= -507.680529525661  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000188881
diis-c [-8.61161104e-10  3.26272975e-05 -3.04554813e-02  1.03042285e+00]
  HOMO = -0.236662402740033  LUMO = 66.522086452174
  mo_energy =
[-1.20283654e+02 -1.22618949e+01 -6.65727526e+00 -6.65727526e+00
 -6.65727526e+00 -1.16393155e+00 -2.36662403e-01 -2.36662403e-01
 -2.36662403e-01  6.65220865e+01  4.92565106e+02  2.52050234e+03
  1.30174972e+04  5.08961207e+04]
E1 = -706.5784778161577  E_coul = 198.89794829038627
cycle= 4 E= -507.680529525771  delta_E= -1.1e-10  |g|= 6.42e-07  |ddm|= 7.25e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5784778161577  E_coul = 198.89794829038627
  HOMO = -0.236662366243884  LUMO = 66.5220869913291
  mo_energy =
[-1.20283653e+02 -1.22618947e+01 -6.65727492e+00 -6.65727492e+00
 -6.65727492e+00 -1.16393154e+00 -2.36662366e-01 -2.36662366e-01
 -2.36662366e-01  6.65220870e+01  4.92565107e+02  2.52050234e+03
  1.30174972e+04  5.08961207e+04]
E1 = -706.5784779004656  E_coul = 198.89794837469427
Extra cycle  E= -507.680529525771  delta_E= 1.14e-13  |g|= 1.23e-08  |ddm|= 3.97e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34340512e+03 1.83773195e+04 1.41194336e+03 3.33170203e+02
 9.72627839e+01 3.28558625e+01 4.70699335e+00 3.90993476e-01
 8.59899561e+00 4.90995509e-01]
E = -507.68052952577136
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:11 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40512149        1
[INPUT] 0    0    [1    /1   ]  18377.3195362        1
[INPUT] 0    0    [1    /1   ]  1411.94336485        1
[INPUT] 0    0    [1    /1   ]  333.170203476        1
[INPUT] 0    0    [1    /1   ]  97.26278391          1
[INPUT] 0    0    [1    /1   ]  32.8558625392        1
[INPUT] 0    0    [1    /1   ]  4.70699335282        1
[INPUT] 0    0    [1    /1   ]  0.390993475687       1
[INPUT] 1    0    [1    /1   ]  8.59899561422        1
[INPUT] 1    0    [1    /1   ]  0.490995509027       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.40512149029, 1.0]], [0, [18377.319536221912, 1.0]], [0, [1411.9433648537881, 1.0]], [0, [333.1702034755346, 1.0]], [0, [97.26278390996538, 1.0]], [0, [32.855862539209966, 1.0]], [0, [4.706993352824988, 1.0]], [0, [0.3909934756870715, 1.0]], [1, [8.598995614215905, 1.0]], [1, [0.4909955090267683, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40512149]
bas 1, expnt(s) = [18377.31953622]
bas 2, expnt(s) = [1411.94336485]
bas 3, expnt(s) = [333.17020348]
bas 4, expnt(s) = [97.26278391]
bas 5, expnt(s) = [32.85586254]
bas 6, expnt(s) = [4.70699335]
bas 7, expnt(s) = [0.39099348]
bas 8, expnt(s) = [8.59899561]
bas 9, expnt(s) = [0.49099551]
CPU time:       258.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340512e+03 2.00418654e+03 1.83773195e+04 3.98773830e+03
 1.41194336e+03 5.81939695e+02 3.33170203e+02 1.97021962e+02
 9.72627839e+01 7.82483244e+01 3.28558625e+01 3.46716635e+01
 4.70699335e+00 8.07370195e+00 3.90993476e-01 1.24922929e+00
 8.59899561e+00 4.29579998e+01 4.90995509e-01 1.19903343e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32058026048151
cond(S) = 76.88266735720444
E1 = -689.2416001901656  E_coul = 184.90215331891295
init E= -504.339446871253
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680588683314065  LUMO = 65.2224730552064
  mo_energy =
[-1.21666922e+02 -1.32879581e+01 -7.62338643e+00 -7.62338643e+00
 -7.62338643e+00 -1.65004064e+00 -6.80588683e-01 -6.80588683e-01
 -6.80588683e-01  6.52224731e+01  4.91194576e+02  2.51922000e+03
  1.30163557e+04  5.08950695e+04]
E1 = -706.6246129998216  E_coul = 198.94471673515116
cycle= 1 E= -507.67989626467  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440215
diis-c [-0.19378946  1.        ]
  HOMO = -0.236382798988952  LUMO = 66.5264626217021
  mo_energy =
[-1.20271656e+02 -1.22600315e+01 -6.65441230e+00 -6.65441230e+00
 -6.65441230e+00 -1.16382783e+00 -2.36382799e-01 -2.36382799e-01
 -2.36382799e-01  6.65264626e+01  4.92578051e+02  2.52052148e+03
  1.30175206e+04  5.08961457e+04]
E1 = -706.5792375110913  E_coul = 198.89870819329937
cycle= 2 E= -507.680529317792  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0215
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.0062636
diis-c [-3.89710545e-05  1.16078963e-03  9.98839210e-01]
  HOMO = -0.236657905436254  LUMO = 66.5221613897789
  mo_energy =
[-1.20283448e+02 -1.22618634e+01 -6.65722289e+00 -6.65722289e+00
 -6.65722289e+00 -1.16393015e+00 -2.36657905e-01 -2.36657905e-01
 -2.36657905e-01  6.65221614e+01  4.92565311e+02  2.52050260e+03
  1.30174975e+04  5.08961210e+04]
E1 = -706.5784933209733  E_coul = 198.89796379531182
cycle= 3 E= -507.680529525661  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000188881
diis-c [-8.61161104e-10  3.26272975e-05 -3.04554813e-02  1.03042285e+00]
  HOMO = -0.236662402740033  LUMO = 66.522086452174
  mo_energy =
[-1.20283654e+02 -1.22618949e+01 -6.65727526e+00 -6.65727526e+00
 -6.65727526e+00 -1.16393155e+00 -2.36662403e-01 -2.36662403e-01
 -2.36662403e-01  6.65220865e+01  4.92565106e+02  2.52050234e+03
  1.30174972e+04  5.08961207e+04]
E1 = -706.5784778161577  E_coul = 198.89794829038627
cycle= 4 E= -507.680529525771  delta_E= -1.1e-10  |g|= 6.42e-07  |ddm|= 7.25e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5784778161577  E_coul = 198.89794829038627
  HOMO = -0.236662366243884  LUMO = 66.5220869913291
  mo_energy =
[-1.20283653e+02 -1.22618947e+01 -6.65727492e+00 -6.65727492e+00
 -6.65727492e+00 -1.16393154e+00 -2.36662366e-01 -2.36662366e-01
 -2.36662366e-01  6.65220870e+01  4.92565107e+02  2.52050234e+03
  1.30174972e+04  5.08961207e+04]
E1 = -706.5784779004656  E_coul = 198.89794837469427
Extra cycle  E= -507.680529525771  delta_E= 1.14e-13  |g|= 1.23e-08  |ddm|= 3.97e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 76.88266735720444
E1 = -706.5784779004656  E_coul = 198.89794837469427
init E= -507.680529525771
    CPU time for initialize scf      0.79 sec, wall time      0.05 sec
  HOMO = -0.236662365750084  LUMO = 66.5220869992625
  mo_energy =
[-1.20283653e+02 -1.22618947e+01 -6.65727491e+00 -6.65727491e+00
 -6.65727491e+00 -1.16393154e+00 -2.36662366e-01 -2.36662366e-01
 -2.36662366e-01  6.65220870e+01  4.92565107e+02  2.52050234e+03
  1.30174972e+04  5.08961207e+04]
E1 = -706.5784779019396  E_coul = 198.89794837616805
cycle= 1 E= -507.680529525771  delta_E= -1.14e-13  |g|= 2.74e-10  |ddm|= 6.82e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5784779019396  E_coul = 198.89794837616805
  HOMO = -0.23666236574231  LUMO = 66.522086999399
  mo_energy =
[-1.20283653e+02 -1.22618947e+01 -6.65727491e+00 -6.65727491e+00
 -6.65727491e+00 -1.16393154e+00 -2.36662366e-01 -2.36662366e-01
 -2.36662366e-01  6.65220870e+01  4.92565107e+02  2.52050234e+03
  1.30174972e+04  5.08961207e+04]
E1 = -706.5784779019681  E_coul = 198.89794837619672
Extra cycle  E= -507.680529525771  delta_E= 1.14e-13  |g|= 1.06e-11  |ddm|= 1.35e-11
    CPU time for scf_cycle      1.01 sec, wall time      0.11 sec
exp = [7.34340512e+03 1.83773195e+04 1.41194336e+03 3.33170203e+02
 9.72627839e+01 3.28558625e+01 4.70699335e+00 3.90993476e-01
 8.59899561e+00 4.90995509e-01]
grad_E = [ 1.24207066e-05 -3.34859992e-06 -7.32635179e-07 -4.06638873e-06
  3.32434934e-05 -1.74552463e-05  1.80348373e-04  1.49741823e-04
 -2.32410298e-05  2.62976314e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40526708        1
[INPUT] 0    0    [1    /1   ]  18377.3298295        1
[INPUT] 0    0    [1    /1   ]  1411.61696062        1
[INPUT] 0    0    [1    /1   ]  332.846196445        1
[INPUT] 0    0    [1    /1   ]  97.1026091444        1
[INPUT] 0    0    [1    /1   ]  32.8098006805        1
[INPUT] 0    0    [1    /1   ]  4.70651762464        1
[INPUT] 0    0    [1    /1   ]  0.390983996117       1
[INPUT] 1    0    [1    /1   ]  8.59903367378        1
[INPUT] 1    0    [1    /1   ]  0.490992131729       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.405267078979, 1.0]], [0, [18377.329829458628, 1.0]], [0, [1411.6169606216438, 1.0]], [0, [332.84619644540254, 1.0]], [0, [97.10260914438933, 1.0]], [0, [32.80980068048622, 1.0]], [0, [4.706517624636713, 1.0]], [0, [0.3909839961166477, 1.0]], [1, [8.599033673779655, 1.0]], [1, [0.4909921317288377, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40526708]
bas 1, expnt(s) = [18377.32982946]
bas 2, expnt(s) = [1411.61696062]
bas 3, expnt(s) = [332.84619645]
bas 4, expnt(s) = [97.10260914]
bas 5, expnt(s) = [32.80980068]
bas 6, expnt(s) = [4.70651762]
bas 7, expnt(s) = [0.390984]
bas 8, expnt(s) = [8.59903367]
bas 9, expnt(s) = [0.49099213]
CPU time:       262.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340527e+03 2.00418657e+03 1.83773298e+04 3.98773997e+03
 1.41161696e+03 5.81838795e+02 3.32846196e+02 1.96878242e+02
 9.71026091e+01 7.81516585e+01 3.28098007e+01 3.46352015e+01
 4.70651762e+00 8.07308995e+00 3.90983996e-01 1.24920657e+00
 8.59903367e+00 4.29582375e+01 4.90992132e-01 1.19902312e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320593946792208
cond(S) = 76.79968644014727
E1 = -689.2414056374945  E_coul = 184.90172891178892
init E= -504.339676725706
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680596666970144  LUMO = 65.0757351587729
  mo_energy =
[-1.21666914e+02 -1.32880324e+01 -7.62342820e+00 -7.62342820e+00
 -7.62342820e+00 -1.65003427e+00 -6.80596667e-01 -6.80596667e-01
 -6.80596667e-01  6.50757352e+01  4.90373878e+02  2.51722763e+03
  1.30135613e+04  5.08922174e+04]
E1 = -706.6240562813035  E_coul = 198.94416055283293
cycle= 1 E= -507.679895728471  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.440204
diis-c [-0.19377977  1.        ]
  HOMO = -0.236401554372249  LUMO = 66.3794359614209
  mo_energy =
[-1.20271626e+02 -1.22601208e+01 -6.65446238e+00 -6.65446238e+00
 -6.65446238e+00 -1.16384107e+00 -2.36401554e-01 -2.36401554e-01
 -2.36401554e-01  6.63794360e+01  4.91757353e+02  2.51852910e+03
  1.30147260e+04  5.08932936e+04]
E1 = -706.578540797065  E_coul = 198.89800989229707
cycle= 2 E= -507.680530904768  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00627389
diis-c [-3.90954772e-05  1.17082713e-03  9.98829173e-01]
  HOMO = -0.236677694955891  LUMO = 66.3751271409455
  mo_energy =
[-1.20283449e+02 -1.22619594e+01 -6.65728287e+00 -6.65728287e+00
 -6.65728287e+00 -1.16394378e+00 -2.36677695e-01 -2.36677695e-01
 -2.36677695e-01  6.63751271e+01  4.91744585e+02  2.51851018e+03
  1.30147029e+04  5.08932688e+04]
E1 = -706.5777933935416  E_coul = 198.897262279791
cycle= 3 E= -507.680531113751  delta_E= -2.09e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000189413
diis-c [-8.66445803e-10  3.26043062e-05 -3.04919980e-02  1.03045939e+00]
  HOMO = -0.236682216942293  LUMO = 66.3750519216626
  mo_energy =
[-1.20283656e+02 -1.22619910e+01 -6.65733552e+00 -6.65733552e+00
 -6.65733552e+00 -1.16394519e+00 -2.36682217e-01 -2.36682217e-01
 -2.36682217e-01  6.63750519e+01  4.91744380e+02  2.51850992e+03
  1.30147026e+04  5.08932685e+04]
E1 = -706.5777777971807  E_coul = 198.89724668331954
cycle= 4 E= -507.680531113861  delta_E= -1.11e-10  |g|= 6.45e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5777777971807  E_coul = 198.89724668331954
  HOMO = -0.236682180211007  LUMO = 66.3750524628521
  mo_energy =
[-1.20283654e+02 -1.22619908e+01 -6.65733517e+00 -6.65733517e+00
 -6.65733517e+00 -1.16394518e+00 -2.36682180e-01 -2.36682180e-01
 -2.36682180e-01  6.63750525e+01  4.91744381e+02  2.51850992e+03
  1.30147026e+04  5.08932685e+04]
E1 = -706.5777778820341  E_coul = 198.8972467681728
Extra cycle  E= -507.680531113861  delta_E= -5.68e-14  |g|= 1.24e-08  |ddm|= 4e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34340527e+03 1.83773298e+04 1.41161696e+03 3.32846196e+02
 9.71026091e+01 3.28098007e+01 4.70651762e+00 3.90983996e-01
 8.59903367e+00 4.90992132e-01]
E = -507.68053111386126
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40526708        1
[INPUT] 0    0    [1    /1   ]  18377.3298295        1
[INPUT] 0    0    [1    /1   ]  1411.61696062        1
[INPUT] 0    0    [1    /1   ]  332.846196445        1
[INPUT] 0    0    [1    /1   ]  97.1026091444        1
[INPUT] 0    0    [1    /1   ]  32.8098006805        1
[INPUT] 0    0    [1    /1   ]  4.70651762464        1
[INPUT] 0    0    [1    /1   ]  0.390983996117       1
[INPUT] 1    0    [1    /1   ]  8.59903367378        1
[INPUT] 1    0    [1    /1   ]  0.490992131729       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.405267078979, 1.0]], [0, [18377.329829458628, 1.0]], [0, [1411.6169606216438, 1.0]], [0, [332.84619644540254, 1.0]], [0, [97.10260914438933, 1.0]], [0, [32.80980068048622, 1.0]], [0, [4.706517624636713, 1.0]], [0, [0.3909839961166477, 1.0]], [1, [8.599033673779655, 1.0]], [1, [0.4909921317288377, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40526708]
bas 1, expnt(s) = [18377.32982946]
bas 2, expnt(s) = [1411.61696062]
bas 3, expnt(s) = [332.84619645]
bas 4, expnt(s) = [97.10260914]
bas 5, expnt(s) = [32.80980068]
bas 6, expnt(s) = [4.70651762]
bas 7, expnt(s) = [0.390984]
bas 8, expnt(s) = [8.59903367]
bas 9, expnt(s) = [0.49099213]
CPU time:       262.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340527e+03 2.00418657e+03 1.83773298e+04 3.98773997e+03
 1.41161696e+03 5.81838795e+02 3.32846196e+02 1.96878242e+02
 9.71026091e+01 7.81516585e+01 3.28098007e+01 3.46352015e+01
 4.70651762e+00 8.07308995e+00 3.90983996e-01 1.24920657e+00
 8.59903367e+00 4.29582375e+01 4.90992132e-01 1.19902312e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320593946792208
cond(S) = 76.79968644014727
E1 = -689.2414056374945  E_coul = 184.90172891178892
init E= -504.339676725706
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680596666970144  LUMO = 65.0757351587729
  mo_energy =
[-1.21666914e+02 -1.32880324e+01 -7.62342820e+00 -7.62342820e+00
 -7.62342820e+00 -1.65003427e+00 -6.80596667e-01 -6.80596667e-01
 -6.80596667e-01  6.50757352e+01  4.90373878e+02  2.51722763e+03
  1.30135613e+04  5.08922174e+04]
E1 = -706.6240562813035  E_coul = 198.94416055283293
cycle= 1 E= -507.679895728471  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440204
diis-c [-0.19377977  1.        ]
  HOMO = -0.236401554372249  LUMO = 66.3794359614209
  mo_energy =
[-1.20271626e+02 -1.22601208e+01 -6.65446238e+00 -6.65446238e+00
 -6.65446238e+00 -1.16384107e+00 -2.36401554e-01 -2.36401554e-01
 -2.36401554e-01  6.63794360e+01  4.91757353e+02  2.51852910e+03
  1.30147260e+04  5.08932936e+04]
E1 = -706.578540797065  E_coul = 198.89800989229707
cycle= 2 E= -507.680530904768  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00627389
diis-c [-3.90954772e-05  1.17082713e-03  9.98829173e-01]
  HOMO = -0.236677694955891  LUMO = 66.3751271409455
  mo_energy =
[-1.20283449e+02 -1.22619594e+01 -6.65728287e+00 -6.65728287e+00
 -6.65728287e+00 -1.16394378e+00 -2.36677695e-01 -2.36677695e-01
 -2.36677695e-01  6.63751271e+01  4.91744585e+02  2.51851018e+03
  1.30147029e+04  5.08932688e+04]
E1 = -706.5777933935416  E_coul = 198.897262279791
cycle= 3 E= -507.680531113751  delta_E= -2.09e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000189413
diis-c [-8.66445803e-10  3.26043062e-05 -3.04919980e-02  1.03045939e+00]
  HOMO = -0.236682216942293  LUMO = 66.3750519216626
  mo_energy =
[-1.20283656e+02 -1.22619910e+01 -6.65733552e+00 -6.65733552e+00
 -6.65733552e+00 -1.16394519e+00 -2.36682217e-01 -2.36682217e-01
 -2.36682217e-01  6.63750519e+01  4.91744380e+02  2.51850992e+03
  1.30147026e+04  5.08932685e+04]
E1 = -706.5777777971807  E_coul = 198.89724668331954
cycle= 4 E= -507.680531113861  delta_E= -1.11e-10  |g|= 6.45e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5777777971807  E_coul = 198.89724668331954
  HOMO = -0.236682180211007  LUMO = 66.3750524628521
  mo_energy =
[-1.20283654e+02 -1.22619908e+01 -6.65733517e+00 -6.65733517e+00
 -6.65733517e+00 -1.16394518e+00 -2.36682180e-01 -2.36682180e-01
 -2.36682180e-01  6.63750525e+01  4.91744381e+02  2.51850992e+03
  1.30147026e+04  5.08932685e+04]
E1 = -706.5777778820341  E_coul = 198.8972467681728
Extra cycle  E= -507.680531113861  delta_E= -5.68e-14  |g|= 1.24e-08  |ddm|= 4e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 76.79968644014727
E1 = -706.5777778820341  E_coul = 198.8972467681728
init E= -507.680531113861
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.236682179713438  LUMO = 66.3750524708268
  mo_energy =
[-1.20283654e+02 -1.22619908e+01 -6.65733517e+00 -6.65733517e+00
 -6.65733517e+00 -1.16394518e+00 -2.36682180e-01 -2.36682180e-01
 -2.36682180e-01  6.63750525e+01  4.91744381e+02  2.51850992e+03
  1.30147026e+04  5.08932685e+04]
E1 = -706.5777778835193  E_coul = 198.89724676965773
cycle= 1 E= -507.680531113862  delta_E= -2.84e-13  |g|= 2.75e-10  |ddm|= 6.87e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5777778835193  E_coul = 198.89724676965773
  HOMO = -0.2366821797056  LUMO = 66.3750524709641
  mo_energy =
[-1.20283654e+02 -1.22619908e+01 -6.65733517e+00 -6.65733517e+00
 -6.65733517e+00 -1.16394518e+00 -2.36682180e-01 -2.36682180e-01
 -2.36682180e-01  6.63750525e+01  4.91744381e+02  2.51850992e+03
  1.30147026e+04  5.08932685e+04]
E1 = -706.5777778835482  E_coul = 198.89724676968666
Extra cycle  E= -507.680531113861  delta_E= 5.68e-14  |g|= 1.16e-11  |ddm|= 1.36e-11
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34340527e+03 1.83773298e+04 1.41161696e+03 3.32846196e+02
 9.71026091e+01 3.28098007e+01 4.70651762e+00 3.90983996e-01
 8.59903367e+00 4.90992132e-01]
grad_E = [ 1.24171825e-05 -3.34838256e-06 -3.12107956e-07  8.96670652e-07
  2.69364899e-07 -4.58431337e-06  7.15994193e-05  1.65715559e-05
  3.72762587e-06  1.15225486e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:17 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40484373        1
[INPUT] 0    0    [1    /1   ]  18377.323698         1
[INPUT] 0    0    [1    /1   ]  1411.84418671        1
[INPUT] 0    0    [1    /1   ]  332.868318278        1
[INPUT] 0    0    [1    /1   ]  97.107020702         1
[INPUT] 0    0    [1    /1   ]  32.8113048627        1
[INPUT] 0    0    [1    /1   ]  4.706442751          1
[INPUT] 0    0    [1    /1   ]  0.390983143095       1
[INPUT] 1    0    [1    /1   ]  8.5990326943         1
[INPUT] 1    0    [1    /1   ]  0.490992361865       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.40484372988, 1.0]], [0, [18377.323698048793, 1.0]], [0, [1411.84418671459, 1.0]], [0, [332.86831827833026, 1.0]], [0, [97.10702070201287, 1.0]], [0, [32.8113048627468, 1.0]], [0, [4.706442750999985, 1.0]], [0, [0.3909831430954033, 1.0]], [1, [8.599032694300213, 1.0]], [1, [0.49099236186484296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40484373]
bas 1, expnt(s) = [18377.32369805]
bas 2, expnt(s) = [1411.84418671]
bas 3, expnt(s) = [332.86831828]
bas 4, expnt(s) = [97.1070207]
bas 5, expnt(s) = [32.81130486]
bas 6, expnt(s) = [4.70644275]
bas 7, expnt(s) = [0.39098314]
bas 8, expnt(s) = [8.59903269]
bas 9, expnt(s) = [0.49099236]
CPU time:       266.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340484e+03 2.00418648e+03 1.83773237e+04 3.98773898e+03
 1.41184419e+03 5.81909037e+02 3.32868318e+02 1.96888056e+02
 9.71070207e+01 7.81543214e+01 3.28113049e+01 3.46363924e+01
 4.70644275e+00 8.07299362e+00 3.90983143e-01 1.24920453e+00
 8.59903269e+00 4.29582314e+01 4.90992362e-01 1.19902382e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320594706254756
cond(S) = 76.7962913103967
E1 = -689.2412786425319  E_coul = 184.90165010203376
init E= -504.339628540498
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680597021257463  LUMO = 65.0800383985435
  mo_energy =
[-1.21666925e+02 -1.32880370e+01 -7.62343581e+00 -7.62343581e+00
 -7.62343581e+00 -1.65003214e+00 -6.80597021e-01 -6.80597021e-01
 -6.80597021e-01  6.50800384e+01  4.90407880e+02  2.51752726e+03
  1.30143366e+04  5.08930996e+04]
E1 = -706.6238561586953  E_coul = 198.94396038295596
cycle= 1 E= -507.679895775739  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.4402
diis-c [-0.1937759  1.       ]
  HOMO = -0.236403111428878  LUMO = 66.3837363881586
  mo_energy =
[-1.20271663e+02 -1.22601322e+01 -6.65447821e+00 -6.65447821e+00
 -6.65447821e+00 -1.16384134e+00 -2.36403111e-01 -2.36403111e-01
 -2.36403111e-01  6.63837364e+01  4.91791330e+02  2.51882869e+03
  1.30155013e+04  5.08941758e+04]
E1 = -706.5783435476856  E_coul = 198.89781261903477
cycle= 2 E= -507.680530928651  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00627381
diis-c [-3.90946531e-05  1.17048209e-03  9.98829518e-01]
  HOMO = -0.236679227469502  LUMO = 66.3794276511868
  mo_energy =
[-1.20283484e+02 -1.22619706e+01 -6.65729850e+00 -6.65729850e+00
 -6.65729850e+00 -1.16394404e+00 -2.36679227e-01 -2.36679227e-01
 -2.36679227e-01  6.63794277e+01  4.91778563e+02  2.51880977e+03
  1.30154782e+04  5.08941510e+04]
E1 = -706.577596215567  E_coul = 198.89706507795043
cycle= 3 E= -507.680531137617  delta_E= -2.09e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000189402
diis-c [-8.66294343e-10  3.26047205e-05 -3.04907468e-02  1.03045814e+00]
  HOMO = -0.236683748824741  LUMO = 66.379352437833
  mo_energy =
[-1.20283691e+02 -1.22620022e+01 -6.65735114e+00 -6.65735114e+00
 -6.65735114e+00 -1.16394545e+00 -2.36683749e-01 -2.36683749e-01
 -2.36683749e-01  6.63793524e+01  4.91778357e+02  2.51880951e+03
  1.30154779e+04  5.08941507e+04]
E1 = -706.5775806214459  E_coul = 198.8970494837182
cycle= 4 E= -507.680531137728  delta_E= -1.11e-10  |g|= 6.45e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5775806214459  E_coul = 198.8970494837182
  HOMO = -0.236683712100083  LUMO = 66.3793529789752
  mo_energy =
[-1.20283690e+02 -1.22620020e+01 -6.65735079e+00 -6.65735079e+00
 -6.65735079e+00 -1.16394543e+00 -2.36683712e-01 -2.36683712e-01
 -2.36683712e-01  6.63793530e+01  4.91778359e+02  2.51880951e+03
  1.30154779e+04  5.08941507e+04]
E1 = -706.5775807062835  E_coul = 198.89704956855627
Extra cycle  E= -507.680531137727  delta_E= 5.12e-13  |g|= 1.24e-08  |ddm|= 4e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34340484e+03 1.83773237e+04 1.41184419e+03 3.32868318e+02
 9.71070207e+01 3.28113049e+01 4.70644275e+00 3.90983143e-01
 8.59903269e+00 4.90992362e-01]
E = -507.6805311377272
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:17 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.40484373        1
[INPUT] 0    0    [1    /1   ]  18377.323698         1
[INPUT] 0    0    [1    /1   ]  1411.84418671        1
[INPUT] 0    0    [1    /1   ]  332.868318278        1
[INPUT] 0    0    [1    /1   ]  97.107020702         1
[INPUT] 0    0    [1    /1   ]  32.8113048627        1
[INPUT] 0    0    [1    /1   ]  4.706442751          1
[INPUT] 0    0    [1    /1   ]  0.390983143095       1
[INPUT] 1    0    [1    /1   ]  8.5990326943         1
[INPUT] 1    0    [1    /1   ]  0.490992361865       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.40484372988, 1.0]], [0, [18377.323698048793, 1.0]], [0, [1411.84418671459, 1.0]], [0, [332.86831827833026, 1.0]], [0, [97.10702070201287, 1.0]], [0, [32.8113048627468, 1.0]], [0, [4.706442750999985, 1.0]], [0, [0.3909831430954033, 1.0]], [1, [8.599032694300213, 1.0]], [1, [0.49099236186484296, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.40484373]
bas 1, expnt(s) = [18377.32369805]
bas 2, expnt(s) = [1411.84418671]
bas 3, expnt(s) = [332.86831828]
bas 4, expnt(s) = [97.1070207]
bas 5, expnt(s) = [32.81130486]
bas 6, expnt(s) = [4.70644275]
bas 7, expnt(s) = [0.39098314]
bas 8, expnt(s) = [8.59903269]
bas 9, expnt(s) = [0.49099236]
CPU time:       267.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340484e+03 2.00418648e+03 1.83773237e+04 3.98773898e+03
 1.41184419e+03 5.81909037e+02 3.32868318e+02 1.96888056e+02
 9.71070207e+01 7.81543214e+01 3.28113049e+01 3.46363924e+01
 4.70644275e+00 8.07299362e+00 3.90983143e-01 1.24920453e+00
 8.59903269e+00 4.29582314e+01 4.90992362e-01 1.19902382e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320594706254756
cond(S) = 76.7962913103967
E1 = -689.2412786425319  E_coul = 184.90165010203376
init E= -504.339628540498
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680597021257463  LUMO = 65.0800383985435
  mo_energy =
[-1.21666925e+02 -1.32880370e+01 -7.62343581e+00 -7.62343581e+00
 -7.62343581e+00 -1.65003214e+00 -6.80597021e-01 -6.80597021e-01
 -6.80597021e-01  6.50800384e+01  4.90407880e+02  2.51752726e+03
  1.30143366e+04  5.08930996e+04]
E1 = -706.6238561586953  E_coul = 198.94396038295596
cycle= 1 E= -507.679895775739  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.15 sec, wall time      0.01 sec
diis-norm(errvec)=0.4402
diis-c [-0.1937759  1.       ]
  HOMO = -0.236403111428878  LUMO = 66.3837363881586
  mo_energy =
[-1.20271663e+02 -1.22601322e+01 -6.65447821e+00 -6.65447821e+00
 -6.65447821e+00 -1.16384134e+00 -2.36403111e-01 -2.36403111e-01
 -2.36403111e-01  6.63837364e+01  4.91791330e+02  2.51882869e+03
  1.30155013e+04  5.08941758e+04]
E1 = -706.5783435476856  E_coul = 198.89781261903477
cycle= 2 E= -507.680530928651  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00627381
diis-c [-3.90946531e-05  1.17048209e-03  9.98829518e-01]
  HOMO = -0.236679227469502  LUMO = 66.3794276511868
  mo_energy =
[-1.20283484e+02 -1.22619706e+01 -6.65729850e+00 -6.65729850e+00
 -6.65729850e+00 -1.16394404e+00 -2.36679227e-01 -2.36679227e-01
 -2.36679227e-01  6.63794277e+01  4.91778563e+02  2.51880977e+03
  1.30154782e+04  5.08941510e+04]
E1 = -706.577596215567  E_coul = 198.89706507795043
cycle= 3 E= -507.680531137617  delta_E= -2.09e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.000189402
diis-c [-8.66294343e-10  3.26047205e-05 -3.04907468e-02  1.03045814e+00]
  HOMO = -0.236683748824741  LUMO = 66.379352437833
  mo_energy =
[-1.20283691e+02 -1.22620022e+01 -6.65735114e+00 -6.65735114e+00
 -6.65735114e+00 -1.16394545e+00 -2.36683749e-01 -2.36683749e-01
 -2.36683749e-01  6.63793524e+01  4.91778357e+02  2.51880951e+03
  1.30154779e+04  5.08941507e+04]
E1 = -706.5775806214459  E_coul = 198.8970494837182
cycle= 4 E= -507.680531137728  delta_E= -1.11e-10  |g|= 6.45e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5775806214459  E_coul = 198.8970494837182
  HOMO = -0.236683712100083  LUMO = 66.3793529789752
  mo_energy =
[-1.20283690e+02 -1.22620020e+01 -6.65735079e+00 -6.65735079e+00
 -6.65735079e+00 -1.16394543e+00 -2.36683712e-01 -2.36683712e-01
 -2.36683712e-01  6.63793530e+01  4.91778359e+02  2.51880951e+03
  1.30154779e+04  5.08941507e+04]
E1 = -706.5775807062835  E_coul = 198.89704956855627
Extra cycle  E= -507.680531137727  delta_E= 5.12e-13  |g|= 1.24e-08  |ddm|= 4e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 76.7962913103967
E1 = -706.5775807062835  E_coul = 198.89704956855627
init E= -507.680531137727
    CPU time for initialize scf      0.78 sec, wall time      0.05 sec
  HOMO = -0.23668371160263  LUMO = 66.3793529869475
  mo_energy =
[-1.20283690e+02 -1.22620020e+01 -6.65735079e+00 -6.65735079e+00
 -6.65735079e+00 -1.16394543e+00 -2.36683712e-01 -2.36683712e-01
 -2.36683712e-01  6.63793530e+01  4.91778359e+02  2.51880951e+03
  1.30154779e+04  5.08941507e+04]
E1 = -706.5775807077682  E_coul = 198.89704957004088
cycle= 1 E= -507.680531137727  delta_E= -1.71e-13  |g|= 2.76e-10  |ddm|= 6.87e-10
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
E1 = -706.5775807077682  E_coul = 198.89704957004088
  HOMO = -0.2366837115948  LUMO = 66.3793529870843
  mo_energy =
[-1.20283690e+02 -1.22620020e+01 -6.65735079e+00 -6.65735079e+00
 -6.65735079e+00 -1.16394543e+00 -2.36683712e-01 -2.36683712e-01
 -2.36683712e-01  6.63793530e+01  4.91778359e+02  2.51880951e+03
  1.30154779e+04  5.08941507e+04]
E1 = -706.5775807077973  E_coul = 198.8970495700701
Extra cycle  E= -507.680531137727  delta_E= 1.14e-13  |g|= 1.02e-11  |ddm|= 1.36e-11
    CPU time for scf_cycle      1.00 sec, wall time      0.11 sec
exp = [7.34340484e+03 1.83773237e+04 1.41184419e+03 3.32868318e+02
 9.71070207e+01 3.28113049e+01 4.70644275e+00 3.90983143e-01
 8.59903269e+00 4.90992362e-01]
grad_E = [ 1.24033245e-05 -3.34797544e-06 -5.42781577e-08 -1.63294027e-07
  1.11543480e-06 -3.12296915e-06  5.34396592e-06  4.71181242e-06
 -1.65155121e-06  7.13548314e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:20 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.4048431         1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83651385        1
[INPUT] 0    0    [1    /1   ]  332.866410939        1
[INPUT] 0    0    [1    /1   ]  97.1067319895        1
[INPUT] 0    0    [1    /1   ]  32.811638314         1
[INPUT] 0    0    [1    /1   ]  4.70643421975        1
[INPUT] 0    0    [1    /1   ]  0.390982989559       1
[INPUT] 1    0    [1    /1   ]  8.59903406652        1
[INPUT] 1    0    [1    /1   ]  0.490992297577       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.404843098567, 1.0]], [0, [18377.323914102573, 1.0]], [0, [1411.836513848047, 1.0]], [0, [332.8664109385263, 1.0]], [0, [97.10673198950983, 1.0]], [0, [32.81163831404047, 1.0]], [0, [4.7064342197545095, 1.0]], [0, [0.3909829895591577, 1.0]], [1, [8.599034066519128, 1.0]], [1, [0.4909922975773032, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.4048431]
bas 1, expnt(s) = [18377.3239141]
bas 2, expnt(s) = [1411.83651385]
bas 3, expnt(s) = [332.86641094]
bas 4, expnt(s) = [97.10673199]
bas 5, expnt(s) = [32.81163831]
bas 6, expnt(s) = [4.70643422]
bas 7, expnt(s) = [0.39098299]
bas 8, expnt(s) = [8.59903407]
bas 9, expnt(s) = [0.4909923]
CPU time:       271.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340484e+03 2.00418648e+03 1.83773239e+04 3.98773901e+03
 1.41183651e+03 5.81906665e+02 3.32866411e+02 1.96887210e+02
 9.71067320e+01 7.81541472e+01 3.28116383e+01 3.46366564e+01
 4.70643422e+00 8.07298265e+00 3.90982990e-01 1.24920416e+00
 8.59903407e+00 4.29582399e+01 4.90992298e-01 1.19902363e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320594906336613
cond(S) = 76.79732706579912
E1 = -689.241271431171  E_coul = 184.90164699077613
init E= -504.339624440395
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680597194770314  LUMO = 65.0804953569098
  mo_energy =
[-1.21666923e+02 -1.32880390e+01 -7.62343612e+00 -7.62343612e+00
 -7.62343612e+00 -1.65003214e+00 -6.80597195e-01 -6.80597195e-01
 -6.80597195e-01  6.50804954e+01  4.90406904e+02  2.51751466e+03
  1.30143071e+04  5.08930666e+04]
E1 = -706.6238480648137  E_coul = 198.9439522834648
cycle= 1 E= -507.679895781349  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440201
diis-c [-0.19377656  1.        ]
  HOMO = -0.236403446358633  LUMO = 66.3841942120036
  mo_energy =
[-1.20271661e+02 -1.22601345e+01 -6.65447888e+00 -6.65447888e+00
 -6.65447888e+00 -1.16384165e+00 -2.36403446e-01 -2.36403446e-01
 -2.36403446e-01  6.63841942e+01  4.91790354e+02  2.51881609e+03
  1.30154718e+04  5.08941427e+04]
E1 = -706.5783358897717  E_coul = 198.8978049602783
cycle= 2 E= -507.680530929493  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.09 sec, wall time      0.01 sec
diis-norm(errvec)=0.00627377
diis-c [-3.90941519e-05  1.17038304e-03  9.98829617e-01]
  HOMO = -0.236679559380035  LUMO = 66.3798855077946
  mo_energy =
[-1.20283483e+02 -1.22619729e+01 -6.65729915e+00 -6.65729915e+00
 -6.65729915e+00 -1.16394434e+00 -2.36679559e-01 -2.36679559e-01
 -2.36679559e-01  6.63798855e+01  4.91777587e+02  2.51879717e+03
  1.30154487e+04  5.08941179e+04]
E1 = -706.577588566167  E_coul = 198.89705742771008
cycle= 3 E= -507.680531138457  delta_E= -2.09e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0001894
diis-c [-8.66270623e-10  3.26054142e-05 -3.04906038e-02  1.03045800e+00]
  HOMO = -0.236684080648311  LUMO = 66.3798102955868
  mo_energy =
[-1.20283690e+02 -1.22620045e+01 -6.65735178e+00 -6.65735178e+00
 -6.65735178e+00 -1.16394575e+00 -2.36684081e-01 -2.36684081e-01
 -2.36684081e-01  6.63798103e+01  4.91777381e+02  2.51879690e+03
  1.30154484e+04  5.08941176e+04]
E1 = -706.5775729723373  E_coul = 198.89704183376918
cycle= 4 E= -507.680531138568  delta_E= -1.11e-10  |g|= 6.45e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5775729723373  E_coul = 198.89704183376918
  HOMO = -0.236684043924369  LUMO = 66.379810836721
  mo_energy =
[-1.20283688e+02 -1.22620043e+01 -6.65735144e+00 -6.65735144e+00
 -6.65735144e+00 -1.16394574e+00 -2.36684044e-01 -2.36684044e-01
 -2.36684044e-01  6.63798108e+01  4.91777383e+02  2.51879691e+03
  1.30154484e+04  5.08941176e+04]
E1 = -706.5775730571736  E_coul = 198.89704191860608
Extra cycle  E= -507.680531138568  delta_E= 5.68e-13  |g|= 1.24e-08  |ddm|= 4e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34340484e+03 1.83773239e+04 1.41183651e+03 3.32866411e+02
 9.71067320e+01 3.28116383e+01 4.70643422e+00 3.90982990e-01
 8.59903407e+00 4.90992298e-01]
E = -507.6805311385675
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.6805311385675
       x: [ 7.343e+03  1.838e+04  1.412e+03  3.329e+02  9.711e+01
            3.281e+01  4.706e+00  3.910e-01  8.599e+00  4.910e-01]
     nit: 59
     jac: [ 1.240e-05 -3.348e-06 -5.428e-08 -1.633e-07  1.115e-06
           -3.123e-06  5.344e-06  4.712e-06 -1.652e-06  7.135e-06]
    nfev: 65
    njev: 59
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 0.4

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc11948.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:16:20 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35629753.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  7343.4048431         1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83651385        1
[INPUT] 0    0    [1    /1   ]  332.866410939        1
[INPUT] 0    0    [1    /1   ]  97.1067319895        1
[INPUT] 0    0    [1    /1   ]  32.811638314         1
[INPUT] 0    0    [1    /1   ]  4.70643421975        1
[INPUT] 0    0    [1    /1   ]  0.390982989559       1
[INPUT] 1    0    [1    /1   ]  8.59903406652        1
[INPUT] 1    0    [1    /1   ]  0.490992297577       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [7343.404843098567, 1.0]], [0, [18377.323914102573, 1.0]], [0, [1411.836513848047, 1.0]], [0, [332.8664109385263, 1.0]], [0, [97.10673198950983, 1.0]], [0, [32.81163831404047, 1.0]], [0, [4.7064342197545095, 1.0]], [0, [0.3909829895591577, 1.0]], [1, [8.599034066519128, 1.0]], [1, [0.4909922975773032, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [7343.4048431]
bas 1, expnt(s) = [18377.3239141]
bas 2, expnt(s) = [1411.83651385]
bas 3, expnt(s) = [332.86641094]
bas 4, expnt(s) = [97.10673199]
bas 5, expnt(s) = [32.81163831]
bas 6, expnt(s) = [4.70643422]
bas 7, expnt(s) = [0.39098299]
bas 8, expnt(s) = [8.59903407]
bas 9, expnt(s) = [0.4909923]
CPU time:       272.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34340484e+03 2.00418648e+03 1.83773239e+04 3.98773901e+03
 1.41183651e+03 5.81906665e+02 3.32866411e+02 1.96887210e+02
 9.71067320e+01 7.81541472e+01 3.28116383e+01 3.46366564e+01
 4.70643422e+00 8.07298265e+00 3.90982990e-01 1.24920416e+00
 8.59903407e+00 4.29582399e+01 4.90992298e-01 1.19902363e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320594906336613
cond(S) = 76.79732706579912
E1 = -689.241271431171  E_coul = 184.90164699077613
init E= -504.339624440395
    CPU time for initialize scf      0.13 sec, wall time      0.02 sec
  HOMO = -0.680597194770314  LUMO = 65.0804953569098
  mo_energy =
[-1.21666923e+02 -1.32880390e+01 -7.62343612e+00 -7.62343612e+00
 -7.62343612e+00 -1.65003214e+00 -6.80597195e-01 -6.80597195e-01
 -6.80597195e-01  6.50804954e+01  4.90406904e+02  2.51751466e+03
  1.30143071e+04  5.08930666e+04]
E1 = -706.6238480648137  E_coul = 198.9439522834648
cycle= 1 E= -507.679895781349  delta_E= -3.34  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.14 sec, wall time      0.01 sec
diis-norm(errvec)=0.440201
diis-c [-0.19377656  1.        ]
  HOMO = -0.236403446358633  LUMO = 66.3841942120036
  mo_energy =
[-1.20271661e+02 -1.22601345e+01 -6.65447888e+00 -6.65447888e+00
 -6.65447888e+00 -1.16384165e+00 -2.36403446e-01 -2.36403446e-01
 -2.36403446e-01  6.63841942e+01  4.91790354e+02  2.51881609e+03
  1.30154718e+04  5.08941427e+04]
E1 = -706.5783358897717  E_coul = 198.8978049602783
cycle= 2 E= -507.680530929493  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.10 sec, wall time      0.01 sec
diis-norm(errvec)=0.00627377
diis-c [-3.90941519e-05  1.17038304e-03  9.98829617e-01]
  HOMO = -0.236679559380035  LUMO = 66.3798855077946
  mo_energy =
[-1.20283483e+02 -1.22619729e+01 -6.65729915e+00 -6.65729915e+00
 -6.65729915e+00 -1.16394434e+00 -2.36679559e-01 -2.36679559e-01
 -2.36679559e-01  6.63798855e+01  4.91777587e+02  2.51879717e+03
  1.30154487e+04  5.08941179e+04]
E1 = -706.577588566167  E_coul = 198.89705742771008
cycle= 3 E= -507.680531138457  delta_E= -2.09e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0001894
diis-c [-8.66270623e-10  3.26054142e-05 -3.04906038e-02  1.03045800e+00]
  HOMO = -0.236684080648311  LUMO = 66.3798102955868
  mo_energy =
[-1.20283690e+02 -1.22620045e+01 -6.65735178e+00 -6.65735178e+00
 -6.65735178e+00 -1.16394575e+00 -2.36684081e-01 -2.36684081e-01
 -2.36684081e-01  6.63798103e+01  4.91777381e+02  2.51879690e+03
  1.30154484e+04  5.08941176e+04]
E1 = -706.5775729723373  E_coul = 198.89704183376918
cycle= 4 E= -507.680531138568  delta_E= -1.11e-10  |g|= 6.45e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.01 sec
E1 = -706.5775729723373  E_coul = 198.89704183376918
  HOMO = -0.236684043924369  LUMO = 66.379810836721
  mo_energy =
[-1.20283688e+02 -1.22620043e+01 -6.65735144e+00 -6.65735144e+00
 -6.65735144e+00 -1.16394574e+00 -2.36684044e-01 -2.36684044e-01
 -2.36684044e-01  6.63798108e+01  4.91777383e+02  2.51879691e+03
  1.30154484e+04  5.08941176e+04]
E1 = -706.5775730571736  E_coul = 198.89704191860608
Extra cycle  E= -507.680531138568  delta_E= 5.68e-13  |g|= 1.24e-08  |ddm|= 4e-08
    CPU time for scf_cycle      0.40 sec, wall time      0.07 sec
exp = [7.34340484e+03 1.83773239e+04 1.41183651e+03 3.32866411e+02
 9.71067320e+01 3.28116383e+01 4.70643422e+00 3.90982990e-01
 8.59903407e+00 4.90992298e-01]
E = -507.6805311385675
E = -507.6805311385675
exp = [7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
