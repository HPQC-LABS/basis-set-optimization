created virtual environment CPython3.10.2.final.0-64 in 1201ms
  creator CPython3Posix(dest=/localscratch/nike.35632352.0/ENV, clear=True, no_vcs_ignore=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/nike/.local/share/virtualenv)
    added seed packages: pip==22.3.1, setuptools==67.3.3, wheel==0.38.4+computecanada
  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: pip in /localscratch/nike.35632352.0/ENV/lib/python3.10/site-packages (22.3.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pip-23.0+computecanada-py3-none-any.whl
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 22.3.1
    Uninstalling pip-22.3.1:
      Successfully uninstalled pip-22.3.1
Successfully installed pip-23.0+computecanada
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /home/nike/pyscf_ad/dist/pyscf-2.1.1+ad-cp310-cp310-linux_x86_64.whl
Processing /home/nike/properties_ad/dist/pyscf_properties-0.1.0+ad-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/absl_py-1.4.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/contourpy-1.0.7+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/fonttools-4.39.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/h5py-3.8.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jax-0.4.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/jaxlib-0.4.2+cuda11.cudnn82.computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jaxopt-0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/kiwisolver-1.4.4+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/matplotlib-3.7.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.24.2+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/opt_einsum-3.3.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/packaging-23.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/Pillow-9.4.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.9+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyscfad-0.1.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.10.1+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.5.0+computecanada-py3-none-any.whl
Installing collected packages: typing_extensions, six, pyparsing, Pillow, packaging, numpy, kiwisolver, fonttools, cycler, absl_py, scipy, python-dateutil, opt-einsum, h5py, contourpy, pyscf, matplotlib, jaxlib, pyscf-properties, jax, jaxopt, pyscfad
Successfully installed Pillow-9.4.0+computecanada absl_py-1.4.0+computecanada contourpy-1.0.7+computecanada cycler-0.11.0+computecanada fonttools-4.39.0+computecanada h5py-3.8.0+computecanada jax-0.4.2+computecanada jaxlib-0.4.2+cuda11.cudnn82.computecanada jaxopt-0.6+computecanada kiwisolver-1.4.4+computecanada matplotlib-3.7.0+computecanada numpy-1.24.2+computecanada opt-einsum-3.3.0+computecanada packaging-23.0+computecanada pyparsing-3.0.9+computecanada pyscf-2.1.1+ad pyscf-properties-0.1.0+ad pyscfad-0.1.2+computecanada python-dateutil-2.8.2+computecanada scipy-1.10.1+computecanada six-1.16.0+computecanada typing_extensions-4.5.0+computecanada
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((16, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([5.8808407130324619e+05,2.9404203565162310e+05,1.4702101782581155e+05,7.3510507976032939e+04,3.6755234472949749e+04,7.3318021734695621e+03,1.8377161218510078e+04,1.2389777727143498e+03,2.9819001594010280e+02,8.8430468748019706e+01,3.0676681173089506e+01,4.6834518331880934e+00,3.9101606979807535e-01,8.5988787479386612e+00,4.9105109461223539e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "14s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12045.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 01:17:31 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35632352.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1176168.14261        1
[INPUT] 0    0    [1    /1   ]  588084.071303        1
[INPUT] 0    0    [1    /1   ]  294042.035652        1
[INPUT] 0    0    [1    /1   ]  147021.017826        1
[INPUT] 0    0    [1    /1   ]  73510.507976         1
[INPUT] 0    0    [1    /1   ]  36755.2344729        1
[INPUT] 0    0    [1    /1   ]  7331.80217347        1
[INPUT] 0    0    [1    /1   ]  18377.1612185        1
[INPUT] 0    0    [1    /1   ]  1238.97777271        1
[INPUT] 0    0    [1    /1   ]  298.19001594         1
[INPUT] 0    0    [1    /1   ]  88.430468748         1
[INPUT] 0    0    [1    /1   ]  30.6766811731        1
[INPUT] 0    0    [1    /1   ]  4.68345183319        1
[INPUT] 0    0    [1    /1   ]  0.391016069798       1
[INPUT] 1    0    [1    /1   ]  8.59887874794        1
[INPUT] 1    0    [1    /1   ]  0.491051094612       1

nuclear repulsion = 0
number of shells = 16
number of NR pGTOs = 20
number of NR cGTOs = 20
basis = {'Ar': [[0, [1176168.1426064924, 1.0]], [0, [588084.0713032462, 1.0]], [0, [294042.0356516231, 1.0]], [0, [147021.01782581155, 1.0]], [0, [73510.50797603294, 1.0]], [0, [36755.23447294975, 1.0]], [0, [7331.802173469562, 1.0]], [0, [18377.16121851008, 1.0]], [0, [1238.9777727143498, 1.0]], [0, [298.1900159401028, 1.0]], [0, [88.4304687480197, 1.0]], [0, [30.676681173089506, 1.0]], [0, [4.683451833188093, 1.0]], [0, [0.39101606979807535, 1.0]], [1, [8.598878747938661, 1.0]], [1, [0.4910510946122354, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1176168.14260649]
bas 1, expnt(s) = [588084.07130325]
bas 2, expnt(s) = [294042.03565162]
bas 3, expnt(s) = [147021.01782581]
bas 4, expnt(s) = [73510.50797603]
bas 5, expnt(s) = [36755.23447295]
bas 6, expnt(s) = [7331.80217347]
bas 7, expnt(s) = [18377.16121851]
bas 8, expnt(s) = [1238.97777271]
bas 9, expnt(s) = [298.19001594]
bas 10, expnt(s) = [88.43046875]
bas 11, expnt(s) = [30.67668117]
bas 12, expnt(s) = [4.68345183]
bas 13, expnt(s) = [0.39101607]
bas 14, expnt(s) = [8.59887875]
bas 15, expnt(s) = [0.49105109]
CPU time:         3.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  0  1  1  0 48 49  0]
 [ 0  0  1  1  0 50 51  0]
 [ 0  1  1  1  0 52 53  0]
 [ 0  1  1  1  0 54 55  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.17616814e+06 9.02333504e+04 5.88084071e+05 5.36530712e+04
 2.94042036e+05 3.19023070e+04 1.47021018e+05 1.89692252e+04
 7.35105080e+04 1.12791687e+04 3.67552345e+04 6.70663116e+03
 7.33180217e+03 2.00181103e+03 1.83771612e+04 3.98771253e+03
 1.23897777e+03 5.27609565e+02 2.98190016e+02 1.81294591e+02
 8.84304687e+01 7.28561923e+01 3.06766812e+01 3.29322424e+01
 4.68345183e+00 8.04339817e+00 3.91016070e-01 1.24928343e+00
 8.59887875e+00 4.29572700e+01 4.91051095e-01 1.19920311e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32091904164636
cond(S) = 12522.304058752921
E1 = -689.0022809672988  E_coul = 184.89341394777935
init E= -504.108867019519
    CPU time for initialize scf      1.88 sec, wall time      0.43 sec
  HOMO = -0.680411641235632  LUMO = 57.8458318476841
  mo_energy =
[-1.21689153e+02 -1.32943549e+01 -7.62443068e+00 -7.62443068e+00
 -7.62443068e+00 -1.64989001e+00 -6.80411641e-01 -6.80411641e-01
 -6.80411641e-01  5.78458318e+01  4.33802570e+02  2.20169531e+03
  1.13821027e+04  4.09765391e+04  1.09833021e+05  2.54034386e+05
  5.48465633e+05  1.15241450e+06  2.43019814e+06  5.37493391e+06]
E1 = -706.6827790188089  E_coul = 198.94970697502396
cycle= 1 E= -507.733072043785  delta_E= -3.62  |g|= 0.345  |ddm|= 0.303
    CPU time for cycle= 1      0.64 sec, wall time      0.65 sec
diis-norm(errvec)=0.544325
diis-c [-0.29629003  1.        ]
  HOMO = -0.236412193613499  LUMO = 59.1351183156769
  mo_energy =
[-1.20288229e+02 -1.22661117e+01 -6.65476081e+00 -6.65476081e+00
 -6.65476081e+00 -1.16419133e+00 -2.36412194e-01 -2.36412194e-01
 -2.36412194e-01  5.91351183e+01  4.35191498e+02  2.20301528e+03
  1.13832902e+04  4.09776522e+04  1.09834095e+05  2.54035432e+05
  5.48466659e+05  1.15241551e+06  2.43019914e+06  5.37493490e+06]
E1 = -706.629636015628  E_coul = 198.89581357171755
cycle= 2 E= -507.73382244391  delta_E= -0.00075  |g|= 0.00634  |ddm|= 0.0255
    CPU time for cycle= 2      0.22 sec, wall time      0.22 sec
diis-norm(errvec)=0.00682474
diis-c [-4.59075796e-05  1.50103701e-03  9.98498963e-01]
  HOMO = -0.236747278979828  LUMO = 59.1304375216441
  mo_energy =
[-1.20301681e+02 -1.22683258e+01 -6.65813275e+00 -6.65813275e+00
 -6.65813275e+00 -1.16431691e+00 -2.36747279e-01 -2.36747279e-01
 -2.36747279e-01  5.91304375e+01  4.35177579e+02  2.20299467e+03
  1.13832648e+04  4.09776253e+04  1.09834067e+05  2.54035404e+05
  5.48466631e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6287062103665  E_coul = 198.89488349376657
cycle= 3 E= -507.7338227166  delta_E= -2.73e-07  |g|= 0.000161  |ddm|= 0.000433
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000217536
diis-c [-1.21375766e-09  2.43891021e-05 -3.22094541e-02  1.03218506e+00]
  HOMO = -0.236753201059959  LUMO = 59.1303480582296
  mo_energy =
[-1.20301938e+02 -1.22683669e+01 -6.65820037e+00 -6.65820037e+00
 -6.65820037e+00 -1.16431879e+00 -2.36753201e-01 -2.36753201e-01
 -2.36753201e-01  5.91303481e+01  4.35177330e+02  2.20299435e+03
  1.13832644e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286854003804  E_coul = 198.89486268361952
cycle= 4 E= -507.733822716761  delta_E= -1.61e-10  |g|= 8.34e-07  |ddm|= 9.66e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6286854003804  E_coul = 198.89486268361952
  HOMO = -0.236753147571312  LUMO = 59.1303487436791
  mo_energy =
[-1.20301936e+02 -1.22683666e+01 -6.65819989e+00 -6.65819989e+00
 -6.65819989e+00 -1.16431877e+00 -2.36753148e-01 -2.36753148e-01
 -2.36753148e-01  5.91303487e+01  4.35177332e+02  2.20299435e+03
  1.13832645e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286855250504  E_coul = 198.8948628082894
Extra cycle  E= -507.733822716761  delta_E= -1.14e-13  |g|= 1.68e-08  |ddm|= 5.99e-08
    CPU time for scf_cycle      2.83 sec, wall time      1.39 sec
exp = [1.17616814e+06 5.88084071e+05 2.94042036e+05 1.47021018e+05
 7.35105080e+04 3.67552345e+04 7.33180217e+03 1.83771612e+04
 1.23897777e+03 2.98190016e+02 8.84304687e+01 3.06766812e+01
 4.68345183e+00 3.91016070e-01 8.59887875e+00 4.91051095e-01]
E = -507.733822716761
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((16, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([5.8808407130324619e+05,2.9404203565162310e+05,1.4702101782581155e+05,7.3510507976032939e+04,3.6755234472949749e+04,7.3318021734695621e+03,1.8377161218510078e+04,1.2389777727143498e+03,2.9819001594010280e+02,8.8430468748019706e+01,3.0676681173089506e+01,4.6834518331880934e+00,3.9101606979807535e-01,8.5988787479386612e+00,4.9105109461223539e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "14s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12045.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 01:17:33 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35632352.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1176168.14261        1
[INPUT] 0    0    [1    /1   ]  588084.071303        1
[INPUT] 0    0    [1    /1   ]  294042.035652        1
[INPUT] 0    0    [1    /1   ]  147021.017826        1
[INPUT] 0    0    [1    /1   ]  73510.507976         1
[INPUT] 0    0    [1    /1   ]  36755.2344729        1
[INPUT] 0    0    [1    /1   ]  7331.80217347        1
[INPUT] 0    0    [1    /1   ]  18377.1612185        1
[INPUT] 0    0    [1    /1   ]  1238.97777271        1
[INPUT] 0    0    [1    /1   ]  298.19001594         1
[INPUT] 0    0    [1    /1   ]  88.430468748         1
[INPUT] 0    0    [1    /1   ]  30.6766811731        1
[INPUT] 0    0    [1    /1   ]  4.68345183319        1
[INPUT] 0    0    [1    /1   ]  0.391016069798       1
[INPUT] 1    0    [1    /1   ]  8.59887874794        1
[INPUT] 1    0    [1    /1   ]  0.491051094612       1

nuclear repulsion = 0
number of shells = 16
number of NR pGTOs = 20
number of NR cGTOs = 20
basis = {'Ar': [[0, [1176168.1426064924, 1.0]], [0, [588084.0713032462, 1.0]], [0, [294042.0356516231, 1.0]], [0, [147021.01782581155, 1.0]], [0, [73510.50797603294, 1.0]], [0, [36755.23447294975, 1.0]], [0, [7331.802173469562, 1.0]], [0, [18377.16121851008, 1.0]], [0, [1238.9777727143498, 1.0]], [0, [298.1900159401028, 1.0]], [0, [88.4304687480197, 1.0]], [0, [30.676681173089506, 1.0]], [0, [4.683451833188093, 1.0]], [0, [0.39101606979807535, 1.0]], [1, [8.598878747938661, 1.0]], [1, [0.4910510946122354, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1176168.14260649]
bas 1, expnt(s) = [588084.07130325]
bas 2, expnt(s) = [294042.03565162]
bas 3, expnt(s) = [147021.01782581]
bas 4, expnt(s) = [73510.50797603]
bas 5, expnt(s) = [36755.23447295]
bas 6, expnt(s) = [7331.80217347]
bas 7, expnt(s) = [18377.16121851]
bas 8, expnt(s) = [1238.97777271]
bas 9, expnt(s) = [298.19001594]
bas 10, expnt(s) = [88.43046875]
bas 11, expnt(s) = [30.67668117]
bas 12, expnt(s) = [4.68345183]
bas 13, expnt(s) = [0.39101607]
bas 14, expnt(s) = [8.59887875]
bas 15, expnt(s) = [0.49105109]
CPU time:         7.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  0  1  1  0 48 49  0]
 [ 0  0  1  1  0 50 51  0]
 [ 0  1  1  1  0 52 53  0]
 [ 0  1  1  1  0 54 55  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.17616814e+06 9.02333504e+04 5.88084071e+05 5.36530712e+04
 2.94042036e+05 3.19023070e+04 1.47021018e+05 1.89692252e+04
 7.35105080e+04 1.12791687e+04 3.67552345e+04 6.70663116e+03
 7.33180217e+03 2.00181103e+03 1.83771612e+04 3.98771253e+03
 1.23897777e+03 5.27609565e+02 2.98190016e+02 1.81294591e+02
 8.84304687e+01 7.28561923e+01 3.06766812e+01 3.29322424e+01
 4.68345183e+00 8.04339817e+00 3.91016070e-01 1.24928343e+00
 8.59887875e+00 4.29572700e+01 4.91051095e-01 1.19920311e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32091904164636
cond(S) = 12522.304058752921
E1 = -689.0022809672988  E_coul = 184.89341394777935
init E= -504.108867019519
    CPU time for initialize scf      0.37 sec, wall time      0.06 sec
  HOMO = -0.680411641235632  LUMO = 57.8458318476841
  mo_energy =
[-1.21689153e+02 -1.32943549e+01 -7.62443068e+00 -7.62443068e+00
 -7.62443068e+00 -1.64989001e+00 -6.80411641e-01 -6.80411641e-01
 -6.80411641e-01  5.78458318e+01  4.33802570e+02  2.20169531e+03
  1.13821027e+04  4.09765391e+04  1.09833021e+05  2.54034386e+05
  5.48465633e+05  1.15241450e+06  2.43019814e+06  5.37493391e+06]
E1 = -706.6827790188089  E_coul = 198.94970697502396
cycle= 1 E= -507.733072043785  delta_E= -3.62  |g|= 0.345  |ddm|= 0.303
    CPU time for cycle= 1      0.39 sec, wall time      0.02 sec
diis-norm(errvec)=0.544325
diis-c [-0.29629003  1.        ]
  HOMO = -0.236412193613499  LUMO = 59.1351183156769
  mo_energy =
[-1.20288229e+02 -1.22661117e+01 -6.65476081e+00 -6.65476081e+00
 -6.65476081e+00 -1.16419133e+00 -2.36412194e-01 -2.36412194e-01
 -2.36412194e-01  5.91351183e+01  4.35191498e+02  2.20301528e+03
  1.13832902e+04  4.09776522e+04  1.09834095e+05  2.54035432e+05
  5.48466659e+05  1.15241551e+06  2.43019914e+06  5.37493490e+06]
E1 = -706.629636015628  E_coul = 198.89581357171755
cycle= 2 E= -507.73382244391  delta_E= -0.00075  |g|= 0.00634  |ddm|= 0.0255
    CPU time for cycle= 2      0.16 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682474
diis-c [-4.59075796e-05  1.50103701e-03  9.98498963e-01]
  HOMO = -0.236747278979828  LUMO = 59.1304375216441
  mo_energy =
[-1.20301681e+02 -1.22683258e+01 -6.65813275e+00 -6.65813275e+00
 -6.65813275e+00 -1.16431691e+00 -2.36747279e-01 -2.36747279e-01
 -2.36747279e-01  5.91304375e+01  4.35177579e+02  2.20299467e+03
  1.13832648e+04  4.09776253e+04  1.09834067e+05  2.54035404e+05
  5.48466631e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6287062103665  E_coul = 198.89488349376657
cycle= 3 E= -507.7338227166  delta_E= -2.73e-07  |g|= 0.000161  |ddm|= 0.000433
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000217536
diis-c [-1.21375766e-09  2.43891021e-05 -3.22094541e-02  1.03218506e+00]
  HOMO = -0.236753201059959  LUMO = 59.1303480582296
  mo_energy =
[-1.20301938e+02 -1.22683669e+01 -6.65820037e+00 -6.65820037e+00
 -6.65820037e+00 -1.16431879e+00 -2.36753201e-01 -2.36753201e-01
 -2.36753201e-01  5.91303481e+01  4.35177330e+02  2.20299435e+03
  1.13832644e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286854003804  E_coul = 198.89486268361952
cycle= 4 E= -507.733822716761  delta_E= -1.61e-10  |g|= 8.34e-07  |ddm|= 9.66e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6286854003804  E_coul = 198.89486268361952
  HOMO = -0.236753147571312  LUMO = 59.1303487436791
  mo_energy =
[-1.20301936e+02 -1.22683666e+01 -6.65819989e+00 -6.65819989e+00
 -6.65819989e+00 -1.16431877e+00 -2.36753148e-01 -2.36753148e-01
 -2.36753148e-01  5.91303487e+01  4.35177332e+02  2.20299435e+03
  1.13832645e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286855250504  E_coul = 198.8948628082894
Extra cycle  E= -507.733822716761  delta_E= -1.14e-13  |g|= 1.68e-08  |ddm|= 5.99e-08
    CPU time for scf_cycle      1.01 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 12522.304058752921
E1 = -706.6286855250504  E_coul = 198.8948628082894
init E= -507.733822716761
    CPU time for initialize scf      7.91 sec, wall time      0.74 sec
  HOMO = -0.236753146797224  LUMO = 59.1303487545352
  mo_energy =
[-1.20301936e+02 -1.22683666e+01 -6.65819988e+00 -6.65819988e+00
 -6.65819988e+00 -1.16431877e+00 -2.36753147e-01 -2.36753147e-01
 -2.36753147e-01  5.91303488e+01  4.35177332e+02  2.20299435e+03
  1.13832645e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286855273619  E_coul = 198.89486281060084
cycle= 1 E= -507.733822716761  delta_E= -5.68e-14  |g|= 4e-10  |ddm|= 1.08e-09
    CPU time for cycle= 1      0.35 sec, wall time      0.02 sec
E1 = -706.6286855273619  E_coul = 198.89486281060084
  HOMO = -0.236753146784428  LUMO = 59.1303487547342
  mo_energy =
[-1.20301936e+02 -1.22683666e+01 -6.65819988e+00 -6.65819988e+00
 -6.65819988e+00 -1.16431877e+00 -2.36753147e-01 -2.36753147e-01
 -2.36753147e-01  5.91303488e+01  4.35177332e+02  2.20299435e+03
  1.13832645e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286855274103  E_coul = 198.89486281064927
Extra cycle  E= -507.733822716761  delta_E=    0  |g|= 1.13e-10  |ddm|= 2.23e-11
    CPU time for scf_cycle     10.41 sec, wall time      2.91 sec
exp = [1.17616814e+06 5.88084071e+05 2.94042036e+05 1.47021018e+05
 7.35105080e+04 3.67552345e+04 7.33180217e+03 1.83771612e+04
 1.23897777e+03 2.98190016e+02 8.84304687e+01 3.06766812e+01
 4.68345183e+00 3.91016070e-01 8.59887875e+00 4.91051095e-01]
grad_E = [-1.89022206e-11  4.16665406e-10  1.40028731e-09  8.21936263e-09
  2.70907160e-08  1.64964394e-07  9.03758132e-06  4.08817216e-07
  3.51246994e-06 -3.30139475e-06  1.09183442e-05 -8.89866359e-06
 -9.90961680e-06 -1.21617655e-05  7.93425087e-07  1.24439759e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.733822716761
       x: [ 1.176e+06  5.881e+05 ...  8.599e+00  4.911e-01]
     nit: 1
     jac: [-1.890e-11  4.167e-10 ...  7.934e-07  1.244e-06]
    nfev: 1
    njev: 1
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((16, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([5.8808407130324619e+05,2.9404203565162310e+05,1.4702101782581155e+05,7.3510507976032939e+04,3.6755234472949749e+04,7.3318021734695621e+03,1.8377161218510078e+04,1.2389777727143498e+03,2.9819001594010280e+02,8.8430468748019706e+01,3.0676681173089506e+01,4.6834518331880934e+00,3.9101606979807535e-01,8.5988787479386612e+00,4.9105109461223539e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "14s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12045.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 01:17:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35632352.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  1176168.14261        1
[INPUT] 0    0    [1    /1   ]  588084.071303        1
[INPUT] 0    0    [1    /1   ]  294042.035652        1
[INPUT] 0    0    [1    /1   ]  147021.017826        1
[INPUT] 0    0    [1    /1   ]  73510.507976         1
[INPUT] 0    0    [1    /1   ]  36755.2344729        1
[INPUT] 0    0    [1    /1   ]  7331.80217347        1
[INPUT] 0    0    [1    /1   ]  18377.1612185        1
[INPUT] 0    0    [1    /1   ]  1238.97777271        1
[INPUT] 0    0    [1    /1   ]  298.19001594         1
[INPUT] 0    0    [1    /1   ]  88.430468748         1
[INPUT] 0    0    [1    /1   ]  30.6766811731        1
[INPUT] 0    0    [1    /1   ]  4.68345183319        1
[INPUT] 0    0    [1    /1   ]  0.391016069798       1
[INPUT] 1    0    [1    /1   ]  8.59887874794        1
[INPUT] 1    0    [1    /1   ]  0.491051094612       1

nuclear repulsion = 0
number of shells = 16
number of NR pGTOs = 20
number of NR cGTOs = 20
basis = {'Ar': [[0, [1176168.1426064924, 1.0]], [0, [588084.0713032462, 1.0]], [0, [294042.0356516231, 1.0]], [0, [147021.01782581155, 1.0]], [0, [73510.50797603294, 1.0]], [0, [36755.23447294975, 1.0]], [0, [7331.802173469562, 1.0]], [0, [18377.16121851008, 1.0]], [0, [1238.9777727143498, 1.0]], [0, [298.1900159401028, 1.0]], [0, [88.4304687480197, 1.0]], [0, [30.676681173089506, 1.0]], [0, [4.683451833188093, 1.0]], [0, [0.39101606979807535, 1.0]], [1, [8.598878747938661, 1.0]], [1, [0.4910510946122354, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [1176168.14260649]
bas 1, expnt(s) = [588084.07130325]
bas 2, expnt(s) = [294042.03565162]
bas 3, expnt(s) = [147021.01782581]
bas 4, expnt(s) = [73510.50797603]
bas 5, expnt(s) = [36755.23447295]
bas 6, expnt(s) = [7331.80217347]
bas 7, expnt(s) = [18377.16121851]
bas 8, expnt(s) = [1238.97777271]
bas 9, expnt(s) = [298.19001594]
bas 10, expnt(s) = [88.43046875]
bas 11, expnt(s) = [30.67668117]
bas 12, expnt(s) = [4.68345183]
bas 13, expnt(s) = [0.39101607]
bas 14, expnt(s) = [8.59887875]
bas 15, expnt(s) = [0.49105109]
CPU time:        29.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  0  1  1  0 42 43  0]
 [ 0  0  1  1  0 44 45  0]
 [ 0  0  1  1  0 46 47  0]
 [ 0  0  1  1  0 48 49  0]
 [ 0  0  1  1  0 50 51  0]
 [ 0  1  1  1  0 52 53  0]
 [ 0  1  1  1  0 54 55  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 1.17616814e+06 9.02333504e+04 5.88084071e+05 5.36530712e+04
 2.94042036e+05 3.19023070e+04 1.47021018e+05 1.89692252e+04
 7.35105080e+04 1.12791687e+04 3.67552345e+04 6.70663116e+03
 7.33180217e+03 2.00181103e+03 1.83771612e+04 3.98771253e+03
 1.23897777e+03 5.27609565e+02 2.98190016e+02 1.81294591e+02
 8.84304687e+01 7.28561923e+01 3.06766812e+01 3.29322424e+01
 4.68345183e+00 8.04339817e+00 3.91016070e-01 1.24928343e+00
 8.59887875e+00 4.29572700e+01 4.91051095e-01 1.19920311e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32091904164636
cond(S) = 12522.304058752921
E1 = -689.0022809672988  E_coul = 184.89341394777935
init E= -504.108867019519
    CPU time for initialize scf      0.36 sec, wall time      0.06 sec
  HOMO = -0.680411641235632  LUMO = 57.8458318476841
  mo_energy =
[-1.21689153e+02 -1.32943549e+01 -7.62443068e+00 -7.62443068e+00
 -7.62443068e+00 -1.64989001e+00 -6.80411641e-01 -6.80411641e-01
 -6.80411641e-01  5.78458318e+01  4.33802570e+02  2.20169531e+03
  1.13821027e+04  4.09765391e+04  1.09833021e+05  2.54034386e+05
  5.48465633e+05  1.15241450e+06  2.43019814e+06  5.37493391e+06]
E1 = -706.6827790188089  E_coul = 198.94970697502396
cycle= 1 E= -507.733072043785  delta_E= -3.62  |g|= 0.345  |ddm|= 0.303
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.544325
diis-c [-0.29629003  1.        ]
  HOMO = -0.236412193613499  LUMO = 59.1351183156769
  mo_energy =
[-1.20288229e+02 -1.22661117e+01 -6.65476081e+00 -6.65476081e+00
 -6.65476081e+00 -1.16419133e+00 -2.36412194e-01 -2.36412194e-01
 -2.36412194e-01  5.91351183e+01  4.35191498e+02  2.20301528e+03
  1.13832902e+04  4.09776522e+04  1.09834095e+05  2.54035432e+05
  5.48466659e+05  1.15241551e+06  2.43019914e+06  5.37493490e+06]
E1 = -706.629636015628  E_coul = 198.89581357171755
cycle= 2 E= -507.73382244391  delta_E= -0.00075  |g|= 0.00634  |ddm|= 0.0255
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682474
diis-c [-4.59075796e-05  1.50103701e-03  9.98498963e-01]
  HOMO = -0.236747278979828  LUMO = 59.1304375216441
  mo_energy =
[-1.20301681e+02 -1.22683258e+01 -6.65813275e+00 -6.65813275e+00
 -6.65813275e+00 -1.16431691e+00 -2.36747279e-01 -2.36747279e-01
 -2.36747279e-01  5.91304375e+01  4.35177579e+02  2.20299467e+03
  1.13832648e+04  4.09776253e+04  1.09834067e+05  2.54035404e+05
  5.48466631e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6287062103665  E_coul = 198.89488349376657
cycle= 3 E= -507.7338227166  delta_E= -2.73e-07  |g|= 0.000161  |ddm|= 0.000433
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000217536
diis-c [-1.21375766e-09  2.43891021e-05 -3.22094541e-02  1.03218506e+00]
  HOMO = -0.236753201059959  LUMO = 59.1303480582296
  mo_energy =
[-1.20301938e+02 -1.22683669e+01 -6.65820037e+00 -6.65820037e+00
 -6.65820037e+00 -1.16431879e+00 -2.36753201e-01 -2.36753201e-01
 -2.36753201e-01  5.91303481e+01  4.35177330e+02  2.20299435e+03
  1.13832644e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286854003804  E_coul = 198.89486268361952
cycle= 4 E= -507.733822716761  delta_E= -1.61e-10  |g|= 8.34e-07  |ddm|= 9.66e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6286854003804  E_coul = 198.89486268361952
  HOMO = -0.236753147571312  LUMO = 59.1303487436791
  mo_energy =
[-1.20301936e+02 -1.22683666e+01 -6.65819989e+00 -6.65819989e+00
 -6.65819989e+00 -1.16431877e+00 -2.36753148e-01 -2.36753148e-01
 -2.36753148e-01  5.91303487e+01  4.35177332e+02  2.20299435e+03
  1.13832645e+04  4.09776249e+04  1.09834067e+05  2.54035403e+05
  5.48466630e+05  1.15241548e+06  2.43019911e+06  5.37493487e+06]
E1 = -706.6286855250504  E_coul = 198.8948628082894
Extra cycle  E= -507.733822716761  delta_E= -1.14e-13  |g|= 1.68e-08  |ddm|= 5.99e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [1.17616814e+06 5.88084071e+05 2.94042036e+05 1.47021018e+05
 7.35105080e+04 3.67552345e+04 7.33180217e+03 1.83771612e+04
 1.23897777e+03 2.98190016e+02 8.84304687e+01 3.06766812e+01
 4.68345183e+00 3.91016070e-01 8.59887875e+00 4.91051095e-01]
E = -507.733822716761
E = -507.733822716761
exp = [1.1761681426064924e+06,5.8808407130324619e+05,2.9404203565162310e+05,1.4702101782581155e+05,7.3510507976032939e+04,3.6755234472949749e+04,7.3318021734695621e+03,1.8377161218510078e+04,1.2389777727143498e+03,2.9819001594010280e+02,8.8430468748019706e+01,3.0676681173089506e+01,4.6834518331880934e+00,3.9101606979807535e-01,8.5988787479386612e+00,4.9105109461223539e-01]
