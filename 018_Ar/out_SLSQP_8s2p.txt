#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466227        1
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662266621, 1.0]], [0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662267]
bas 1, expnt(s) = [18354.96165567]
bas 2, expnt(s) = [2232.15693733]
bas 3, expnt(s) = [457.77843089]
bas 4, expnt(s) = [121.89136989]
bas 5, expnt(s) = [37.61846071]
bas 6, expnt(s) = [4.74115623]
bas 7, expnt(s) = [0.39118886]
bas 8, expnt(s) = [8.59867023]
bas 9, expnt(s) = [0.49085158]
CPU time:         1.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549617e+04 3.98409913e+03
 2.23215694e+03 8.20462183e+02 4.57778431e+02 2.50038289e+02
 1.21891370e+02 9.26818604e+01 3.76184607e+01 3.83765377e+01
 4.74115623e+00 8.11761078e+00 3.91188864e-01 1.24969746e+00
 8.59867023e+00 4.29559679e+01 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972714197164
cond(S) = 44.38520679874129
E1 = -689.0440713291174  E_coul = 184.91522511812465
init E= -504.128846210993
    CPU time for initialize scf      0.16 sec, wall time      0.17 sec
  HOMO = -0.680903909080906  LUMO = 85.1784675064039
  mo_energy =
[-1.21646553e+02 -1.32808773e+01 -7.62161990e+00 -7.62161990e+00
 -7.62161990e+00 -1.65067875e+00 -6.80903909e-01 -6.80903909e-01
 -6.80903909e-01  8.51784675e+01  6.78558704e+02  3.93731288e+03
  2.99905100e+04  1.63988014e+05]
E1 = -706.5758647500442  E_coul = 198.9450548808075
cycle= 1 E= -507.630809869237  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.36 sec, wall time      0.37 sec
diis-norm(errvec)=0.407035
diis-c [-0.16567709  1.        ]
  HOMO = -0.236280747893272  LUMO = 86.5116085716278
  mo_energy =
[-1.20258718e+02 -1.22527891e+01 -6.65309218e+00 -6.65309218e+00
 -6.65309218e+00 -1.16346193e+00 -2.36280748e-01 -2.36280748e-01
 -2.36280748e-01  8.65116086e+01  6.79928987e+02  3.93856375e+03
  2.99915971e+04  1.63989027e+05]
E1 = -706.5444940484748  E_coul = 198.91325708905308
cycle= 2 E= -507.631236959422  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.12 sec, wall time      0.13 sec
diis-norm(errvec)=0.00503689
diis-c [-2.53166925e-05 -5.68724419e-04  1.00056872e+00]
  HOMO = -0.236455545766072  LUMO = 86.5080942240914
  mo_energy =
[-1.20267343e+02 -1.22539751e+01 -6.65492911e+00 -6.65492911e+00
 -6.65492911e+00 -1.16352654e+00 -2.36455546e-01 -2.36455546e-01
 -2.36455546e-01  8.65080942e+01  6.79918413e+02  3.93854788e+03
  2.99915779e+04  1.63989007e+05]
E1 = -706.5440550616283  E_coul = 198.9128179924675
cycle= 3 E= -507.631237069161  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126271
diis-c [-3.87539906e-10  3.51315520e-05 -2.53977129e-02  1.02536258e+00]
  HOMO = -0.236457739435841  LUMO = 86.5080498986743
  mo_energy =
[-1.20267456e+02 -1.22539908e+01 -6.65495587e+00 -6.65495587e+00
 -6.65495587e+00 -1.16352719e+00 -2.36457739e-01 -2.36457739e-01
 -2.36457739e-01  8.65080499e+01  6.79918297e+02  3.93854774e+03
  2.99915777e+04  1.63989006e+05]
E1 = -706.544047878122  E_coul = 198.91281080892173
cycle= 4 E= -507.6312370692  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.544047878122  E_coul = 198.91281080892173
  HOMO = -0.236457723469424  LUMO = 86.5080502304913
  mo_energy =
[-1.20267455e+02 -1.22539907e+01 -6.65495571e+00 -6.65495571e+00
 -6.65495571e+00 -1.16352719e+00 -2.36457723e-01 -2.36457723e-01
 -2.36457723e-01  8.65080502e+01  6.79918298e+02  3.93854774e+03
  2.99915777e+04  1.63989006e+05]
E1 = -706.5440479143167  E_coul = 198.91281084511655
Extra cycle  E= -507.6312370692  delta_E= 1.14e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.69 sec, wall time      0.71 sec
exp = [7.34198466e+04 1.83549617e+04 2.23215694e+03 4.57778431e+02
 1.21891370e+02 3.76184607e+01 4.74115623e+00 3.91188864e-01
 8.59867023e+00 4.90851581e-01]
E = -507.63123706920015
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466227        1
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662266621, 1.0]], [0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662267]
bas 1, expnt(s) = [18354.96165567]
bas 2, expnt(s) = [2232.15693733]
bas 3, expnt(s) = [457.77843089]
bas 4, expnt(s) = [121.89136989]
bas 5, expnt(s) = [37.61846071]
bas 6, expnt(s) = [4.74115623]
bas 7, expnt(s) = [0.39118886]
bas 8, expnt(s) = [8.59867023]
bas 9, expnt(s) = [0.49085158]
CPU time:         1.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549617e+04 3.98409913e+03
 2.23215694e+03 8.20462183e+02 4.57778431e+02 2.50038289e+02
 1.21891370e+02 9.26818604e+01 3.76184607e+01 3.83765377e+01
 4.74115623e+00 8.11761078e+00 3.91188864e-01 1.24969746e+00
 8.59867023e+00 4.29559679e+01 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972714197164
cond(S) = 44.38520679874129
E1 = -689.0440713291174  E_coul = 184.91522511812465
init E= -504.128846210993
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680903909080906  LUMO = 85.1784675064039
  mo_energy =
[-1.21646553e+02 -1.32808773e+01 -7.62161990e+00 -7.62161990e+00
 -7.62161990e+00 -1.65067875e+00 -6.80903909e-01 -6.80903909e-01
 -6.80903909e-01  8.51784675e+01  6.78558704e+02  3.93731288e+03
  2.99905100e+04  1.63988014e+05]
E1 = -706.5758647500442  E_coul = 198.9450548808075
cycle= 1 E= -507.630809869237  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407035
diis-c [-0.16567709  1.        ]
  HOMO = -0.236280747893272  LUMO = 86.5116085716278
  mo_energy =
[-1.20258718e+02 -1.22527891e+01 -6.65309218e+00 -6.65309218e+00
 -6.65309218e+00 -1.16346193e+00 -2.36280748e-01 -2.36280748e-01
 -2.36280748e-01  8.65116086e+01  6.79928987e+02  3.93856375e+03
  2.99915971e+04  1.63989027e+05]
E1 = -706.5444940484748  E_coul = 198.91325708905308
cycle= 2 E= -507.631236959422  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503689
diis-c [-2.53166925e-05 -5.68724419e-04  1.00056872e+00]
  HOMO = -0.236455545766072  LUMO = 86.5080942240914
  mo_energy =
[-1.20267343e+02 -1.22539751e+01 -6.65492911e+00 -6.65492911e+00
 -6.65492911e+00 -1.16352654e+00 -2.36455546e-01 -2.36455546e-01
 -2.36455546e-01  8.65080942e+01  6.79918413e+02  3.93854788e+03
  2.99915779e+04  1.63989007e+05]
E1 = -706.5440550616283  E_coul = 198.9128179924675
cycle= 3 E= -507.631237069161  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126271
diis-c [-3.87539906e-10  3.51315520e-05 -2.53977129e-02  1.02536258e+00]
  HOMO = -0.236457739435841  LUMO = 86.5080498986743
  mo_energy =
[-1.20267456e+02 -1.22539908e+01 -6.65495587e+00 -6.65495587e+00
 -6.65495587e+00 -1.16352719e+00 -2.36457739e-01 -2.36457739e-01
 -2.36457739e-01  8.65080499e+01  6.79918297e+02  3.93854774e+03
  2.99915777e+04  1.63989006e+05]
E1 = -706.544047878122  E_coul = 198.91281080892173
cycle= 4 E= -507.6312370692  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.544047878122  E_coul = 198.91281080892173
  HOMO = -0.236457723469424  LUMO = 86.5080502304913
  mo_energy =
[-1.20267455e+02 -1.22539907e+01 -6.65495571e+00 -6.65495571e+00
 -6.65495571e+00 -1.16352719e+00 -2.36457723e-01 -2.36457723e-01
 -2.36457723e-01  8.65080502e+01  6.79918298e+02  3.93854774e+03
  2.99915777e+04  1.63989006e+05]
E1 = -706.5440479143167  E_coul = 198.91281084511655
Extra cycle  E= -507.6312370692  delta_E= 1.14e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.38520679874129
E1 = -706.5440479143167  E_coul = 198.91281084511655
init E= -507.6312370692
    CPU time for initialize scf      0.35 sec, wall time      0.35 sec
  HOMO = -0.236457723283028  LUMO = 86.5080502345403
  mo_energy =
[-1.20267455e+02 -1.22539906e+01 -6.65495571e+00 -6.65495571e+00
 -6.65495571e+00 -1.16352719e+00 -2.36457723e-01 -2.36457723e-01
 -2.36457723e-01  8.65080502e+01  6.79918298e+02  3.93854774e+03
  2.99915777e+04  1.63989006e+05]
E1 = -706.5440479148631  E_coul = 198.91281084566293
cycle= 1 E= -507.6312370692  delta_E=    0  |g|= 1.26e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5440479148631  E_coul = 198.91281084566293
  HOMO = -0.236457723280405  LUMO = 86.5080502345994
  mo_energy =
[-1.20267455e+02 -1.22539906e+01 -6.65495571e+00 -6.65495571e+00
 -6.65495571e+00 -1.16352719e+00 -2.36457723e-01 -2.36457723e-01
 -2.36457723e-01  8.65080502e+01  6.79918298e+02  3.93854774e+03
  2.99915777e+04  1.63989006e+05]
E1 = -706.5440479148722  E_coul = 198.91281084567214
Extra cycle  E= -507.6312370692  delta_E= 1.14e-13  |g|= 1.34e-11  |ddm|= 4.36e-12
    CPU time for scf_cycle      1.41 sec, wall time      1.60 sec
exp = [7.34198466e+04 1.83549617e+04 2.23215694e+03 4.57778431e+02
 1.21891370e+02 3.76184607e+01 4.74115623e+00 3.91188864e-01
 8.59867023e+00 4.90851581e-01]
grad_E = [-2.20544166e-07  7.42967223e-06 -2.37425326e-05  7.08103552e-05
 -1.48177927e-04  1.85609398e-04 -6.13176883e-05 -1.82873224e-04
  3.27589177e-05  1.19747336e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466229        1
[INPUT] 0    0    [1    /1   ]  18354.9616482        1
[INPUT] 0    0    [1    /1   ]  2232.15696107        1
[INPUT] 0    0    [1    /1   ]  457.778360076        1
[INPUT] 0    0    [1    /1   ]  121.891518066        1
[INPUT] 0    0    [1    /1   ]  37.6182751052        1
[INPUT] 0    0    [1    /1   ]  4.74121754518        1
[INPUT] 0    0    [1    /1   ]  0.391371737225       1
[INPUT] 1    0    [1    /1   ]  8.59863747355        1
[INPUT] 1    0    [1    /1   ]  0.49083960613        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662288676, 1.0]], [0, [18354.96164823688, 1.0]], [0, [2232.1569610682277, 1.0]], [0, [457.7783600757199, 1.0]], [0, [121.8915180655032, 1.0]], [0, [37.61827510521241, 1.0]], [0, [4.741217545178014, 1.0]], [0, [0.3913717372246044, 1.0]], [1, [8.59863747355169, 1.0]], [1, [0.49083960612987065, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662289]
bas 1, expnt(s) = [18354.96164824]
bas 2, expnt(s) = [2232.15696107]
bas 3, expnt(s) = [457.77836008]
bas 4, expnt(s) = [121.89151807]
bas 5, expnt(s) = [37.61827511]
bas 6, expnt(s) = [4.74121755]
bas 7, expnt(s) = [0.39137174]
bas 8, expnt(s) = [8.59863747]
bas 9, expnt(s) = [0.49083961]
CPU time:         8.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549616e+04 3.98409913e+03
 2.23215696e+03 8.20462190e+02 4.57778360e+02 2.50038260e+02
 1.21891518e+02 9.26819449e+01 3.76182751e+01 3.83763956e+01
 4.74121755e+00 8.11768951e+00 3.91371737e-01 1.25013559e+00
 8.59863747e+00 4.29557634e+01 4.90839606e-01 1.19855755e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319966028364757
cond(S) = 44.38554136642862
E1 = -689.0467184335491  E_coul = 184.91756074787116
init E= -504.129157685678
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680833172283858  LUMO = 85.1793032806132
  mo_energy =
[-1.21646372e+02 -1.32807059e+01 -7.62141820e+00 -7.62141820e+00
 -7.62141820e+00 -1.65068903e+00 -6.80833172e-01 -6.80833172e-01
 -6.80833172e-01  8.51793033e+01  6.78559247e+02  3.93731332e+03
  2.99905104e+04  1.63988015e+05]
E1 = -706.5788073671117  E_coul = 198.94799759933503
cycle= 1 E= -507.630809767777  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407039
diis-c [-0.16568079  1.        ]
  HOMO = -0.236204859446227  LUMO = 86.5124875017008
  mo_energy =
[-1.20258452e+02 -1.22525895e+01 -6.65285420e+00 -6.65285420e+00
 -6.65285420e+00 -1.16339798e+00 -2.36204859e-01 -2.36204859e-01
 -2.36204859e-01  8.65124875e+01  6.79929625e+02  3.93856431e+03
  2.99915976e+04  1.63989027e+05]
E1 = -706.5474373236192  E_coul = 198.9162005319659
cycle= 2 E= -507.631236791653  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503663
diis-c [-2.53142569e-05 -5.68180633e-04  1.00056818e+00]
  HOMO = -0.236379642437858  LUMO = 86.5089732048892
  mo_energy =
[-1.20267077e+02 -1.22537754e+01 -6.65469106e+00 -6.65469106e+00
 -6.65469106e+00 -1.16346262e+00 -2.36379642e-01 -2.36379642e-01
 -2.36379642e-01  8.65089732e+01  6.79919050e+02  3.93854844e+03
  2.99915784e+04  1.63989007e+05]
E1 = -706.5469983462631  E_coul = 198.91576144488138
cycle= 3 E= -507.631236901382  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126269
diis-c [-3.87486460e-10  3.51298188e-05 -2.53986034e-02  1.02536347e+00]
  HOMO = -0.236381836127434  LUMO = 86.5089288783201
  mo_energy =
[-1.20267189e+02 -1.22537911e+01 -6.65471782e+00 -6.65471782e+00
 -6.65471782e+00 -1.16346327e+00 -2.36381836e-01 -2.36381836e-01
 -2.36381836e-01  8.65089289e+01  6.79918934e+02  3.93854830e+03
  2.99915782e+04  1.63989007e+05]
E1 = -706.5469911627232  E_coul = 198.91575426130206
cycle= 4 E= -507.631236901421  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5469911627232  E_coul = 198.91575426130206
  HOMO = -0.236381820160816  LUMO = 86.5089292101627
  mo_energy =
[-1.20267189e+02 -1.22537910e+01 -6.65471766e+00 -6.65471766e+00
 -6.65471766e+00 -1.16346326e+00 -2.36381820e-01 -2.36381820e-01
 -2.36381820e-01  8.65089292e+01  6.79918935e+02  3.93854830e+03
  2.99915782e+04  1.63989007e+05]
E1 = -706.546991198921  E_coul = 198.91575429749966
Extra cycle  E= -507.631236901421  delta_E= -1.14e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549616e+04 2.23215696e+03 4.57778360e+02
 1.21891518e+02 3.76182751e+01 4.74121755e+00 3.91371737e-01
 8.59863747e+00 4.90839606e-01]
E = -507.6312369014213
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466227        1
[INPUT] 0    0    [1    /1   ]  18354.9616543        1
[INPUT] 0    0    [1    /1   ]  2232.15694177        1
[INPUT] 0    0    [1    /1   ]  457.778417626        1
[INPUT] 0    0    [1    /1   ]  121.891397635        1
[INPUT] 0    0    [1    /1   ]  37.6184259578        1
[INPUT] 0    0    [1    /1   ]  4.74116770972        1
[INPUT] 0    0    [1    /1   ]  0.391223108481       1
[INPUT] 1    0    [1    /1   ]  8.5986640981         1
[INPUT] 1    0    [1    /1   ]  0.490849338498       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662270751, 1.0]], [0, [18354.96165427529, 1.0]], [0, [2232.156941771675, 1.0]], [0, [457.778417626267, 1.0]], [0, [121.89139763508352, 1.0]], [0, [37.61842595775901, 1.0]], [0, [4.741167709719631, 1.0]], [0, [0.3912231084810131, 1.0]], [1, [8.598664098098796, 1.0]], [1, [0.49084933849840734, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662271]
bas 1, expnt(s) = [18354.96165428]
bas 2, expnt(s) = [2232.15694177]
bas 3, expnt(s) = [457.77841763]
bas 4, expnt(s) = [121.89139764]
bas 5, expnt(s) = [37.61842596]
bas 6, expnt(s) = [4.74116771]
bas 7, expnt(s) = [0.39122311]
bas 8, expnt(s) = [8.5986641]
bas 9, expnt(s) = [0.49084934]
CPU time:         8.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549617e+04 3.98409913e+03
 2.23215694e+03 8.20462184e+02 4.57778418e+02 2.50038284e+02
 1.21891398e+02 9.26818762e+01 3.76184260e+01 3.83765111e+01
 4.74116771e+00 8.11762552e+00 3.91223108e-01 1.24977951e+00
 8.59866410e+00 4.29559296e+01 4.90849338e-01 1.19858725e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971482375728
cond(S) = 44.38526944250512
E1 = -689.0445675409263  E_coul = 184.91566281812695
init E= -504.128904722799
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680890648030305  LUMO = 85.1786240317368
  mo_energy =
[-1.21646519e+02 -1.32808452e+01 -7.62158211e+00 -7.62158211e+00
 -7.62158211e+00 -1.65068069e+00 -6.80890648e-01 -6.80890648e-01
 -6.80890648e-01  8.51786240e+01  6.78558806e+02  3.93731296e+03
  2.99905101e+04  1.63988014e+05]
E1 = -706.5764159269572  E_coul = 198.94560603589716
cycle= 1 E= -507.63080989106  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407035
diis-c [-0.16567778  1.        ]
  HOMO = -0.236266533136171  LUMO = 86.5117731613428
  mo_energy =
[-1.20258668e+02 -1.22527517e+01 -6.65304760e+00 -6.65304760e+00
 -6.65304760e+00 -1.16344998e+00 -2.36266533e-01 -2.36266533e-01
 -2.36266533e-01  8.65117732e+01  6.79929107e+02  3.93856386e+03
  2.99915972e+04  1.63989027e+05]
E1 = -706.5450453485305  E_coul = 198.9138083797033
cycle= 2 E= -507.631236968827  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503684
diis-c [-2.53162364e-05 -5.68622583e-04  1.00056862e+00]
  HOMO = -0.236441328223085  LUMO = 86.5082588232983
  mo_energy =
[-1.20267294e+02 -1.22539377e+01 -6.65488453e+00 -6.65488453e+00
 -6.65488453e+00 -1.16351459e+00 -2.36441328e-01 -2.36441328e-01
 -2.36441328e-01  8.65082588e+01  6.79918532e+02  3.93854799e+03
  2.99915779e+04  1.63989007e+05]
E1 = -706.5446063634607  E_coul = 198.9133692848958
cycle= 3 E= -507.631237078565  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126271
diis-c [-3.87529779e-10  3.51312457e-05 -2.53978801e-02  1.02536275e+00]
  HOMO = -0.236443521896573  LUMO = 86.5082144976649
  mo_energy =
[-1.20267406e+02 -1.22539534e+01 -6.65491129e+00 -6.65491129e+00
 -6.65491129e+00 -1.16351524e+00 -2.36443522e-01 -2.36443522e-01
 -2.36443522e-01  8.65082145e+01  6.79918416e+02  3.93854784e+03
  2.99915778e+04  1.63989007e+05]
E1 = -706.5445991799477  E_coul = 198.9133621013437
cycle= 4 E= -507.631237078604  delta_E= -3.91e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5445991799477  E_coul = 198.9133621013437
  HOMO = -0.236443505930123  LUMO = 86.5082148294887
  mo_energy =
[-1.20267405e+02 -1.22539533e+01 -6.65491113e+00 -6.65491113e+00
 -6.65491113e+00 -1.16351523e+00 -2.36443506e-01 -2.36443506e-01
 -2.36443506e-01  8.65082148e+01  6.79918417e+02  3.93854784e+03
  2.99915778e+04  1.63989007e+05]
E1 = -706.5445992161432  E_coul = 198.91336213753885
Extra cycle  E= -507.631237078604  delta_E= -3.41e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549617e+04 2.23215694e+03 4.57778418e+02
 1.21891398e+02 3.76184260e+01 4.74116771e+00 3.91223108e-01
 8.59866410e+00 4.90849338e-01]
E = -507.63123707860433
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466227        1
[INPUT] 0    0    [1    /1   ]  18354.9616543        1
[INPUT] 0    0    [1    /1   ]  2232.15694177        1
[INPUT] 0    0    [1    /1   ]  457.778417626        1
[INPUT] 0    0    [1    /1   ]  121.891397635        1
[INPUT] 0    0    [1    /1   ]  37.6184259578        1
[INPUT] 0    0    [1    /1   ]  4.74116770972        1
[INPUT] 0    0    [1    /1   ]  0.391223108481       1
[INPUT] 1    0    [1    /1   ]  8.5986640981         1
[INPUT] 1    0    [1    /1   ]  0.490849338498       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662270751, 1.0]], [0, [18354.96165427529, 1.0]], [0, [2232.156941771675, 1.0]], [0, [457.778417626267, 1.0]], [0, [121.89139763508352, 1.0]], [0, [37.61842595775901, 1.0]], [0, [4.741167709719631, 1.0]], [0, [0.3912231084810131, 1.0]], [1, [8.598664098098796, 1.0]], [1, [0.49084933849840734, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662271]
bas 1, expnt(s) = [18354.96165428]
bas 2, expnt(s) = [2232.15694177]
bas 3, expnt(s) = [457.77841763]
bas 4, expnt(s) = [121.89139764]
bas 5, expnt(s) = [37.61842596]
bas 6, expnt(s) = [4.74116771]
bas 7, expnt(s) = [0.39122311]
bas 8, expnt(s) = [8.5986641]
bas 9, expnt(s) = [0.49084934]
CPU time:         8.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549617e+04 3.98409913e+03
 2.23215694e+03 8.20462184e+02 4.57778418e+02 2.50038284e+02
 1.21891398e+02 9.26818762e+01 3.76184260e+01 3.83765111e+01
 4.74116771e+00 8.11762552e+00 3.91223108e-01 1.24977951e+00
 8.59866410e+00 4.29559296e+01 4.90849338e-01 1.19858725e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971482375728
cond(S) = 44.38526944250512
E1 = -689.0445675409263  E_coul = 184.91566281812695
init E= -504.128904722799
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680890648030305  LUMO = 85.1786240317368
  mo_energy =
[-1.21646519e+02 -1.32808452e+01 -7.62158211e+00 -7.62158211e+00
 -7.62158211e+00 -1.65068069e+00 -6.80890648e-01 -6.80890648e-01
 -6.80890648e-01  8.51786240e+01  6.78558806e+02  3.93731296e+03
  2.99905101e+04  1.63988014e+05]
E1 = -706.5764159269572  E_coul = 198.94560603589716
cycle= 1 E= -507.63080989106  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407035
diis-c [-0.16567778  1.        ]
  HOMO = -0.236266533136171  LUMO = 86.5117731613428
  mo_energy =
[-1.20258668e+02 -1.22527517e+01 -6.65304760e+00 -6.65304760e+00
 -6.65304760e+00 -1.16344998e+00 -2.36266533e-01 -2.36266533e-01
 -2.36266533e-01  8.65117732e+01  6.79929107e+02  3.93856386e+03
  2.99915972e+04  1.63989027e+05]
E1 = -706.5450453485305  E_coul = 198.9138083797033
cycle= 2 E= -507.631236968827  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503684
diis-c [-2.53162364e-05 -5.68622583e-04  1.00056862e+00]
  HOMO = -0.236441328223085  LUMO = 86.5082588232983
  mo_energy =
[-1.20267294e+02 -1.22539377e+01 -6.65488453e+00 -6.65488453e+00
 -6.65488453e+00 -1.16351459e+00 -2.36441328e-01 -2.36441328e-01
 -2.36441328e-01  8.65082588e+01  6.79918532e+02  3.93854799e+03
  2.99915779e+04  1.63989007e+05]
E1 = -706.5446063634607  E_coul = 198.9133692848958
cycle= 3 E= -507.631237078565  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126271
diis-c [-3.87529779e-10  3.51312457e-05 -2.53978801e-02  1.02536275e+00]
  HOMO = -0.236443521896573  LUMO = 86.5082144976649
  mo_energy =
[-1.20267406e+02 -1.22539534e+01 -6.65491129e+00 -6.65491129e+00
 -6.65491129e+00 -1.16351524e+00 -2.36443522e-01 -2.36443522e-01
 -2.36443522e-01  8.65082145e+01  6.79918416e+02  3.93854784e+03
  2.99915778e+04  1.63989007e+05]
E1 = -706.5445991799477  E_coul = 198.9133621013437
cycle= 4 E= -507.631237078604  delta_E= -3.91e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5445991799477  E_coul = 198.9133621013437
  HOMO = -0.236443505930123  LUMO = 86.5082148294887
  mo_energy =
[-1.20267405e+02 -1.22539533e+01 -6.65491113e+00 -6.65491113e+00
 -6.65491113e+00 -1.16351523e+00 -2.36443506e-01 -2.36443506e-01
 -2.36443506e-01  8.65082148e+01  6.79918417e+02  3.93854784e+03
  2.99915778e+04  1.63989007e+05]
E1 = -706.5445992161432  E_coul = 198.91336213753885
Extra cycle  E= -507.631237078604  delta_E= -3.41e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.38526944250512
E1 = -706.5445992161432  E_coul = 198.91336213753885
init E= -507.631237078604
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236443505743725  LUMO = 86.5082148335367
  mo_energy =
[-1.20267405e+02 -1.22539533e+01 -6.65491113e+00 -6.65491113e+00
 -6.65491113e+00 -1.16351523e+00 -2.36443506e-01 -2.36443506e-01
 -2.36443506e-01  8.65082148e+01  6.79918417e+02  3.93854784e+03
  2.99915778e+04  1.63989007e+05]
E1 = -706.5445992166897  E_coul = 198.91336213808538
cycle= 1 E= -507.631237078604  delta_E= 5.68e-14  |g|= 1.25e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5445992166897  E_coul = 198.91336213808538
  HOMO = -0.236443505741099  LUMO = 86.5082148335953
  mo_energy =
[-1.20267405e+02 -1.22539533e+01 -6.65491113e+00 -6.65491113e+00
 -6.65491113e+00 -1.16351523e+00 -2.36443506e-01 -2.36443506e-01
 -2.36443506e-01  8.65082148e+01  6.79918417e+02  3.93854784e+03
  2.99915778e+04  1.63989007e+05]
E1 = -706.5445992166991  E_coul = 198.91336213809475
Extra cycle  E= -507.631237078604  delta_E= -1.14e-13  |g|= 6.32e-12  |ddm|= 4.38e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198466e+04 1.83549617e+04 2.23215694e+03 4.57778418e+02
 1.21891398e+02 3.76184260e+01 4.74116771e+00 3.91223108e-01
 8.59866410e+00 4.90849338e-01]
grad_E = [-2.20544297e-07  7.42966534e-06 -2.37413979e-05  7.07851926e-05
 -1.47967675e-04  1.84898264e-04 -5.41897745e-05  3.64838203e-04
  3.33503205e-05  3.41897763e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466234        1
[INPUT] 0    0    [1    /1   ]  18354.9616321        1
[INPUT] 0    0    [1    /1   ]  2232.15701277        1
[INPUT] 0    0    [1    /1   ]  457.778205898        1
[INPUT] 0    0    [1    /1   ]  121.89184054         1
[INPUT] 0    0    [1    /1   ]  37.6178716172        1
[INPUT] 0    0    [1    /1   ]  4.74134394928        1
[INPUT] 0    0    [1    /1   ]  0.391222368563       1
[INPUT] 1    0    [1    /1   ]  8.59856554362        1
[INPUT] 1    0    [1    /1   ]  0.490791318022       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662336703, 1.0]], [0, [18354.961632057395, 1.0]], [0, [2232.1570127708796, 1.0]], [0, [457.7782058981417, 1.0]], [0, [121.89184054032313, 1.0]], [0, [37.61787161718203, 1.0]], [0, [4.741343949280994, 1.0]], [0, [0.3912223685633051, 1.0]], [1, [8.598565543615026, 1.0]], [1, [0.4907913180222934, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662337]
bas 1, expnt(s) = [18354.96163206]
bas 2, expnt(s) = [2232.15701277]
bas 3, expnt(s) = [457.7782059]
bas 4, expnt(s) = [121.89184054]
bas 5, expnt(s) = [37.61787162]
bas 6, expnt(s) = [4.74134395]
bas 7, expnt(s) = [0.39122237]
bas 8, expnt(s) = [8.59856554]
bas 9, expnt(s) = [0.49079132]
CPU time:        11.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549616e+04 3.98409912e+03
 2.23215701e+03 8.20462204e+02 4.57778206e+02 2.50038197e+02
 1.21891841e+02 9.26821288e+01 3.76178716e+01 3.83760869e+01
 4.74134395e+00 8.11785183e+00 3.91222369e-01 1.24977773e+00
 8.59856554e+00 4.29553142e+01 4.90791318e-01 1.19841016e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320043919035932
cond(S) = 44.38494117855493
E1 = -689.0422721278254  E_coul = 184.91347053245462
init E= -504.128801595371
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68096019544537  LUMO = 85.1782345817377
  mo_energy =
[-1.21646756e+02 -1.32810266e+01 -7.62171270e+00 -7.62171270e+00
 -7.62171270e+00 -1.65074115e+00 -6.80960195e-01 -6.80960195e-01
 -6.80960195e-01  8.51782346e+01  6.78558160e+02  3.93731232e+03
  2.99905095e+04  1.63988014e+05]
E1 = -706.5732553863576  E_coul = 198.94244528228805
cycle= 1 E= -507.630810104069  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407032
diis-c [-0.16567502  1.        ]
  HOMO = -0.236396516899514  LUMO = 86.5113204161894
  mo_energy =
[-1.20258950e+02 -1.22529949e+01 -6.65323565e+00 -6.65323565e+00
 -6.65323565e+00 -1.16355157e+00 -2.36396517e-01 -2.36396517e-01
 -2.36396517e-01  8.65113204e+01  6.79928420e+02  3.93856319e+03
  2.99915966e+04  1.63989026e+05]
E1 = -706.5418876986496  E_coul = 198.91065060418788
cycle= 2 E= -507.631237094462  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503615
diis-c [-2.53094755e-05 -5.67981817e-04  1.00056798e+00]
  HOMO = -0.236571260370608  LUMO = 86.5078063904581
  mo_energy =
[-1.20267574e+02 -1.22541808e+01 -6.65507240e+00 -6.65507240e+00
 -6.65507240e+00 -1.16361618e+00 -2.36571260e-01 -2.36571260e-01
 -2.36571260e-01  8.65078064e+01  6.79917846e+02  3.93854732e+03
  2.99915774e+04  1.63989006e+05]
E1 = -706.5414487584695  E_coul = 198.91021155429667
cycle= 3 E= -507.631237204173  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126259
diis-c [-3.87482361e-10  3.51317314e-05 -2.53988523e-02  1.02536372e+00]
  HOMO = -0.236573453449466  LUMO = 86.5077620668179
  mo_energy =
[-1.20267687e+02 -1.22541965e+01 -6.65509916e+00 -6.65509916e+00
 -6.65509916e+00 -1.16361683e+00 -2.36573453e-01 -2.36573453e-01
 -2.36573453e-01  8.65077621e+01  6.79917730e+02  3.93854717e+03
  2.99915772e+04  1.63989006e+05]
E1 = -706.5414415754149  E_coul = 198.9102043712021
cycle= 4 E= -507.631237204213  delta_E= -3.99e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5414415754149  E_coul = 198.9102043712021
  HOMO = -0.236573437487013  LUMO = 86.5077623986221
  mo_energy =
[-1.20267686e+02 -1.22541964e+01 -6.65509900e+00 -6.65509900e+00
 -6.65509900e+00 -1.16361682e+00 -2.36573437e-01 -2.36573437e-01
 -2.36573437e-01  8.65077624e+01  6.79917731e+02  3.93854718e+03
  2.99915772e+04  1.63989006e+05]
E1 = -706.5414416116076  E_coul = 198.91020440739504
Extra cycle  E= -507.631237204213  delta_E= 1.71e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549616e+04 2.23215701e+03 4.57778206e+02
 1.21891841e+02 3.76178716e+01 4.74134395e+00 3.91222369e-01
 8.59856554e+00 4.90791318e-01]
E = -507.6312372042126
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:17 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466234        1
[INPUT] 0    0    [1    /1   ]  18354.9616321        1
[INPUT] 0    0    [1    /1   ]  2232.15701277        1
[INPUT] 0    0    [1    /1   ]  457.778205898        1
[INPUT] 0    0    [1    /1   ]  121.89184054         1
[INPUT] 0    0    [1    /1   ]  37.6178716172        1
[INPUT] 0    0    [1    /1   ]  4.74134394928        1
[INPUT] 0    0    [1    /1   ]  0.391222368563       1
[INPUT] 1    0    [1    /1   ]  8.59856554362        1
[INPUT] 1    0    [1    /1   ]  0.490791318022       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662336703, 1.0]], [0, [18354.961632057395, 1.0]], [0, [2232.1570127708796, 1.0]], [0, [457.7782058981417, 1.0]], [0, [121.89184054032313, 1.0]], [0, [37.61787161718203, 1.0]], [0, [4.741343949280994, 1.0]], [0, [0.3912223685633051, 1.0]], [1, [8.598565543615026, 1.0]], [1, [0.4907913180222934, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662337]
bas 1, expnt(s) = [18354.96163206]
bas 2, expnt(s) = [2232.15701277]
bas 3, expnt(s) = [457.7782059]
bas 4, expnt(s) = [121.89184054]
bas 5, expnt(s) = [37.61787162]
bas 6, expnt(s) = [4.74134395]
bas 7, expnt(s) = [0.39122237]
bas 8, expnt(s) = [8.59856554]
bas 9, expnt(s) = [0.49079132]
CPU time:        11.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549616e+04 3.98409912e+03
 2.23215701e+03 8.20462204e+02 4.57778206e+02 2.50038197e+02
 1.21891841e+02 9.26821288e+01 3.76178716e+01 3.83760869e+01
 4.74134395e+00 8.11785183e+00 3.91222369e-01 1.24977773e+00
 8.59856554e+00 4.29553142e+01 4.90791318e-01 1.19841016e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320043919035932
cond(S) = 44.38494117855493
E1 = -689.0422721278254  E_coul = 184.91347053245462
init E= -504.128801595371
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68096019544537  LUMO = 85.1782345817377
  mo_energy =
[-1.21646756e+02 -1.32810266e+01 -7.62171270e+00 -7.62171270e+00
 -7.62171270e+00 -1.65074115e+00 -6.80960195e-01 -6.80960195e-01
 -6.80960195e-01  8.51782346e+01  6.78558160e+02  3.93731232e+03
  2.99905095e+04  1.63988014e+05]
E1 = -706.5732553863576  E_coul = 198.94244528228805
cycle= 1 E= -507.630810104069  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407032
diis-c [-0.16567502  1.        ]
  HOMO = -0.236396516899514  LUMO = 86.5113204161894
  mo_energy =
[-1.20258950e+02 -1.22529949e+01 -6.65323565e+00 -6.65323565e+00
 -6.65323565e+00 -1.16355157e+00 -2.36396517e-01 -2.36396517e-01
 -2.36396517e-01  8.65113204e+01  6.79928420e+02  3.93856319e+03
  2.99915966e+04  1.63989026e+05]
E1 = -706.5418876986496  E_coul = 198.91065060418788
cycle= 2 E= -507.631237094462  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503615
diis-c [-2.53094755e-05 -5.67981817e-04  1.00056798e+00]
  HOMO = -0.236571260370608  LUMO = 86.5078063904581
  mo_energy =
[-1.20267574e+02 -1.22541808e+01 -6.65507240e+00 -6.65507240e+00
 -6.65507240e+00 -1.16361618e+00 -2.36571260e-01 -2.36571260e-01
 -2.36571260e-01  8.65078064e+01  6.79917846e+02  3.93854732e+03
  2.99915774e+04  1.63989006e+05]
E1 = -706.5414487584695  E_coul = 198.91021155429667
cycle= 3 E= -507.631237204173  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126259
diis-c [-3.87482361e-10  3.51317314e-05 -2.53988523e-02  1.02536372e+00]
  HOMO = -0.236573453449466  LUMO = 86.5077620668179
  mo_energy =
[-1.20267687e+02 -1.22541965e+01 -6.65509916e+00 -6.65509916e+00
 -6.65509916e+00 -1.16361683e+00 -2.36573453e-01 -2.36573453e-01
 -2.36573453e-01  8.65077621e+01  6.79917730e+02  3.93854717e+03
  2.99915772e+04  1.63989006e+05]
E1 = -706.5414415754149  E_coul = 198.9102043712021
cycle= 4 E= -507.631237204213  delta_E= -3.99e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5414415754149  E_coul = 198.9102043712021
  HOMO = -0.236573437487013  LUMO = 86.5077623986221
  mo_energy =
[-1.20267686e+02 -1.22541964e+01 -6.65509900e+00 -6.65509900e+00
 -6.65509900e+00 -1.16361682e+00 -2.36573437e-01 -2.36573437e-01
 -2.36573437e-01  8.65077624e+01  6.79917731e+02  3.93854718e+03
  2.99915772e+04  1.63989006e+05]
E1 = -706.5414416116076  E_coul = 198.91020440739504
Extra cycle  E= -507.631237204213  delta_E= 1.71e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.38494117855493
E1 = -706.5414416116076  E_coul = 198.91020440739504
init E= -507.631237204213
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236573437300666  LUMO = 86.507762402671
  mo_energy =
[-1.20267686e+02 -1.22541964e+01 -6.65509900e+00 -6.65509900e+00
 -6.65509900e+00 -1.16361682e+00 -2.36573437e-01 -2.36573437e-01
 -2.36573437e-01  8.65077624e+01  6.79917731e+02  3.93854718e+03
  2.99915772e+04  1.63989006e+05]
E1 = -706.5414416121539  E_coul = 198.91020440794162
cycle= 1 E= -507.631237204212  delta_E= 2.84e-13  |g|= 1.25e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5414416121539  E_coul = 198.91020440794162
  HOMO = -0.236573437298042  LUMO = 86.5077624027289
  mo_energy =
[-1.20267686e+02 -1.22541964e+01 -6.65509900e+00 -6.65509900e+00
 -6.65509900e+00 -1.16361682e+00 -2.36573437e-01 -2.36573437e-01
 -2.36573437e-01  8.65077624e+01  6.79917731e+02  3.93854718e+03
  2.99915772e+04  1.63989006e+05]
E1 = -706.5414416121632  E_coul = 198.91020440795063
Extra cycle  E= -507.631237204213  delta_E= -2.84e-13  |g|= 1.48e-11  |ddm|= 4.39e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198466e+04 1.83549616e+04 2.23215701e+03 4.57778206e+02
 1.21891841e+02 3.76178716e+01 4.74134395e+00 3.91222369e-01
 8.59856554e+00 4.90791318e-01]
grad_E = [-2.20544756e-07  7.42952155e-06 -2.37254545e-05  7.04382101e-05
 -1.45307602e-04  1.76944944e-04  7.41415472e-05  1.74360203e-04
  1.52532327e-05 -2.00827271e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466484        1
[INPUT] 0    0    [1    /1   ]  18354.9607904        1
[INPUT] 0    0    [1    /1   ]  2232.15970223        1
[INPUT] 0    0    [1    /1   ]  457.770186027        1
[INPUT] 0    0    [1    /1   ]  121.908614268        1
[INPUT] 0    0    [1    /1   ]  37.5968841213        1
[INPUT] 0    0    [1    /1   ]  4.74784267409        1
[INPUT] 0    0    [1    /1   ]  0.391085847779       1
[INPUT] 1    0    [1    /1   ]  8.59485619731        1
[INPUT] 1    0    [1    /1   ]  0.491325102354       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664835001, 1.0]], [0, [18354.96079043402, 1.0]], [0, [2232.1597022296464, 1.0]], [0, [457.7701860273626, 1.0]], [0, [121.90861426789266, 1.0]], [0, [37.59688412128892, 1.0]], [0, [4.7478426740900534, 1.0]], [0, [0.39108584777914013, 1.0]], [1, [8.594856197306756, 1.0]], [1, [0.4913251023538264, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664835]
bas 1, expnt(s) = [18354.96079043]
bas 2, expnt(s) = [2232.15970223]
bas 3, expnt(s) = [457.77018603]
bas 4, expnt(s) = [121.90861427]
bas 5, expnt(s) = [37.59688412]
bas 6, expnt(s) = [4.74784267]
bas 7, expnt(s) = [0.39108585]
bas 8, expnt(s) = [8.5948562]
bas 9, expnt(s) = [0.4913251]
CPU time:        14.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549608e+04 3.98409899e+03
 2.23215970e+03 8.20462945e+02 4.57770186e+02 2.50034912e+02
 1.21908614e+02 9.26916942e+01 3.75968841e+01 3.83600279e+01
 4.74784267e+00 8.12619545e+00 3.91085848e-01 1.24945063e+00
 8.59485620e+00 4.29321523e+01 4.91325102e-01 1.20003962e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319287659932712
cond(S) = 44.37193078739863
E1 = -689.0528773289396  E_coul = 184.91944694337195
init E= -504.133430385568
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680306127730346  LUMO = 85.1698876721857
  mo_energy =
[-1.21648072e+02 -1.32803930e+01 -7.62132459e+00 -7.62132459e+00
 -7.62132459e+00 -1.65045558e+00 -6.80306128e-01 -6.80306128e-01
 -6.80306128e-01  8.51698877e+01  6.78540455e+02  3.93729498e+03
  2.99904965e+04  1.63988001e+05]
E1 = -706.5948808531424  E_coul = 198.96409452963104
cycle= 1 E= -507.630786323511  delta_E= -3.5  |g|= 0.317  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407007
diis-c [-0.16565459  1.        ]
  HOMO = -0.235123595125414  LUMO = 86.5041579246609
  mo_energy =
[-1.20258289e+02 -1.22513954e+01 -6.65191841e+00 -6.65191841e+00
 -6.65191841e+00 -1.16274514e+00 -2.35123595e-01 -2.35123595e-01
 -2.35123595e-01  8.65041579e+01  6.79912812e+02  3.93854843e+03
  2.99915865e+04  1.63989017e+05]
E1 = -706.5635800603612  E_coul = 198.93236888955153
cycle= 2 E= -507.63121117081  delta_E= -0.000425  |g|= 0.00472  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00501608
diis-c [-2.51121742e-05 -5.43730624e-04  1.00054373e+00]
  HOMO = -0.235298299273463  LUMO = 86.5006512376926
  mo_energy =
[-1.20266896e+02 -1.22525796e+01 -6.65374994e+00 -6.65374994e+00
 -6.65374994e+00 -1.16280970e+00 -2.35298299e-01 -2.35298299e-01
 -2.35298299e-01  8.65006512e+01  6.79902255e+02  3.93853258e+03
  2.99915672e+04  1.63988997e+05]
E1 = -706.563142269293  E_coul = 198.9319309894971
cycle= 3 E= -507.631211279796  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125954
diis-c [-3.86919712e-10  3.51315337e-05 -2.54331349e-02  1.02539800e+00]
  HOMO = -0.235300495128207  LUMO = 86.5006069367194
  mo_energy =
[-1.20267008e+02 -1.22525952e+01 -6.65377666e+00 -6.65377666e+00
 -6.65377666e+00 -1.16281035e+00 -2.35300495e-01 -2.35300495e-01
 -2.35300495e-01  8.65006069e+01  6.79902139e+02  3.93853244e+03
  2.99915671e+04  1.63988997e+05]
E1 = -706.5631350952012  E_coul = 198.93192381536556
cycle= 4 E= -507.631211279836  delta_E= -3.97e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5631350952012  E_coul = 198.93192381536556
  HOMO = -0.235300479148165  LUMO = 86.5006072681664
  mo_energy =
[-1.20267007e+02 -1.22525951e+01 -6.65377650e+00 -6.65377650e+00
 -6.65377650e+00 -1.16281034e+00 -2.35300479e-01 -2.35300479e-01
 -2.35300479e-01  8.65006073e+01  6.79902140e+02  3.93853244e+03
  2.99915671e+04  1.63988997e+05]
E1 = -706.5631351313508  E_coul = 198.93192385151545
Extra cycle  E= -507.631211279835  delta_E= 2.84e-13  |g|= 6.29e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549608e+04 2.23215970e+03 4.57770186e+02
 1.21908614e+02 3.75968841e+01 4.74784267e+00 3.91085848e-01
 8.59485620e+00 4.91325102e-01]
E = -507.6312112798354
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466262        1
[INPUT] 0    0    [1    /1   ]  18354.9615381        1
[INPUT] 0    0    [1    /1   ]  2232.15731315        1
[INPUT] 0    0    [1    /1   ]  457.777310174        1
[INPUT] 0    0    [1    /1   ]  121.893713967        1
[INPUT] 0    0    [1    /1   ]  37.6155275626        1
[INPUT] 0    0    [1    /1   ]  4.74206977984        1
[INPUT] 0    0    [1    /1   ]  0.391207120809       1
[INPUT] 1    0    [1    /1   ]  8.59815125358        1
[INPUT] 1    0    [1    /1   ]  0.490850935408       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662615733, 1.0]], [0, [18354.961538058036, 1.0]], [0, [2232.1573131515584, 1.0]], [0, [457.7773101735975, 1.0]], [0, [121.89371396695252, 1.0]], [0, [37.615527562556885, 1.0]], [0, [4.7420697798433356, 1.0]], [0, [0.39120712080925285, 1.0]], [1, [8.598151253581834, 1.0]], [1, [0.49085093540768965, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662616]
bas 1, expnt(s) = [18354.96153806]
bas 2, expnt(s) = [2232.15731315]
bas 3, expnt(s) = [457.77731017]
bas 4, expnt(s) = [121.89371397]
bas 5, expnt(s) = [37.61552756]
bas 6, expnt(s) = [4.74206978]
bas 7, expnt(s) = [0.39120712]
bas 8, expnt(s) = [8.59815125]
bas 9, expnt(s) = [0.49085094]
CPU time:        14.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549615e+04 3.98409911e+03
 2.23215731e+03 8.20462287e+02 4.57777310e+02 2.50037830e+02
 1.21893714e+02 9.26831971e+01 3.76155276e+01 3.83742934e+01
 4.74206978e+00 8.11878386e+00 3.91207121e-01 1.24974120e+00
 8.59815125e+00 4.29527272e+01 4.90850935e-01 1.19859213e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319959801130352
cond(S) = 44.38348629540068
E1 = -689.0434740735267  E_coul = 184.91414606278113
init E= -504.129328010746
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680887008223401  LUMO = 85.1773038941897
  mo_energy =
[-1.21646903e+02 -1.32809560e+01 -7.62166884e+00 -7.62166884e+00
 -7.62166884e+00 -1.65070906e+00 -6.80887008e-01 -6.80887008e-01
 -6.80887008e-01  8.51773039e+01  6.78556183e+02  3.93731038e+03
  2.99905081e+04  1.63988012e+05]
E1 = -706.5756770702974  E_coul = 198.94486630989527
cycle= 1 E= -507.630810760402  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407029
diis-c [-0.16567266  1.        ]
  HOMO = -0.236254414471267  LUMO = 86.5105215784314
  mo_energy =
[-1.20258876e+02 -1.22528167e+01 -6.65308838e+00 -6.65308838e+00
 -6.65308838e+00 -1.16346152e+00 -2.36254414e-01 -2.36254414e-01
 -2.36254414e-01  8.65105216e+01  6.79926677e+02  3.93856154e+03
  2.99915955e+04  1.63989025e+05]
E1 = -706.5443168620606  E_coul = 198.9130793513039
cycle= 2 E= -507.631237510757  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503391
diis-c [-2.52873983e-05 -5.65263643e-04  1.00056526e+00]
  HOMO = -0.236429153547637  LUMO = 86.5070083733321
  mo_energy =
[-1.20267498e+02 -1.22540025e+01 -6.65492454e+00 -6.65492454e+00
 -6.65492454e+00 -1.16352613e+00 -2.36429154e-01 -2.36429154e-01
 -2.36429154e-01  8.65070084e+01  6.79916105e+02  3.93854567e+03
  2.99915763e+04  1.63989005e+05]
E1 = -706.5438780503042  E_coul = 198.9126404299173
cycle= 3 E= -507.631237620387  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126225
diis-c [-3.87419791e-10  3.51315723e-05 -2.54026881e-02  1.02536756e+00]
  HOMO = -0.236431346938734  LUMO = 86.5069640521791
  mo_energy =
[-1.20267611e+02 -1.22540181e+01 -6.65495130e+00 -6.65495130e+00
 -6.65495130e+00 -1.16352677e+00 -2.36431347e-01 -2.36431347e-01
 -2.36431347e-01  8.65069641e+01  6.79915989e+02  3.93854553e+03
  2.99915761e+04  1.63989005e+05]
E1 = -706.5438708682434  E_coul = 198.91263324781713
cycle= 4 E= -507.631237620426  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5438708682434  E_coul = 198.91263324781713
  HOMO = -0.236431330974302  LUMO = 86.5069643839429
  mo_energy =
[-1.20267610e+02 -1.22540180e+01 -6.65495114e+00 -6.65495114e+00
 -6.65495114e+00 -1.16352677e+00 -2.36431331e-01 -2.36431331e-01
 -2.36431331e-01  8.65069644e+01  6.79915990e+02  3.93854553e+03
  2.99915761e+04  1.63989005e+05]
E1 = -706.5438709044315  E_coul = 198.91263328400532
Extra cycle  E= -507.631237620426  delta_E= 1.14e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549615e+04 2.23215731e+03 4.57777310e+02
 1.21893714e+02 3.76155276e+01 4.74206978e+00 3.91207121e-01
 8.59815125e+00 4.90850935e-01]
E = -507.6312376204262
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466262        1
[INPUT] 0    0    [1    /1   ]  18354.9615381        1
[INPUT] 0    0    [1    /1   ]  2232.15731315        1
[INPUT] 0    0    [1    /1   ]  457.777310174        1
[INPUT] 0    0    [1    /1   ]  121.893713967        1
[INPUT] 0    0    [1    /1   ]  37.6155275626        1
[INPUT] 0    0    [1    /1   ]  4.74206977984        1
[INPUT] 0    0    [1    /1   ]  0.391207120809       1
[INPUT] 1    0    [1    /1   ]  8.59815125358        1
[INPUT] 1    0    [1    /1   ]  0.490850935408       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662615733, 1.0]], [0, [18354.961538058036, 1.0]], [0, [2232.1573131515584, 1.0]], [0, [457.7773101735975, 1.0]], [0, [121.89371396695252, 1.0]], [0, [37.615527562556885, 1.0]], [0, [4.7420697798433356, 1.0]], [0, [0.39120712080925285, 1.0]], [1, [8.598151253581834, 1.0]], [1, [0.49085093540768965, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662616]
bas 1, expnt(s) = [18354.96153806]
bas 2, expnt(s) = [2232.15731315]
bas 3, expnt(s) = [457.77731017]
bas 4, expnt(s) = [121.89371397]
bas 5, expnt(s) = [37.61552756]
bas 6, expnt(s) = [4.74206978]
bas 7, expnt(s) = [0.39120712]
bas 8, expnt(s) = [8.59815125]
bas 9, expnt(s) = [0.49085094]
CPU time:        15.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549615e+04 3.98409911e+03
 2.23215731e+03 8.20462287e+02 4.57777310e+02 2.50037830e+02
 1.21893714e+02 9.26831971e+01 3.76155276e+01 3.83742934e+01
 4.74206978e+00 8.11878386e+00 3.91207121e-01 1.24974120e+00
 8.59815125e+00 4.29527272e+01 4.90850935e-01 1.19859213e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319959801130352
cond(S) = 44.38348629540068
E1 = -689.0434740735267  E_coul = 184.91414606278113
init E= -504.129328010746
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680887008223401  LUMO = 85.1773038941897
  mo_energy =
[-1.21646903e+02 -1.32809560e+01 -7.62166884e+00 -7.62166884e+00
 -7.62166884e+00 -1.65070906e+00 -6.80887008e-01 -6.80887008e-01
 -6.80887008e-01  8.51773039e+01  6.78556183e+02  3.93731038e+03
  2.99905081e+04  1.63988012e+05]
E1 = -706.5756770702974  E_coul = 198.94486630989527
cycle= 1 E= -507.630810760402  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407029
diis-c [-0.16567266  1.        ]
  HOMO = -0.236254414471267  LUMO = 86.5105215784314
  mo_energy =
[-1.20258876e+02 -1.22528167e+01 -6.65308838e+00 -6.65308838e+00
 -6.65308838e+00 -1.16346152e+00 -2.36254414e-01 -2.36254414e-01
 -2.36254414e-01  8.65105216e+01  6.79926677e+02  3.93856154e+03
  2.99915955e+04  1.63989025e+05]
E1 = -706.5443168620606  E_coul = 198.9130793513039
cycle= 2 E= -507.631237510757  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503391
diis-c [-2.52873983e-05 -5.65263643e-04  1.00056526e+00]
  HOMO = -0.236429153547637  LUMO = 86.5070083733321
  mo_energy =
[-1.20267498e+02 -1.22540025e+01 -6.65492454e+00 -6.65492454e+00
 -6.65492454e+00 -1.16352613e+00 -2.36429154e-01 -2.36429154e-01
 -2.36429154e-01  8.65070084e+01  6.79916105e+02  3.93854567e+03
  2.99915763e+04  1.63989005e+05]
E1 = -706.5438780503042  E_coul = 198.9126404299173
cycle= 3 E= -507.631237620387  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126225
diis-c [-3.87419791e-10  3.51315723e-05 -2.54026881e-02  1.02536756e+00]
  HOMO = -0.236431346938734  LUMO = 86.5069640521791
  mo_energy =
[-1.20267611e+02 -1.22540181e+01 -6.65495130e+00 -6.65495130e+00
 -6.65495130e+00 -1.16352677e+00 -2.36431347e-01 -2.36431347e-01
 -2.36431347e-01  8.65069641e+01  6.79915989e+02  3.93854553e+03
  2.99915761e+04  1.63989005e+05]
E1 = -706.5438708682434  E_coul = 198.91263324781713
cycle= 4 E= -507.631237620426  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5438708682434  E_coul = 198.91263324781713
  HOMO = -0.236431330974302  LUMO = 86.5069643839429
  mo_energy =
[-1.20267610e+02 -1.22540180e+01 -6.65495114e+00 -6.65495114e+00
 -6.65495114e+00 -1.16352677e+00 -2.36431331e-01 -2.36431331e-01
 -2.36431331e-01  8.65069644e+01  6.79915990e+02  3.93854553e+03
  2.99915761e+04  1.63989005e+05]
E1 = -706.5438709044315  E_coul = 198.91263328400532
Extra cycle  E= -507.631237620426  delta_E= 1.14e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.38348629540068
E1 = -706.5438709044315  E_coul = 198.91263328400532
init E= -507.631237620426
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236431330787939  LUMO = 86.5069643879913
  mo_energy =
[-1.20267610e+02 -1.22540180e+01 -6.65495114e+00 -6.65495114e+00
 -6.65495114e+00 -1.16352677e+00 -2.36431331e-01 -2.36431331e-01
 -2.36431331e-01  8.65069644e+01  6.79915990e+02  3.93854553e+03
  2.99915761e+04  1.63989005e+05]
E1 = -706.5438709049781  E_coul = 198.91263328455176
cycle= 1 E= -507.631237620426  delta_E= -1.71e-13  |g|= 1.25e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5438709049781  E_coul = 198.91263328455176
  HOMO = -0.236431330785314  LUMO = 86.5069643880493
  mo_energy =
[-1.20267610e+02 -1.22540180e+01 -6.65495114e+00 -6.65495114e+00
 -6.65495114e+00 -1.16352677e+00 -2.36431331e-01 -2.36431331e-01
 -2.36431331e-01  8.65069644e+01  6.79915990e+02  3.93854553e+03
  2.99915761e+04  1.63989005e+05]
E1 = -706.5438709049874  E_coul = 198.91263328456088
Extra cycle  E= -507.631237620427  delta_E= -1.71e-13  |g|= 8.53e-12  |ddm|= 4.39e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198466e+04 1.83549615e+04 2.23215731e+03 4.57777310e+02
 1.21893714e+02 3.76155276e+01 4.74206978e+00 3.91207121e-01
 8.59815125e+00 4.90850935e-01]
grad_E = [-2.20546572e-07  7.42891134e-06 -2.36582408e-05  6.89762860e-05
 -1.34123084e-04  1.43650405e-04  6.48057581e-04  4.72820205e-05
 -3.56736196e-04  6.79065738e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466287        1
[INPUT] 0    0    [1    /1   ]  18354.9614508        1
[INPUT] 0    0    [1    /1   ]  2232.15759205        1
[INPUT] 0    0    [1    /1   ]  457.776480176        1
[INPUT] 0    0    [1    /1   ]  121.895439209        1
[INPUT] 0    0    [1    /1   ]  37.6133944535        1
[INPUT] 0    0    [1    /1   ]  4.74200047603        1
[INPUT] 0    0    [1    /1   ]  0.391205289074       1
[INPUT] 1    0    [1    /1   ]  8.59816119642        1
[INPUT] 1    0    [1    /1   ]  0.490832827986       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662874888, 1.0]], [0, [18354.961450755065, 1.0]], [0, [2232.1575920476384, 1.0]], [0, [457.77648017581527, 1.0]], [0, [121.89543920947773, 1.0]], [0, [37.61339445352261, 1.0]], [0, [4.742000476032822, 1.0]], [0, [0.39120528907439944, 1.0]], [1, [8.59816119641817, 1.0]], [1, [0.49083282798550276, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662875]
bas 1, expnt(s) = [18354.96145076]
bas 2, expnt(s) = [2232.15759205]
bas 3, expnt(s) = [457.77648018]
bas 4, expnt(s) = [121.89543921]
bas 5, expnt(s) = [37.61339445]
bas 6, expnt(s) = [4.74200048]
bas 7, expnt(s) = [0.39120529]
bas 8, expnt(s) = [8.5981612]
bas 9, expnt(s) = [0.49083283]
CPU time:        18.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549615e+04 3.98409909e+03
 2.23215759e+03 8.20462364e+02 4.57776480e+02 2.50037490e+02
 1.21895439e+02 9.26841810e+01 3.76133945e+01 3.83726613e+01
 4.74200048e+00 8.11869487e+00 3.91205289e-01 1.24973681e+00
 8.59816120e+00 4.29527893e+01 4.90832828e-01 1.19853686e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998444797439
cond(S) = 44.38076384576682
E1 = -689.0427622569624  E_coul = 184.9134574712036
init E= -504.129304785759
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910460415804  LUMO = 85.1732719702432
  mo_energy =
[-1.21646979e+02 -1.32809943e+01 -7.62171465e+00 -7.62171465e+00
 -7.62171465e+00 -1.65072244e+00 -6.80910460e-01 -6.80910460e-01
 -6.80910460e-01  8.51732720e+01  6.78551881e+02  3.93730659e+03
  2.99905052e+04  1.63988010e+05]
E1 = -706.574447625251  E_coul = 198.94363632201046
cycle= 1 E= -507.630811303241  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.407021
diis-c [-0.16566581  1.        ]
  HOMO = -0.236299042081423  LUMO = 86.5064357127299
  mo_energy =
[-1.20259023e+02 -1.22528870e+01 -6.65316618e+00 -6.65316618e+00
 -6.65316618e+00 -1.16349237e+00 -2.36299042e-01 -2.36299042e-01
 -2.36299042e-01  8.65064357e+01  6.79922287e+02  3.93855765e+03
  2.99915925e+04  1.63989022e+05]
E1 = -706.5430836523643  E_coul = 198.91184553483697
cycle= 2 E= -507.631238117527  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503453
diis-c [-2.5293736e-05 -5.6479977e-04  1.0005648e+00]
  HOMO = -0.236473789700302  LUMO = 86.5029220717831
  mo_energy =
[-1.20267646e+02 -1.22540728e+01 -6.65500259e+00 -6.65500259e+00
 -6.65500259e+00 -1.16355698e+00 -2.36473790e-01 -2.36473790e-01
 -2.36473790e-01  8.65029221e+01  6.79911714e+02  3.93854178e+03
  2.99915733e+04  1.63989002e+05]
E1 = -706.5426447810272  E_coul = 198.9114065538504
cycle= 3 E= -507.631238227177  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126242
diis-c [-3.87507917e-10  3.51220496e-05 -2.54030034e-02  1.02536788e+00]
  HOMO = -0.236475983309279  LUMO = 86.5028777426604
  mo_energy =
[-1.20267759e+02 -1.22540885e+01 -6.65502935e+00 -6.65502935e+00
 -6.65502935e+00 -1.16355763e+00 -2.36475983e-01 -2.36475983e-01
 -2.36475983e-01  8.65028777e+01  6.79911598e+02  3.93854164e+03
  2.99915731e+04  1.63989002e+05]
E1 = -706.542637597667  E_coul = 198.9113993704505
cycle= 4 E= -507.631238227216  delta_E= -3.96e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.542637597667  E_coul = 198.9113993704505
  HOMO = -0.236475967342903  LUMO = 86.5028780744896
  mo_energy =
[-1.20267758e+02 -1.22540884e+01 -6.65502919e+00 -6.65502919e+00
 -6.65502919e+00 -1.16355763e+00 -2.36475967e-01 -2.36475967e-01
 -2.36475967e-01  8.65028781e+01  6.79911599e+02  3.93854164e+03
  2.99915731e+04  1.63989002e+05]
E1 = -706.5426376338612  E_coul = 198.91139940664485
Extra cycle  E= -507.631238227216  delta_E= 5.68e-14  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549615e+04 2.23215759e+03 4.57776480e+02
 1.21895439e+02 3.76133945e+01 4.74200048e+00 3.91205289e-01
 8.59816120e+00 4.90832828e-01]
E = -507.6312382272164
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466287        1
[INPUT] 0    0    [1    /1   ]  18354.9614508        1
[INPUT] 0    0    [1    /1   ]  2232.15759205        1
[INPUT] 0    0    [1    /1   ]  457.776480176        1
[INPUT] 0    0    [1    /1   ]  121.895439209        1
[INPUT] 0    0    [1    /1   ]  37.6133944535        1
[INPUT] 0    0    [1    /1   ]  4.74200047603        1
[INPUT] 0    0    [1    /1   ]  0.391205289074       1
[INPUT] 1    0    [1    /1   ]  8.59816119642        1
[INPUT] 1    0    [1    /1   ]  0.490832827986       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84662874888, 1.0]], [0, [18354.961450755065, 1.0]], [0, [2232.1575920476384, 1.0]], [0, [457.77648017581527, 1.0]], [0, [121.89543920947773, 1.0]], [0, [37.61339445352261, 1.0]], [0, [4.742000476032822, 1.0]], [0, [0.39120528907439944, 1.0]], [1, [8.59816119641817, 1.0]], [1, [0.49083282798550276, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84662875]
bas 1, expnt(s) = [18354.96145076]
bas 2, expnt(s) = [2232.15759205]
bas 3, expnt(s) = [457.77648018]
bas 4, expnt(s) = [121.89543921]
bas 5, expnt(s) = [37.61339445]
bas 6, expnt(s) = [4.74200048]
bas 7, expnt(s) = [0.39120529]
bas 8, expnt(s) = [8.5981612]
bas 9, expnt(s) = [0.49083283]
CPU time:        18.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549615e+04 3.98409909e+03
 2.23215759e+03 8.20462364e+02 4.57776480e+02 2.50037490e+02
 1.21895439e+02 9.26841810e+01 3.76133945e+01 3.83726613e+01
 4.74200048e+00 8.11869487e+00 3.91205289e-01 1.24973681e+00
 8.59816120e+00 4.29527893e+01 4.90832828e-01 1.19853686e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31998444797439
cond(S) = 44.38076384576682
E1 = -689.0427622569624  E_coul = 184.9134574712036
init E= -504.129304785759
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680910460415804  LUMO = 85.1732719702432
  mo_energy =
[-1.21646979e+02 -1.32809943e+01 -7.62171465e+00 -7.62171465e+00
 -7.62171465e+00 -1.65072244e+00 -6.80910460e-01 -6.80910460e-01
 -6.80910460e-01  8.51732720e+01  6.78551881e+02  3.93730659e+03
  2.99905052e+04  1.63988010e+05]
E1 = -706.574447625251  E_coul = 198.94363632201046
cycle= 1 E= -507.630811303241  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407021
diis-c [-0.16566581  1.        ]
  HOMO = -0.236299042081423  LUMO = 86.5064357127299
  mo_energy =
[-1.20259023e+02 -1.22528870e+01 -6.65316618e+00 -6.65316618e+00
 -6.65316618e+00 -1.16349237e+00 -2.36299042e-01 -2.36299042e-01
 -2.36299042e-01  8.65064357e+01  6.79922287e+02  3.93855765e+03
  2.99915925e+04  1.63989022e+05]
E1 = -706.5430836523643  E_coul = 198.91184553483697
cycle= 2 E= -507.631238117527  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503453
diis-c [-2.5293736e-05 -5.6479977e-04  1.0005648e+00]
  HOMO = -0.236473789700302  LUMO = 86.5029220717831
  mo_energy =
[-1.20267646e+02 -1.22540728e+01 -6.65500259e+00 -6.65500259e+00
 -6.65500259e+00 -1.16355698e+00 -2.36473790e-01 -2.36473790e-01
 -2.36473790e-01  8.65029221e+01  6.79911714e+02  3.93854178e+03
  2.99915733e+04  1.63989002e+05]
E1 = -706.5426447810272  E_coul = 198.9114065538504
cycle= 3 E= -507.631238227177  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126242
diis-c [-3.87507917e-10  3.51220496e-05 -2.54030034e-02  1.02536788e+00]
  HOMO = -0.236475983309279  LUMO = 86.5028777426604
  mo_energy =
[-1.20267759e+02 -1.22540885e+01 -6.65502935e+00 -6.65502935e+00
 -6.65502935e+00 -1.16355763e+00 -2.36475983e-01 -2.36475983e-01
 -2.36475983e-01  8.65028777e+01  6.79911598e+02  3.93854164e+03
  2.99915731e+04  1.63989002e+05]
E1 = -706.542637597667  E_coul = 198.9113993704505
cycle= 4 E= -507.631238227216  delta_E= -3.96e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.542637597667  E_coul = 198.9113993704505
  HOMO = -0.236475967342903  LUMO = 86.5028780744896
  mo_energy =
[-1.20267758e+02 -1.22540884e+01 -6.65502919e+00 -6.65502919e+00
 -6.65502919e+00 -1.16355763e+00 -2.36475967e-01 -2.36475967e-01
 -2.36475967e-01  8.65028781e+01  6.79911599e+02  3.93854164e+03
  2.99915731e+04  1.63989002e+05]
E1 = -706.5426376338612  E_coul = 198.91139940664485
Extra cycle  E= -507.631238227216  delta_E= 5.68e-14  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.38076384576682
E1 = -706.5426376338612  E_coul = 198.91139940664485
init E= -507.631238227216
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236475967156517  LUMO = 86.5028780785388
  mo_energy =
[-1.20267758e+02 -1.22540884e+01 -6.65502919e+00 -6.65502919e+00
 -6.65502919e+00 -1.16355763e+00 -2.36475967e-01 -2.36475967e-01
 -2.36475967e-01  8.65028781e+01  6.79911599e+02  3.93854164e+03
  2.99915731e+04  1.63989002e+05]
E1 = -706.5426376344075  E_coul = 198.9113994071914
cycle= 1 E= -507.631238227216  delta_E= 3.41e-13  |g|= 1.25e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5426376344075  E_coul = 198.9113994071914
  HOMO = -0.236475967153891  LUMO = 86.5028780785955
  mo_energy =
[-1.20267758e+02 -1.22540884e+01 -6.65502919e+00 -6.65502919e+00
 -6.65502919e+00 -1.16355763e+00 -2.36475967e-01 -2.36475967e-01
 -2.36475967e-01  8.65028781e+01  6.79911599e+02  3.93854164e+03
  2.99915731e+04  1.63989002e+05]
E1 = -706.5426376344176  E_coul = 198.91139940720086
Extra cycle  E= -507.631238227217  delta_E= -6.82e-13  |g|= 1e-11  |ddm|= 4.42e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198466e+04 1.83549615e+04 2.23215759e+03 4.57776480e+02
 1.21895439e+02 3.76133945e+01 4.74200048e+00 3.91205289e-01
 8.59816120e+00 4.90832828e-01]
grad_E = [-2.20546130e-07  7.42826589e-06 -2.35935928e-05  6.75912887e-05
 -1.22573325e-04  1.09293678e-04  5.70988651e-04 -1.45319947e-05
 -3.40250345e-04 -2.43775457e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466403        1
[INPUT] 0    0    [1    /1   ]  18354.9610612        1
[INPUT] 0    0    [1    /1   ]  2232.15883611        1
[INPUT] 0    0    [1    /1   ]  457.772785039        1
[INPUT] 0    0    [1    /1   ]  121.903068539        1
[INPUT] 0    0    [1    /1   ]  37.6040811707        1
[INPUT] 0    0    [1    /1   ]  4.74150852886        1
[INPUT] 0    0    [1    /1   ]  0.391196012685       1
[INPUT] 1    0    [1    /1   ]  8.59850687514        1
[INPUT] 1    0    [1    /1   ]  0.490836016973       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664031256, 1.0]], [0, [18354.961061206963, 1.0]], [0, [2232.158836111638, 1.0]], [0, [457.7727850389662, 1.0]], [0, [121.90306853920285, 1.0]], [0, [37.60408117069328, 1.0]], [0, [4.741508528861375, 1.0]], [0, [0.3911960126851619, 1.0]], [1, [8.598506875140531, 1.0]], [1, [0.49083601697315454, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664031]
bas 1, expnt(s) = [18354.96106121]
bas 2, expnt(s) = [2232.15883611]
bas 3, expnt(s) = [457.77278504]
bas 4, expnt(s) = [121.90306854]
bas 5, expnt(s) = [37.60408117]
bas 6, expnt(s) = [4.74150853]
bas 7, expnt(s) = [0.39119601]
bas 8, expnt(s) = [8.59850688]
bas 9, expnt(s) = [0.49083602]
CPU time:        21.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549611e+04 3.98409903e+03
 2.23215884e+03 8.20462707e+02 4.57772785e+02 2.50035976e+02
 1.21903069e+02 9.26885317e+01 3.76040812e+01 3.83655351e+01
 4.74150853e+00 8.11806317e+00 3.91196013e-01 1.24971459e+00
 8.59850688e+00 4.29549478e+01 4.90836017e-01 1.19854659e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319988251907926
cond(S) = 44.368515124144174
E1 = -689.0436874418784  E_coul = 184.9142980578442
init E= -504.129389384034
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680917228672342  LUMO = 85.1552999406845
  mo_energy =
[-1.21646826e+02 -1.32808410e+01 -7.62167612e+00 -7.62167612e+00
 -7.62167612e+00 -1.65069340e+00 -6.80917229e-01 -6.80917229e-01
 -6.80917229e-01  8.51552999e+01  6.78533103e+02  3.93729014e+03
  2.99904928e+04  1.63987999e+05]
E1 = -706.5744393970969  E_coul = 198.9436269332222
cycle= 1 E= -507.630812463875  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406988
diis-c [-0.16563943  1.        ]
  HOMO = -0.236309659011871  LUMO = 86.4883307835269
  mo_energy =
[-1.20259094e+02 -1.22527768e+01 -6.65317475e+00 -6.65317475e+00
 -6.65317475e+00 -1.16347950e+00 -2.36309659e-01 -2.36309659e-01
 -2.36309659e-01  8.64883308e+01  6.79903202e+02  3.93854082e+03
  2.99915797e+04  1.63989011e+05]
E1 = -706.5430539400421  E_coul = 198.91181425200432
cycle= 2 E= -507.631239688038  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503824
diis-c [-2.53313431e-05 -5.63279173e-04  1.00056328e+00]
  HOMO = -0.236484524870548  LUMO = 86.4848146947086
  mo_energy =
[-1.20267723e+02 -1.22539633e+01 -6.65501249e+00 -6.65501249e+00
 -6.65501249e+00 -1.16354415e+00 -2.36484525e-01 -2.36484525e-01
 -2.36484525e-01  8.64848147e+01  6.79892621e+02  3.93852494e+03
  2.99915604e+04  1.63988991e+05]
E1 = -706.542614732413  E_coul = 198.911374934604
cycle= 3 E= -507.631239797809  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126337
diis-c [-3.87995320e-10  3.50768991e-05 -2.54034190e-02  1.02536834e+00]
  HOMO = -0.236486720447262  LUMO = 86.4847703252471
  mo_energy =
[-1.20267836e+02 -1.22539790e+01 -6.65503927e+00 -6.65503927e+00
 -6.65503927e+00 -1.16354480e+00 -2.36486720e-01 -2.36486720e-01
 -2.36486720e-01  8.64847703e+01  6.79892505e+02  3.93852480e+03
  2.99915603e+04  1.63988991e+05]
E1 = -706.5426075423309  E_coul = 198.9113677444824
cycle= 4 E= -507.631239797848  delta_E= -3.95e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5426075423309  E_coul = 198.9113677444824
  HOMO = -0.236486704465552  LUMO = 86.4847706574058
  mo_energy =
[-1.20267835e+02 -1.22539789e+01 -6.65503911e+00 -6.65503911e+00
 -6.65503911e+00 -1.16354479e+00 -2.36486704e-01 -2.36486704e-01
 -2.36486704e-01  8.64847707e+01  6.79892506e+02  3.93852480e+03
  2.99915603e+04  1.63988991e+05]
E1 = -706.5426075785581  E_coul = 198.9113677807098
Extra cycle  E= -507.631239797848  delta_E= 2.27e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549611e+04 2.23215884e+03 4.57772785e+02
 1.21903069e+02 3.76040812e+01 4.74150853e+00 3.91196013e-01
 8.59850688e+00 4.90836017e-01]
E = -507.63123979784825
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466403        1
[INPUT] 0    0    [1    /1   ]  18354.9610612        1
[INPUT] 0    0    [1    /1   ]  2232.15883611        1
[INPUT] 0    0    [1    /1   ]  457.772785039        1
[INPUT] 0    0    [1    /1   ]  121.903068539        1
[INPUT] 0    0    [1    /1   ]  37.6040811707        1
[INPUT] 0    0    [1    /1   ]  4.74150852886        1
[INPUT] 0    0    [1    /1   ]  0.391196012685       1
[INPUT] 1    0    [1    /1   ]  8.59850687514        1
[INPUT] 1    0    [1    /1   ]  0.490836016973       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664031256, 1.0]], [0, [18354.961061206963, 1.0]], [0, [2232.158836111638, 1.0]], [0, [457.7727850389662, 1.0]], [0, [121.90306853920285, 1.0]], [0, [37.60408117069328, 1.0]], [0, [4.741508528861375, 1.0]], [0, [0.3911960126851619, 1.0]], [1, [8.598506875140531, 1.0]], [1, [0.49083601697315454, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664031]
bas 1, expnt(s) = [18354.96106121]
bas 2, expnt(s) = [2232.15883611]
bas 3, expnt(s) = [457.77278504]
bas 4, expnt(s) = [121.90306854]
bas 5, expnt(s) = [37.60408117]
bas 6, expnt(s) = [4.74150853]
bas 7, expnt(s) = [0.39119601]
bas 8, expnt(s) = [8.59850688]
bas 9, expnt(s) = [0.49083602]
CPU time:        21.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549611e+04 3.98409903e+03
 2.23215884e+03 8.20462707e+02 4.57772785e+02 2.50035976e+02
 1.21903069e+02 9.26885317e+01 3.76040812e+01 3.83655351e+01
 4.74150853e+00 8.11806317e+00 3.91196013e-01 1.24971459e+00
 8.59850688e+00 4.29549478e+01 4.90836017e-01 1.19854659e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319988251907926
cond(S) = 44.368515124144174
E1 = -689.0436874418784  E_coul = 184.9142980578442
init E= -504.129389384034
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680917228672342  LUMO = 85.1552999406845
  mo_energy =
[-1.21646826e+02 -1.32808410e+01 -7.62167612e+00 -7.62167612e+00
 -7.62167612e+00 -1.65069340e+00 -6.80917229e-01 -6.80917229e-01
 -6.80917229e-01  8.51552999e+01  6.78533103e+02  3.93729014e+03
  2.99904928e+04  1.63987999e+05]
E1 = -706.5744393970969  E_coul = 198.9436269332222
cycle= 1 E= -507.630812463875  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406988
diis-c [-0.16563943  1.        ]
  HOMO = -0.236309659011871  LUMO = 86.4883307835269
  mo_energy =
[-1.20259094e+02 -1.22527768e+01 -6.65317475e+00 -6.65317475e+00
 -6.65317475e+00 -1.16347950e+00 -2.36309659e-01 -2.36309659e-01
 -2.36309659e-01  8.64883308e+01  6.79903202e+02  3.93854082e+03
  2.99915797e+04  1.63989011e+05]
E1 = -706.5430539400421  E_coul = 198.91181425200432
cycle= 2 E= -507.631239688038  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503824
diis-c [-2.53313431e-05 -5.63279173e-04  1.00056328e+00]
  HOMO = -0.236484524870548  LUMO = 86.4848146947086
  mo_energy =
[-1.20267723e+02 -1.22539633e+01 -6.65501249e+00 -6.65501249e+00
 -6.65501249e+00 -1.16354415e+00 -2.36484525e-01 -2.36484525e-01
 -2.36484525e-01  8.64848147e+01  6.79892621e+02  3.93852494e+03
  2.99915604e+04  1.63988991e+05]
E1 = -706.542614732413  E_coul = 198.911374934604
cycle= 3 E= -507.631239797809  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126337
diis-c [-3.87995320e-10  3.50768991e-05 -2.54034190e-02  1.02536834e+00]
  HOMO = -0.236486720447262  LUMO = 86.4847703252471
  mo_energy =
[-1.20267836e+02 -1.22539790e+01 -6.65503927e+00 -6.65503927e+00
 -6.65503927e+00 -1.16354480e+00 -2.36486720e-01 -2.36486720e-01
 -2.36486720e-01  8.64847703e+01  6.79892505e+02  3.93852480e+03
  2.99915603e+04  1.63988991e+05]
E1 = -706.5426075423309  E_coul = 198.9113677444824
cycle= 4 E= -507.631239797848  delta_E= -3.95e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5426075423309  E_coul = 198.9113677444824
  HOMO = -0.236486704465552  LUMO = 86.4847706574058
  mo_energy =
[-1.20267835e+02 -1.22539789e+01 -6.65503911e+00 -6.65503911e+00
 -6.65503911e+00 -1.16354479e+00 -2.36486704e-01 -2.36486704e-01
 -2.36486704e-01  8.64847707e+01  6.79892506e+02  3.93852480e+03
  2.99915603e+04  1.63988991e+05]
E1 = -706.5426075785581  E_coul = 198.9113677807098
Extra cycle  E= -507.631239797848  delta_E= 2.27e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.368515124144174
E1 = -706.5426075785581  E_coul = 198.9113677807098
init E= -507.631239797848
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236486704278992  LUMO = 86.4847706614571
  mo_energy =
[-1.20267835e+02 -1.22539789e+01 -6.65503911e+00 -6.65503911e+00
 -6.65503911e+00 -1.16354479e+00 -2.36486704e-01 -2.36486704e-01
 -2.36486704e-01  8.64847707e+01  6.79892506e+02  3.93852480e+03
  2.99915603e+04  1.63988991e+05]
E1 = -706.5426075791047  E_coul = 198.91136778125667
cycle= 1 E= -507.631239797848  delta_E= 2.27e-13  |g|= 1.24e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5426075791047  E_coul = 198.91136778125667
  HOMO = -0.236486704276367  LUMO = 86.4847706615153
  mo_energy =
[-1.20267835e+02 -1.22539789e+01 -6.65503911e+00 -6.65503911e+00
 -6.65503911e+00 -1.16354479e+00 -2.36486704e-01 -2.36486704e-01
 -2.36486704e-01  8.64847707e+01  6.79892506e+02  3.93852480e+03
  2.99915603e+04  1.63988991e+05]
E1 = -706.5426075791138  E_coul = 198.91136778126588
Extra cycle  E= -507.631239797848  delta_E= 1.14e-13  |g|= 1.44e-11  |ddm|= 4.4e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198466e+04 1.83549611e+04 2.23215884e+03 4.57772785e+02
 1.21903069e+02 3.76040812e+01 4.74150853e+00 3.91196013e-01
 8.59850688e+00 4.90836017e-01]
grad_E = [-2.20543571e-07  7.42540946e-06 -2.33092438e-05  6.15115650e-05
 -7.17348650e-05 -4.16710027e-05  1.06218706e-04 -3.45006323e-05
 -1.04236768e-04 -3.56471172e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466433        1
[INPUT] 0    0    [1    /1   ]  18354.9609623        1
[INPUT] 0    0    [1    /1   ]  2232.15915165        1
[INPUT] 0    0    [1    /1   ]  457.771856757        1
[INPUT] 0    0    [1    /1   ]  121.904920938        1
[INPUT] 0    0    [1    /1   ]  37.6019699465        1
[INPUT] 0    0    [1    /1   ]  4.74138252679        1
[INPUT] 0    0    [1    /1   ]  0.391193479798       1
[INPUT] 1    0    [1    /1   ]  8.59865266581        1
[INPUT] 1    0    [1    /1   ]  0.490848552589       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664325006, 1.0]], [0, [18354.9609622555, 1.0]], [0, [2232.1591516547514, 1.0]], [0, [457.77185675698587, 1.0]], [0, [121.90492093768816, 1.0]], [0, [37.60196994647158, 1.0]], [0, [4.741382526789131, 1.0]], [0, [0.3911934797981057, 1.0]], [1, [8.598652665810029, 1.0]], [1, [0.4908485525886807, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664325]
bas 1, expnt(s) = [18354.96096226]
bas 2, expnt(s) = [2232.15915165]
bas 3, expnt(s) = [457.77185676]
bas 4, expnt(s) = [121.90492094]
bas 5, expnt(s) = [37.60196995]
bas 6, expnt(s) = [4.74138253]
bas 7, expnt(s) = [0.39119348]
bas 8, expnt(s) = [8.59865267]
bas 9, expnt(s) = [0.49084855]
CPU time:        24.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549610e+04 3.98409901e+03
 2.23215915e+03 8.20462794e+02 4.57771857e+02 2.50035596e+02
 1.21904921e+02 9.26895881e+01 3.76019699e+01 3.83639196e+01
 4.74138253e+00 8.11790137e+00 3.91193480e-01 1.24970852e+00
 8.59865267e+00 4.29558582e+01 4.90848553e-01 1.19858486e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997396497241
cond(S) = 44.365718179308544
E1 = -689.0445972655757  E_coul = 184.91515717967974
init E= -504.129440085896
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680905405971744  LUMO = 85.1512964215356
  mo_energy =
[-1.21646697e+02 -1.32807513e+01 -7.62162458e+00 -7.62162458e+00
 -7.62162458e+00 -1.65067418e+00 -6.80905406e-01 -6.80905406e-01
 -6.80905406e-01  8.51512964e+01  6.78529147e+02  3.93728667e+03
  2.99904903e+04  1.63987996e+05]
E1 = -706.5753537347476  E_coul = 198.9445413007813
cycle= 1 E= -507.630812433966  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406982
diis-c [-0.16563422  1.        ]
  HOMO = -0.236285448450086  LUMO = 86.4843153230999
  mo_energy =
[-1.20258999e+02 -1.22526811e+01 -6.65311835e+00 -6.65311835e+00
 -6.65311835e+00 -1.16345486e+00 -2.36285448e-01 -2.36285448e-01
 -2.36285448e-01  8.64843153e+01  6.79899192e+02  3.93853728e+03
  2.99915770e+04  1.63989009e+05]
E1 = -706.5439627697543  E_coul = 198.91272300288057
cycle= 2 E= -507.631239766874  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503919
diis-c [-2.53409925e-05 -5.62969427e-04  1.00056297e+00]
  HOMO = -0.236460352651385  LUMO = 86.480798610137
  mo_energy =
[-1.20267630e+02 -1.22538678e+01 -6.65495643e+00 -6.65495643e+00
 -6.65495643e+00 -1.16351951e+00 -2.36460353e-01 -2.36460353e-01
 -2.36460353e-01  8.64807986e+01  6.79888609e+02  3.93852140e+03
  2.99915578e+04  1.63988988e+05]
E1 = -706.5435234768576  E_coul = 198.91228360018226
cycle= 3 E= -507.631239876675  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126361
diis-c [-3.88119945e-10  3.50662171e-05 -2.54034115e-02  1.02536835e+00]
  HOMO = -0.236462548823375  LUMO = 86.4807542307875
  mo_energy =
[-1.20267742e+02 -1.22538835e+01 -6.65498321e+00 -6.65498321e+00
 -6.65498321e+00 -1.16352016e+00 -2.36462549e-01 -2.36462549e-01
 -2.36462549e-01  8.64807542e+01  6.79888493e+02  3.93852125e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5435162851242  E_coul = 198.91227640840918
cycle= 4 E= -507.631239876715  delta_E= -3.97e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435162851242  E_coul = 198.91227640840918
  HOMO = -0.236462532837217  LUMO = 86.480754563026
  mo_energy =
[-1.20267741e+02 -1.22538834e+01 -6.65498306e+00 -6.65498306e+00
 -6.65498306e+00 -1.16352015e+00 -2.36462533e-01 -2.36462533e-01
 -2.36462533e-01  8.64807546e+01  6.79888494e+02  3.93852126e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5435163213607  E_coul = 198.91227644464487
Extra cycle  E= -507.631239876716  delta_E= -8.53e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549610e+04 2.23215915e+03 4.57771857e+02
 1.21904921e+02 3.76019699e+01 4.74138253e+00 3.91193480e-01
 8.59865267e+00 4.90848553e-01]
E = -507.6312398767158
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466433        1
[INPUT] 0    0    [1    /1   ]  18354.9609623        1
[INPUT] 0    0    [1    /1   ]  2232.15915165        1
[INPUT] 0    0    [1    /1   ]  457.771856757        1
[INPUT] 0    0    [1    /1   ]  121.904920938        1
[INPUT] 0    0    [1    /1   ]  37.6019699465        1
[INPUT] 0    0    [1    /1   ]  4.74138252679        1
[INPUT] 0    0    [1    /1   ]  0.391193479798       1
[INPUT] 1    0    [1    /1   ]  8.59865266581        1
[INPUT] 1    0    [1    /1   ]  0.490848552589       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664325006, 1.0]], [0, [18354.9609622555, 1.0]], [0, [2232.1591516547514, 1.0]], [0, [457.77185675698587, 1.0]], [0, [121.90492093768816, 1.0]], [0, [37.60196994647158, 1.0]], [0, [4.741382526789131, 1.0]], [0, [0.3911934797981057, 1.0]], [1, [8.598652665810029, 1.0]], [1, [0.4908485525886807, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664325]
bas 1, expnt(s) = [18354.96096226]
bas 2, expnt(s) = [2232.15915165]
bas 3, expnt(s) = [457.77185676]
bas 4, expnt(s) = [121.90492094]
bas 5, expnt(s) = [37.60196995]
bas 6, expnt(s) = [4.74138253]
bas 7, expnt(s) = [0.39119348]
bas 8, expnt(s) = [8.59865267]
bas 9, expnt(s) = [0.49084855]
CPU time:        24.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549610e+04 3.98409901e+03
 2.23215915e+03 8.20462794e+02 4.57771857e+02 2.50035596e+02
 1.21904921e+02 9.26895881e+01 3.76019699e+01 3.83639196e+01
 4.74138253e+00 8.11790137e+00 3.91193480e-01 1.24970852e+00
 8.59865267e+00 4.29558582e+01 4.90848553e-01 1.19858486e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997396497241
cond(S) = 44.365718179308544
E1 = -689.0445972655757  E_coul = 184.91515717967974
init E= -504.129440085896
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680905405971744  LUMO = 85.1512964215356
  mo_energy =
[-1.21646697e+02 -1.32807513e+01 -7.62162458e+00 -7.62162458e+00
 -7.62162458e+00 -1.65067418e+00 -6.80905406e-01 -6.80905406e-01
 -6.80905406e-01  8.51512964e+01  6.78529147e+02  3.93728667e+03
  2.99904903e+04  1.63987996e+05]
E1 = -706.5753537347476  E_coul = 198.9445413007813
cycle= 1 E= -507.630812433966  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.406982
diis-c [-0.16563422  1.        ]
  HOMO = -0.236285448450086  LUMO = 86.4843153230999
  mo_energy =
[-1.20258999e+02 -1.22526811e+01 -6.65311835e+00 -6.65311835e+00
 -6.65311835e+00 -1.16345486e+00 -2.36285448e-01 -2.36285448e-01
 -2.36285448e-01  8.64843153e+01  6.79899192e+02  3.93853728e+03
  2.99915770e+04  1.63989009e+05]
E1 = -706.5439627697543  E_coul = 198.91272300288057
cycle= 2 E= -507.631239766874  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503919
diis-c [-2.53409925e-05 -5.62969427e-04  1.00056297e+00]
  HOMO = -0.236460352651385  LUMO = 86.480798610137
  mo_energy =
[-1.20267630e+02 -1.22538678e+01 -6.65495643e+00 -6.65495643e+00
 -6.65495643e+00 -1.16351951e+00 -2.36460353e-01 -2.36460353e-01
 -2.36460353e-01  8.64807986e+01  6.79888609e+02  3.93852140e+03
  2.99915578e+04  1.63988988e+05]
E1 = -706.5435234768576  E_coul = 198.91228360018226
cycle= 3 E= -507.631239876675  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126361
diis-c [-3.88119945e-10  3.50662171e-05 -2.54034115e-02  1.02536835e+00]
  HOMO = -0.236462548823375  LUMO = 86.4807542307875
  mo_energy =
[-1.20267742e+02 -1.22538835e+01 -6.65498321e+00 -6.65498321e+00
 -6.65498321e+00 -1.16352016e+00 -2.36462549e-01 -2.36462549e-01
 -2.36462549e-01  8.64807542e+01  6.79888493e+02  3.93852125e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5435162851242  E_coul = 198.91227640840918
cycle= 4 E= -507.631239876715  delta_E= -3.97e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435162851242  E_coul = 198.91227640840918
  HOMO = -0.236462532837217  LUMO = 86.480754563026
  mo_energy =
[-1.20267741e+02 -1.22538834e+01 -6.65498306e+00 -6.65498306e+00
 -6.65498306e+00 -1.16352015e+00 -2.36462533e-01 -2.36462533e-01
 -2.36462533e-01  8.64807546e+01  6.79888494e+02  3.93852126e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5435163213607  E_coul = 198.91227644464487
Extra cycle  E= -507.631239876716  delta_E= -8.53e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.365718179308544
E1 = -706.5435163213607  E_coul = 198.91227644464487
init E= -507.631239876716
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236462532650604  LUMO = 86.4807545670782
  mo_energy =
[-1.20267741e+02 -1.22538834e+01 -6.65498305e+00 -6.65498305e+00
 -6.65498305e+00 -1.16352015e+00 -2.36462533e-01 -2.36462533e-01
 -2.36462533e-01  8.64807546e+01  6.79888494e+02  3.93852126e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5435163219072  E_coul = 198.9122764451919
cycle= 1 E= -507.631239876715  delta_E= 5.12e-13  |g|= 1.26e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5435163219072  E_coul = 198.9122764451919
  HOMO = -0.236462532647979  LUMO = 86.4807545671358
  mo_energy =
[-1.20267741e+02 -1.22538834e+01 -6.65498305e+00 -6.65498305e+00
 -6.65498305e+00 -1.16352015e+00 -2.36462533e-01 -2.36462533e-01
 -2.36462533e-01  8.64807546e+01  6.79888494e+02  3.93852126e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5435163219169  E_coul = 198.91227644520137
Extra cycle  E= -507.631239876715  delta_E= -1.71e-13  |g|= 2.02e-11  |ddm|= 4.43e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198466e+04 1.83549610e+04 2.23215915e+03 4.57771857e+02
 1.21904921e+02 3.76019699e+01 4.74138253e+00 3.91193480e-01
 8.59865267e+00 4.90848553e-01]
grad_E = [-2.20542929e-07  7.42473870e-06 -2.32426981e-05  6.00960025e-05
 -5.99790765e-05 -7.63622336e-05 -5.76953637e-06 -5.42562015e-06
 -6.27660371e-06 -6.03795553e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466439        1
[INPUT] 0    0    [1    /1   ]  18354.960942         1
[INPUT] 0    0    [1    /1   ]  2232.15921581        1
[INPUT] 0    0    [1    /1   ]  457.771677083        1
[INPUT] 0    0    [1    /1   ]  121.905213787        1
[INPUT] 0    0    [1    /1   ]  37.6017947805        1
[INPUT] 0    0    [1    /1   ]  4.74136975379        1
[INPUT] 0    0    [1    /1   ]  0.391193148126       1
[INPUT] 1    0    [1    /1   ]  8.59867936689        1
[INPUT] 1    0    [1    /1   ]  0.490851455773       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664385191, 1.0]], [0, [18354.960941986395, 1.0]], [0, [2232.1592158147696, 1.0]], [0, [457.7716770833146, 1.0]], [0, [121.90521378666159, 1.0]], [0, [37.601794780522646, 1.0]], [0, [4.741369753790429, 1.0]], [0, [0.39119314812577116, 1.0]], [1, [8.598679366889586, 1.0]], [1, [0.49085145577308337, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664385]
bas 1, expnt(s) = [18354.96094199]
bas 2, expnt(s) = [2232.15921581]
bas 3, expnt(s) = [457.77167708]
bas 4, expnt(s) = [121.90521379]
bas 5, expnt(s) = [37.60179478]
bas 6, expnt(s) = [4.74136975]
bas 7, expnt(s) = [0.39119315]
bas 8, expnt(s) = [8.59867937]
bas 9, expnt(s) = [0.49085146]
CPU time:        27.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549609e+04 3.98409901e+03
 2.23215922e+03 8.20462811e+02 4.57771677e+02 2.50035523e+02
 1.21905214e+02 9.26897551e+01 3.76017948e+01 3.83637856e+01
 4.74136975e+00 8.11788497e+00 3.91193148e-01 1.24970772e+00
 8.59867937e+00 4.29560250e+01 4.90851456e-01 1.19859372e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319970384499747
cond(S) = 44.365490230148374
E1 = -689.0448006099122  E_coul = 184.9153503439498
init E= -504.129450265962
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902394733201  LUMO = 85.1510308981704
  mo_energy =
[-1.21646668e+02 -1.32807336e+01 -7.62161241e+00 -7.62161241e+00
 -7.62161241e+00 -1.65067051e+00 -6.80902395e-01 -6.80902395e-01
 -6.80902395e-01  8.51510309e+01  6.78529122e+02  3.93728662e+03
  2.99904903e+04  1.63987996e+05]
E1 = -706.575591518747  E_coul = 198.94477908048742
cycle= 1 E= -507.63081243826  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.406981
diis-c [-0.16563391  1.        ]
  HOMO = -0.23627927476359  LUMO = 86.4840517897991
  mo_energy =
[-1.20258970e+02 -1.22526604e+01 -6.65310321e+00 -6.65310321e+00
 -6.65310321e+00 -1.16344930e+00 -2.36279275e-01 -2.36279275e-01
 -2.36279275e-01  8.64840518e+01  6.79899165e+02  3.93853723e+03
  2.99915770e+04  1.63989009e+05]
E1 = -706.5441999925687  E_coul = 198.91296020972538
cycle= 2 E= -507.631239782843  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503929
diis-c [-2.53419997e-05 -5.62945146e-04  1.00056295e+00]
  HOMO = -0.236454183970098  LUMO = 86.4805350113736
  mo_energy =
[-1.20267601e+02 -1.22538472e+01 -6.65494132e+00 -6.65494132e+00
 -6.65494132e+00 -1.16351395e+00 -2.36454184e-01 -2.36454184e-01
 -2.36454184e-01  8.64805350e+01  6.79888582e+02  3.93852135e+03
  2.99915578e+04  1.63988988e+05]
E1 = -706.5437606913858  E_coul = 198.91252079873775
cycle= 3 E= -507.631239892648  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126364
diis-c [-3.88132801e-10  3.50651020e-05 -2.54033807e-02  1.02536832e+00]
  HOMO = -0.236456380214727  LUMO = 86.4804906310713
  mo_energy =
[-1.20267714e+02 -1.22538628e+01 -6.65496811e+00 -6.65496811e+00
 -6.65496811e+00 -1.16351460e+00 -2.36456380e-01 -2.36456380e-01
 -2.36456380e-01  8.64804906e+01  6.79888466e+02  3.93852120e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5437534995019  E_coul = 198.91251360681358
cycle= 4 E= -507.631239892688  delta_E= -4.02e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5437534995019  E_coul = 198.91251360681358
  HOMO = -0.236456364228058  LUMO = 86.4804909633171
  mo_energy =
[-1.20267713e+02 -1.22538627e+01 -6.65496795e+00 -6.65496795e+00
 -6.65496795e+00 -1.16351460e+00 -2.36456364e-01 -2.36456364e-01
 -2.36456364e-01  8.64804910e+01  6.79888467e+02  3.93852120e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.543753535738  E_coul = 198.91251364305003
Extra cycle  E= -507.631239892688  delta_E= 3.41e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549609e+04 2.23215922e+03 4.57771677e+02
 1.21905214e+02 3.76017948e+01 4.74136975e+00 3.91193148e-01
 8.59867937e+00 4.90851456e-01]
E = -507.631239892688
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466439        1
[INPUT] 0    0    [1    /1   ]  18354.960942         1
[INPUT] 0    0    [1    /1   ]  2232.15921581        1
[INPUT] 0    0    [1    /1   ]  457.771677083        1
[INPUT] 0    0    [1    /1   ]  121.905213787        1
[INPUT] 0    0    [1    /1   ]  37.6017947805        1
[INPUT] 0    0    [1    /1   ]  4.74136975379        1
[INPUT] 0    0    [1    /1   ]  0.391193148126       1
[INPUT] 1    0    [1    /1   ]  8.59867936689        1
[INPUT] 1    0    [1    /1   ]  0.490851455773       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664385191, 1.0]], [0, [18354.960941986395, 1.0]], [0, [2232.1592158147696, 1.0]], [0, [457.7716770833146, 1.0]], [0, [121.90521378666159, 1.0]], [0, [37.601794780522646, 1.0]], [0, [4.741369753790429, 1.0]], [0, [0.39119314812577116, 1.0]], [1, [8.598679366889586, 1.0]], [1, [0.49085145577308337, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664385]
bas 1, expnt(s) = [18354.96094199]
bas 2, expnt(s) = [2232.15921581]
bas 3, expnt(s) = [457.77167708]
bas 4, expnt(s) = [121.90521379]
bas 5, expnt(s) = [37.60179478]
bas 6, expnt(s) = [4.74136975]
bas 7, expnt(s) = [0.39119315]
bas 8, expnt(s) = [8.59867937]
bas 9, expnt(s) = [0.49085146]
CPU time:        27.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549609e+04 3.98409901e+03
 2.23215922e+03 8.20462811e+02 4.57771677e+02 2.50035523e+02
 1.21905214e+02 9.26897551e+01 3.76017948e+01 3.83637856e+01
 4.74136975e+00 8.11788497e+00 3.91193148e-01 1.24970772e+00
 8.59867937e+00 4.29560250e+01 4.90851456e-01 1.19859372e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319970384499747
cond(S) = 44.365490230148374
E1 = -689.0448006099122  E_coul = 184.9153503439498
init E= -504.129450265962
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902394733201  LUMO = 85.1510308981704
  mo_energy =
[-1.21646668e+02 -1.32807336e+01 -7.62161241e+00 -7.62161241e+00
 -7.62161241e+00 -1.65067051e+00 -6.80902395e-01 -6.80902395e-01
 -6.80902395e-01  8.51510309e+01  6.78529122e+02  3.93728662e+03
  2.99904903e+04  1.63987996e+05]
E1 = -706.575591518747  E_coul = 198.94477908048742
cycle= 1 E= -507.63081243826  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406981
diis-c [-0.16563391  1.        ]
  HOMO = -0.23627927476359  LUMO = 86.4840517897991
  mo_energy =
[-1.20258970e+02 -1.22526604e+01 -6.65310321e+00 -6.65310321e+00
 -6.65310321e+00 -1.16344930e+00 -2.36279275e-01 -2.36279275e-01
 -2.36279275e-01  8.64840518e+01  6.79899165e+02  3.93853723e+03
  2.99915770e+04  1.63989009e+05]
E1 = -706.5441999925687  E_coul = 198.91296020972538
cycle= 2 E= -507.631239782843  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503929
diis-c [-2.53419997e-05 -5.62945146e-04  1.00056295e+00]
  HOMO = -0.236454183970098  LUMO = 86.4805350113736
  mo_energy =
[-1.20267601e+02 -1.22538472e+01 -6.65494132e+00 -6.65494132e+00
 -6.65494132e+00 -1.16351395e+00 -2.36454184e-01 -2.36454184e-01
 -2.36454184e-01  8.64805350e+01  6.79888582e+02  3.93852135e+03
  2.99915578e+04  1.63988988e+05]
E1 = -706.5437606913858  E_coul = 198.91252079873775
cycle= 3 E= -507.631239892648  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126364
diis-c [-3.88132801e-10  3.50651020e-05 -2.54033807e-02  1.02536832e+00]
  HOMO = -0.236456380214727  LUMO = 86.4804906310713
  mo_energy =
[-1.20267714e+02 -1.22538628e+01 -6.65496811e+00 -6.65496811e+00
 -6.65496811e+00 -1.16351460e+00 -2.36456380e-01 -2.36456380e-01
 -2.36456380e-01  8.64804906e+01  6.79888466e+02  3.93852120e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5437534995019  E_coul = 198.91251360681358
cycle= 4 E= -507.631239892688  delta_E= -4.02e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5437534995019  E_coul = 198.91251360681358
  HOMO = -0.236456364228058  LUMO = 86.4804909633171
  mo_energy =
[-1.20267713e+02 -1.22538627e+01 -6.65496795e+00 -6.65496795e+00
 -6.65496795e+00 -1.16351460e+00 -2.36456364e-01 -2.36456364e-01
 -2.36456364e-01  8.64804910e+01  6.79888467e+02  3.93852120e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.543753535738  E_coul = 198.91251364305003
Extra cycle  E= -507.631239892688  delta_E= 3.41e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.365490230148374
E1 = -706.543753535738  E_coul = 198.91251364305003
init E= -507.631239892688
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.23645636404144  LUMO = 86.4804909673709
  mo_energy =
[-1.20267713e+02 -1.22538627e+01 -6.65496795e+00 -6.65496795e+00
 -6.65496795e+00 -1.16351460e+00 -2.36456364e-01 -2.36456364e-01
 -2.36456364e-01  8.64804910e+01  6.79888467e+02  3.93852120e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5437535362848  E_coul = 198.91251364359692
cycle= 1 E= -507.631239892688  delta_E= 5.68e-14  |g|= 1.24e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5437535362848  E_coul = 198.91251364359692
  HOMO = -0.236456364038816  LUMO = 86.4804909674286
  mo_energy =
[-1.20267713e+02 -1.22538627e+01 -6.65496795e+00 -6.65496795e+00
 -6.65496795e+00 -1.16351460e+00 -2.36456364e-01 -2.36456364e-01
 -2.36456364e-01  8.64804910e+01  6.79888467e+02  3.93852120e+03
  2.99915576e+04  1.63988988e+05]
E1 = -706.5437535362948  E_coul = 198.9125136436065
Extra cycle  E= -507.631239892688  delta_E= -3.98e-13  |g|= 8.77e-12  |ddm|= 4.41e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198466e+04 1.83549609e+04 2.23215922e+03 4.57771677e+02
 1.21905214e+02 3.76017948e+01 4.74136975e+00 3.91193148e-01
 8.59867937e+00 4.90851456e-01]
grad_E = [-2.20542866e-07  7.42465804e-06 -2.32347811e-05  5.99346688e-05
 -5.87398700e-05 -7.98016642e-05 -1.61549016e-05  1.93314035e-06
  1.21360710e-05  1.87186949e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466466        1
[INPUT] 0    0    [1    /1   ]  18354.9608488        1
[INPUT] 0    0    [1    /1   ]  2232.1595097         1
[INPUT] 0    0    [1    /1   ]  457.770876909        1
[INPUT] 0    0    [1    /1   ]  121.906344903        1
[INPUT] 0    0    [1    /1   ]  37.6016290201        1
[INPUT] 0    0    [1    /1   ]  4.74134427053        1
[INPUT] 0    0    [1    /1   ]  0.391192427761       1
[INPUT] 1    0    [1    /1   ]  8.59874393561        1
[INPUT] 1    0    [1    /1   ]  0.490858568222       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664662022, 1.0]], [0, [18354.960848768053, 1.0]], [0, [2232.1595097003064, 1.0]], [0, [457.7708769087151, 1.0]], [0, [121.9063449032324, 1.0]], [0, [37.601629020099494, 1.0]], [0, [4.7413442705319016, 1.0]], [0, [0.39119242776134466, 1.0]], [1, [8.59874393560804, 1.0]], [1, [0.49085856822194435, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664662]
bas 1, expnt(s) = [18354.96084877]
bas 2, expnt(s) = [2232.1595097]
bas 3, expnt(s) = [457.77087691]
bas 4, expnt(s) = [121.9063449]
bas 5, expnt(s) = [37.60162902]
bas 6, expnt(s) = [4.74134427]
bas 7, expnt(s) = [0.39119243]
bas 8, expnt(s) = [8.59874394]
bas 9, expnt(s) = [0.49085857]
CPU time:        30.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549608e+04 3.98409900e+03
 2.23215951e+03 8.20462892e+02 4.57770877e+02 2.50035195e+02
 1.21906345e+02 9.26904001e+01 3.76016290e+01 3.83636588e+01
 4.74134427e+00 8.11785224e+00 3.91192428e-01 1.24970600e+00
 8.59874394e+00 4.29564282e+01 4.90858568e-01 1.19861543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996150129201
cond(S) = 44.36530208927859
E1 = -689.0453043333587  E_coul = 184.91582941996907
init E= -504.12947491339
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894942892734  LUMO = 85.1511354367672
  mo_energy =
[-1.21646596e+02 -1.32806912e+01 -7.62158193e+00 -7.62158193e+00
 -7.62158193e+00 -1.65066178e+00 -6.80894943e-01 -6.80894943e-01
 -6.80894943e-01  8.51511354e+01  6.78530895e+02  3.93728798e+03
  2.99904915e+04  1.63987997e+05]
E1 = -706.5761926693285  E_coul = 198.94538014837028
cycle= 1 E= -507.630812520958  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406981
diis-c [-0.16563376  1.        ]
  HOMO = -0.236263939706095  LUMO = 86.4841636529146
  mo_energy =
[-1.20258895e+02 -1.22526098e+01 -6.65306471e+00 -6.65306471e+00
 -6.65306471e+00 -1.16343571e+00 -2.36263940e-01 -2.36263940e-01
 -2.36263940e-01  8.64841637e+01  6.79900936e+02  3.93853858e+03
  2.99915782e+04  1.63989009e+05]
E1 = -706.5448002941877  E_coul = 198.91356040871216
cycle= 2 E= -507.631239885476  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503946
diis-c [-2.53437771e-05 -5.62928462e-04  1.00056293e+00]
  HOMO = -0.236438858015791  LUMO = 86.4806467610552
  mo_energy =
[-1.20267527e+02 -1.22537966e+01 -6.65490287e+00 -6.65490287e+00
 -6.65490287e+00 -1.16350037e+00 -2.36438858e-01 -2.36438858e-01
 -2.36438858e-01  8.64806468e+01  6.79890353e+02  3.93852270e+03
  2.99915590e+04  1.63988989e+05]
E1 = -706.5443609821758  E_coul = 198.9131209868899
cycle= 3 E= -507.631239995286  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126367
diis-c [-3.88150914e-10  3.50629825e-05 -2.54031950e-02  1.02536813e+00]
  HOMO = -0.236441054380517  LUMO = 86.4806023794433
  mo_energy =
[-1.20267639e+02 -1.22538122e+01 -6.65492966e+00 -6.65492966e+00
 -6.65492966e+00 -1.16350102e+00 -2.36441054e-01 -2.36441054e-01
 -2.36441054e-01  8.64806024e+01  6.79890236e+02  3.93852256e+03
  2.99915588e+04  1.63988989e+05]
E1 = -706.5443537901302  E_coul = 198.91311379480507
cycle= 4 E= -507.631239995325  delta_E= -3.92e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5443537901302  E_coul = 198.91311379480507
  HOMO = -0.236441038393091  LUMO = 86.4806027117001
  mo_energy =
[-1.20267638e+02 -1.22538121e+01 -6.65492950e+00 -6.65492950e+00
 -6.65492950e+00 -1.16350101e+00 -2.36441038e-01 -2.36441038e-01
 -2.36441038e-01  8.64806027e+01  6.79890237e+02  3.93852256e+03
  2.99915588e+04  1.63988989e+05]
E1 = -706.5443538263667  E_coul = 198.91311383104195
Extra cycle  E= -507.631239995325  delta_E= 4.55e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198466e+04 1.83549608e+04 2.23215951e+03 4.57770877e+02
 1.21906345e+02 3.76016290e+01 4.74134427e+00 3.91192428e-01
 8.59874394e+00 4.90858568e-01]
E = -507.6312399953247
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466466        1
[INPUT] 0    0    [1    /1   ]  18354.9608488        1
[INPUT] 0    0    [1    /1   ]  2232.1595097         1
[INPUT] 0    0    [1    /1   ]  457.770876909        1
[INPUT] 0    0    [1    /1   ]  121.906344903        1
[INPUT] 0    0    [1    /1   ]  37.6016290201        1
[INPUT] 0    0    [1    /1   ]  4.74134427053        1
[INPUT] 0    0    [1    /1   ]  0.391192427761       1
[INPUT] 1    0    [1    /1   ]  8.59874393561        1
[INPUT] 1    0    [1    /1   ]  0.490858568222       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84664662022, 1.0]], [0, [18354.960848768053, 1.0]], [0, [2232.1595097003064, 1.0]], [0, [457.7708769087151, 1.0]], [0, [121.9063449032324, 1.0]], [0, [37.601629020099494, 1.0]], [0, [4.7413442705319016, 1.0]], [0, [0.39119242776134466, 1.0]], [1, [8.59874393560804, 1.0]], [1, [0.49085856822194435, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84664662]
bas 1, expnt(s) = [18354.96084877]
bas 2, expnt(s) = [2232.1595097]
bas 3, expnt(s) = [457.77087691]
bas 4, expnt(s) = [121.9063449]
bas 5, expnt(s) = [37.60162902]
bas 6, expnt(s) = [4.74134427]
bas 7, expnt(s) = [0.39119243]
bas 8, expnt(s) = [8.59874394]
bas 9, expnt(s) = [0.49085857]
CPU time:        30.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198466e+04 1.12687340e+04 1.83549608e+04 3.98409900e+03
 2.23215951e+03 8.20462892e+02 4.57770877e+02 2.50035195e+02
 1.21906345e+02 9.26904001e+01 3.76016290e+01 3.83636588e+01
 4.74134427e+00 8.11785224e+00 3.91192428e-01 1.24970600e+00
 8.59874394e+00 4.29564282e+01 4.90858568e-01 1.19861543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996150129201
cond(S) = 44.36530208927859
E1 = -689.0453043333587  E_coul = 184.91582941996907
init E= -504.12947491339
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680894942892734  LUMO = 85.1511354367672
  mo_energy =
[-1.21646596e+02 -1.32806912e+01 -7.62158193e+00 -7.62158193e+00
 -7.62158193e+00 -1.65066178e+00 -6.80894943e-01 -6.80894943e-01
 -6.80894943e-01  8.51511354e+01  6.78530895e+02  3.93728798e+03
  2.99904915e+04  1.63987997e+05]
E1 = -706.5761926693285  E_coul = 198.94538014837028
cycle= 1 E= -507.630812520958  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406981
diis-c [-0.16563376  1.        ]
  HOMO = -0.236263939706095  LUMO = 86.4841636529146
  mo_energy =
[-1.20258895e+02 -1.22526098e+01 -6.65306471e+00 -6.65306471e+00
 -6.65306471e+00 -1.16343571e+00 -2.36263940e-01 -2.36263940e-01
 -2.36263940e-01  8.64841637e+01  6.79900936e+02  3.93853858e+03
  2.99915782e+04  1.63989009e+05]
E1 = -706.5448002941877  E_coul = 198.91356040871216
cycle= 2 E= -507.631239885476  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503946
diis-c [-2.53437771e-05 -5.62928462e-04  1.00056293e+00]
  HOMO = -0.236438858015791  LUMO = 86.4806467610552
  mo_energy =
[-1.20267527e+02 -1.22537966e+01 -6.65490287e+00 -6.65490287e+00
 -6.65490287e+00 -1.16350037e+00 -2.36438858e-01 -2.36438858e-01
 -2.36438858e-01  8.64806468e+01  6.79890353e+02  3.93852270e+03
  2.99915590e+04  1.63988989e+05]
E1 = -706.5443609821758  E_coul = 198.9131209868899
cycle= 3 E= -507.631239995286  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126367
diis-c [-3.88150914e-10  3.50629825e-05 -2.54031950e-02  1.02536813e+00]
  HOMO = -0.236441054380517  LUMO = 86.4806023794433
  mo_energy =
[-1.20267639e+02 -1.22538122e+01 -6.65492966e+00 -6.65492966e+00
 -6.65492966e+00 -1.16350102e+00 -2.36441054e-01 -2.36441054e-01
 -2.36441054e-01  8.64806024e+01  6.79890236e+02  3.93852256e+03
  2.99915588e+04  1.63988989e+05]
E1 = -706.5443537901302  E_coul = 198.91311379480507
cycle= 4 E= -507.631239995325  delta_E= -3.92e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5443537901302  E_coul = 198.91311379480507
  HOMO = -0.236441038393091  LUMO = 86.4806027117001
  mo_energy =
[-1.20267638e+02 -1.22538121e+01 -6.65492950e+00 -6.65492950e+00
 -6.65492950e+00 -1.16350101e+00 -2.36441038e-01 -2.36441038e-01
 -2.36441038e-01  8.64806027e+01  6.79890237e+02  3.93852256e+03
  2.99915588e+04  1.63988989e+05]
E1 = -706.5443538263667  E_coul = 198.91311383104195
Extra cycle  E= -507.631239995325  delta_E= 4.55e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.36530208927859
E1 = -706.5443538263667  E_coul = 198.91311383104195
init E= -507.631239995325
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236441038206467  LUMO = 86.4806027157516
  mo_energy =
[-1.20267638e+02 -1.22538121e+01 -6.65492950e+00 -6.65492950e+00
 -6.65492950e+00 -1.16350101e+00 -2.36441038e-01 -2.36441038e-01
 -2.36441038e-01  8.64806027e+01  6.79890237e+02  3.93852256e+03
  2.99915588e+04  1.63988989e+05]
E1 = -706.5443538269142  E_coul = 198.91311383158916
cycle= 1 E= -507.631239995325  delta_E= -3.41e-13  |g|= 1.26e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5443538269142  E_coul = 198.91311383158916
  HOMO = -0.236441038203838  LUMO = 86.4806027158096
  mo_energy =
[-1.20267638e+02 -1.22538121e+01 -6.65492950e+00 -6.65492950e+00
 -6.65492950e+00 -1.16350101e+00 -2.36441038e-01 -2.36441038e-01
 -2.36441038e-01  8.64806027e+01  6.79890237e+02  3.93852256e+03
  2.99915588e+04  1.63988989e+05]
E1 = -706.5443538269238  E_coul = 198.91311383159865
Extra cycle  E= -507.631239995325  delta_E= -1.71e-13  |g|= 1.34e-11  |ddm|= 4.39e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198466e+04 1.83549608e+04 2.23215951e+03 4.57770877e+02
 1.21906345e+02 3.76016290e+01 4.74134427e+00 3.91192428e-01
 8.59874394e+00 4.90858568e-01]
grad_E = [-2.20542762e-07  7.42442801e-06 -2.32124936e-05  5.95105055e-05
 -5.59208511e-05 -8.66051799e-05 -3.60218033e-05  2.00380977e-05
  5.71708815e-05  2.14674794e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466606        1
[INPUT] 0    0    [1    /1   ]  18354.9603791        1
[INPUT] 0    0    [1    /1   ]  2232.16098772        1
[INPUT] 0    0    [1    /1   ]  457.766903454        1
[INPUT] 0    0    [1    /1   ]  121.911567725        1
[INPUT] 0    0    [1    /1   ]  37.6022004468        1
[INPUT] 0    0    [1    /1   ]  4.74128539728        1
[INPUT] 0    0    [1    /1   ]  0.391190858154       1
[INPUT] 1    0    [1    /1   ]  8.59890073707        1
[INPUT] 1    0    [1    /1   ]  0.490875854107       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84666056841, 1.0]], [0, [18354.96037911354, 1.0]], [0, [2232.1609877156952, 1.0]], [0, [457.7669034540205, 1.0]], [0, [121.91156772541228, 1.0]], [0, [37.60220044680014, 1.0]], [0, [4.7412853972793, 1.0]], [0, [0.3911908581544707, 1.0]], [1, [8.598900737072011, 1.0]], [1, [0.49087585410660556, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84666057]
bas 1, expnt(s) = [18354.96037911]
bas 2, expnt(s) = [2232.16098772]
bas 3, expnt(s) = [457.76690345]
bas 4, expnt(s) = [121.91156773]
bas 5, expnt(s) = [37.60220045]
bas 6, expnt(s) = [4.7412854]
bas 7, expnt(s) = [0.39119086]
bas 8, expnt(s) = [8.59890074]
bas 9, expnt(s) = [0.49087585]
CPU time:        33.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198467e+04 1.12687340e+04 1.83549604e+04 3.98409892e+03
 2.23216099e+03 8.20463300e+02 4.57766903e+02 2.50033567e+02
 1.21911568e+02 9.26933784e+01 3.76022004e+01 3.83640960e+01
 4.74128540e+00 8.11777664e+00 3.91190858e-01 1.24970224e+00
 8.59890074e+00 4.29574073e+01 4.90875854e-01 1.19866819e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319939781377006
cond(S) = 44.36623890156384
E1 = -689.0465378430115  E_coul = 184.91700390702226
init E= -504.129533935989
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680876743523889  LUMO = 85.1545157569887
  mo_energy =
[-1.21646416e+02 -1.32805894e+01 -7.62150683e+00 -7.62150683e+00
 -7.62150683e+00 -1.65064091e+00 -6.80876744e-01 -6.80876744e-01
 -6.80876744e-01  8.51545158e+01  6.78543904e+02  3.93729823e+03
  2.99905002e+04  1.63988004e+05]
E1 = -706.5776767134063  E_coul = 198.94686364706556
cycle= 1 E= -507.630813066341  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.406983
diis-c [-0.16563533  1.        ]
  HOMO = -0.236226430844779  LUMO = 86.4875670246727
  mo_energy =
[-1.20258707e+02 -1.22524875e+01 -6.65296946e+00 -6.65296946e+00
 -6.65296946e+00 -1.16340275e+00 -2.36226431e-01 -2.36226431e-01
 -2.36226431e-01  8.64875670e+01  6.79913948e+02  3.93854883e+03
  2.99915869e+04  1.63989017e+05]
E1 = -706.5462840555086  E_coul = 198.91504360241646
cycle= 2 E= -507.631240453092  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503971
diis-c [-2.53462672e-05 -5.63064016e-04  1.00056306e+00]
  HOMO = -0.236401359818788  LUMO = 86.484049991943
  mo_energy =
[-1.20267339e+02 -1.22536742e+01 -6.65480763e+00 -6.65480763e+00
 -6.65480763e+00 -1.16346740e+00 -2.36401360e-01 -2.36401360e-01
 -2.36401360e-01  8.64840500e+01  6.79903364e+02  3.93853295e+03
  2.99915676e+04  1.63988996e+05]
E1 = -706.5458447513298  E_coul = 198.91460418842678
cycle= 3 E= -507.631240562903  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126368
diis-c [-3.88148880e-10  3.50587329e-05 -2.54021545e-02  1.02536710e+00]
  HOMO = -0.236403556254842  LUMO = 86.4840056107081
  mo_energy =
[-1.20267451e+02 -1.22536899e+01 -6.65483442e+00 -6.65483442e+00
 -6.65483442e+00 -1.16346805e+00 -2.36403556e-01 -2.36403556e-01
 -2.36403556e-01  8.64840056e+01  6.79903248e+02  3.93853281e+03
  2.99915675e+04  1.63988996e+05]
E1 = -706.5458375596932  E_coul = 198.91459699675028
cycle= 4 E= -507.631240562943  delta_E= -3.98e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5458375596932  E_coul = 198.91459699675028
  HOMO = -0.236403540267514  LUMO = 86.4840059429654
  mo_energy =
[-1.20267451e+02 -1.22536898e+01 -6.65483426e+00 -6.65483426e+00
 -6.65483426e+00 -1.16346804e+00 -2.36403540e-01 -2.36403540e-01
 -2.36403540e-01  8.64840059e+01  6.79903249e+02  3.93853281e+03
  2.99915675e+04  1.63988996e+05]
E1 = -706.5458375959269  E_coul = 198.91459703298435
Extra cycle  E= -507.631240562942  delta_E= 3.98e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198467e+04 1.83549604e+04 2.23216099e+03 4.57766903e+02
 1.21911568e+02 3.76022004e+01 4.74128540e+00 3.91190858e-01
 8.59890074e+00 4.90875854e-01]
E = -507.6312405629425
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8466606        1
[INPUT] 0    0    [1    /1   ]  18354.9603791        1
[INPUT] 0    0    [1    /1   ]  2232.16098772        1
[INPUT] 0    0    [1    /1   ]  457.766903454        1
[INPUT] 0    0    [1    /1   ]  121.911567725        1
[INPUT] 0    0    [1    /1   ]  37.6022004468        1
[INPUT] 0    0    [1    /1   ]  4.74128539728        1
[INPUT] 0    0    [1    /1   ]  0.391190858154       1
[INPUT] 1    0    [1    /1   ]  8.59890073707        1
[INPUT] 1    0    [1    /1   ]  0.490875854107       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84666056841, 1.0]], [0, [18354.96037911354, 1.0]], [0, [2232.1609877156952, 1.0]], [0, [457.7669034540205, 1.0]], [0, [121.91156772541228, 1.0]], [0, [37.60220044680014, 1.0]], [0, [4.7412853972793, 1.0]], [0, [0.3911908581544707, 1.0]], [1, [8.598900737072011, 1.0]], [1, [0.49087585410660556, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84666057]
bas 1, expnt(s) = [18354.96037911]
bas 2, expnt(s) = [2232.16098772]
bas 3, expnt(s) = [457.76690345]
bas 4, expnt(s) = [121.91156773]
bas 5, expnt(s) = [37.60220045]
bas 6, expnt(s) = [4.7412854]
bas 7, expnt(s) = [0.39119086]
bas 8, expnt(s) = [8.59890074]
bas 9, expnt(s) = [0.49087585]
CPU time:        33.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198467e+04 1.12687340e+04 1.83549604e+04 3.98409892e+03
 2.23216099e+03 8.20463300e+02 4.57766903e+02 2.50033567e+02
 1.21911568e+02 9.26933784e+01 3.76022004e+01 3.83640960e+01
 4.74128540e+00 8.11777664e+00 3.91190858e-01 1.24970224e+00
 8.59890074e+00 4.29574073e+01 4.90875854e-01 1.19866819e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319939781377006
cond(S) = 44.36623890156384
E1 = -689.0465378430115  E_coul = 184.91700390702226
init E= -504.129533935989
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680876743523889  LUMO = 85.1545157569887
  mo_energy =
[-1.21646416e+02 -1.32805894e+01 -7.62150683e+00 -7.62150683e+00
 -7.62150683e+00 -1.65064091e+00 -6.80876744e-01 -6.80876744e-01
 -6.80876744e-01  8.51545158e+01  6.78543904e+02  3.93729823e+03
  2.99905002e+04  1.63988004e+05]
E1 = -706.5776767134063  E_coul = 198.94686364706556
cycle= 1 E= -507.630813066341  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406983
diis-c [-0.16563533  1.        ]
  HOMO = -0.236226430844779  LUMO = 86.4875670246727
  mo_energy =
[-1.20258707e+02 -1.22524875e+01 -6.65296946e+00 -6.65296946e+00
 -6.65296946e+00 -1.16340275e+00 -2.36226431e-01 -2.36226431e-01
 -2.36226431e-01  8.64875670e+01  6.79913948e+02  3.93854883e+03
  2.99915869e+04  1.63989017e+05]
E1 = -706.5462840555086  E_coul = 198.91504360241646
cycle= 2 E= -507.631240453092  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503971
diis-c [-2.53462672e-05 -5.63064016e-04  1.00056306e+00]
  HOMO = -0.236401359818788  LUMO = 86.484049991943
  mo_energy =
[-1.20267339e+02 -1.22536742e+01 -6.65480763e+00 -6.65480763e+00
 -6.65480763e+00 -1.16346740e+00 -2.36401360e-01 -2.36401360e-01
 -2.36401360e-01  8.64840500e+01  6.79903364e+02  3.93853295e+03
  2.99915676e+04  1.63988996e+05]
E1 = -706.5458447513298  E_coul = 198.91460418842678
cycle= 3 E= -507.631240562903  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126368
diis-c [-3.88148880e-10  3.50587329e-05 -2.54021545e-02  1.02536710e+00]
  HOMO = -0.236403556254842  LUMO = 86.4840056107081
  mo_energy =
[-1.20267451e+02 -1.22536899e+01 -6.65483442e+00 -6.65483442e+00
 -6.65483442e+00 -1.16346805e+00 -2.36403556e-01 -2.36403556e-01
 -2.36403556e-01  8.64840056e+01  6.79903248e+02  3.93853281e+03
  2.99915675e+04  1.63988996e+05]
E1 = -706.5458375596932  E_coul = 198.91459699675028
cycle= 4 E= -507.631240562943  delta_E= -3.98e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5458375596932  E_coul = 198.91459699675028
  HOMO = -0.236403540267514  LUMO = 86.4840059429654
  mo_energy =
[-1.20267451e+02 -1.22536898e+01 -6.65483426e+00 -6.65483426e+00
 -6.65483426e+00 -1.16346804e+00 -2.36403540e-01 -2.36403540e-01
 -2.36403540e-01  8.64840059e+01  6.79903249e+02  3.93853281e+03
  2.99915675e+04  1.63988996e+05]
E1 = -706.5458375959269  E_coul = 198.91459703298435
Extra cycle  E= -507.631240562942  delta_E= 3.98e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.36623890156384
E1 = -706.5458375959269  E_coul = 198.91459703298435
init E= -507.631240562942
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236403540080897  LUMO = 86.4840059470188
  mo_energy =
[-1.20267451e+02 -1.22536898e+01 -6.65483426e+00 -6.65483426e+00
 -6.65483426e+00 -1.16346804e+00 -2.36403540e-01 -2.36403540e-01
 -2.36403540e-01  8.64840059e+01  6.79903249e+02  3.93853281e+03
  2.99915675e+04  1.63988996e+05]
E1 = -706.545837596474  E_coul = 198.91459703353127
cycle= 1 E= -507.631240562943  delta_E= -2.84e-13  |g|= 1.24e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.545837596474  E_coul = 198.91459703353127
  HOMO = -0.236403540078268  LUMO = 86.4840059470755
  mo_energy =
[-1.20267451e+02 -1.22536898e+01 -6.65483426e+00 -6.65483426e+00
 -6.65483426e+00 -1.16346804e+00 -2.36403540e-01 -2.36403540e-01
 -2.36403540e-01  8.64840059e+01  6.79903249e+02  3.93853281e+03
  2.99915675e+04  1.63988996e+05]
E1 = -706.5458375964829  E_coul = 198.91459703354053
Extra cycle  E= -507.631240562942  delta_E= 3.98e-13  |g|= 1.19e-11  |ddm|= 4.42e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198467e+04 1.83549604e+04 2.23216099e+03 4.57766903e+02
 1.21911568e+02 3.76022004e+01 4.74128540e+00 3.91190858e-01
 8.59890074e+00 4.90875854e-01]
grad_E = [-2.20542648e-07  7.42357845e-06 -2.31311829e-05  5.80707057e-05
 -4.80230545e-05 -1.01169776e-04 -8.09040597e-05  6.41081375e-05
  1.67262646e-04  6.92469104e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8467333        1
[INPUT] 0    0    [1    /1   ]  18354.9579286        1
[INPUT] 0    0    [1    /1   ]  2232.16869331        1
[INPUT] 0    0    [1    /1   ]  457.746307695        1
[INPUT] 0    0    [1    /1   ]  121.937709693        1
[INPUT] 0    0    [1    /1   ]  37.6084337871        1
[INPUT] 0    0    [1    /1   ]  4.74113490834        1
[INPUT] 0    0    [1    /1   ]  0.39118764464        1
[INPUT] 1    0    [1    /1   ]  8.59930045555        1
[INPUT] 1    0    [1    /1   ]  0.490920070054       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84673334798, 1.0]], [0, [18354.957928589814, 1.0]], [0, [2232.168693311932, 1.0]], [0, [457.74630769493666, 1.0]], [0, [121.9377096932731, 1.0]], [0, [37.60843378714696, 1.0]], [0, [4.74113490834323, 1.0]], [0, [0.391187644640177, 1.0]], [1, [8.59930045555358, 1.0]], [1, [0.49092007005443056, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84673335]
bas 1, expnt(s) = [18354.95792859]
bas 2, expnt(s) = [2232.16869331]
bas 3, expnt(s) = [457.74630769]
bas 4, expnt(s) = [121.93770969]
bas 5, expnt(s) = [37.60843379]
bas 6, expnt(s) = [4.74113491]
bas 7, expnt(s) = [0.39118764]
bas 8, expnt(s) = [8.59930046]
bas 9, expnt(s) = [0.49092007]
CPU time:        36.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198467e+04 1.12687341e+04 1.83549579e+04 3.98409852e+03
 2.23216869e+03 8.20465424e+02 4.57746308e+02 2.50025130e+02
 1.21937710e+02 9.27082855e+01 3.76084338e+01 3.83688657e+01
 4.74113491e+00 8.11758340e+00 3.91187645e-01 1.24969454e+00
 8.59930046e+00 4.29599034e+01 4.90920070e-01 1.19880315e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31988381170039
cond(S) = 44.375479774316474
E1 = -689.0497146424677  E_coul = 184.920035279176
init E= -504.129679363292
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680829848265946  LUMO = 85.1786994649973
  mo_energy =
[-1.21645947e+02 -1.32803364e+01 -7.62131187e+00 -7.62131187e+00
 -7.62131187e+00 -1.65058865e+00 -6.80829848e-01 -6.80829848e-01
 -6.80829848e-01  8.51786995e+01  6.78621140e+02  3.93735952e+03
  2.99905516e+04  1.63988047e+05]
E1 = -706.581534282334  E_coul = 198.9507183870937
cycle= 1 E= -507.63081589524  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406999
diis-c [-0.16564854  1.        ]
  HOMO = -0.23612972189772  LUMO = 86.5118322489133
  mo_energy =
[-1.20258207e+02 -1.22521799e+01 -6.65272153e+00 -6.65272153e+00
 -6.65272153e+00 -1.16331873e+00 -2.36129722e-01 -2.36129722e-01
 -2.36129722e-01  8.65118322e+01  6.79991208e+02  3.93861015e+03
  2.99916383e+04  1.63989059e+05]
E1 = -706.550149489985  E_coul = 198.9189062748795
cycle= 2 E= -507.631243215105  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503953
diis-c [-2.53442313e-05 -5.64290093e-04  1.00056429e+00]
  HOMO = -0.236304622206745  LUMO = 86.5083154870186
  mo_energy =
[-1.20266837e+02 -1.22533662e+01 -6.65455915e+00 -6.65455915e+00
 -6.65455915e+00 -1.16338336e+00 -2.36304622e-01 -2.36304622e-01
 -2.36304622e-01  8.65083155e+01  6.79980626e+02  3.93859428e+03
  2.99916191e+04  1.63989039e+05]
E1 = -706.5497103721785  E_coul = 198.9184670473122
cycle= 3 E= -507.631243324866  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126335
diis-c [-3.87918142e-10  3.50516781e-05 -2.53964873e-02  1.02536144e+00]
  HOMO = -0.236306817740496  LUMO = 86.5082711240535
  mo_energy =
[-1.20266949e+02 -1.22533818e+01 -6.65458592e+00 -6.65458592e+00
 -6.65458592e+00 -1.16338401e+00 -2.36306818e-01 -2.36306818e-01
 -2.36306818e-01  8.65082711e+01  6.79980510e+02  3.93859413e+03
  2.99916189e+04  1.63989038e+05]
E1 = -706.5497031855052  E_coul = 198.9184598605996
cycle= 4 E= -507.631243324906  delta_E= -3.93e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5497031855052  E_coul = 198.9184598605996
  HOMO = -0.236306801762941  LUMO = 86.5082714561836
  mo_energy =
[-1.20266948e+02 -1.22533817e+01 -6.65458576e+00 -6.65458576e+00
 -6.65458576e+00 -1.16338400e+00 -2.36306802e-01 -2.36306802e-01
 -2.36306802e-01  8.65082715e+01  6.79980511e+02  3.93859413e+03
  2.99916189e+04  1.63989038e+05]
E1 = -706.5497032217105  E_coul = 198.91845989680434
Extra cycle  E= -507.631243324906  delta_E= -5.12e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198467e+04 1.83549579e+04 2.23216869e+03 4.57746308e+02
 1.21937710e+02 3.76084338e+01 4.74113491e+00 3.91187645e-01
 8.59930046e+00 4.90920070e-01]
E = -507.63124332490617
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8467333        1
[INPUT] 0    0    [1    /1   ]  18354.9579286        1
[INPUT] 0    0    [1    /1   ]  2232.16869331        1
[INPUT] 0    0    [1    /1   ]  457.746307695        1
[INPUT] 0    0    [1    /1   ]  121.937709693        1
[INPUT] 0    0    [1    /1   ]  37.6084337871        1
[INPUT] 0    0    [1    /1   ]  4.74113490834        1
[INPUT] 0    0    [1    /1   ]  0.39118764464        1
[INPUT] 1    0    [1    /1   ]  8.59930045555        1
[INPUT] 1    0    [1    /1   ]  0.490920070054       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84673334798, 1.0]], [0, [18354.957928589814, 1.0]], [0, [2232.168693311932, 1.0]], [0, [457.74630769493666, 1.0]], [0, [121.9377096932731, 1.0]], [0, [37.60843378714696, 1.0]], [0, [4.74113490834323, 1.0]], [0, [0.391187644640177, 1.0]], [1, [8.59930045555358, 1.0]], [1, [0.49092007005443056, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84673335]
bas 1, expnt(s) = [18354.95792859]
bas 2, expnt(s) = [2232.16869331]
bas 3, expnt(s) = [457.74630769]
bas 4, expnt(s) = [121.93770969]
bas 5, expnt(s) = [37.60843379]
bas 6, expnt(s) = [4.74113491]
bas 7, expnt(s) = [0.39118764]
bas 8, expnt(s) = [8.59930046]
bas 9, expnt(s) = [0.49092007]
CPU time:        36.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198467e+04 1.12687341e+04 1.83549579e+04 3.98409852e+03
 2.23216869e+03 8.20465424e+02 4.57746308e+02 2.50025130e+02
 1.21937710e+02 9.27082855e+01 3.76084338e+01 3.83688657e+01
 4.74113491e+00 8.11758340e+00 3.91187645e-01 1.24969454e+00
 8.59930046e+00 4.29599034e+01 4.90920070e-01 1.19880315e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31988381170039
cond(S) = 44.375479774316474
E1 = -689.0497146424677  E_coul = 184.920035279176
init E= -504.129679363292
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680829848265946  LUMO = 85.1786994649973
  mo_energy =
[-1.21645947e+02 -1.32803364e+01 -7.62131187e+00 -7.62131187e+00
 -7.62131187e+00 -1.65058865e+00 -6.80829848e-01 -6.80829848e-01
 -6.80829848e-01  8.51786995e+01  6.78621140e+02  3.93735952e+03
  2.99905516e+04  1.63988047e+05]
E1 = -706.581534282334  E_coul = 198.9507183870937
cycle= 1 E= -507.63081589524  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.406999
diis-c [-0.16564854  1.        ]
  HOMO = -0.23612972189772  LUMO = 86.5118322489133
  mo_energy =
[-1.20258207e+02 -1.22521799e+01 -6.65272153e+00 -6.65272153e+00
 -6.65272153e+00 -1.16331873e+00 -2.36129722e-01 -2.36129722e-01
 -2.36129722e-01  8.65118322e+01  6.79991208e+02  3.93861015e+03
  2.99916383e+04  1.63989059e+05]
E1 = -706.550149489985  E_coul = 198.9189062748795
cycle= 2 E= -507.631243215105  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503953
diis-c [-2.53442313e-05 -5.64290093e-04  1.00056429e+00]
  HOMO = -0.236304622206745  LUMO = 86.5083154870186
  mo_energy =
[-1.20266837e+02 -1.22533662e+01 -6.65455915e+00 -6.65455915e+00
 -6.65455915e+00 -1.16338336e+00 -2.36304622e-01 -2.36304622e-01
 -2.36304622e-01  8.65083155e+01  6.79980626e+02  3.93859428e+03
  2.99916191e+04  1.63989039e+05]
E1 = -706.5497103721785  E_coul = 198.9184670473122
cycle= 3 E= -507.631243324866  delta_E= -1.1e-07  |g|= 9.44e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126335
diis-c [-3.87918142e-10  3.50516781e-05 -2.53964873e-02  1.02536144e+00]
  HOMO = -0.236306817740496  LUMO = 86.5082711240535
  mo_energy =
[-1.20266949e+02 -1.22533818e+01 -6.65458592e+00 -6.65458592e+00
 -6.65458592e+00 -1.16338401e+00 -2.36306818e-01 -2.36306818e-01
 -2.36306818e-01  8.65082711e+01  6.79980510e+02  3.93859413e+03
  2.99916189e+04  1.63989038e+05]
E1 = -706.5497031855052  E_coul = 198.9184598605996
cycle= 4 E= -507.631243324906  delta_E= -3.93e-11  |g|= 3.67e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5497031855052  E_coul = 198.9184598605996
  HOMO = -0.236306801762941  LUMO = 86.5082714561836
  mo_energy =
[-1.20266948e+02 -1.22533817e+01 -6.65458576e+00 -6.65458576e+00
 -6.65458576e+00 -1.16338400e+00 -2.36306802e-01 -2.36306802e-01
 -2.36306802e-01  8.65082715e+01  6.79980511e+02  3.93859413e+03
  2.99916189e+04  1.63989038e+05]
E1 = -706.5497032217105  E_coul = 198.91845989680434
Extra cycle  E= -507.631243324906  delta_E= -5.12e-13  |g|= 6.3e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.375479774316474
E1 = -706.5497032217105  E_coul = 198.91845989680434
init E= -507.631243324906
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236306801576456  LUMO = 86.5082714602351
  mo_energy =
[-1.20266948e+02 -1.22533817e+01 -6.65458576e+00 -6.65458576e+00
 -6.65458576e+00 -1.16338400e+00 -2.36306802e-01 -2.36306802e-01
 -2.36306802e-01  8.65082715e+01  6.79980511e+02  3.93859413e+03
  2.99916189e+04  1.63989038e+05]
E1 = -706.5497032222563  E_coul = 198.91845989735046
cycle= 1 E= -507.631243324906  delta_E= 2.84e-13  |g|= 1.25e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5497032222563  E_coul = 198.91845989735046
  HOMO = -0.236306801573837  LUMO = 86.5082714602926
  mo_energy =
[-1.20266948e+02 -1.22533817e+01 -6.65458576e+00 -6.65458576e+00
 -6.65458576e+00 -1.16338400e+00 -2.36306802e-01 -2.36306802e-01
 -2.36306802e-01  8.65082715e+01  6.79980511e+02  3.93859413e+03
  2.99916189e+04  1.63989038e+05]
E1 = -706.549703222266  E_coul = 198.9184598973599
Extra cycle  E= -507.631243324906  delta_E= -2.27e-13  |g|= 5.34e-12  |ddm|= 4.4e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [7.34198467e+04 1.83549579e+04 2.23216869e+03 4.57746308e+02
 1.21937710e+02 3.76084338e+01 4.74113491e+00 3.91187645e-01
 8.59930046e+00 4.90920070e-01]
grad_E = [-2.20542990e-07  7.41986275e-06 -2.27786633e-05  5.21744257e-05
 -2.14070650e-05 -1.31619085e-04 -1.92925807e-04  1.77276417e-04
  4.50118767e-04  1.92018352e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8470011        1
[INPUT] 0    0    [1    /1   ]  18354.9489128        1
[INPUT] 0    0    [1    /1   ]  2232.19703022        1
[INPUT] 0    0    [1    /1   ]  457.670811822        1
[INPUT] 0    0    [1    /1   ]  122.03167246         1
[INPUT] 0    0    [1    /1   ]  37.637766385         1
[INPUT] 0    0    [1    /1   ]  4.74088794049        1
[INPUT] 0    0    [1    /1   ]  0.391185751945       1
[INPUT] 1    0    [1    /1   ]  8.59993041948        1
[INPUT] 1    0    [1    /1   ]  0.490990520437       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84700111691, 1.0]], [0, [18354.94891281027, 1.0]], [0, [2232.1970302244135, 1.0]], [0, [457.6708118217918, 1.0]], [0, [122.03167246033175, 1.0]], [0, [37.637766384990826, 1.0]], [0, [4.740887940490836, 1.0]], [0, [0.3911857519451146, 1.0]], [1, [8.599930419477882, 1.0]], [1, [0.4909905204371956, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84700112]
bas 1, expnt(s) = [18354.94891281]
bas 2, expnt(s) = [2232.19703022]
bas 3, expnt(s) = [457.67081182]
bas 4, expnt(s) = [122.03167246]
bas 5, expnt(s) = [37.63776638]
bas 6, expnt(s) = [4.74088794]
bas 7, expnt(s) = [0.39118575]
bas 8, expnt(s) = [8.59993042]
bas 9, expnt(s) = [0.49099052]
CPU time:        39.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198470e+04 1.12687341e+04 1.83549489e+04 3.98409705e+03
 2.23219703e+03 8.20473236e+02 4.57670812e+02 2.49994202e+02
 1.22031672e+02 9.27618597e+01 3.76377664e+01 3.83913077e+01
 4.74088794e+00 8.11726626e+00 3.91185752e-01 1.24969000e+00
 8.59993042e+00 4.29638374e+01 4.90990520e-01 1.19901820e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319793109574615
cond(S) = 44.41808762123678
E1 = -689.0548420667733  E_coul = 184.92496061712055
init E= -504.129881449653
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680753756983453  LUMO = 85.2805349443324
  mo_energy =
[-1.21645153e+02 -1.32799636e+01 -7.62099094e+00 -7.62099094e+00
 -7.62099094e+00 -1.65050974e+00 -6.80753757e-01 -6.80753757e-01
 -6.80753757e-01  8.52805349e+01  6.78923547e+02  3.93760027e+03
  2.99907525e+04  1.63988211e+05]
E1 = -706.5878980383989  E_coul = 198.95707534246046
cycle= 1 E= -507.630822695938  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407071
diis-c [-0.16570685  1.        ]
  HOMO = -0.235972730993153  LUMO = 86.6138876665072
  mo_energy =
[-1.20257334e+02 -1.22517125e+01 -6.65231118e+00 -6.65231118e+00
 -6.65231118e+00 -1.16318617e+00 -2.35972731e-01 -2.35972731e-01
 -2.35972731e-01  8.66138877e+01  6.80293722e+02  3.93885107e+03
  2.99918394e+04  1.63989224e+05]
E1 = -706.5565605863884  E_coul = 198.9253111774797
cycle= 2 E= -507.631249408909  delta_E= -0.000427  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503595
diis-c [-2.53070998e-05 -5.69825955e-04  1.00056983e+00]
  HOMO = -0.236147358586415  LUMO = 86.6103738878441
  mo_energy =
[-1.20265952e+02 -1.22528967e+01 -6.65414564e+00 -6.65414564e+00
 -6.65414564e+00 -1.16325067e+00 -2.36147359e-01 -2.36147359e-01
 -2.36147359e-01  8.66103739e+01  6.80283152e+02  3.93883521e+03
  2.99918202e+04  1.63989204e+05]
E1 = -706.5561224399318  E_coul = 198.92487292154814
cycle= 3 E= -507.631249518384  delta_E= -1.09e-07  |g|= 9.42e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126136
diis-c [-3.86642628e-10  3.50542790e-05 -2.53751495e-02  1.02534010e+00]
  HOMO = -0.236149548279681  LUMO = 86.6103296241607
  mo_energy =
[-1.20266064e+02 -1.22529123e+01 -6.65417234e+00 -6.65417234e+00
 -6.65417234e+00 -1.16325132e+00 -2.36149548e-01 -2.36149548e-01
 -2.36149548e-01  8.66103296e+01  6.80283037e+02  3.93883507e+03
  2.99918200e+04  1.63989203e+05]
E1 = -706.5561152770615  E_coul = 198.92486575863848
cycle= 4 E= -507.631249518423  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5561152770615  E_coul = 198.92486575863848
  HOMO = -0.236149532356192  LUMO = 86.610329955567
  mo_energy =
[-1.20266063e+02 -1.22529122e+01 -6.65417218e+00 -6.65417218e+00
 -6.65417218e+00 -1.16325132e+00 -2.36149532e-01 -2.36149532e-01
 -2.36149532e-01  8.66103300e+01  6.80283038e+02  3.93883507e+03
  2.99918200e+04  1.63989203e+05]
E1 = -706.5561153131305  E_coul = 198.92486579470784
Extra cycle  E= -507.631249518423  delta_E= 3.98e-13  |g|= 6.28e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198470e+04 1.83549489e+04 2.23219703e+03 4.57670812e+02
 1.22031672e+02 3.76377664e+01 4.74088794e+00 3.91185752e-01
 8.59993042e+00 4.90990520e-01]
E = -507.63124951842263
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8470011        1
[INPUT] 0    0    [1    /1   ]  18354.9489128        1
[INPUT] 0    0    [1    /1   ]  2232.19703022        1
[INPUT] 0    0    [1    /1   ]  457.670811822        1
[INPUT] 0    0    [1    /1   ]  122.03167246         1
[INPUT] 0    0    [1    /1   ]  37.637766385         1
[INPUT] 0    0    [1    /1   ]  4.74088794049        1
[INPUT] 0    0    [1    /1   ]  0.391185751945       1
[INPUT] 1    0    [1    /1   ]  8.59993041948        1
[INPUT] 1    0    [1    /1   ]  0.490990520437       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84700111691, 1.0]], [0, [18354.94891281027, 1.0]], [0, [2232.1970302244135, 1.0]], [0, [457.6708118217918, 1.0]], [0, [122.03167246033175, 1.0]], [0, [37.637766384990826, 1.0]], [0, [4.740887940490836, 1.0]], [0, [0.3911857519451146, 1.0]], [1, [8.599930419477882, 1.0]], [1, [0.4909905204371956, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84700112]
bas 1, expnt(s) = [18354.94891281]
bas 2, expnt(s) = [2232.19703022]
bas 3, expnt(s) = [457.67081182]
bas 4, expnt(s) = [122.03167246]
bas 5, expnt(s) = [37.63776638]
bas 6, expnt(s) = [4.74088794]
bas 7, expnt(s) = [0.39118575]
bas 8, expnt(s) = [8.59993042]
bas 9, expnt(s) = [0.49099052]
CPU time:        40.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198470e+04 1.12687341e+04 1.83549489e+04 3.98409705e+03
 2.23219703e+03 8.20473236e+02 4.57670812e+02 2.49994202e+02
 1.22031672e+02 9.27618597e+01 3.76377664e+01 3.83913077e+01
 4.74088794e+00 8.11726626e+00 3.91185752e-01 1.24969000e+00
 8.59993042e+00 4.29638374e+01 4.90990520e-01 1.19901820e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319793109574615
cond(S) = 44.41808762123678
E1 = -689.0548420667733  E_coul = 184.92496061712055
init E= -504.129881449653
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680753756983453  LUMO = 85.2805349443324
  mo_energy =
[-1.21645153e+02 -1.32799636e+01 -7.62099094e+00 -7.62099094e+00
 -7.62099094e+00 -1.65050974e+00 -6.80753757e-01 -6.80753757e-01
 -6.80753757e-01  8.52805349e+01  6.78923547e+02  3.93760027e+03
  2.99907525e+04  1.63988211e+05]
E1 = -706.5878980383989  E_coul = 198.95707534246046
cycle= 1 E= -507.630822695938  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407071
diis-c [-0.16570685  1.        ]
  HOMO = -0.235972730993153  LUMO = 86.6138876665072
  mo_energy =
[-1.20257334e+02 -1.22517125e+01 -6.65231118e+00 -6.65231118e+00
 -6.65231118e+00 -1.16318617e+00 -2.35972731e-01 -2.35972731e-01
 -2.35972731e-01  8.66138877e+01  6.80293722e+02  3.93885107e+03
  2.99918394e+04  1.63989224e+05]
E1 = -706.5565605863884  E_coul = 198.9253111774797
cycle= 2 E= -507.631249408909  delta_E= -0.000427  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503595
diis-c [-2.53070998e-05 -5.69825955e-04  1.00056983e+00]
  HOMO = -0.236147358586415  LUMO = 86.6103738878441
  mo_energy =
[-1.20265952e+02 -1.22528967e+01 -6.65414564e+00 -6.65414564e+00
 -6.65414564e+00 -1.16325067e+00 -2.36147359e-01 -2.36147359e-01
 -2.36147359e-01  8.66103739e+01  6.80283152e+02  3.93883521e+03
  2.99918202e+04  1.63989204e+05]
E1 = -706.5561224399318  E_coul = 198.92487292154814
cycle= 3 E= -507.631249518384  delta_E= -1.09e-07  |g|= 9.42e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126136
diis-c [-3.86642628e-10  3.50542790e-05 -2.53751495e-02  1.02534010e+00]
  HOMO = -0.236149548279681  LUMO = 86.6103296241607
  mo_energy =
[-1.20266064e+02 -1.22529123e+01 -6.65417234e+00 -6.65417234e+00
 -6.65417234e+00 -1.16325132e+00 -2.36149548e-01 -2.36149548e-01
 -2.36149548e-01  8.66103296e+01  6.80283037e+02  3.93883507e+03
  2.99918200e+04  1.63989203e+05]
E1 = -706.5561152770615  E_coul = 198.92486575863848
cycle= 4 E= -507.631249518423  delta_E= -3.94e-11  |g|= 3.66e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5561152770615  E_coul = 198.92486575863848
  HOMO = -0.236149532356192  LUMO = 86.610329955567
  mo_energy =
[-1.20266063e+02 -1.22529122e+01 -6.65417218e+00 -6.65417218e+00
 -6.65417218e+00 -1.16325132e+00 -2.36149532e-01 -2.36149532e-01
 -2.36149532e-01  8.66103300e+01  6.80283038e+02  3.93883507e+03
  2.99918200e+04  1.63989203e+05]
E1 = -706.5561153131305  E_coul = 198.92486579470784
Extra cycle  E= -507.631249518423  delta_E= 3.98e-13  |g|= 6.28e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.41808762123678
E1 = -706.5561153131305  E_coul = 198.92486579470784
init E= -507.631249518423
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236149532170464  LUMO = 86.6103299596058
  mo_energy =
[-1.20266063e+02 -1.22529122e+01 -6.65417218e+00 -6.65417218e+00
 -6.65417218e+00 -1.16325132e+00 -2.36149532e-01 -2.36149532e-01
 -2.36149532e-01  8.66103300e+01  6.80283038e+02  3.93883507e+03
  2.99918200e+04  1.63989203e+05]
E1 = -706.5561153136745  E_coul = 198.92486579525155
cycle= 1 E= -507.631249518423  delta_E= -2.84e-13  |g|= 1.25e-10  |ddm|= 2.47e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5561153136745  E_coul = 198.92486579525155
  HOMO = -0.236149532167858  LUMO = 86.6103299596634
  mo_energy =
[-1.20266063e+02 -1.22529122e+01 -6.65417218e+00 -6.65417218e+00
 -6.65417218e+00 -1.16325132e+00 -2.36149532e-01 -2.36149532e-01
 -2.36149532e-01  8.66103300e+01  6.80283038e+02  3.93883507e+03
  2.99918200e+04  1.63989203e+05]
E1 = -706.5561153136842  E_coul = 198.9248657952611
Extra cycle  E= -507.631249518423  delta_E= -2.27e-13  |g|= 8.5e-12  |ddm|= 4.38e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [7.34198470e+04 1.83549489e+04 2.23219703e+03 4.57670812e+02
 1.22031672e+02 3.76377664e+01 4.74088794e+00 3.91185752e-01
 8.59993042e+00 4.90990520e-01]
grad_E = [-2.20545953e-07  7.40762550e-06 -2.16243676e-05  3.37139512e-05
  4.74611793e-05 -1.53588014e-04 -3.66973166e-04  3.59400345e-04
  9.04187772e-04  3.89901601e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471053        1
[INPUT] 0    0    [1    /1   ]  18354.9454045        1
[INPUT] 0    0    [1    /1   ]  2232.20804688        1
[INPUT] 0    0    [1    /1   ]  457.641647225        1
[INPUT] 0    0    [1    /1   ]  122.066595773        1
[INPUT] 0    0    [1    /1   ]  37.6537891178        1
[INPUT] 0    0    [1    /1   ]  4.74101487903        1
[INPUT] 0    0    [1    /1   ]  0.391192265071       1
[INPUT] 1    0    [1    /1   ]  8.59956050552        1
[INPUT] 1    0    [1    /1   ]  0.490950497844       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84710531692, 1.0]], [0, [18354.94540449948, 1.0]], [0, [2232.2080468836443, 1.0]], [0, [457.6416472250682, 1.0]], [0, [122.06659577322962, 1.0]], [0, [37.65378911783766, 1.0]], [0, [4.7410148790311455, 1.0]], [0, [0.39119226507113863, 1.0]], [1, [8.599560505522293, 1.0]], [1, [0.4909504978437322, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84710532]
bas 1, expnt(s) = [18354.9454045]
bas 2, expnt(s) = [2232.20804688]
bas 3, expnt(s) = [457.64164723]
bas 4, expnt(s) = [122.06659577]
bas 5, expnt(s) = [37.65378912]
bas 6, expnt(s) = [4.74101488]
bas 7, expnt(s) = [0.39119227]
bas 8, expnt(s) = [8.59956051]
bas 9, expnt(s) = [0.4909505]
CPU time:        43.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549454e+04 3.98409648e+03
 2.23220805e+03 8.20476273e+02 4.57641647e+02 2.49982254e+02
 1.22066596e+02 9.27817691e+01 3.76537891e+01 3.84035647e+01
 4.74101488e+00 8.11742927e+00 3.91192265e-01 1.24970561e+00
 8.59956051e+00 4.29615274e+01 4.90950498e-01 1.19889603e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31984224912064
cond(S) = 44.44085702624673
E1 = -689.0520479843932  E_coul = 184.92232336788484
init E= -504.129724616508
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680794636954632  LUMO = 85.3294021151095
  mo_energy =
[-1.21645530e+02 -1.32802260e+01 -7.62115600e+00 -7.62115600e+00
 -7.62115600e+00 -1.65056171e+00 -6.80794637e-01 -6.80794637e-01
 -6.80794637e-01  8.53294021e+01  6.79054269e+02  3.93770480e+03
  2.99908391e+04  1.63988283e+05]
E1 = -706.5846450039882  E_coul = 198.9538199279661
cycle= 1 E= -507.630825076022  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407107
diis-c [-0.16573643  1.        ]
  HOMO = -0.236057125471238  LUMO = 86.6627809789649
  mo_energy =
[-1.20257704e+02 -1.22520165e+01 -6.65251904e+00 -6.65251904e+00
 -6.65251904e+00 -1.16326364e+00 -2.36057125e-01 -2.36057125e-01
 -2.36057125e-01  8.66627810e+01  6.80424499e+02  3.93895571e+03
  2.99919261e+04  1.63989295e+05]
E1 = -706.5533392837007  E_coul = 198.92208799224696
cycle= 2 E= -507.631251291454  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00503245
diis-c [-2.52712141e-05 -5.72712884e-04  1.00057271e+00]
  HOMO = -0.236231525574421  LUMO = 86.6592697994486
  mo_energy =
[-1.20266314e+02 -1.22531994e+01 -6.65435145e+00 -6.65435145e+00
 -6.65435145e+00 -1.16332807e+00 -2.36231526e-01 -2.36231526e-01
 -2.36231526e-01  8.66592698e+01  6.80413939e+02  3.93893987e+03
  2.99919069e+04  1.63989275e+05]
E1 = -706.5529017216538  E_coul = 198.92165032091168
cycle= 3 E= -507.631251400742  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126004
diis-c [-3.85834964e-10  3.50766462e-05 -2.53665325e-02  1.02533146e+00]
  HOMO = -0.236233711170339  LUMO = 86.6592255975237
  mo_energy =
[-1.20266426e+02 -1.22532149e+01 -6.65437811e+00 -6.65437811e+00
 -6.65437811e+00 -1.16332871e+00 -2.36233711e-01 -2.36233711e-01
 -2.36233711e-01  8.66592256e+01  6.80413823e+02  3.93893972e+03
  2.99919067e+04  1.63989275e+05]
E1 = -706.5528945720429  E_coul = 198.92164317126165
cycle= 4 E= -507.631251400781  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5528945720429  E_coul = 198.92164317126165
  HOMO = -0.236233695281088  LUMO = 86.6592259284653
  mo_energy =
[-1.20266426e+02 -1.22532148e+01 -6.65437795e+00 -6.65437795e+00
 -6.65437795e+00 -1.16332871e+00 -2.36233695e-01 -2.36233695e-01
 -2.36233695e-01  8.66592259e+01  6.80413824e+02  3.93893972e+03
  2.99919067e+04  1.63989275e+05]
E1 = -706.5528946080399  E_coul = 198.92164320725863
Extra cycle  E= -507.631251400781  delta_E=    0  |g|= 6.27e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198471e+04 1.83549454e+04 2.23220805e+03 4.57641647e+02
 1.22066596e+02 3.76537891e+01 4.74101488e+00 3.91192265e-01
 8.59956051e+00 4.90950498e-01]
E = -507.63125140078125
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471053        1
[INPUT] 0    0    [1    /1   ]  18354.9454045        1
[INPUT] 0    0    [1    /1   ]  2232.20804688        1
[INPUT] 0    0    [1    /1   ]  457.641647225        1
[INPUT] 0    0    [1    /1   ]  122.066595773        1
[INPUT] 0    0    [1    /1   ]  37.6537891178        1
[INPUT] 0    0    [1    /1   ]  4.74101487903        1
[INPUT] 0    0    [1    /1   ]  0.391192265071       1
[INPUT] 1    0    [1    /1   ]  8.59956050552        1
[INPUT] 1    0    [1    /1   ]  0.490950497844       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84710531692, 1.0]], [0, [18354.94540449948, 1.0]], [0, [2232.2080468836443, 1.0]], [0, [457.6416472250682, 1.0]], [0, [122.06659577322962, 1.0]], [0, [37.65378911783766, 1.0]], [0, [4.7410148790311455, 1.0]], [0, [0.39119226507113863, 1.0]], [1, [8.599560505522293, 1.0]], [1, [0.4909504978437322, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84710532]
bas 1, expnt(s) = [18354.9454045]
bas 2, expnt(s) = [2232.20804688]
bas 3, expnt(s) = [457.64164723]
bas 4, expnt(s) = [122.06659577]
bas 5, expnt(s) = [37.65378912]
bas 6, expnt(s) = [4.74101488]
bas 7, expnt(s) = [0.39119227]
bas 8, expnt(s) = [8.59956051]
bas 9, expnt(s) = [0.4909505]
CPU time:        43.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549454e+04 3.98409648e+03
 2.23220805e+03 8.20476273e+02 4.57641647e+02 2.49982254e+02
 1.22066596e+02 9.27817691e+01 3.76537891e+01 3.84035647e+01
 4.74101488e+00 8.11742927e+00 3.91192265e-01 1.24970561e+00
 8.59956051e+00 4.29615274e+01 4.90950498e-01 1.19889603e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31984224912064
cond(S) = 44.44085702624673
E1 = -689.0520479843932  E_coul = 184.92232336788484
init E= -504.129724616508
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680794636954632  LUMO = 85.3294021151095
  mo_energy =
[-1.21645530e+02 -1.32802260e+01 -7.62115600e+00 -7.62115600e+00
 -7.62115600e+00 -1.65056171e+00 -6.80794637e-01 -6.80794637e-01
 -6.80794637e-01  8.53294021e+01  6.79054269e+02  3.93770480e+03
  2.99908391e+04  1.63988283e+05]
E1 = -706.5846450039882  E_coul = 198.9538199279661
cycle= 1 E= -507.630825076022  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.407107
diis-c [-0.16573643  1.        ]
  HOMO = -0.236057125471238  LUMO = 86.6627809789649
  mo_energy =
[-1.20257704e+02 -1.22520165e+01 -6.65251904e+00 -6.65251904e+00
 -6.65251904e+00 -1.16326364e+00 -2.36057125e-01 -2.36057125e-01
 -2.36057125e-01  8.66627810e+01  6.80424499e+02  3.93895571e+03
  2.99919261e+04  1.63989295e+05]
E1 = -706.5533392837007  E_coul = 198.92208799224696
cycle= 2 E= -507.631251291454  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503245
diis-c [-2.52712141e-05 -5.72712884e-04  1.00057271e+00]
  HOMO = -0.236231525574421  LUMO = 86.6592697994486
  mo_energy =
[-1.20266314e+02 -1.22531994e+01 -6.65435145e+00 -6.65435145e+00
 -6.65435145e+00 -1.16332807e+00 -2.36231526e-01 -2.36231526e-01
 -2.36231526e-01  8.66592698e+01  6.80413939e+02  3.93893987e+03
  2.99919069e+04  1.63989275e+05]
E1 = -706.5529017216538  E_coul = 198.92165032091168
cycle= 3 E= -507.631251400742  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126004
diis-c [-3.85834964e-10  3.50766462e-05 -2.53665325e-02  1.02533146e+00]
  HOMO = -0.236233711170339  LUMO = 86.6592255975237
  mo_energy =
[-1.20266426e+02 -1.22532149e+01 -6.65437811e+00 -6.65437811e+00
 -6.65437811e+00 -1.16332871e+00 -2.36233711e-01 -2.36233711e-01
 -2.36233711e-01  8.66592256e+01  6.80413823e+02  3.93893972e+03
  2.99919067e+04  1.63989275e+05]
E1 = -706.5528945720429  E_coul = 198.92164317126165
cycle= 4 E= -507.631251400781  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5528945720429  E_coul = 198.92164317126165
  HOMO = -0.236233695281088  LUMO = 86.6592259284653
  mo_energy =
[-1.20266426e+02 -1.22532148e+01 -6.65437795e+00 -6.65437795e+00
 -6.65437795e+00 -1.16332871e+00 -2.36233695e-01 -2.36233695e-01
 -2.36233695e-01  8.66592259e+01  6.80413824e+02  3.93893972e+03
  2.99919067e+04  1.63989275e+05]
E1 = -706.5528946080399  E_coul = 198.92164320725863
Extra cycle  E= -507.631251400781  delta_E=    0  |g|= 6.27e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.44085702624673
E1 = -706.5528946080399  E_coul = 198.92164320725863
init E= -507.631251400781
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.23623369509581  LUMO = 86.6592259324973
  mo_energy =
[-1.20266426e+02 -1.22532148e+01 -6.65437795e+00 -6.65437795e+00
 -6.65437795e+00 -1.16332871e+00 -2.36233695e-01 -2.36233695e-01
 -2.36233695e-01  8.66592259e+01  6.80413824e+02  3.93893972e+03
  2.99919067e+04  1.63989275e+05]
E1 = -706.5528946085824  E_coul = 198.92164320780125
cycle= 1 E= -507.631251400781  delta_E= 1.14e-13  |g|= 1.23e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5528946085824  E_coul = 198.92164320780125
  HOMO = -0.236233695093205  LUMO = 86.659225932555
  mo_energy =
[-1.20266426e+02 -1.22532148e+01 -6.65437795e+00 -6.65437795e+00
 -6.65437795e+00 -1.16332871e+00 -2.36233695e-01 -2.36233695e-01
 -2.36233695e-01  8.66592259e+01  6.80413824e+02  3.93893972e+03
  2.99919067e+04  1.63989275e+05]
E1 = -706.5528946085922  E_coul = 198.92164320781058
Extra cycle  E= -507.631251400782  delta_E= -4.55e-13  |g|= 1.04e-11  |ddm|= 4.35e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [7.34198471e+04 1.83549454e+04 2.23220805e+03 4.57641647e+02
 1.22066596e+02 3.76537891e+01 4.74101488e+00 3.91192265e-01
 8.59956051e+00 4.90950498e-01]
grad_E = [-2.20548433e-07  7.40389637e-06 -2.12784100e-05  2.88529166e-05
  5.34158176e-05 -9.72085819e-05 -2.62157740e-04  2.59308708e-04
  6.51513260e-04  2.81377425e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:51 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471599        1
[INPUT] 0    0    [1    /1   ]  18354.9435681        1
[INPUT] 0    0    [1    /1   ]  2232.21380321        1
[INPUT] 0    0    [1    /1   ]  457.626592633        1
[INPUT] 0    0    [1    /1   ]  122.083343872        1
[INPUT] 0    0    [1    /1   ]  37.6662552221        1
[INPUT] 0    0    [1    /1   ]  4.74127869605        1
[INPUT] 0    0    [1    /1   ]  0.391202112444       1
[INPUT] 1    0    [1    /1   ]  8.59882041272        1
[INPUT] 1    0    [1    /1   ]  0.490869606125       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84715986358, 1.0]], [0, [18354.943568074832, 1.0]], [0, [2232.213803211188, 1.0]], [0, [457.6265926332418, 1.0]], [0, [122.0833438723601, 1.0]], [0, [37.6662552221167, 1.0]], [0, [4.741278696050556, 1.0]], [0, [0.3912021124438192, 1.0]], [1, [8.598820412720508, 1.0]], [1, [0.4908696061253918, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84715986]
bas 1, expnt(s) = [18354.94356807]
bas 2, expnt(s) = [2232.21380321]
bas 3, expnt(s) = [457.62659263]
bas 4, expnt(s) = [122.08334387]
bas 5, expnt(s) = [37.66625522]
bas 6, expnt(s) = [4.7412787]
bas 7, expnt(s) = [0.39120211]
bas 8, expnt(s) = [8.59882041]
bas 9, expnt(s) = [0.49086961]
CPU time:        46.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+04 1.12687341e+04 1.83549436e+04 3.98409618e+03
 2.23221380e+03 8.20477860e+02 4.57626593e+02 2.49976086e+02
 1.22083344e+02 9.27913165e+01 3.76662552e+01 3.84131001e+01
 4.74127870e+00 8.11776804e+00 3.91202112e-01 1.24972920e+00
 8.59882041e+00 4.29569058e+01 4.90869606e-01 1.19864912e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994293341907
cond(S) = 44.45823896509644
E1 = -689.0463270252212  E_coul = 184.91689327701354
init E= -504.129433748208
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680878723698317  LUMO = 85.3631163274605
  mo_energy =
[-1.21646336e+02 -1.32807257e+01 -7.62150025e+00 -7.62150025e+00
 -7.62150025e+00 -1.65066246e+00 -6.80878724e-01 -6.80878724e-01
 -6.80878724e-01  8.53631163e+01  6.79134059e+02  3.93776890e+03
  2.99908916e+04  1.63988326e+05]
E1 = -706.5778482635377  E_coul = 198.94702175647697
cycle= 1 E= -507.630826507061  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.407134
diis-c [-0.16575802  1.        ]
  HOMO = -0.236230607002981  LUMO = 86.6964559851408
  mo_energy =
[-1.20258530e+02 -1.22526074e+01 -6.65295466e+00 -6.65295466e+00
 -6.65295466e+00 -1.16341891e+00 -2.36230607e-01 -2.36230607e-01
 -2.36230607e-01  8.66964560e+01  6.80504329e+02  3.93901991e+03
  2.99919788e+04  1.63989339e+05]
E1 = -706.5465709308423  E_coul = 198.91531869992593
cycle= 2 E= -507.631252230916  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502874
diis-c [-2.52334866e-05 -5.74877382e-04  1.00057488e+00]
  HOMO = -0.236404780589913  LUMO = 86.6929474396316
  mo_energy =
[-1.20267133e+02 -1.22537893e+01 -6.65478528e+00 -6.65478528e+00
 -6.65478528e+00 -1.16348328e+00 -2.36404781e-01 -2.36404781e-01
 -2.36404781e-01  8.66929474e+01  6.80493778e+02  3.93900408e+03
  2.99919596e+04  1.63989319e+05]
E1 = -706.5461338573137  E_coul = 198.91488151727253
cycle= 3 E= -507.631252340041  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125886
diis-c [-3.85139216e-10  3.51068646e-05 -2.53617332e-02  1.02532663e+00]
  HOMO = -0.236406962425851  LUMO = 86.6929032905133
  mo_energy =
[-1.20267245e+02 -1.22538048e+01 -6.65481190e+00 -6.65481190e+00
 -6.65481190e+00 -1.16348392e+00 -2.36406962e-01 -2.36406962e-01
 -2.36406962e-01  8.66929033e+01  6.80493662e+02  3.93900393e+03
  2.99919594e+04  1.63989319e+05]
E1 = -706.546126718181  E_coul = 198.91487437810096
cycle= 4 E= -507.63125234008  delta_E= -3.88e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.546126718181  E_coul = 198.91487437810096
  HOMO = -0.23640694656615  LUMO = 86.6929036210504
  mo_energy =
[-1.20267244e+02 -1.22538047e+01 -6.65481174e+00 -6.65481174e+00
 -6.65481174e+00 -1.16348392e+00 -2.36406947e-01 -2.36406947e-01
 -2.36406947e-01  8.66929036e+01  6.80493664e+02  3.93900393e+03
  2.99919594e+04  1.63989319e+05]
E1 = -706.5461267541226  E_coul = 198.91487441404288
Extra cycle  E= -507.63125234008  delta_E= 2.27e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198472e+04 1.83549436e+04 2.23221380e+03 4.57626593e+02
 1.22083344e+02 3.76662552e+01 4.74127870e+00 3.91202112e-01
 8.59882041e+00 4.90869606e-01]
E = -507.63125234007975
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471599        1
[INPUT] 0    0    [1    /1   ]  18354.9435681        1
[INPUT] 0    0    [1    /1   ]  2232.21380321        1
[INPUT] 0    0    [1    /1   ]  457.626592633        1
[INPUT] 0    0    [1    /1   ]  122.083343872        1
[INPUT] 0    0    [1    /1   ]  37.6662552221        1
[INPUT] 0    0    [1    /1   ]  4.74127869605        1
[INPUT] 0    0    [1    /1   ]  0.391202112444       1
[INPUT] 1    0    [1    /1   ]  8.59882041272        1
[INPUT] 1    0    [1    /1   ]  0.490869606125       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84715986358, 1.0]], [0, [18354.943568074832, 1.0]], [0, [2232.213803211188, 1.0]], [0, [457.6265926332418, 1.0]], [0, [122.0833438723601, 1.0]], [0, [37.6662552221167, 1.0]], [0, [4.741278696050556, 1.0]], [0, [0.3912021124438192, 1.0]], [1, [8.598820412720508, 1.0]], [1, [0.4908696061253918, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84715986]
bas 1, expnt(s) = [18354.94356807]
bas 2, expnt(s) = [2232.21380321]
bas 3, expnt(s) = [457.62659263]
bas 4, expnt(s) = [122.08334387]
bas 5, expnt(s) = [37.66625522]
bas 6, expnt(s) = [4.7412787]
bas 7, expnt(s) = [0.39120211]
bas 8, expnt(s) = [8.59882041]
bas 9, expnt(s) = [0.49086961]
CPU time:        46.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+04 1.12687341e+04 1.83549436e+04 3.98409618e+03
 2.23221380e+03 8.20477860e+02 4.57626593e+02 2.49976086e+02
 1.22083344e+02 9.27913165e+01 3.76662552e+01 3.84131001e+01
 4.74127870e+00 8.11776804e+00 3.91202112e-01 1.24972920e+00
 8.59882041e+00 4.29569058e+01 4.90869606e-01 1.19864912e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31994293341907
cond(S) = 44.45823896509644
E1 = -689.0463270252212  E_coul = 184.91689327701354
init E= -504.129433748208
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680878723698317  LUMO = 85.3631163274605
  mo_energy =
[-1.21646336e+02 -1.32807257e+01 -7.62150025e+00 -7.62150025e+00
 -7.62150025e+00 -1.65066246e+00 -6.80878724e-01 -6.80878724e-01
 -6.80878724e-01  8.53631163e+01  6.79134059e+02  3.93776890e+03
  2.99908916e+04  1.63988326e+05]
E1 = -706.5778482635377  E_coul = 198.94702175647697
cycle= 1 E= -507.630826507061  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407134
diis-c [-0.16575802  1.        ]
  HOMO = -0.236230607002981  LUMO = 86.6964559851408
  mo_energy =
[-1.20258530e+02 -1.22526074e+01 -6.65295466e+00 -6.65295466e+00
 -6.65295466e+00 -1.16341891e+00 -2.36230607e-01 -2.36230607e-01
 -2.36230607e-01  8.66964560e+01  6.80504329e+02  3.93901991e+03
  2.99919788e+04  1.63989339e+05]
E1 = -706.5465709308423  E_coul = 198.91531869992593
cycle= 2 E= -507.631252230916  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502874
diis-c [-2.52334866e-05 -5.74877382e-04  1.00057488e+00]
  HOMO = -0.236404780589913  LUMO = 86.6929474396316
  mo_energy =
[-1.20267133e+02 -1.22537893e+01 -6.65478528e+00 -6.65478528e+00
 -6.65478528e+00 -1.16348328e+00 -2.36404781e-01 -2.36404781e-01
 -2.36404781e-01  8.66929474e+01  6.80493778e+02  3.93900408e+03
  2.99919596e+04  1.63989319e+05]
E1 = -706.5461338573137  E_coul = 198.91488151727253
cycle= 3 E= -507.631252340041  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125886
diis-c [-3.85139216e-10  3.51068646e-05 -2.53617332e-02  1.02532663e+00]
  HOMO = -0.236406962425851  LUMO = 86.6929032905133
  mo_energy =
[-1.20267245e+02 -1.22538048e+01 -6.65481190e+00 -6.65481190e+00
 -6.65481190e+00 -1.16348392e+00 -2.36406962e-01 -2.36406962e-01
 -2.36406962e-01  8.66929033e+01  6.80493662e+02  3.93900393e+03
  2.99919594e+04  1.63989319e+05]
E1 = -706.546126718181  E_coul = 198.91487437810096
cycle= 4 E= -507.63125234008  delta_E= -3.88e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.546126718181  E_coul = 198.91487437810096
  HOMO = -0.23640694656615  LUMO = 86.6929036210504
  mo_energy =
[-1.20267244e+02 -1.22538047e+01 -6.65481174e+00 -6.65481174e+00
 -6.65481174e+00 -1.16348392e+00 -2.36406947e-01 -2.36406947e-01
 -2.36406947e-01  8.66929036e+01  6.80493664e+02  3.93900393e+03
  2.99919594e+04  1.63989319e+05]
E1 = -706.5461267541226  E_coul = 198.91487441404288
Extra cycle  E= -507.63125234008  delta_E= 2.27e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.45823896509644
E1 = -706.5461267541226  E_coul = 198.91487441404288
init E= -507.63125234008
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236406946381241  LUMO = 86.6929036250739
  mo_energy =
[-1.20267244e+02 -1.22538047e+01 -6.65481174e+00 -6.65481174e+00
 -6.65481174e+00 -1.16348392e+00 -2.36406946e-01 -2.36406946e-01
 -2.36406946e-01  8.66929036e+01  6.80493664e+02  3.93900393e+03
  2.99919594e+04  1.63989319e+05]
E1 = -706.546126754665  E_coul = 198.91487441458497
cycle= 1 E= -507.63125234008  delta_E= -2.84e-13  |g|= 1.26e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.546126754665  E_coul = 198.91487441458497
  HOMO = -0.236406946378642  LUMO = 86.6929036251322
  mo_energy =
[-1.20267244e+02 -1.22538047e+01 -6.65481174e+00 -6.65481174e+00
 -6.65481174e+00 -1.16348392e+00 -2.36406946e-01 -2.36406946e-01
 -2.36406946e-01  8.66929036e+01  6.80493664e+02  3.93900393e+03
  2.99919594e+04  1.63989319e+05]
E1 = -706.5461267546737  E_coul = 198.91487441459395
Extra cycle  E= -507.63125234008  delta_E= 3.41e-13  |g|= 8.35e-12  |ddm|= 4.34e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198472e+04 1.83549436e+04 2.23221380e+03 4.57626593e+02
 1.22083344e+02 3.76662552e+01 4.74127870e+00 3.91202112e-01
 8.59882041e+00 4.90869606e-01]
grad_E = [-2.20550964e-07  7.40286435e-06 -2.11895461e-05  2.83716550e-05
  3.80675496e-05 -1.00585213e-05 -5.47265071e-05  5.49217934e-05
  1.37686979e-04  5.95889614e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.84715          1
[INPUT] 0    0    [1    /1   ]  18354.943901         1
[INPUT] 0    0    [1    /1   ]  2232.21275211        1
[INPUT] 0    0    [1    /1   ]  457.629468983        1
[INPUT] 0    0    [1    /1   ]  122.079341178        1
[INPUT] 0    0    [1    /1   ]  37.6663208285        1
[INPUT] 0    0    [1    /1   ]  4.74134399846        1
[INPUT] 0    0    [1    /1   ]  0.391204018855       1
[INPUT] 1    0    [1    /1   ]  8.59864130176        1
[INPUT] 1    0    [1    /1   ]  0.490849914136       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84714997701, 1.0]], [0, [18354.94390100556, 1.0]], [0, [2232.2127521093134, 1.0]], [0, [457.62946898286214, 1.0]], [0, [122.07934117824654, 1.0]], [0, [37.66632082853278, 1.0]], [0, [4.741343998463591, 1.0]], [0, [0.39120401885544104, 1.0]], [1, [8.598641301760479, 1.0]], [1, [0.4908499141363228, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84714998]
bas 1, expnt(s) = [18354.94390101]
bas 2, expnt(s) = [2232.21275211]
bas 3, expnt(s) = [457.62946898]
bas 4, expnt(s) = [122.07934118]
bas 5, expnt(s) = [37.66632083]
bas 6, expnt(s) = [4.741344]
bas 7, expnt(s) = [0.39120402]
bas 8, expnt(s) = [8.5986413]
bas 9, expnt(s) = [0.49084991]
CPU time:        49.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549439e+04 3.98409624e+03
 2.23221275e+03 8.20477570e+02 4.57629469e+02 2.49977265e+02
 1.22079341e+02 9.27890347e+01 3.76663208e+01 3.84131503e+01
 4.74134400e+00 8.11785189e+00 3.91204019e-01 1.24973377e+00
 8.59864130e+00 4.29557873e+01 4.90849914e-01 1.19858901e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996764234631
cond(S) = 44.45819684747895
E1 = -689.0449229510937  E_coul = 184.91555621933682
init E= -504.129366731757
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680899408807783  LUMO = 85.3616008852246
  mo_energy =
[-1.21646539e+02 -1.32808429e+01 -7.62158566e+00 -7.62158566e+00
 -7.62158566e+00 -1.65068636e+00 -6.80899409e-01 -6.80899409e-01
 -6.80899409e-01  8.53616009e+01  6.79125847e+02  3.93776237e+03
  2.99908860e+04  1.63988322e+05]
E1 = -706.576161042255  E_coul = 198.9453344419634
cycle= 1 E= -507.630826600292  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407133
diis-c [-0.1657576  1.       ]
  HOMO = -0.236273265321606  LUMO = 86.6949173335417
  mo_energy =
[-1.20258743e+02 -1.22527479e+01 -6.65306301e+00 -6.65306301e+00
 -6.65306301e+00 -1.16345652e+00 -2.36273265e-01 -2.36273265e-01
 -2.36273265e-01  8.66949173e+01  6.80496116e+02  3.93901339e+03
  2.99919732e+04  1.63989334e+05]
E1 = -706.5448852950665  E_coul = 198.91363301404064
cycle= 2 E= -507.631252281026  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502834
diis-c [-2.52294745e-05 -5.74858987e-04  1.00057486e+00]
  HOMO = -0.236447418516165  LUMO = 86.6914090396028
  mo_energy =
[-1.20267345e+02 -1.22539297e+01 -6.65489354e+00 -6.65489354e+00
 -6.65489354e+00 -1.16352089e+00 -2.36447419e-01 -2.36447419e-01
 -2.36447419e-01  8.66914090e+01  6.80485566e+02  3.93899756e+03
  2.99919540e+04  1.63989314e+05]
E1 = -706.5444482372413  E_coul = 198.91319584709916
cycle= 3 E= -507.631252390142  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012588
diis-c [-3.85108382e-10  3.51121955e-05 -2.53624545e-02  1.02532734e+00]
  HOMO = -0.236449600109661  LUMO = 86.6913648926175
  mo_energy =
[-1.20267457e+02 -1.22539453e+01 -6.65492016e+00 -6.65492016e+00
 -6.65492016e+00 -1.16352153e+00 -2.36449600e-01 -2.36449600e-01
 -2.36449600e-01  8.66913649e+01  6.80485451e+02  3.93899741e+03
  2.99919538e+04  1.63989314e+05]
E1 = -706.54444109823  E_coul = 198.91318870804872
cycle= 4 E= -507.631252390181  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.54444109823  E_coul = 198.91318870804872
  HOMO = -0.236449584251274  LUMO = 86.6913652231362
  mo_energy =
[-1.20267456e+02 -1.22539452e+01 -6.65492000e+00 -6.65492000e+00
 -6.65492000e+00 -1.16352153e+00 -2.36449584e-01 -2.36449584e-01
 -2.36449584e-01  8.66913652e+01  6.80485452e+02  3.93899741e+03
  2.99919538e+04  1.63989314e+05]
E1 = -706.5444411341718  E_coul = 198.91318874399053
Extra cycle  E= -507.631252390181  delta_E= -5.68e-14  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [7.34198471e+04 1.83549439e+04 2.23221275e+03 4.57629469e+02
 1.22079341e+02 3.76663208e+01 4.74134400e+00 3.91204019e-01
 8.59864130e+00 4.90849914e-01]
E = -507.6312523901813
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.84715          1
[INPUT] 0    0    [1    /1   ]  18354.943901         1
[INPUT] 0    0    [1    /1   ]  2232.21275211        1
[INPUT] 0    0    [1    /1   ]  457.629468983        1
[INPUT] 0    0    [1    /1   ]  122.079341178        1
[INPUT] 0    0    [1    /1   ]  37.6663208285        1
[INPUT] 0    0    [1    /1   ]  4.74134399846        1
[INPUT] 0    0    [1    /1   ]  0.391204018855       1
[INPUT] 1    0    [1    /1   ]  8.59864130176        1
[INPUT] 1    0    [1    /1   ]  0.490849914136       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84714997701, 1.0]], [0, [18354.94390100556, 1.0]], [0, [2232.2127521093134, 1.0]], [0, [457.62946898286214, 1.0]], [0, [122.07934117824654, 1.0]], [0, [37.66632082853278, 1.0]], [0, [4.741343998463591, 1.0]], [0, [0.39120401885544104, 1.0]], [1, [8.598641301760479, 1.0]], [1, [0.4908499141363228, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84714998]
bas 1, expnt(s) = [18354.94390101]
bas 2, expnt(s) = [2232.21275211]
bas 3, expnt(s) = [457.62946898]
bas 4, expnt(s) = [122.07934118]
bas 5, expnt(s) = [37.66632083]
bas 6, expnt(s) = [4.741344]
bas 7, expnt(s) = [0.39120402]
bas 8, expnt(s) = [8.5986413]
bas 9, expnt(s) = [0.49084991]
CPU time:        49.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549439e+04 3.98409624e+03
 2.23221275e+03 8.20477570e+02 4.57629469e+02 2.49977265e+02
 1.22079341e+02 9.27890347e+01 3.76663208e+01 3.84131503e+01
 4.74134400e+00 8.11785189e+00 3.91204019e-01 1.24973377e+00
 8.59864130e+00 4.29557873e+01 4.90849914e-01 1.19858901e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31996764234631
cond(S) = 44.45819684747895
E1 = -689.0449229510937  E_coul = 184.91555621933682
init E= -504.129366731757
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680899408807783  LUMO = 85.3616008852246
  mo_energy =
[-1.21646539e+02 -1.32808429e+01 -7.62158566e+00 -7.62158566e+00
 -7.62158566e+00 -1.65068636e+00 -6.80899409e-01 -6.80899409e-01
 -6.80899409e-01  8.53616009e+01  6.79125847e+02  3.93776237e+03
  2.99908860e+04  1.63988322e+05]
E1 = -706.576161042255  E_coul = 198.9453344419634
cycle= 1 E= -507.630826600292  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407133
diis-c [-0.1657576  1.       ]
  HOMO = -0.236273265321606  LUMO = 86.6949173335417
  mo_energy =
[-1.20258743e+02 -1.22527479e+01 -6.65306301e+00 -6.65306301e+00
 -6.65306301e+00 -1.16345652e+00 -2.36273265e-01 -2.36273265e-01
 -2.36273265e-01  8.66949173e+01  6.80496116e+02  3.93901339e+03
  2.99919732e+04  1.63989334e+05]
E1 = -706.5448852950665  E_coul = 198.91363301404064
cycle= 2 E= -507.631252281026  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502834
diis-c [-2.52294745e-05 -5.74858987e-04  1.00057486e+00]
  HOMO = -0.236447418516165  LUMO = 86.6914090396028
  mo_energy =
[-1.20267345e+02 -1.22539297e+01 -6.65489354e+00 -6.65489354e+00
 -6.65489354e+00 -1.16352089e+00 -2.36447419e-01 -2.36447419e-01
 -2.36447419e-01  8.66914090e+01  6.80485566e+02  3.93899756e+03
  2.99919540e+04  1.63989314e+05]
E1 = -706.5444482372413  E_coul = 198.91319584709916
cycle= 3 E= -507.631252390142  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012588
diis-c [-3.85108382e-10  3.51121955e-05 -2.53624545e-02  1.02532734e+00]
  HOMO = -0.236449600109661  LUMO = 86.6913648926175
  mo_energy =
[-1.20267457e+02 -1.22539453e+01 -6.65492016e+00 -6.65492016e+00
 -6.65492016e+00 -1.16352153e+00 -2.36449600e-01 -2.36449600e-01
 -2.36449600e-01  8.66913649e+01  6.80485451e+02  3.93899741e+03
  2.99919538e+04  1.63989314e+05]
E1 = -706.54444109823  E_coul = 198.91318870804872
cycle= 4 E= -507.631252390181  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.54444109823  E_coul = 198.91318870804872
  HOMO = -0.236449584251274  LUMO = 86.6913652231362
  mo_energy =
[-1.20267456e+02 -1.22539452e+01 -6.65492000e+00 -6.65492000e+00
 -6.65492000e+00 -1.16352153e+00 -2.36449584e-01 -2.36449584e-01
 -2.36449584e-01  8.66913652e+01  6.80485452e+02  3.93899741e+03
  2.99919538e+04  1.63989314e+05]
E1 = -706.5444411341718  E_coul = 198.91318874399053
Extra cycle  E= -507.631252390181  delta_E= -5.68e-14  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.45819684747895
E1 = -706.5444411341718  E_coul = 198.91318874399053
init E= -507.631252390181
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236449584066373  LUMO = 86.6913652271628
  mo_energy =
[-1.20267456e+02 -1.22539452e+01 -6.65492000e+00 -6.65492000e+00
 -6.65492000e+00 -1.16352153e+00 -2.36449584e-01 -2.36449584e-01
 -2.36449584e-01  8.66913652e+01  6.80485452e+02  3.93899741e+03
  2.99919538e+04  1.63989314e+05]
E1 = -706.5444411347137  E_coul = 198.91318874453233
cycle= 1 E= -507.631252390181  delta_E=    0  |g|= 1.24e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5444411347137  E_coul = 198.91318874453233
  HOMO = -0.236449584063777  LUMO = 86.6913652272183
  mo_energy =
[-1.20267456e+02 -1.22539452e+01 -6.65492000e+00 -6.65492000e+00
 -6.65492000e+00 -1.16352153e+00 -2.36449584e-01 -2.36449584e-01
 -2.36449584e-01  8.66913652e+01  6.80485452e+02  3.93899741e+03
  2.99919538e+04  1.63989314e+05]
E1 = -706.544441134723  E_coul = 198.91318874454183
Extra cycle  E= -507.631252390181  delta_E= 1.14e-13  |g|= 1.75e-11  |ddm|= 4.42e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198471e+04 1.83549439e+04 2.23221275e+03 4.57629469e+02
 1.22079341e+02 3.76663208e+01 4.74134400e+00 3.91204019e-01
 8.59864130e+00 4.90849914e-01]
grad_E = [-2.20551216e-07  7.40358837e-06 -2.12595064e-05  2.96590850e-05
  3.01676444e-05  7.34955891e-06 -4.79821214e-06  4.85530990e-06
  1.20954127e-05  5.24035966e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471452        1
[INPUT] 0    0    [1    /1   ]  18354.9440619        1
[INPUT] 0    0    [1    /1   ]  2232.21224379        1
[INPUT] 0    0    [1    /1   ]  457.630860246        1
[INPUT] 0    0    [1    /1   ]  122.077496317        1
[INPUT] 0    0    [1    /1   ]  37.6658669886        1
[INPUT] 0    0    [1    /1   ]  4.74135350318        1
[INPUT] 0    0    [1    /1   ]  0.391204212555       1
[INPUT] 1    0    [1    /1   ]  8.59861606863        1
[INPUT] 1    0    [1    /1   ]  0.490847127063       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84714519979, 1.0]], [0, [18354.94406188404, 1.0]], [0, [2232.21224379453, 1.0]], [0, [457.63086024599016, 1.0]], [0, [122.07749631706794, 1.0]], [0, [37.66586698858256, 1.0]], [0, [4.74135350317627, 1.0]], [0, [0.39120421255481946, 1.0]], [1, [8.598616068633618, 1.0]], [1, [0.4908471270631002, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.8471452]
bas 1, expnt(s) = [18354.94406188]
bas 2, expnt(s) = [2232.21224379]
bas 3, expnt(s) = [457.63086025]
bas 4, expnt(s) = [122.07749632]
bas 5, expnt(s) = [37.66586699]
bas 6, expnt(s) = [4.7413535]
bas 7, expnt(s) = [0.39120421]
bas 8, expnt(s) = [8.59861607]
bas 9, expnt(s) = [0.49084713]
CPU time:        52.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549441e+04 3.98409626e+03
 2.23221224e+03 8.20477430e+02 4.57630860e+02 2.49977835e+02
 1.22077496e+02 9.27879831e+01 3.76658670e+01 3.84128031e+01
 4.74135350e+00 8.11786410e+00 3.91204213e-01 1.24973423e+00
 8.59861607e+00 4.29556297e+01 4.90847127e-01 1.19858050e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971171980757
cond(S) = 44.45752662654423
E1 = -689.0447224680127  E_coul = 184.9153646038481
init E= -504.129357864165
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090236792806  LUMO = 85.3598624799006
  mo_energy =
[-1.21646569e+02 -1.32808588e+01 -7.62159799e+00 -7.62159799e+00
 -7.62159799e+00 -1.65068964e+00 -6.80902368e-01 -6.80902368e-01
 -6.80902368e-01  8.53598625e+01  6.79120296e+02  3.93775785e+03
  2.99908823e+04  1.63988319e+05]
E1 = -706.5759173798862  E_coul = 198.9450907810559
cycle= 1 E= -507.63082659883  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407132
diis-c [-0.16575666  1.        ]
  HOMO = -0.236279367171119  LUMO = 86.6931735345204
  mo_energy =
[-1.20258774e+02 -1.22527673e+01 -6.65307869e+00 -6.65307869e+00
 -6.65307869e+00 -1.16346181e+00 -2.36279367e-01 -2.36279367e-01
 -2.36279367e-01  8.66931735e+01  6.80490563e+02  3.93900886e+03
  2.99919694e+04  1.63989331e+05]
E1 = -706.5446410262798  E_coul = 198.91338874090093
cycle= 2 E= -507.631252285379  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502836
diis-c [-2.52297076e-05 -5.74771341e-04  1.00057477e+00]
  HOMO = -0.236453522907226  LUMO = 86.6896652157043
  mo_energy =
[-1.20267377e+02 -1.22539491e+01 -6.65490926e+00 -6.65490926e+00
 -6.65490926e+00 -1.16352619e+00 -2.36453523e-01 -2.36453523e-01
 -2.36453523e-01  8.66896652e+01  6.80480013e+02  3.93899303e+03
  2.99919502e+04  1.63989311e+05]
E1 = -706.544203954545  E_coul = 198.91295156004585
cycle= 3 E= -507.631252394499  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125883
diis-c [-3.85126224e-10  3.51125189e-05 -2.53628505e-02  1.02532774e+00]
  HOMO = -0.236455704571561  LUMO = 86.6896210673499
  mo_energy =
[-1.20267489e+02 -1.22539647e+01 -6.65493588e+00 -6.65493588e+00
 -6.65493588e+00 -1.16352683e+00 -2.36455705e-01 -2.36455705e-01
 -2.36455705e-01  8.66896211e+01  6.80479898e+02  3.93899289e+03
  2.99919501e+04  1.63989311e+05]
E1 = -706.5441968151702  E_coul = 198.91294442063202
cycle= 4 E= -507.631252394538  delta_E= -3.9e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5441968151702  E_coul = 198.91294442063202
  HOMO = -0.236455688712428  LUMO = 86.6896213978773
  mo_energy =
[-1.20267488e+02 -1.22539646e+01 -6.65493572e+00 -6.65493572e+00
 -6.65493572e+00 -1.16352683e+00 -2.36455689e-01 -2.36455689e-01
 -2.36455689e-01  8.66896214e+01  6.80479899e+02  3.93899289e+03
  2.99919501e+04  1.63989311e+05]
E1 = -706.5441968511146  E_coul = 198.91294445657618
Extra cycle  E= -507.631252394538  delta_E= -3.41e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198471e+04 1.83549441e+04 2.23221224e+03 4.57630860e+02
 1.22077496e+02 3.76658670e+01 4.74135350e+00 3.91204213e-01
 8.59861607e+00 4.90847127e-01]
E = -507.6312523945385
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:00:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471452        1
[INPUT] 0    0    [1    /1   ]  18354.9440619        1
[INPUT] 0    0    [1    /1   ]  2232.21224379        1
[INPUT] 0    0    [1    /1   ]  457.630860246        1
[INPUT] 0    0    [1    /1   ]  122.077496317        1
[INPUT] 0    0    [1    /1   ]  37.6658669886        1
[INPUT] 0    0    [1    /1   ]  4.74135350318        1
[INPUT] 0    0    [1    /1   ]  0.391204212555       1
[INPUT] 1    0    [1    /1   ]  8.59861606863        1
[INPUT] 1    0    [1    /1   ]  0.490847127063       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84714519979, 1.0]], [0, [18354.94406188404, 1.0]], [0, [2232.21224379453, 1.0]], [0, [457.63086024599016, 1.0]], [0, [122.07749631706794, 1.0]], [0, [37.66586698858256, 1.0]], [0, [4.74135350317627, 1.0]], [0, [0.39120421255481946, 1.0]], [1, [8.598616068633618, 1.0]], [1, [0.4908471270631002, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.8471452]
bas 1, expnt(s) = [18354.94406188]
bas 2, expnt(s) = [2232.21224379]
bas 3, expnt(s) = [457.63086025]
bas 4, expnt(s) = [122.07749632]
bas 5, expnt(s) = [37.66586699]
bas 6, expnt(s) = [4.7413535]
bas 7, expnt(s) = [0.39120421]
bas 8, expnt(s) = [8.59861607]
bas 9, expnt(s) = [0.49084713]
CPU time:        53.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549441e+04 3.98409626e+03
 2.23221224e+03 8.20477430e+02 4.57630860e+02 2.49977835e+02
 1.22077496e+02 9.27879831e+01 3.76658670e+01 3.84128031e+01
 4.74135350e+00 8.11786410e+00 3.91204213e-01 1.24973423e+00
 8.59861607e+00 4.29556297e+01 4.90847127e-01 1.19858050e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971171980757
cond(S) = 44.45752662654423
E1 = -689.0447224680127  E_coul = 184.9153646038481
init E= -504.129357864165
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090236792806  LUMO = 85.3598624799006
  mo_energy =
[-1.21646569e+02 -1.32808588e+01 -7.62159799e+00 -7.62159799e+00
 -7.62159799e+00 -1.65068964e+00 -6.80902368e-01 -6.80902368e-01
 -6.80902368e-01  8.53598625e+01  6.79120296e+02  3.93775785e+03
  2.99908823e+04  1.63988319e+05]
E1 = -706.5759173798862  E_coul = 198.9450907810559
cycle= 1 E= -507.63082659883  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407132
diis-c [-0.16575666  1.        ]
  HOMO = -0.236279367171119  LUMO = 86.6931735345204
  mo_energy =
[-1.20258774e+02 -1.22527673e+01 -6.65307869e+00 -6.65307869e+00
 -6.65307869e+00 -1.16346181e+00 -2.36279367e-01 -2.36279367e-01
 -2.36279367e-01  8.66931735e+01  6.80490563e+02  3.93900886e+03
  2.99919694e+04  1.63989331e+05]
E1 = -706.5446410262798  E_coul = 198.91338874090093
cycle= 2 E= -507.631252285379  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502836
diis-c [-2.52297076e-05 -5.74771341e-04  1.00057477e+00]
  HOMO = -0.236453522907226  LUMO = 86.6896652157043
  mo_energy =
[-1.20267377e+02 -1.22539491e+01 -6.65490926e+00 -6.65490926e+00
 -6.65490926e+00 -1.16352619e+00 -2.36453523e-01 -2.36453523e-01
 -2.36453523e-01  8.66896652e+01  6.80480013e+02  3.93899303e+03
  2.99919502e+04  1.63989311e+05]
E1 = -706.544203954545  E_coul = 198.91295156004585
cycle= 3 E= -507.631252394499  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125883
diis-c [-3.85126224e-10  3.51125189e-05 -2.53628505e-02  1.02532774e+00]
  HOMO = -0.236455704571561  LUMO = 86.6896210673499
  mo_energy =
[-1.20267489e+02 -1.22539647e+01 -6.65493588e+00 -6.65493588e+00
 -6.65493588e+00 -1.16352683e+00 -2.36455705e-01 -2.36455705e-01
 -2.36455705e-01  8.66896211e+01  6.80479898e+02  3.93899289e+03
  2.99919501e+04  1.63989311e+05]
E1 = -706.5441968151702  E_coul = 198.91294442063202
cycle= 4 E= -507.631252394538  delta_E= -3.9e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5441968151702  E_coul = 198.91294442063202
  HOMO = -0.236455688712428  LUMO = 86.6896213978773
  mo_energy =
[-1.20267488e+02 -1.22539646e+01 -6.65493572e+00 -6.65493572e+00
 -6.65493572e+00 -1.16352683e+00 -2.36455689e-01 -2.36455689e-01
 -2.36455689e-01  8.66896214e+01  6.80479899e+02  3.93899289e+03
  2.99919501e+04  1.63989311e+05]
E1 = -706.5441968511146  E_coul = 198.91294445657618
Extra cycle  E= -507.631252394538  delta_E= -3.41e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.45752662654423
E1 = -706.5441968511146  E_coul = 198.91294445657618
init E= -507.631252394538
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.23645568852752  LUMO = 86.6896214019027
  mo_energy =
[-1.20267488e+02 -1.22539646e+01 -6.65493572e+00 -6.65493572e+00
 -6.65493572e+00 -1.16352683e+00 -2.36455689e-01 -2.36455689e-01
 -2.36455689e-01  8.66896214e+01  6.80479899e+02  3.93899289e+03
  2.99919501e+04  1.63989311e+05]
E1 = -706.5441968516567  E_coul = 198.91294445711824
cycle= 1 E= -507.631252394538  delta_E=    0  |g|= 1.25e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5441968516567  E_coul = 198.91294445711824
  HOMO = -0.236455688524918  LUMO = 86.6896214019608
  mo_energy =
[-1.20267488e+02 -1.22539646e+01 -6.65493572e+00 -6.65493572e+00
 -6.65493572e+00 -1.16352683e+00 -2.36455689e-01 -2.36455689e-01
 -2.36455689e-01  8.66896214e+01  6.80479899e+02  3.93899289e+03
  2.99919501e+04  1.63989311e+05]
E1 = -706.5441968516653  E_coul = 198.91294445712717
Extra cycle  E= -507.631252394538  delta_E= 3.41e-13  |g|= 3.33e-12  |ddm|= 4.33e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198471e+04 1.83549441e+04 2.23221224e+03 4.57630860e+02
 1.22077496e+02 3.76658670e+01 4.74135350e+00 3.91204213e-01
 8.59861607e+00 4.90847127e-01]
grad_E = [-2.20551196e-07  7.40384267e-06 -2.12837165e-05  3.00626443e-05
  2.83782381e-05  9.27525756e-06  2.28988631e-06 -2.29858739e-06
 -5.78435890e-06 -2.49990554e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471422        1
[INPUT] 0    0    [1    /1   ]  18354.9441627        1
[INPUT] 0    0    [1    /1   ]  2232.21192178        1
[INPUT] 0    0    [1    /1   ]  457.6317861          1
[INPUT] 0    0    [1    /1   ]  122.076165529        1
[INPUT] 0    0    [1    /1   ]  37.6655101551        1
[INPUT] 0    0    [1    /1   ]  4.74135895996        1
[INPUT] 0    0    [1    /1   ]  0.391204306098       1
[INPUT] 1    0    [1    /1   ]  8.59860181804        1
[INPUT] 1    0    [1    /1   ]  0.490845551393       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84714220608, 1.0]], [0, [18354.944162737913, 1.0]], [0, [2232.2119217844356, 1.0]], [0, [457.63178609991854, 1.0]], [0, [122.07616552942257, 1.0]], [0, [37.66551015513581, 1.0]], [0, [4.741358959956188, 1.0]], [0, [0.3912043060978459, 1.0]], [1, [8.598601818043534, 1.0]], [1, [0.490845551392811, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84714221]
bas 1, expnt(s) = [18354.94416274]
bas 2, expnt(s) = [2232.21192178]
bas 3, expnt(s) = [457.6317861]
bas 4, expnt(s) = [122.07616553]
bas 5, expnt(s) = [37.66551016]
bas 6, expnt(s) = [4.74135896]
bas 7, expnt(s) = [0.39120431]
bas 8, expnt(s) = [8.59860182]
bas 9, expnt(s) = [0.49084555]
CPU time:        56.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549442e+04 3.98409628e+03
 2.23221192e+03 8.20477341e+02 4.57631786e+02 2.49978214e+02
 1.22076166e+02 9.27872244e+01 3.76655102e+01 3.84125302e+01
 4.74135896e+00 8.11787111e+00 3.91204306e-01 1.24973446e+00
 8.59860182e+00 4.29555407e+01 4.90845551e-01 1.19857569e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973174159472
cond(S) = 44.457008934374926
E1 = -689.0446088302485  E_coul = 184.91525577427447
init E= -504.129353055974
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904047032513  LUMO = 85.358545385674
  mo_energy =
[-1.21646586e+02 -1.32808677e+01 -7.62160502e+00 -7.62160502e+00
 -7.62160502e+00 -1.65069148e+00 -6.80904047e-01 -6.80904047e-01
 -6.80904047e-01  8.53585454e+01  6.79116117e+02  3.93775430e+03
  2.99908793e+04  1.63988316e+05]
E1 = -706.5757786766944  E_coul = 198.94495207908037
cycle= 1 E= -507.630826597614  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.407131
diis-c [-0.16575595  1.        ]
  HOMO = -0.236282829546807  LUMO = 86.6918529396932
  mo_energy =
[-1.20258793e+02 -1.22527781e+01 -6.65308762e+00 -6.65308762e+00
 -6.65308762e+00 -1.16346480e+00 -2.36282830e-01 -2.36282830e-01
 -2.36282830e-01  8.66918529e+01  6.80486384e+02  3.93900531e+03
  2.99919665e+04  1.63989329e+05]
E1 = -706.5445017990575  E_coul = 198.91324950901537
cycle= 2 E= -507.631252290042  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502839
diis-c [-2.52300111e-05 -5.74703267e-04  1.00057470e+00]
  HOMO = -0.236456987906891  LUMO = 86.6883445937439
  mo_energy =
[-1.20267396e+02 -1.22539600e+01 -6.65491822e+00 -6.65491822e+00
 -6.65491822e+00 -1.16352918e+00 -2.36456988e-01 -2.36456988e-01
 -2.36456988e-01  8.66883446e+01  6.80475833e+02  3.93898947e+03
  2.99919473e+04  1.63989309e+05]
E1 = -706.5440647159288  E_coul = 198.91281231676356
cycle= 3 E= -507.631252399165  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125885
diis-c [-3.85140439e-10  3.51127645e-05 -2.53631428e-02  1.02532803e+00]
  HOMO = -0.236459169634282  LUMO = 86.6883004442492
  mo_energy =
[-1.20267508e+02 -1.22539755e+01 -6.65494485e+00 -6.65494485e+00
 -6.65494485e+00 -1.16352982e+00 -2.36459170e-01 -2.36459170e-01
 -2.36459170e-01  8.66883004e+01  6.80475718e+02  3.93898933e+03
  2.99919471e+04  1.63989308e+05]
E1 = -706.544057576267  E_coul = 198.912805177062
cycle= 4 E= -507.631252399205  delta_E= -3.98e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.544057576267  E_coul = 198.912805177062
  HOMO = -0.236459153774524  LUMO = 86.6883007747844
  mo_energy =
[-1.20267507e+02 -1.22539754e+01 -6.65494469e+00 -6.65494469e+00
 -6.65494469e+00 -1.16352982e+00 -2.36459154e-01 -2.36459154e-01
 -2.36459154e-01  8.66883008e+01  6.80475719e+02  3.93898933e+03
  2.99919471e+04  1.63989308e+05]
E1 = -706.544057612212  E_coul = 198.9128052130074
Extra cycle  E= -507.631252399205  delta_E= 4.55e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198471e+04 1.83549442e+04 2.23221192e+03 4.57631786e+02
 1.22076166e+02 3.76655102e+01 4.74135896e+00 3.91204306e-01
 8.59860182e+00 4.90845551e-01]
E = -507.6312523992046
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471422        1
[INPUT] 0    0    [1    /1   ]  18354.9441627        1
[INPUT] 0    0    [1    /1   ]  2232.21192178        1
[INPUT] 0    0    [1    /1   ]  457.6317861          1
[INPUT] 0    0    [1    /1   ]  122.076165529        1
[INPUT] 0    0    [1    /1   ]  37.6655101551        1
[INPUT] 0    0    [1    /1   ]  4.74135895996        1
[INPUT] 0    0    [1    /1   ]  0.391204306098       1
[INPUT] 1    0    [1    /1   ]  8.59860181804        1
[INPUT] 1    0    [1    /1   ]  0.490845551393       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84714220608, 1.0]], [0, [18354.944162737913, 1.0]], [0, [2232.2119217844356, 1.0]], [0, [457.63178609991854, 1.0]], [0, [122.07616552942257, 1.0]], [0, [37.66551015513581, 1.0]], [0, [4.741358959956188, 1.0]], [0, [0.3912043060978459, 1.0]], [1, [8.598601818043534, 1.0]], [1, [0.490845551392811, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84714221]
bas 1, expnt(s) = [18354.94416274]
bas 2, expnt(s) = [2232.21192178]
bas 3, expnt(s) = [457.6317861]
bas 4, expnt(s) = [122.07616553]
bas 5, expnt(s) = [37.66551016]
bas 6, expnt(s) = [4.74135896]
bas 7, expnt(s) = [0.39120431]
bas 8, expnt(s) = [8.59860182]
bas 9, expnt(s) = [0.49084555]
CPU time:        56.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549442e+04 3.98409628e+03
 2.23221192e+03 8.20477341e+02 4.57631786e+02 2.49978214e+02
 1.22076166e+02 9.27872244e+01 3.76655102e+01 3.84125302e+01
 4.74135896e+00 8.11787111e+00 3.91204306e-01 1.24973446e+00
 8.59860182e+00 4.29555407e+01 4.90845551e-01 1.19857569e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973174159472
cond(S) = 44.457008934374926
E1 = -689.0446088302485  E_coul = 184.91525577427447
init E= -504.129353055974
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904047032513  LUMO = 85.358545385674
  mo_energy =
[-1.21646586e+02 -1.32808677e+01 -7.62160502e+00 -7.62160502e+00
 -7.62160502e+00 -1.65069148e+00 -6.80904047e-01 -6.80904047e-01
 -6.80904047e-01  8.53585454e+01  6.79116117e+02  3.93775430e+03
  2.99908793e+04  1.63988316e+05]
E1 = -706.5757786766944  E_coul = 198.94495207908037
cycle= 1 E= -507.630826597614  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.407131
diis-c [-0.16575595  1.        ]
  HOMO = -0.236282829546807  LUMO = 86.6918529396932
  mo_energy =
[-1.20258793e+02 -1.22527781e+01 -6.65308762e+00 -6.65308762e+00
 -6.65308762e+00 -1.16346480e+00 -2.36282830e-01 -2.36282830e-01
 -2.36282830e-01  8.66918529e+01  6.80486384e+02  3.93900531e+03
  2.99919665e+04  1.63989329e+05]
E1 = -706.5445017990575  E_coul = 198.91324950901537
cycle= 2 E= -507.631252290042  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502839
diis-c [-2.52300111e-05 -5.74703267e-04  1.00057470e+00]
  HOMO = -0.236456987906891  LUMO = 86.6883445937439
  mo_energy =
[-1.20267396e+02 -1.22539600e+01 -6.65491822e+00 -6.65491822e+00
 -6.65491822e+00 -1.16352918e+00 -2.36456988e-01 -2.36456988e-01
 -2.36456988e-01  8.66883446e+01  6.80475833e+02  3.93898947e+03
  2.99919473e+04  1.63989309e+05]
E1 = -706.5440647159288  E_coul = 198.91281231676356
cycle= 3 E= -507.631252399165  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125885
diis-c [-3.85140439e-10  3.51127645e-05 -2.53631428e-02  1.02532803e+00]
  HOMO = -0.236459169634282  LUMO = 86.6883004442492
  mo_energy =
[-1.20267508e+02 -1.22539755e+01 -6.65494485e+00 -6.65494485e+00
 -6.65494485e+00 -1.16352982e+00 -2.36459170e-01 -2.36459170e-01
 -2.36459170e-01  8.66883004e+01  6.80475718e+02  3.93898933e+03
  2.99919471e+04  1.63989308e+05]
E1 = -706.544057576267  E_coul = 198.912805177062
cycle= 4 E= -507.631252399205  delta_E= -3.98e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.544057576267  E_coul = 198.912805177062
  HOMO = -0.236459153774524  LUMO = 86.6883007747844
  mo_energy =
[-1.20267507e+02 -1.22539754e+01 -6.65494469e+00 -6.65494469e+00
 -6.65494469e+00 -1.16352982e+00 -2.36459154e-01 -2.36459154e-01
 -2.36459154e-01  8.66883008e+01  6.80475719e+02  3.93898933e+03
  2.99919471e+04  1.63989308e+05]
E1 = -706.544057612212  E_coul = 198.9128052130074
Extra cycle  E= -507.631252399205  delta_E= 4.55e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.457008934374926
E1 = -706.544057612212  E_coul = 198.9128052130074
init E= -507.631252399205
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236459153589618  LUMO = 86.6883007788097
  mo_energy =
[-1.20267507e+02 -1.22539754e+01 -6.65494469e+00 -6.65494469e+00
 -6.65494469e+00 -1.16352982e+00 -2.36459154e-01 -2.36459154e-01
 -2.36459154e-01  8.66883008e+01  6.80475719e+02  3.93898933e+03
  2.99919471e+04  1.63989308e+05]
E1 = -706.544057612754  E_coul = 198.91280521354952
cycle= 1 E= -507.631252399205  delta_E= 5.68e-14  |g|= 1.24e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.544057612754  E_coul = 198.91280521354952
  HOMO = -0.236459153587017  LUMO = 86.6883007788684
  mo_energy =
[-1.20267507e+02 -1.22539754e+01 -6.65494469e+00 -6.65494469e+00
 -6.65494469e+00 -1.16352982e+00 -2.36459154e-01 -2.36459154e-01
 -2.36459154e-01  8.66883008e+01  6.80475719e+02  3.93898933e+03
  2.99919471e+04  1.63989308e+05]
E1 = -706.5440576127634  E_coul = 198.91280521355884
Extra cycle  E= -507.631252399205  delta_E=    0  |g|= 2.27e-11  |ddm|= 4.33e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198471e+04 1.83549442e+04 2.23221192e+03 4.57631786e+02
 1.22076166e+02 3.76655102e+01 4.74135896e+00 3.91204306e-01
 8.59860182e+00 4.90845551e-01]
grad_E = [-2.20551174e-07  7.40401548e-06 -2.13002126e-05  3.03364524e-05
  2.72223663e-05  1.02597821e-05  6.33972983e-06 -6.35826088e-06
 -1.59195984e-05 -6.88451096e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471368        1
[INPUT] 0    0    [1    /1   ]  18354.944345         1
[INPUT] 0    0    [1    /1   ]  2232.21132668        1
[INPUT] 0    0    [1    /1   ]  457.633671172        1
[INPUT] 0    0    [1    /1   ]  122.073054326        1
[INPUT] 0    0    [1    /1   ]  37.6646750859        1
[INPUT] 0    0    [1    /1   ]  4.74137114642        1
[INPUT] 0    0    [1    /1   ]  0.391204509859       1
[INPUT] 1    0    [1    /1   ]  8.59856998658        1
[INPUT] 1    0    [1    /1   ]  0.490842031284       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84713680018, 1.0]], [0, [18354.94434500217, 1.0]], [0, [2232.211326683501, 1.0]], [0, [457.6336711724042, 1.0]], [0, [122.07305432629155, 1.0]], [0, [37.66467508590629, 1.0]], [0, [4.741371146420555, 1.0]], [0, [0.39120450985867816, 1.0]], [1, [8.598569986582804, 1.0]], [1, [0.4908420312839239, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.8471368]
bas 1, expnt(s) = [18354.944345]
bas 2, expnt(s) = [2232.21132668]
bas 3, expnt(s) = [457.63367117]
bas 4, expnt(s) = [122.07305433]
bas 5, expnt(s) = [37.66467509]
bas 6, expnt(s) = [4.74137115]
bas 7, expnt(s) = [0.39120451]
bas 8, expnt(s) = [8.59856999]
bas 9, expnt(s) = [0.49084203]
CPU time:        59.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549443e+04 3.98409631e+03
 2.23221133e+03 8.20477177e+02 4.57633671e+02 2.49978986e+02
 1.22073054e+02 9.27854509e+01 3.76646751e+01 3.84118915e+01
 4.74137115e+00 8.11788676e+00 3.91204510e-01 1.24973495e+00
 8.59856999e+00 4.29553420e+01 4.90842031e-01 1.19856495e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319977649952182
cond(S) = 44.455815834516876
E1 = -689.0443550833093  E_coul = 184.91501248079257
init E= -504.129342602517
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680907799851293  LUMO = 85.3554646370764
  mo_energy =
[-1.21646625e+02 -1.32808874e+01 -7.62162073e+00 -7.62162073e+00
 -7.62162073e+00 -1.65069559e+00 -6.80907800e-01 -6.80907800e-01
 -6.80907800e-01  8.53554646e+01  6.79106116e+02  3.93774531e+03
  2.99908720e+04  1.63988310e+05]
E1 = -706.5754685526324  E_coul = 198.94464195234664
cycle= 1 E= -507.630826600286  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407129
diis-c [-0.16575433  1.        ]
  HOMO = -0.236290568756876  LUMO = 86.6887641942551
  mo_energy =
[-1.20258834e+02 -1.22528023e+01 -6.65310759e+00 -6.65310759e+00
 -6.65310759e+00 -1.16347148e+00 -2.36290569e-01 -2.36290569e-01
 -2.36290569e-01  8.66887642e+01  6.80476380e+02  3.93899632e+03
  2.99919592e+04  1.63989323e+05]
E1 = -706.5441904303968  E_coul = 198.91293812349284
cycle= 2 E= -507.631252306904  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502846
diis-c [-2.52307532e-05 -5.74544307e-04  1.00057454e+00]
  HOMO = -0.236464733468876  LUMO = 86.6852557825709
  mo_energy =
[-1.20267437e+02 -1.22539842e+01 -6.65493828e+00 -6.65493828e+00
 -6.65493828e+00 -1.16353586e+00 -2.36464733e-01 -2.36464733e-01
 -2.36464733e-01  8.66852558e+01  6.80465829e+02  3.93898048e+03
  2.99919400e+04  1.63989302e+05]
E1 = -706.5437533203565  E_coul = 198.91250090432152
cycle= 3 E= -507.631252416035  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012589
diis-c [-3.85174020e-10  3.51132440e-05 -2.53638198e-02  1.02532871e+00]
  HOMO = -0.236466915346503  LUMO = 86.6852116303833
  mo_energy =
[-1.20267549e+02 -1.22539998e+01 -6.65496490e+00 -6.65496490e+00
 -6.65496490e+00 -1.16353650e+00 -2.36466915e-01 -2.36466915e-01
 -2.36466915e-01  8.66852116e+01  6.80465714e+02  3.93898034e+03
  2.99919398e+04  1.63989302e+05]
E1 = -706.5437461800154  E_coul = 198.91249376394128
cycle= 4 E= -507.631252416074  delta_E= -3.92e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5437461800154  E_coul = 198.91249376394128
  HOMO = -0.236466899485304  LUMO = 86.6852119609375
  mo_energy =
[-1.20267548e+02 -1.22539997e+01 -6.65496475e+00 -6.65496475e+00
 -6.65496475e+00 -1.16353650e+00 -2.36466899e-01 -2.36466899e-01
 -2.36466899e-01  8.66852120e+01  6.80465715e+02  3.93898034e+03
  2.99919398e+04  1.63989302e+05]
E1 = -706.5437462159651  E_coul = 198.91249379989097
Extra cycle  E= -507.631252416074  delta_E=    0  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [7.34198471e+04 1.83549443e+04 2.23221133e+03 4.57633671e+02
 1.22073054e+02 3.76646751e+01 4.74137115e+00 3.91204510e-01
 8.59856999e+00 4.90842031e-01]
E = -507.6312524160742
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471368        1
[INPUT] 0    0    [1    /1   ]  18354.944345         1
[INPUT] 0    0    [1    /1   ]  2232.21132668        1
[INPUT] 0    0    [1    /1   ]  457.633671172        1
[INPUT] 0    0    [1    /1   ]  122.073054326        1
[INPUT] 0    0    [1    /1   ]  37.6646750859        1
[INPUT] 0    0    [1    /1   ]  4.74137114642        1
[INPUT] 0    0    [1    /1   ]  0.391204509859       1
[INPUT] 1    0    [1    /1   ]  8.59856998658        1
[INPUT] 1    0    [1    /1   ]  0.490842031284       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84713680018, 1.0]], [0, [18354.94434500217, 1.0]], [0, [2232.211326683501, 1.0]], [0, [457.6336711724042, 1.0]], [0, [122.07305432629155, 1.0]], [0, [37.66467508590629, 1.0]], [0, [4.741371146420555, 1.0]], [0, [0.39120450985867816, 1.0]], [1, [8.598569986582804, 1.0]], [1, [0.4908420312839239, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.8471368]
bas 1, expnt(s) = [18354.944345]
bas 2, expnt(s) = [2232.21132668]
bas 3, expnt(s) = [457.63367117]
bas 4, expnt(s) = [122.07305433]
bas 5, expnt(s) = [37.66467509]
bas 6, expnt(s) = [4.74137115]
bas 7, expnt(s) = [0.39120451]
bas 8, expnt(s) = [8.59856999]
bas 9, expnt(s) = [0.49084203]
CPU time:        60.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549443e+04 3.98409631e+03
 2.23221133e+03 8.20477177e+02 4.57633671e+02 2.49978986e+02
 1.22073054e+02 9.27854509e+01 3.76646751e+01 3.84118915e+01
 4.74137115e+00 8.11788676e+00 3.91204510e-01 1.24973495e+00
 8.59856999e+00 4.29553420e+01 4.90842031e-01 1.19856495e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319977649952182
cond(S) = 44.455815834516876
E1 = -689.0443550833093  E_coul = 184.91501248079257
init E= -504.129342602517
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680907799851293  LUMO = 85.3554646370764
  mo_energy =
[-1.21646625e+02 -1.32808874e+01 -7.62162073e+00 -7.62162073e+00
 -7.62162073e+00 -1.65069559e+00 -6.80907800e-01 -6.80907800e-01
 -6.80907800e-01  8.53554646e+01  6.79106116e+02  3.93774531e+03
  2.99908720e+04  1.63988310e+05]
E1 = -706.5754685526324  E_coul = 198.94464195234664
cycle= 1 E= -507.630826600286  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407129
diis-c [-0.16575433  1.        ]
  HOMO = -0.236290568756876  LUMO = 86.6887641942551
  mo_energy =
[-1.20258834e+02 -1.22528023e+01 -6.65310759e+00 -6.65310759e+00
 -6.65310759e+00 -1.16347148e+00 -2.36290569e-01 -2.36290569e-01
 -2.36290569e-01  8.66887642e+01  6.80476380e+02  3.93899632e+03
  2.99919592e+04  1.63989323e+05]
E1 = -706.5441904303968  E_coul = 198.91293812349284
cycle= 2 E= -507.631252306904  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502846
diis-c [-2.52307532e-05 -5.74544307e-04  1.00057454e+00]
  HOMO = -0.236464733468876  LUMO = 86.6852557825709
  mo_energy =
[-1.20267437e+02 -1.22539842e+01 -6.65493828e+00 -6.65493828e+00
 -6.65493828e+00 -1.16353586e+00 -2.36464733e-01 -2.36464733e-01
 -2.36464733e-01  8.66852558e+01  6.80465829e+02  3.93898048e+03
  2.99919400e+04  1.63989302e+05]
E1 = -706.5437533203565  E_coul = 198.91250090432152
cycle= 3 E= -507.631252416035  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012589
diis-c [-3.85174020e-10  3.51132440e-05 -2.53638198e-02  1.02532871e+00]
  HOMO = -0.236466915346503  LUMO = 86.6852116303833
  mo_energy =
[-1.20267549e+02 -1.22539998e+01 -6.65496490e+00 -6.65496490e+00
 -6.65496490e+00 -1.16353650e+00 -2.36466915e-01 -2.36466915e-01
 -2.36466915e-01  8.66852116e+01  6.80465714e+02  3.93898034e+03
  2.99919398e+04  1.63989302e+05]
E1 = -706.5437461800154  E_coul = 198.91249376394128
cycle= 4 E= -507.631252416074  delta_E= -3.92e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5437461800154  E_coul = 198.91249376394128
  HOMO = -0.236466899485304  LUMO = 86.6852119609375
  mo_energy =
[-1.20267548e+02 -1.22539997e+01 -6.65496475e+00 -6.65496475e+00
 -6.65496475e+00 -1.16353650e+00 -2.36466899e-01 -2.36466899e-01
 -2.36466899e-01  8.66852120e+01  6.80465715e+02  3.93898034e+03
  2.99919398e+04  1.63989302e+05]
E1 = -706.5437462159651  E_coul = 198.91249379989097
Extra cycle  E= -507.631252416074  delta_E=    0  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.455815834516876
E1 = -706.5437462159651  E_coul = 198.91249379989097
init E= -507.631252416074
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236466899300367  LUMO = 86.6852119649639
  mo_energy =
[-1.20267548e+02 -1.22539997e+01 -6.65496475e+00 -6.65496475e+00
 -6.65496475e+00 -1.16353650e+00 -2.36466899e-01 -2.36466899e-01
 -2.36466899e-01  8.66852120e+01  6.80465715e+02  3.93898034e+03
  2.99919398e+04  1.63989302e+05]
E1 = -706.5437462165071  E_coul = 198.91249380043283
cycle= 1 E= -507.631252416074  delta_E= -1.14e-13  |g|= 1.23e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5437462165071  E_coul = 198.91249380043283
  HOMO = -0.236466899297769  LUMO = 86.6852119650215
  mo_energy =
[-1.20267548e+02 -1.22539997e+01 -6.65496475e+00 -6.65496475e+00
 -6.65496475e+00 -1.16353650e+00 -2.36466899e-01 -2.36466899e-01
 -2.36466899e-01  8.66852120e+01  6.80465715e+02  3.93898034e+03
  2.99919398e+04  1.63989302e+05]
E1 = -706.5437462165164  E_coul = 198.91249380044215
Extra cycle  E= -507.631252416074  delta_E=    0  |g|= 7.21e-12  |ddm|= 4.35e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198471e+04 1.83549443e+04 2.23221133e+03 4.57633671e+02
 1.22073054e+02 3.76646751e+01 4.74137115e+00 3.91204510e-01
 8.59856999e+00 4.90842031e-01]
grad_E = [-2.20551126e-07  7.40439951e-06 -2.13371249e-05  3.09565801e-05
  2.45995353e-05  1.24354924e-05  1.54134809e-05 -1.54328151e-05
 -3.85691792e-05 -1.66830680e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471326        1
[INPUT] 0    0    [1    /1   ]  18354.9444883        1
[INPUT] 0    0    [1    /1   ]  2232.21081799        1
[INPUT] 0    0    [1    /1   ]  457.635810814        1
[INPUT] 0    0    [1    /1   ]  122.068413766        1
[INPUT] 0    0    [1    /1   ]  37.6634411237        1
[INPUT] 0    0    [1    /1   ]  4.74138851885        1
[INPUT] 0    0    [1    /1   ]  0.391204797953       1
[INPUT] 1    0    [1    /1   ]  8.59852436329        1
[INPUT] 1    0    [1    /1   ]  0.490836985837       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84713256371, 1.0]], [0, [18354.94448829312, 1.0]], [0, [2232.210817986324, 1.0]], [0, [457.63581081392005, 1.0]], [0, [122.06841376634159, 1.0]], [0, [37.663441123734025, 1.0]], [0, [4.741388518850282, 1.0]], [0, [0.39120479795259344, 1.0]], [1, [8.598524363287494, 1.0]], [1, [0.4908369858370472, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84713256]
bas 1, expnt(s) = [18354.94448829]
bas 2, expnt(s) = [2232.21081799]
bas 3, expnt(s) = [457.63581081]
bas 4, expnt(s) = [122.06841377]
bas 5, expnt(s) = [37.66344112]
bas 6, expnt(s) = [4.74138852]
bas 7, expnt(s) = [0.3912048]
bas 8, expnt(s) = [8.59852436]
bas 9, expnt(s) = [0.49083699]
CPU time:        63.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549445e+04 3.98409633e+03
 2.23221082e+03 8.20477037e+02 4.57635811e+02 2.49979863e+02
 1.22068414e+02 9.27828055e+01 3.76634411e+01 3.84109476e+01
 4.74138852e+00 8.11790906e+00 3.91204798e-01 1.24973564e+00
 8.59852436e+00 4.29550571e+01 4.90836986e-01 1.19854955e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319984069001606
cond(S) = 44.454095766185326
E1 = -689.0439918319603  E_coul = 184.91466359124664
init E= -504.129328240714
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680913179504508  LUMO = 85.3508948469844
  mo_energy =
[-1.21646679e+02 -1.32809158e+01 -7.62164326e+00 -7.62164326e+00
 -7.62164326e+00 -1.65070147e+00 -6.80913180e-01 -6.80913180e-01
 -6.80913180e-01  8.53508948e+01  6.79090691e+02  3.93773032e+03
  2.99908601e+04  1.63988300e+05]
E1 = -706.5750238469137  E_coul = 198.94419722866056
cycle= 1 E= -507.630826618253  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407127
diis-c [-0.16575204  1.        ]
  HOMO = -0.236301665372505  LUMO = 86.6841827533068
  mo_energy =
[-1.20258893e+02 -1.22528370e+01 -6.65313624e+00 -6.65313624e+00
 -6.65313624e+00 -1.16348105e+00 -2.36301665e-01 -2.36301665e-01
 -2.36301665e-01  8.66841828e+01  6.80460951e+02  3.93898132e+03
  2.99919472e+04  1.63989312e+05]
E1 = -706.543743859476  E_coul = 198.9124915130975
cycle= 2 E= -507.631252346378  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502857
diis-c [-2.52318803e-05 -5.74309249e-04  1.00057431e+00]
  HOMO = -0.236475839734659  LUMO = 86.6806742420467
  mo_energy =
[-1.20267496e+02 -1.22540190e+01 -6.65496706e+00 -6.65496706e+00
 -6.65496706e+00 -1.16354543e+00 -2.36475840e-01 -2.36475840e-01
 -2.36475840e-01  8.66806742e+01  6.80450400e+02  3.93896549e+03
  2.99919280e+04  1.63989292e+05]
E1 = -706.5433067092316  E_coul = 198.91205425371075
cycle= 3 E= -507.631252455521  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125898
diis-c [-3.85225531e-10  3.51136806e-05 -2.53648144e-02  1.02532970e+00]
  HOMO = -0.236478021838091  LUMO = 86.6806300858361
  mo_energy =
[-1.20267608e+02 -1.22540346e+01 -6.65499368e+00 -6.65499368e+00
 -6.65499368e+00 -1.16354608e+00 -2.36478022e-01 -2.36478022e-01
 -2.36478022e-01  8.66806301e+01  6.80450284e+02  3.93896534e+03
  2.99919278e+04  1.63989292e+05]
E1 = -706.5432995678804  E_coul = 198.91204711232015
cycle= 4 E= -507.63125245556  delta_E= -3.93e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432995678804  E_coul = 198.91204711232015
  HOMO = -0.236478005974687  LUMO = 86.6806304164193
  mo_energy =
[-1.20267608e+02 -1.22540345e+01 -6.65499352e+00 -6.65499352e+00
 -6.65499352e+00 -1.16354607e+00 -2.36478006e-01 -2.36478006e-01
 -2.36478006e-01  8.66806304e+01  6.80450285e+02  3.93896534e+03
  2.99919278e+04  1.63989292e+05]
E1 = -706.5432996038363  E_coul = 198.91204714827566
Extra cycle  E= -507.631252455561  delta_E= -4.55e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198471e+04 1.83549445e+04 2.23221082e+03 4.57635811e+02
 1.22068414e+02 3.76634411e+01 4.74138852e+00 3.91204798e-01
 8.59852436e+00 4.90836986e-01]
E = -507.6312524555607
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471326        1
[INPUT] 0    0    [1    /1   ]  18354.9444883        1
[INPUT] 0    0    [1    /1   ]  2232.21081799        1
[INPUT] 0    0    [1    /1   ]  457.635810814        1
[INPUT] 0    0    [1    /1   ]  122.068413766        1
[INPUT] 0    0    [1    /1   ]  37.6634411237        1
[INPUT] 0    0    [1    /1   ]  4.74138851885        1
[INPUT] 0    0    [1    /1   ]  0.391204797953       1
[INPUT] 1    0    [1    /1   ]  8.59852436329        1
[INPUT] 1    0    [1    /1   ]  0.490836985837       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84713256371, 1.0]], [0, [18354.94448829312, 1.0]], [0, [2232.210817986324, 1.0]], [0, [457.63581081392005, 1.0]], [0, [122.06841376634159, 1.0]], [0, [37.663441123734025, 1.0]], [0, [4.741388518850282, 1.0]], [0, [0.39120479795259344, 1.0]], [1, [8.598524363287494, 1.0]], [1, [0.4908369858370472, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84713256]
bas 1, expnt(s) = [18354.94448829]
bas 2, expnt(s) = [2232.21081799]
bas 3, expnt(s) = [457.63581081]
bas 4, expnt(s) = [122.06841377]
bas 5, expnt(s) = [37.66344112]
bas 6, expnt(s) = [4.74138852]
bas 7, expnt(s) = [0.3912048]
bas 8, expnt(s) = [8.59852436]
bas 9, expnt(s) = [0.49083699]
CPU time:        63.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549445e+04 3.98409633e+03
 2.23221082e+03 8.20477037e+02 4.57635811e+02 2.49979863e+02
 1.22068414e+02 9.27828055e+01 3.76634411e+01 3.84109476e+01
 4.74138852e+00 8.11790906e+00 3.91204798e-01 1.24973564e+00
 8.59852436e+00 4.29550571e+01 4.90836986e-01 1.19854955e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319984069001606
cond(S) = 44.454095766185326
E1 = -689.0439918319603  E_coul = 184.91466359124664
init E= -504.129328240714
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680913179504508  LUMO = 85.3508948469844
  mo_energy =
[-1.21646679e+02 -1.32809158e+01 -7.62164326e+00 -7.62164326e+00
 -7.62164326e+00 -1.65070147e+00 -6.80913180e-01 -6.80913180e-01
 -6.80913180e-01  8.53508948e+01  6.79090691e+02  3.93773032e+03
  2.99908601e+04  1.63988300e+05]
E1 = -706.5750238469137  E_coul = 198.94419722866056
cycle= 1 E= -507.630826618253  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407127
diis-c [-0.16575204  1.        ]
  HOMO = -0.236301665372505  LUMO = 86.6841827533068
  mo_energy =
[-1.20258893e+02 -1.22528370e+01 -6.65313624e+00 -6.65313624e+00
 -6.65313624e+00 -1.16348105e+00 -2.36301665e-01 -2.36301665e-01
 -2.36301665e-01  8.66841828e+01  6.80460951e+02  3.93898132e+03
  2.99919472e+04  1.63989312e+05]
E1 = -706.543743859476  E_coul = 198.9124915130975
cycle= 2 E= -507.631252346378  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502857
diis-c [-2.52318803e-05 -5.74309249e-04  1.00057431e+00]
  HOMO = -0.236475839734659  LUMO = 86.6806742420467
  mo_energy =
[-1.20267496e+02 -1.22540190e+01 -6.65496706e+00 -6.65496706e+00
 -6.65496706e+00 -1.16354543e+00 -2.36475840e-01 -2.36475840e-01
 -2.36475840e-01  8.66806742e+01  6.80450400e+02  3.93896549e+03
  2.99919280e+04  1.63989292e+05]
E1 = -706.5433067092316  E_coul = 198.91205425371075
cycle= 3 E= -507.631252455521  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125898
diis-c [-3.85225531e-10  3.51136806e-05 -2.53648144e-02  1.02532970e+00]
  HOMO = -0.236478021838091  LUMO = 86.6806300858361
  mo_energy =
[-1.20267608e+02 -1.22540346e+01 -6.65499368e+00 -6.65499368e+00
 -6.65499368e+00 -1.16354608e+00 -2.36478022e-01 -2.36478022e-01
 -2.36478022e-01  8.66806301e+01  6.80450284e+02  3.93896534e+03
  2.99919278e+04  1.63989292e+05]
E1 = -706.5432995678804  E_coul = 198.91204711232015
cycle= 4 E= -507.63125245556  delta_E= -3.93e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432995678804  E_coul = 198.91204711232015
  HOMO = -0.236478005974687  LUMO = 86.6806304164193
  mo_energy =
[-1.20267608e+02 -1.22540345e+01 -6.65499352e+00 -6.65499352e+00
 -6.65499352e+00 -1.16354607e+00 -2.36478006e-01 -2.36478006e-01
 -2.36478006e-01  8.66806304e+01  6.80450285e+02  3.93896534e+03
  2.99919278e+04  1.63989292e+05]
E1 = -706.5432996038363  E_coul = 198.91204714827566
Extra cycle  E= -507.631252455561  delta_E= -4.55e-13  |g|= 6.26e-09  |ddm|= 1.59e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.454095766185326
E1 = -706.5432996038363  E_coul = 198.91204714827566
init E= -507.631252455561
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236478005789717  LUMO = 86.6806304204458
  mo_energy =
[-1.20267607e+02 -1.22540345e+01 -6.65499352e+00 -6.65499352e+00
 -6.65499352e+00 -1.16354607e+00 -2.36478006e-01 -2.36478006e-01
 -2.36478006e-01  8.66806304e+01  6.80450285e+02  3.93896534e+03
  2.99919278e+04  1.63989292e+05]
E1 = -706.5432996043776  E_coul = 198.91204714881758
cycle= 1 E= -507.63125245556  delta_E= 6.82e-13  |g|= 1.25e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5432996043776  E_coul = 198.91204714881758
  HOMO = -0.236478005787127  LUMO = 86.6806304205039
  mo_energy =
[-1.20267607e+02 -1.22540345e+01 -6.65499352e+00 -6.65499352e+00
 -6.65499352e+00 -1.16354607e+00 -2.36478006e-01 -2.36478006e-01
 -2.36478006e-01  8.66806304e+01  6.80450285e+02  3.93896534e+03
  2.99919278e+04  1.63989292e+05]
E1 = -706.543299604387  E_coul = 198.91204714882699
Extra cycle  E= -507.63125245556  delta_E=    0  |g|= 6.29e-12  |ddm|= 4.35e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198471e+04 1.83549445e+04 2.23221082e+03 4.57635811e+02
 1.22068414e+02 3.76634411e+01 4.74138852e+00 3.91204798e-01
 8.59852436e+00 4.90836986e-01]
grad_E = [-2.20551066e-07  7.40492659e-06 -2.13884431e-05  3.18389195e-05
  2.08259110e-05  1.55498121e-05  2.84305552e-05 -2.84431529e-05
 -7.10397604e-05 -3.07308965e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471349        1
[INPUT] 0    0    [1    /1   ]  18354.9444107        1
[INPUT] 0    0    [1    /1   ]  2232.21089198        1
[INPUT] 0    0    [1    /1   ]  457.637895209        1
[INPUT] 0    0    [1    /1   ]  122.060104505        1
[INPUT] 0    0    [1    /1   ]  37.6612639738        1
[INPUT] 0    0    [1    /1   ]  4.74141762311        1
[INPUT] 0    0    [1    /1   ]  0.391205276118       1
[INPUT] 1    0    [1    /1   ]  8.59844719073        1
[INPUT] 1    0    [1    /1   ]  0.490828451409       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8471349238, 1.0]], [0, [18354.94441071849, 1.0]], [0, [2232.2108919794823, 1.0]], [0, [457.6378952094547, 1.0]], [0, [122.06010450458713, 1.0]], [0, [37.66126397380492, 1.0]], [0, [4.741417623111621, 1.0]], [0, [0.39120527611801037, 1.0]], [1, [8.598447190725395, 1.0]], [1, [0.49082845140884057, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84713492]
bas 1, expnt(s) = [18354.94441072]
bas 2, expnt(s) = [2232.21089198]
bas 3, expnt(s) = [457.63789521]
bas 4, expnt(s) = [122.0601045]
bas 5, expnt(s) = [37.66126397]
bas 6, expnt(s) = [4.74141762]
bas 7, expnt(s) = [0.39120528]
bas 8, expnt(s) = [8.59844719]
bas 9, expnt(s) = [0.49082845]
CPU time:        66.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549444e+04 3.98409632e+03
 2.23221089e+03 8.20477057e+02 4.57637895e+02 2.49980717e+02
 1.22060105e+02 9.27780686e+01 3.76612640e+01 3.84092824e+01
 4.74141762e+00 8.11794644e+00 3.91205276e-01 1.24973678e+00
 8.59844719e+00 4.29545751e+01 4.90828451e-01 1.19852350e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319994936752302
cond(S) = 44.451173493546854
E1 = -689.0433786020379  E_coul = 184.91407299493966
init E= -504.129305607098
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680922280463625  LUMO = 85.3427828723453
  mo_energy =
[-1.21646772e+02 -1.32809637e+01 -7.62168142e+00 -7.62168142e+00
 -7.62168142e+00 -1.65071140e+00 -6.80922280e-01 -6.80922280e-01
 -6.80922280e-01  8.53427829e+01  6.79061761e+02  3.93769936e+03
  2.99908358e+04  1.63988279e+05]
E1 = -706.5742711189386  E_coul = 198.94344443206535
cycle= 1 E= -507.630826686873  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407122
diis-c [-0.16574823  1.        ]
  HOMO = -0.236320444949085  LUMO = 86.6760506031592
  mo_energy =
[-1.20258992e+02 -1.22528958e+01 -6.65318475e+00 -6.65318475e+00
 -6.65318475e+00 -1.16349724e+00 -2.36320445e-01 -2.36320445e-01
 -2.36320445e-01  8.66760506e+01  6.80432014e+02  3.93895035e+03
  2.99919229e+04  1.63989291e+05]
E1 = -706.5429877750548  E_coul = 198.91173532077997
cycle= 2 E= -507.631252454275  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502876
diis-c [-2.52339411e-05 -5.73894129e-04  1.00057389e+00]
  HOMO = -0.236494636989363  LUMO = 86.6725419102941
  mo_energy =
[-1.20267597e+02 -1.22540779e+01 -6.65501579e+00 -6.65501579e+00
 -6.65501579e+00 -1.16356164e+00 -2.36494637e-01 -2.36494637e-01
 -2.36494637e-01  8.66725419e+01  6.80421462e+02  3.93893452e+03
  2.99919037e+04  1.63989271e+05]
E1 = -706.5425505527547  E_coul = 198.91129798931675
cycle= 3 E= -507.631252563438  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125912
diis-c [-3.85316044e-10  3.51146373e-05 -2.53665754e-02  1.02533146e+00]
  HOMO = -0.236496819500563  LUMO = 86.6724977468767
  mo_energy =
[-1.20267709e+02 -1.22540935e+01 -6.65504243e+00 -6.65504243e+00
 -6.65504243e+00 -1.16356228e+00 -2.36496820e-01 -2.36496820e-01
 -2.36496820e-01  8.66724977e+01  6.80421347e+02  3.93893438e+03
  2.99919036e+04  1.63989271e+05]
E1 = -706.5425434096  E_coul = 198.91129084612297
cycle= 4 E= -507.631252563477  delta_E= -3.9e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5425434096  E_coul = 198.91129084612297
  HOMO = -0.236496803633236  LUMO = 86.6724980775115
  mo_energy =
[-1.20267708e+02 -1.22540934e+01 -6.65504227e+00 -6.65504227e+00
 -6.65504227e+00 -1.16356228e+00 -2.36496804e-01 -2.36496804e-01
 -2.36496804e-01  8.66724981e+01  6.80421348e+02  3.93893438e+03
  2.99919036e+04  1.63989271e+05]
E1 = -706.5425434455658  E_coul = 198.91129088208885
Extra cycle  E= -507.631252563477  delta_E= 5.68e-14  |g|= 6.26e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198471e+04 1.83549444e+04 2.23221089e+03 4.57637895e+02
 1.22060105e+02 3.76612640e+01 4.74141762e+00 3.91205276e-01
 8.59844719e+00 4.90828451e-01]
E = -507.63125256347695
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471349        1
[INPUT] 0    0    [1    /1   ]  18354.9444107        1
[INPUT] 0    0    [1    /1   ]  2232.21089198        1
[INPUT] 0    0    [1    /1   ]  457.637895209        1
[INPUT] 0    0    [1    /1   ]  122.060104505        1
[INPUT] 0    0    [1    /1   ]  37.6612639738        1
[INPUT] 0    0    [1    /1   ]  4.74141762311        1
[INPUT] 0    0    [1    /1   ]  0.391205276118       1
[INPUT] 1    0    [1    /1   ]  8.59844719073        1
[INPUT] 1    0    [1    /1   ]  0.490828451409       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8471349238, 1.0]], [0, [18354.94441071849, 1.0]], [0, [2232.2108919794823, 1.0]], [0, [457.6378952094547, 1.0]], [0, [122.06010450458713, 1.0]], [0, [37.66126397380492, 1.0]], [0, [4.741417623111621, 1.0]], [0, [0.39120527611801037, 1.0]], [1, [8.598447190725395, 1.0]], [1, [0.49082845140884057, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84713492]
bas 1, expnt(s) = [18354.94441072]
bas 2, expnt(s) = [2232.21089198]
bas 3, expnt(s) = [457.63789521]
bas 4, expnt(s) = [122.0601045]
bas 5, expnt(s) = [37.66126397]
bas 6, expnt(s) = [4.74141762]
bas 7, expnt(s) = [0.39120528]
bas 8, expnt(s) = [8.59844719]
bas 9, expnt(s) = [0.49082845]
CPU time:        67.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198471e+04 1.12687341e+04 1.83549444e+04 3.98409632e+03
 2.23221089e+03 8.20477057e+02 4.57637895e+02 2.49980717e+02
 1.22060105e+02 9.27780686e+01 3.76612640e+01 3.84092824e+01
 4.74141762e+00 8.11794644e+00 3.91205276e-01 1.24973678e+00
 8.59844719e+00 4.29545751e+01 4.90828451e-01 1.19852350e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319994936752302
cond(S) = 44.451173493546854
E1 = -689.0433786020379  E_coul = 184.91407299493966
init E= -504.129305607098
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680922280463625  LUMO = 85.3427828723453
  mo_energy =
[-1.21646772e+02 -1.32809637e+01 -7.62168142e+00 -7.62168142e+00
 -7.62168142e+00 -1.65071140e+00 -6.80922280e-01 -6.80922280e-01
 -6.80922280e-01  8.53427829e+01  6.79061761e+02  3.93769936e+03
  2.99908358e+04  1.63988279e+05]
E1 = -706.5742711189386  E_coul = 198.94344443206535
cycle= 1 E= -507.630826686873  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407122
diis-c [-0.16574823  1.        ]
  HOMO = -0.236320444949085  LUMO = 86.6760506031592
  mo_energy =
[-1.20258992e+02 -1.22528958e+01 -6.65318475e+00 -6.65318475e+00
 -6.65318475e+00 -1.16349724e+00 -2.36320445e-01 -2.36320445e-01
 -2.36320445e-01  8.66760506e+01  6.80432014e+02  3.93895035e+03
  2.99919229e+04  1.63989291e+05]
E1 = -706.5429877750548  E_coul = 198.91173532077997
cycle= 2 E= -507.631252454275  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502876
diis-c [-2.52339411e-05 -5.73894129e-04  1.00057389e+00]
  HOMO = -0.236494636989363  LUMO = 86.6725419102941
  mo_energy =
[-1.20267597e+02 -1.22540779e+01 -6.65501579e+00 -6.65501579e+00
 -6.65501579e+00 -1.16356164e+00 -2.36494637e-01 -2.36494637e-01
 -2.36494637e-01  8.66725419e+01  6.80421462e+02  3.93893452e+03
  2.99919037e+04  1.63989271e+05]
E1 = -706.5425505527547  E_coul = 198.91129798931675
cycle= 3 E= -507.631252563438  delta_E= -1.09e-07  |g|= 9.4e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125912
diis-c [-3.85316044e-10  3.51146373e-05 -2.53665754e-02  1.02533146e+00]
  HOMO = -0.236496819500563  LUMO = 86.6724977468767
  mo_energy =
[-1.20267709e+02 -1.22540935e+01 -6.65504243e+00 -6.65504243e+00
 -6.65504243e+00 -1.16356228e+00 -2.36496820e-01 -2.36496820e-01
 -2.36496820e-01  8.66724977e+01  6.80421347e+02  3.93893438e+03
  2.99919036e+04  1.63989271e+05]
E1 = -706.5425434096  E_coul = 198.91129084612297
cycle= 4 E= -507.631252563477  delta_E= -3.9e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5425434096  E_coul = 198.91129084612297
  HOMO = -0.236496803633236  LUMO = 86.6724980775115
  mo_energy =
[-1.20267708e+02 -1.22540934e+01 -6.65504227e+00 -6.65504227e+00
 -6.65504227e+00 -1.16356228e+00 -2.36496804e-01 -2.36496804e-01
 -2.36496804e-01  8.66724981e+01  6.80421348e+02  3.93893438e+03
  2.99919036e+04  1.63989271e+05]
E1 = -706.5425434455658  E_coul = 198.91129088208885
Extra cycle  E= -507.631252563477  delta_E= 5.68e-14  |g|= 6.26e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.451173493546854
E1 = -706.5425434455658  E_coul = 198.91129088208885
init E= -507.631252563477
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236496803448215  LUMO = 86.6724980815384
  mo_energy =
[-1.20267708e+02 -1.22540934e+01 -6.65504227e+00 -6.65504227e+00
 -6.65504227e+00 -1.16356228e+00 -2.36496803e-01 -2.36496803e-01
 -2.36496803e-01  8.66724981e+01  6.80421348e+02  3.93893438e+03
  2.99919036e+04  1.63989271e+05]
E1 = -706.5425434461082  E_coul = 198.91129088263116
cycle= 1 E= -507.631252563477  delta_E= -5.68e-14  |g|= 1.24e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5425434461082  E_coul = 198.91129088263116
  HOMO = -0.236496803445616  LUMO = 86.6724980815972
  mo_energy =
[-1.20267708e+02 -1.22540934e+01 -6.65504227e+00 -6.65504227e+00
 -6.65504227e+00 -1.16356228e+00 -2.36496803e-01 -2.36496803e-01
 -2.36496803e-01  8.66724981e+01  6.80421348e+02  3.93893438e+03
  2.99919036e+04  1.63989271e+05]
E1 = -706.5425434461176  E_coul = 198.91129088264046
Extra cycle  E= -507.631252563477  delta_E= -1.71e-13  |g|= 5.11e-12  |ddm|= 4.34e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [7.34198471e+04 1.83549444e+04 2.23221089e+03 4.57637895e+02
 1.22060105e+02 3.76612640e+01 4.74141762e+00 3.91205276e-01
 8.59844719e+00 4.90828451e-01]
grad_E = [-2.20550988e-07  7.40575195e-06 -2.14706537e-05  3.33089607e-05
  1.44202586e-05  2.08141528e-05  5.04601977e-05 -5.04582319e-05
 -1.25982298e-04 -5.45011707e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471633        1
[INPUT] 0    0    [1    /1   ]  18354.9434594        1
[INPUT] 0    0    [1    /1   ]  2232.21342942        1
[INPUT] 0    0    [1    /1   ]  457.637212224        1
[INPUT] 0    0    [1    /1   ]  122.045787729        1
[INPUT] 0    0    [1    /1   ]  37.6575922141        1
[INPUT] 0    0    [1    /1   ]  4.74146288262        1
[INPUT] 0    0    [1    /1   ]  0.3912060084         1
[INPUT] 1    0    [1    /1   ]  8.59832522427        1
[INPUT] 1    0    [1    /1   ]  0.490814963545       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84716332785, 1.0]], [0, [18354.94345939073, 1.0]], [0, [2232.213429416834, 1.0]], [0, [457.6372122240144, 1.0]], [0, [122.0457877291571, 1.0]], [0, [37.65759221407455, 1.0]], [0, [4.741462882623781, 1.0]], [0, [0.39120600839958053, 1.0]], [1, [8.598325224273706, 1.0]], [1, [0.49081496354491616, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84716333]
bas 1, expnt(s) = [18354.94345939]
bas 2, expnt(s) = [2232.21342942]
bas 3, expnt(s) = [457.63721222]
bas 4, expnt(s) = [122.04578773]
bas 5, expnt(s) = [37.65759221]
bas 6, expnt(s) = [4.74146288]
bas 7, expnt(s) = [0.39120601]
bas 8, expnt(s) = [8.59832522]
bas 9, expnt(s) = [0.49081496]
CPU time:        70.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+04 1.12687341e+04 1.83549435e+04 3.98409616e+03
 2.23221343e+03 8.20477757e+02 4.57637212e+02 2.49980437e+02
 1.22045788e+02 9.27699068e+01 3.76575922e+01 3.84064738e+01
 4.74146288e+00 8.11800455e+00 3.91206008e-01 1.24973854e+00
 8.59832522e+00 4.29538135e+01 4.90814964e-01 1.19848233e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32001213775618
cond(S) = 44.44652460198145
E1 = -689.0424125910483  E_coul = 184.9131384533053
init E= -504.129274137743
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680936666723606  LUMO = 85.328979397211
  mo_energy =
[-1.21646920e+02 -1.32810395e+01 -7.62174184e+00 -7.62174184e+00
 -7.62174184e+00 -1.65072706e+00 -6.80936667e-01 -6.80936667e-01
 -6.80936667e-01  8.53289794e+01  6.79008708e+02  3.93763596e+03
  2.99907872e+04  1.63988236e+05]
E1 = -706.5730801930423  E_coul = 198.94225329882815
cycle= 1 E= -507.630826894214  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407115
diis-c [-0.16574242  1.        ]
  HOMO = -0.236350148914577  LUMO = 86.662214037491
  mo_energy =
[-1.20259150e+02 -1.22529887e+01 -6.65326155e+00 -6.65326155e+00
 -6.65326155e+00 -1.16352284e+00 -2.36350149e-01 -2.36350149e-01
 -2.36350149e-01  8.66622140e+01  6.80378951e+02  3.93888693e+03
  2.99918743e+04  1.63989248e+05]
E1 = -706.5417910260114  E_coul = 198.91053829486052
cycle= 2 E= -507.631252731151  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00502911
diis-c [-2.52375947e-05 -5.73193455e-04  1.00057319e+00]
  HOMO = -0.236524372381789  LUMO = 86.6587050237232
  mo_energy =
[-1.20267756e+02 -1.22541711e+01 -6.65509299e+00 -6.65509299e+00
 -6.65509299e+00 -1.16358725e+00 -2.36524372e-01 -2.36524372e-01
 -2.36524372e-01  8.66587050e+01  6.80368398e+02  3.93887109e+03
  2.99918551e+04  1.63989228e+05]
E1 = -706.5413536794033  E_coul = 198.91010083905377
cycle= 3 E= -507.63125284035  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125936
diis-c [-3.85470098e-10  3.51162741e-05 -2.53695465e-02  1.02533443e+00]
  HOMO = -0.236526555603878  LUMO = 86.6586608478855
  mo_energy =
[-1.20267868e+02 -1.22541867e+01 -6.65511963e+00 -6.65511963e+00
 -6.65511963e+00 -1.16358790e+00 -2.36526556e-01 -2.36526556e-01
 -2.36526556e-01  8.66586608e+01  6.80368282e+02  3.93887095e+03
  2.99918549e+04  1.63989228e+05]
E1 = -706.5413465331565  E_coul = 198.91009369276784
cycle= 4 E= -507.631252840389  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5413465331565  E_coul = 198.91009369276784
  HOMO = -0.236526539729791  LUMO = 86.6586611786088
  mo_energy =
[-1.20267867e+02 -1.22541866e+01 -6.65511947e+00 -6.65511947e+00
 -6.65511947e+00 -1.16358789e+00 -2.36526540e-01 -2.36526540e-01
 -2.36526540e-01  8.66586612e+01  6.80368283e+02  3.93887095e+03
  2.99918549e+04  1.63989228e+05]
E1 = -706.5413465691402  E_coul = 198.91009372875132
Extra cycle  E= -507.631252840389  delta_E= -2.27e-13  |g|= 6.26e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198472e+04 1.83549435e+04 2.23221343e+03 4.57637212e+02
 1.22045788e+02 3.76575922e+01 4.74146288e+00 3.91206008e-01
 8.59832522e+00 4.90814964e-01]
E = -507.6312528403888
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8471633        1
[INPUT] 0    0    [1    /1   ]  18354.9434594        1
[INPUT] 0    0    [1    /1   ]  2232.21342942        1
[INPUT] 0    0    [1    /1   ]  457.637212224        1
[INPUT] 0    0    [1    /1   ]  122.045787729        1
[INPUT] 0    0    [1    /1   ]  37.6575922141        1
[INPUT] 0    0    [1    /1   ]  4.74146288262        1
[INPUT] 0    0    [1    /1   ]  0.3912060084         1
[INPUT] 1    0    [1    /1   ]  8.59832522427        1
[INPUT] 1    0    [1    /1   ]  0.490814963545       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84716332785, 1.0]], [0, [18354.94345939073, 1.0]], [0, [2232.213429416834, 1.0]], [0, [457.6372122240144, 1.0]], [0, [122.0457877291571, 1.0]], [0, [37.65759221407455, 1.0]], [0, [4.741462882623781, 1.0]], [0, [0.39120600839958053, 1.0]], [1, [8.598325224273706, 1.0]], [1, [0.49081496354491616, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84716333]
bas 1, expnt(s) = [18354.94345939]
bas 2, expnt(s) = [2232.21342942]
bas 3, expnt(s) = [457.63721222]
bas 4, expnt(s) = [122.04578773]
bas 5, expnt(s) = [37.65759221]
bas 6, expnt(s) = [4.74146288]
bas 7, expnt(s) = [0.39120601]
bas 8, expnt(s) = [8.59832522]
bas 9, expnt(s) = [0.49081496]
CPU time:        70.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198472e+04 1.12687341e+04 1.83549435e+04 3.98409616e+03
 2.23221343e+03 8.20477757e+02 4.57637212e+02 2.49980437e+02
 1.22045788e+02 9.27699068e+01 3.76575922e+01 3.84064738e+01
 4.74146288e+00 8.11800455e+00 3.91206008e-01 1.24973854e+00
 8.59832522e+00 4.29538135e+01 4.90814964e-01 1.19848233e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32001213775618
cond(S) = 44.44652460198145
E1 = -689.0424125910483  E_coul = 184.9131384533053
init E= -504.129274137743
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680936666723606  LUMO = 85.328979397211
  mo_energy =
[-1.21646920e+02 -1.32810395e+01 -7.62174184e+00 -7.62174184e+00
 -7.62174184e+00 -1.65072706e+00 -6.80936667e-01 -6.80936667e-01
 -6.80936667e-01  8.53289794e+01  6.79008708e+02  3.93763596e+03
  2.99907872e+04  1.63988236e+05]
E1 = -706.5730801930423  E_coul = 198.94225329882815
cycle= 1 E= -507.630826894214  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407115
diis-c [-0.16574242  1.        ]
  HOMO = -0.236350148914577  LUMO = 86.662214037491
  mo_energy =
[-1.20259150e+02 -1.22529887e+01 -6.65326155e+00 -6.65326155e+00
 -6.65326155e+00 -1.16352284e+00 -2.36350149e-01 -2.36350149e-01
 -2.36350149e-01  8.66622140e+01  6.80378951e+02  3.93888693e+03
  2.99918743e+04  1.63989248e+05]
E1 = -706.5417910260114  E_coul = 198.91053829486052
cycle= 2 E= -507.631252731151  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502911
diis-c [-2.52375947e-05 -5.73193455e-04  1.00057319e+00]
  HOMO = -0.236524372381789  LUMO = 86.6587050237232
  mo_energy =
[-1.20267756e+02 -1.22541711e+01 -6.65509299e+00 -6.65509299e+00
 -6.65509299e+00 -1.16358725e+00 -2.36524372e-01 -2.36524372e-01
 -2.36524372e-01  8.66587050e+01  6.80368398e+02  3.93887109e+03
  2.99918551e+04  1.63989228e+05]
E1 = -706.5413536794033  E_coul = 198.91010083905377
cycle= 3 E= -507.63125284035  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125936
diis-c [-3.85470098e-10  3.51162741e-05 -2.53695465e-02  1.02533443e+00]
  HOMO = -0.236526555603878  LUMO = 86.6586608478855
  mo_energy =
[-1.20267868e+02 -1.22541867e+01 -6.65511963e+00 -6.65511963e+00
 -6.65511963e+00 -1.16358790e+00 -2.36526556e-01 -2.36526556e-01
 -2.36526556e-01  8.66586608e+01  6.80368282e+02  3.93887095e+03
  2.99918549e+04  1.63989228e+05]
E1 = -706.5413465331565  E_coul = 198.91009369276784
cycle= 4 E= -507.631252840389  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.4e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5413465331565  E_coul = 198.91009369276784
  HOMO = -0.236526539729791  LUMO = 86.6586611786088
  mo_energy =
[-1.20267867e+02 -1.22541866e+01 -6.65511947e+00 -6.65511947e+00
 -6.65511947e+00 -1.16358789e+00 -2.36526540e-01 -2.36526540e-01
 -2.36526540e-01  8.66586612e+01  6.80368283e+02  3.93887095e+03
  2.99918549e+04  1.63989228e+05]
E1 = -706.5413465691402  E_coul = 198.91009372875132
Extra cycle  E= -507.631252840389  delta_E= -2.27e-13  |g|= 6.26e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.44652460198145
E1 = -706.5413465691402  E_coul = 198.91009372875132
init E= -507.631252840389
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236526539544674  LUMO = 86.6586611826373
  mo_energy =
[-1.20267867e+02 -1.22541866e+01 -6.65511947e+00 -6.65511947e+00
 -6.65511947e+00 -1.16358789e+00 -2.36526540e-01 -2.36526540e-01
 -2.36526540e-01  8.66586612e+01  6.80368283e+02  3.93887095e+03
  2.99918549e+04  1.63989228e+05]
E1 = -706.5413465696827  E_coul = 198.910093729294
cycle= 1 E= -507.631252840389  delta_E= 1.14e-13  |g|= 1.25e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5413465696827  E_coul = 198.910093729294
  HOMO = -0.23652653954207  LUMO = 86.6586611826956
  mo_energy =
[-1.20267867e+02 -1.22541866e+01 -6.65511947e+00 -6.65511947e+00
 -6.65511947e+00 -1.16358789e+00 -2.36526540e-01 -2.36526540e-01
 -2.36526540e-01  8.66586612e+01  6.80368283e+02  3.93887095e+03
  2.99918549e+04  1.63989228e+05]
E1 = -706.5413465696917  E_coul = 198.91009372930313
Extra cycle  E= -507.631252840389  delta_E= 1.71e-13  |g|= 9.93e-12  |ddm|= 4.33e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198472e+04 1.83549435e+04 2.23221343e+03 4.57637212e+02
 1.22045788e+02 3.76575922e+01 4.74146288e+00 3.91206008e-01
 8.59832522e+00 4.90814964e-01]
grad_E = [-2.20550929e-07  7.40688433e-06 -2.15886290e-05  3.55732978e-05
  4.24115463e-06  2.91259256e-05  8.52985700e-05 -8.52714923e-05
 -2.12862075e-04 -9.20889383e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8472737        1
[INPUT] 0    0    [1    /1   ]  18354.9397555        1
[INPUT] 0    0    [1    /1   ]  2232.22386062        1
[INPUT] 0    0    [1    /1   ]  457.625664391        1
[INPUT] 0    0    [1    /1   ]  122.019711157        1
[INPUT] 0    0    [1    /1   ]  37.6510958316        1
[INPUT] 0    0    [1    /1   ]  4.74153354279        1
[INPUT] 0    0    [1    /1   ]  0.391207121666       1
[INPUT] 1    0    [1    /1   ]  8.59812956939        1
[INPUT] 1    0    [1    /1   ]  0.490793327552       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84727373267, 1.0]], [0, [18354.93975552919, 1.0]], [0, [2232.22386062217, 1.0]], [0, [457.6256643905084, 1.0]], [0, [122.01971115687647, 1.0]], [0, [37.6510958315569, 1.0]], [0, [4.741533542794164, 1.0]], [0, [0.39120712166609206, 1.0]], [1, [8.598129569390922, 1.0]], [1, [0.49079332755213273, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84727373]
bas 1, expnt(s) = [18354.93975553]
bas 2, expnt(s) = [2232.22386062]
bas 3, expnt(s) = [457.62566439]
bas 4, expnt(s) = [122.01971116]
bas 5, expnt(s) = [37.65109583]
bas 6, expnt(s) = [4.74153354]
bas 7, expnt(s) = [0.39120712]
bas 8, expnt(s) = [8.59812957]
bas 9, expnt(s) = [0.49079333]
CPU time:        73.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198473e+04 1.12687341e+04 1.83549398e+04 3.98409556e+03
 2.23222386e+03 8.20480632e+02 4.57625664e+02 2.49975706e+02
 1.22019711e+02 9.27550404e+01 3.76510958e+01 3.84015045e+01
 4.74153354e+00 8.11809529e+00 3.91207122e-01 1.24974120e+00
 8.59812957e+00 4.29525918e+01 4.90793328e-01 1.19841629e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32003979735657
cond(S) = 44.43898799463457
E1 = -689.0408712939001  E_coul = 184.91163630176908
init E= -504.129234992131
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680959751737726  LUMO = 85.3042557973503
  mo_energy =
[-1.21647157e+02 -1.32811611e+01 -7.62183907e+00 -7.62183907e+00
 -7.62183907e+00 -1.65075209e+00 -6.80959752e-01 -6.80959752e-01
 -6.80959752e-01  8.53042558e+01  6.78904348e+02  3.93749620e+03
  2.99906821e+04  1.63988141e+05]
E1 = -706.5711663904193  E_coul = 198.94033890439383
cycle= 1 E= -507.630827486026  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407104
diis-c [-0.16573363  1.        ]
  HOMO = -0.236397861880355  LUMO = 86.6374341922546
  mo_energy =
[-1.20259403e+02 -1.22531379e+01 -6.65338511e+00 -6.65338511e+00
 -6.65338511e+00 -1.16356394e+00 -2.36397862e-01 -2.36397862e-01
 -2.36397862e-01  8.66374342e+01  6.80274574e+02  3.93874715e+03
  2.99917692e+04  1.63989153e+05]
E1 = -706.5398665197504  E_coul = 198.9086130656443
cycle= 2 E= -507.631253454106  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502978
diis-c [-2.52444969e-05 -5.71952278e-04  1.00057195e+00]
  HOMO = -0.236572144926462  LUMO = 86.6339245747216
  mo_energy =
[-1.20268012e+02 -1.22543208e+01 -6.65521727e+00 -6.65521727e+00
 -6.65521727e+00 -1.16362838e+00 -2.36572145e-01 -2.36572145e-01
 -2.36572145e-01  8.66339246e+01  6.80264018e+02  3.93873131e+03
  2.99917500e+04  1.63989133e+05]
E1 = -706.5394289463228  E_coul = 198.90817538295207
cycle= 3 E= -507.631253563371  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125979
diis-c [-3.85749230e-10  3.51187829e-05 -2.53748028e-02  1.02533968e+00]
  HOMO = -0.23657432946365  LUMO = 86.6338803762477
  mo_energy =
[-1.20268124e+02 -1.22543364e+01 -6.65524393e+00 -6.65524393e+00
 -6.65524393e+00 -1.16362902e+00 -2.36574329e-01 -2.36574329e-01
 -2.36574329e-01  8.66338804e+01  6.80263903e+02  3.93873116e+03
  2.99917498e+04  1.63989133e+05]
E1 = -706.5394217944789  E_coul = 198.90816823106917
cycle= 4 E= -507.63125356341  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5394217944789  E_coul = 198.90816823106917
  HOMO = -0.236574313577167  LUMO = 86.6338807071303
  mo_energy =
[-1.20268123e+02 -1.22543363e+01 -6.65524377e+00 -6.65524377e+00
 -6.65524377e+00 -1.16362902e+00 -2.36574314e-01 -2.36574314e-01
 -2.36574314e-01  8.66338807e+01  6.80263904e+02  3.93873116e+03
  2.99917498e+04  1.63989133e+05]
E1 = -706.5394218304942  E_coul = 198.90816826708436
Extra cycle  E= -507.63125356341  delta_E= -1.14e-13  |g|= 6.27e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198473e+04 1.83549398e+04 2.23222386e+03 4.57625664e+02
 1.22019711e+02 3.76510958e+01 4.74153354e+00 3.91207122e-01
 8.59812957e+00 4.90793328e-01]
E = -507.63125356340987
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8472737        1
[INPUT] 0    0    [1    /1   ]  18354.9397555        1
[INPUT] 0    0    [1    /1   ]  2232.22386062        1
[INPUT] 0    0    [1    /1   ]  457.625664391        1
[INPUT] 0    0    [1    /1   ]  122.019711157        1
[INPUT] 0    0    [1    /1   ]  37.6510958316        1
[INPUT] 0    0    [1    /1   ]  4.74153354279        1
[INPUT] 0    0    [1    /1   ]  0.391207121666       1
[INPUT] 1    0    [1    /1   ]  8.59812956939        1
[INPUT] 1    0    [1    /1   ]  0.490793327552       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84727373267, 1.0]], [0, [18354.93975552919, 1.0]], [0, [2232.22386062217, 1.0]], [0, [457.6256643905084, 1.0]], [0, [122.01971115687647, 1.0]], [0, [37.6510958315569, 1.0]], [0, [4.741533542794164, 1.0]], [0, [0.39120712166609206, 1.0]], [1, [8.598129569390922, 1.0]], [1, [0.49079332755213273, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84727373]
bas 1, expnt(s) = [18354.93975553]
bas 2, expnt(s) = [2232.22386062]
bas 3, expnt(s) = [457.62566439]
bas 4, expnt(s) = [122.01971116]
bas 5, expnt(s) = [37.65109583]
bas 6, expnt(s) = [4.74153354]
bas 7, expnt(s) = [0.39120712]
bas 8, expnt(s) = [8.59812957]
bas 9, expnt(s) = [0.49079333]
CPU time:        74.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198473e+04 1.12687341e+04 1.83549398e+04 3.98409556e+03
 2.23222386e+03 8.20480632e+02 4.57625664e+02 2.49975706e+02
 1.22019711e+02 9.27550404e+01 3.76510958e+01 3.84015045e+01
 4.74153354e+00 8.11809529e+00 3.91207122e-01 1.24974120e+00
 8.59812957e+00 4.29525918e+01 4.90793328e-01 1.19841629e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32003979735657
cond(S) = 44.43898799463457
E1 = -689.0408712939001  E_coul = 184.91163630176908
init E= -504.129234992131
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680959751737726  LUMO = 85.3042557973503
  mo_energy =
[-1.21647157e+02 -1.32811611e+01 -7.62183907e+00 -7.62183907e+00
 -7.62183907e+00 -1.65075209e+00 -6.80959752e-01 -6.80959752e-01
 -6.80959752e-01  8.53042558e+01  6.78904348e+02  3.93749620e+03
  2.99906821e+04  1.63988141e+05]
E1 = -706.5711663904193  E_coul = 198.94033890439383
cycle= 1 E= -507.630827486026  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407104
diis-c [-0.16573363  1.        ]
  HOMO = -0.236397861880355  LUMO = 86.6374341922546
  mo_energy =
[-1.20259403e+02 -1.22531379e+01 -6.65338511e+00 -6.65338511e+00
 -6.65338511e+00 -1.16356394e+00 -2.36397862e-01 -2.36397862e-01
 -2.36397862e-01  8.66374342e+01  6.80274574e+02  3.93874715e+03
  2.99917692e+04  1.63989153e+05]
E1 = -706.5398665197504  E_coul = 198.9086130656443
cycle= 2 E= -507.631253454106  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00502978
diis-c [-2.52444969e-05 -5.71952278e-04  1.00057195e+00]
  HOMO = -0.236572144926462  LUMO = 86.6339245747216
  mo_energy =
[-1.20268012e+02 -1.22543208e+01 -6.65521727e+00 -6.65521727e+00
 -6.65521727e+00 -1.16362838e+00 -2.36572145e-01 -2.36572145e-01
 -2.36572145e-01  8.66339246e+01  6.80264018e+02  3.93873131e+03
  2.99917500e+04  1.63989133e+05]
E1 = -706.5394289463228  E_coul = 198.90817538295207
cycle= 3 E= -507.631253563371  delta_E= -1.09e-07  |g|= 9.41e-05  |ddm|= 0.0002
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125979
diis-c [-3.85749230e-10  3.51187829e-05 -2.53748028e-02  1.02533968e+00]
  HOMO = -0.23657432946365  LUMO = 86.6338803762477
  mo_energy =
[-1.20268124e+02 -1.22543364e+01 -6.65524393e+00 -6.65524393e+00
 -6.65524393e+00 -1.16362902e+00 -2.36574329e-01 -2.36574329e-01
 -2.36574329e-01  8.66338804e+01  6.80263903e+02  3.93873116e+03
  2.99917498e+04  1.63989133e+05]
E1 = -706.5394217944789  E_coul = 198.90816823106917
cycle= 4 E= -507.63125356341  delta_E= -3.91e-11  |g|= 3.65e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5394217944789  E_coul = 198.90816823106917
  HOMO = -0.236574313577167  LUMO = 86.6338807071303
  mo_energy =
[-1.20268123e+02 -1.22543363e+01 -6.65524377e+00 -6.65524377e+00
 -6.65524377e+00 -1.16362902e+00 -2.36574314e-01 -2.36574314e-01
 -2.36574314e-01  8.66338807e+01  6.80263904e+02  3.93873116e+03
  2.99917498e+04  1.63989133e+05]
E1 = -706.5394218304942  E_coul = 198.90816826708436
Extra cycle  E= -507.63125356341  delta_E= -1.14e-13  |g|= 6.27e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.43898799463457
E1 = -706.5394218304942  E_coul = 198.90816826708436
init E= -507.63125356341
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.236574313391882  LUMO = 86.6338807111619
  mo_energy =
[-1.20268123e+02 -1.22543363e+01 -6.65524377e+00 -6.65524377e+00
 -6.65524377e+00 -1.16362902e+00 -2.36574313e-01 -2.36574313e-01
 -2.36574313e-01  8.66338807e+01  6.80263904e+02  3.93873116e+03
  2.99917498e+04  1.63989133e+05]
E1 = -706.5394218310377  E_coul = 198.90816826762767
cycle= 1 E= -507.63125356341  delta_E= -1.14e-13  |g|= 1.25e-10  |ddm|= 2.46e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5394218310377  E_coul = 198.90816826762767
  HOMO = -0.236574313389277  LUMO = 86.6338807112196
  mo_energy =
[-1.20268123e+02 -1.22543363e+01 -6.65524377e+00 -6.65524377e+00
 -6.65524377e+00 -1.16362902e+00 -2.36574313e-01 -2.36574313e-01
 -2.36574313e-01  8.66338807e+01  6.80263904e+02  3.93873116e+03
  2.99917498e+04  1.63989133e+05]
E1 = -706.5394218310469  E_coul = 198.90816826763705
Extra cycle  E= -507.63125356341  delta_E= 1.71e-13  |g|= 6.51e-12  |ddm|= 4.36e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [7.34198473e+04 1.83549398e+04 2.23222386e+03 4.57625664e+02
 1.22019711e+02 3.76510958e+01 4.74153354e+00 3.91207122e-01
 8.59812957e+00 4.90793328e-01]
grad_E = [-2.20551003e-07  7.40824840e-06 -2.17464571e-05  3.90507911e-05
 -1.22336685e-05  4.24401288e-05  1.41243282e-04 -1.41170823e-04
 -3.52353390e-04 -1.52438940e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8476141        1
[INPUT] 0    0    [1    /1   ]  18354.9283314        1
[INPUT] 0    0    [1    /1   ]  2232.25662821        1
[INPUT] 0    0    [1    /1   ]  457.580484541        1
[INPUT] 0    0    [1    /1   ]  121.971193569        1
[INPUT] 0    0    [1    /1   ]  37.639447933         1
[INPUT] 0    0    [1    /1   ]  4.74163794474        1
[INPUT] 0    0    [1    /1   ]  0.391208686605       1
[INPUT] 1    0    [1    /1   ]  8.5978264104         1
[INPUT] 1    0    [1    /1   ]  0.490759805856       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84761406659, 1.0]], [0, [18354.92833142122, 1.0]], [0, [2232.256628206479, 1.0]], [0, [457.58048454129903, 1.0]], [0, [121.97119356921783, 1.0]], [0, [37.63944793296653, 1.0]], [0, [4.741637944737429, 1.0]], [0, [0.39120868660461944, 1.0]], [1, [8.597826410403883, 1.0]], [1, [0.49075980585607437, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84761407]
bas 1, expnt(s) = [18354.92833142]
bas 2, expnt(s) = [2232.25662821]
bas 3, expnt(s) = [457.58048454]
bas 4, expnt(s) = [121.97119357]
bas 5, expnt(s) = [37.63944793]
bas 6, expnt(s) = [4.74163794]
bas 7, expnt(s) = [0.39120869]
bas 8, expnt(s) = [8.59782641]
bas 9, expnt(s) = [0.49075981]
CPU time:        77.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198476e+04 1.12687342e+04 1.83549283e+04 3.98409370e+03
 2.23225663e+03 8.20489665e+02 4.57580485e+02 2.49957196e+02
 1.21971194e+02 9.27273780e+01 3.76394479e+01 3.83925941e+01
 4.74163794e+00 8.11822935e+00 3.91208687e-01 1.24974495e+00
 8.59782641e+00 4.29506987e+01 4.90759806e-01 1.19831398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320082828863853
cond(S) = 44.42710620333055
E1 = -689.0385051008748  E_coul = 184.90930102768354
init E= -504.129204073191
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680995538552842  LUMO = 85.2592169141925
  mo_energy =
[-1.21647525e+02 -1.32813499e+01 -7.62199049e+00 -7.62199049e+00
 -7.62199049e+00 -1.65079066e+00 -6.80995539e-01 -6.80995539e-01
 -6.80995539e-01  8.52592169e+01  6.78692398e+02  3.93718035e+03
  2.99904486e+04  1.63987927e+05]
E1 = -706.5681923748291  E_coul = 198.93736329954936
cycle= 1 E= -507.63082907528  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407089
diis-c [-0.16572139  1.        ]
  HOMO = -0.23647195440372  LUMO = 86.5922999065108
  mo_energy =
[-1.20259797e+02 -1.22533697e+01 -6.65357746e+00 -6.65357746e+00
 -6.65357746e+00 -1.16362768e+00 -2.36471954e-01 -2.36471954e-01
 -2.36471954e-01  8.65922999e+01  6.80062601e+02  3.93843126e+03
  2.99915356e+04  1.63988940e+05]
E1 = -706.536872360694  E_coul = 198.9056170629395
cycle= 2 E= -507.631255297754  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503107
diis-c [-2.52579109e-05 -5.69722825e-04  1.00056972e+00]
  HOMO = -0.236646353708644  LUMO = 86.5887891212108
  mo_energy =
[-1.20268410e+02 -1.22545535e+01 -6.65541098e+00 -6.65541098e+00
 -6.65541098e+00 -1.16369217e+00 -2.36646354e-01 -2.36646354e-01
 -2.36646354e-01  8.65887891e+01  6.80052041e+02  3.93841541e+03
  2.99915164e+04  1.63988920e+05]
E1 = -706.5364343641888  E_coul = 198.90517895704642
cycle= 3 E= -507.631255407142  delta_E= -1.09e-07  |g|= 9.42e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126059
diis-c [-3.86260816e-10  3.51230249e-05 -2.53842353e-02  1.02534911e+00]
  HOMO = -0.236648540740213  LUMO = 86.5887448805797
  mo_energy =
[-1.20268523e+02 -1.22545691e+01 -6.65543768e+00 -6.65543768e+00
 -6.65543768e+00 -1.16369282e+00 -2.36648541e-01 -2.36648541e-01
 -2.36648541e-01  8.65887449e+01  6.80051925e+02  3.93841526e+03
  2.99915163e+04  1.63988919e+05]
E1 = -706.5364272020057  E_coul = 198.90517179482407
cycle= 4 E= -507.631255407182  delta_E= -3.92e-11  |g|= 3.66e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5364272020057  E_coul = 198.90517179482407
  HOMO = -0.236648524830601  LUMO = 86.5887452117581
  mo_energy =
[-1.20268522e+02 -1.22545690e+01 -6.65543752e+00 -6.65543752e+00
 -6.65543752e+00 -1.16369282e+00 -2.36648525e-01 -2.36648525e-01
 -2.36648525e-01  8.65887452e+01  6.80051926e+02  3.93841527e+03
  2.99915163e+04  1.63988919e+05]
E1 = -706.5364272380801  E_coul = 198.90517183089833
Extra cycle  E= -507.631255407182  delta_E= -1.71e-13  |g|= 6.28e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [7.34198476e+04 1.83549283e+04 2.23225663e+03 4.57580485e+02
 1.21971194e+02 3.76394479e+01 4.74163794e+00 3.91208687e-01
 8.59782641e+00 4.90759806e-01]
E = -507.6312554071818
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8476141        1
[INPUT] 0    0    [1    /1   ]  18354.9283314        1
[INPUT] 0    0    [1    /1   ]  2232.25662821        1
[INPUT] 0    0    [1    /1   ]  457.580484541        1
[INPUT] 0    0    [1    /1   ]  121.971193569        1
[INPUT] 0    0    [1    /1   ]  37.639447933         1
[INPUT] 0    0    [1    /1   ]  4.74163794474        1
[INPUT] 0    0    [1    /1   ]  0.391208686605       1
[INPUT] 1    0    [1    /1   ]  8.5978264104         1
[INPUT] 1    0    [1    /1   ]  0.490759805856       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.84761406659, 1.0]], [0, [18354.92833142122, 1.0]], [0, [2232.256628206479, 1.0]], [0, [457.58048454129903, 1.0]], [0, [121.97119356921783, 1.0]], [0, [37.63944793296653, 1.0]], [0, [4.741637944737429, 1.0]], [0, [0.39120868660461944, 1.0]], [1, [8.597826410403883, 1.0]], [1, [0.49075980585607437, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84761407]
bas 1, expnt(s) = [18354.92833142]
bas 2, expnt(s) = [2232.25662821]
bas 3, expnt(s) = [457.58048454]
bas 4, expnt(s) = [121.97119357]
bas 5, expnt(s) = [37.63944793]
bas 6, expnt(s) = [4.74163794]
bas 7, expnt(s) = [0.39120869]
bas 8, expnt(s) = [8.59782641]
bas 9, expnt(s) = [0.49075981]
CPU time:        77.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198476e+04 1.12687342e+04 1.83549283e+04 3.98409370e+03
 2.23225663e+03 8.20489665e+02 4.57580485e+02 2.49957196e+02
 1.21971194e+02 9.27273780e+01 3.76394479e+01 3.83925941e+01
 4.74163794e+00 8.11822935e+00 3.91208687e-01 1.24974495e+00
 8.59782641e+00 4.29506987e+01 4.90759806e-01 1.19831398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320082828863853
cond(S) = 44.42710620333055
E1 = -689.0385051008748  E_coul = 184.90930102768354
init E= -504.129204073191
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680995538552842  LUMO = 85.2592169141925
  mo_energy =
[-1.21647525e+02 -1.32813499e+01 -7.62199049e+00 -7.62199049e+00
 -7.62199049e+00 -1.65079066e+00 -6.80995539e-01 -6.80995539e-01
 -6.80995539e-01  8.52592169e+01  6.78692398e+02  3.93718035e+03
  2.99904486e+04  1.63987927e+05]
E1 = -706.5681923748291  E_coul = 198.93736329954936
cycle= 1 E= -507.63082907528  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407089
diis-c [-0.16572139  1.        ]
  HOMO = -0.23647195440372  LUMO = 86.5922999065108
  mo_energy =
[-1.20259797e+02 -1.22533697e+01 -6.65357746e+00 -6.65357746e+00
 -6.65357746e+00 -1.16362768e+00 -2.36471954e-01 -2.36471954e-01
 -2.36471954e-01  8.65922999e+01  6.80062601e+02  3.93843126e+03
  2.99915356e+04  1.63988940e+05]
E1 = -706.536872360694  E_coul = 198.9056170629395
cycle= 2 E= -507.631255297754  delta_E= -0.000426  |g|= 0.00473  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503107
diis-c [-2.52579109e-05 -5.69722825e-04  1.00056972e+00]
  HOMO = -0.236646353708644  LUMO = 86.5887891212108
  mo_energy =
[-1.20268410e+02 -1.22545535e+01 -6.65541098e+00 -6.65541098e+00
 -6.65541098e+00 -1.16369217e+00 -2.36646354e-01 -2.36646354e-01
 -2.36646354e-01  8.65887891e+01  6.80052041e+02  3.93841541e+03
  2.99915164e+04  1.63988920e+05]
E1 = -706.5364343641888  E_coul = 198.90517895704642
cycle= 3 E= -507.631255407142  delta_E= -1.09e-07  |g|= 9.42e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126059
diis-c [-3.86260816e-10  3.51230249e-05 -2.53842353e-02  1.02534911e+00]
  HOMO = -0.236648540740213  LUMO = 86.5887448805797
  mo_energy =
[-1.20268523e+02 -1.22545691e+01 -6.65543768e+00 -6.65543768e+00
 -6.65543768e+00 -1.16369282e+00 -2.36648541e-01 -2.36648541e-01
 -2.36648541e-01  8.65887449e+01  6.80051925e+02  3.93841526e+03
  2.99915163e+04  1.63988919e+05]
E1 = -706.5364272020057  E_coul = 198.90517179482407
cycle= 4 E= -507.631255407182  delta_E= -3.92e-11  |g|= 3.66e-07  |ddm|= 3.41e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5364272020057  E_coul = 198.90517179482407
  HOMO = -0.236648524830601  LUMO = 86.5887452117581
  mo_energy =
[-1.20268522e+02 -1.22545690e+01 -6.65543752e+00 -6.65543752e+00
 -6.65543752e+00 -1.16369282e+00 -2.36648525e-01 -2.36648525e-01
 -2.36648525e-01  8.65887452e+01  6.80051926e+02  3.93841527e+03
  2.99915163e+04  1.63988919e+05]
E1 = -706.5364272380801  E_coul = 198.90517183089833
Extra cycle  E= -507.631255407182  delta_E= -1.71e-13  |g|= 6.28e-09  |ddm|= 1.6e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.42710620333055
E1 = -706.5364272380801  E_coul = 198.90517183089833
init E= -507.631255407182
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236648524644988  LUMO = 86.5887452157967
  mo_energy =
[-1.20268522e+02 -1.22545690e+01 -6.65543752e+00 -6.65543752e+00
 -6.65543752e+00 -1.16369282e+00 -2.36648525e-01 -2.36648525e-01
 -2.36648525e-01  8.65887452e+01  6.80051926e+02  3.93841527e+03
  2.99915163e+04  1.63988919e+05]
E1 = -706.5364272386242  E_coul = 198.90517183144243
cycle= 1 E= -507.631255407182  delta_E=    0  |g|= 1.24e-10  |ddm|= 2.47e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5364272386242  E_coul = 198.90517183144243
  HOMO = -0.236648524642373  LUMO = 86.5887452158535
  mo_energy =
[-1.20268522e+02 -1.22545690e+01 -6.65543752e+00 -6.65543752e+00
 -6.65543752e+00 -1.16369282e+00 -2.36648525e-01 -2.36648525e-01
 -2.36648525e-01  8.65887452e+01  6.80051926e+02  3.93841527e+03
  2.99915163e+04  1.63988919e+05]
E1 = -706.5364272386333  E_coul = 198.90517183145178
Extra cycle  E= -507.631255407182  delta_E= 2.27e-13  |g|= 1.59e-11  |ddm|= 4.41e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198476e+04 1.83549283e+04 2.23225663e+03 4.57580485e+02
 1.21971194e+02 3.76394479e+01 4.74163794e+00 3.91208687e-01
 8.59782641e+00 4.90759806e-01]
grad_E = [-2.20551573e-07  7.40917980e-06 -2.19089298e-05  4.40352580e-05
 -3.81440844e-05  6.30282033e-05  2.28090978e-04 -2.27927253e-04
 -5.68802332e-04 -2.46085182e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8485508        1
[INPUT] 0    0    [1    /1   ]  18354.8968802        1
[INPUT] 0    0    [1    /1   ]  2232.34761861        1
[INPUT] 0    0    [1    /1   ]  457.443549389        1
[INPUT] 0    0    [1    /1   ]  121.879519894        1
[INPUT] 0    0    [1    /1   ]  37.618391254         1
[INPUT] 0    0    [1    /1   ]  4.74177631956        1
[INPUT] 0    0    [1    /1   ]  0.391210543586       1
[INPUT] 1    0    [1    /1   ]  8.59738592827        1
[INPUT] 1    0    [1    /1   ]  0.490711106402       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8485507677, 1.0]], [0, [18354.896880203738, 1.0]], [0, [2232.347618606073, 1.0]], [0, [457.443549388769, 1.0]], [0, [121.87951989439217, 1.0]], [0, [37.61839125402525, 1.0]], [0, [4.741776319557717, 1.0]], [0, [0.3912105435862869, 1.0]], [1, [8.59738592826613, 1.0]], [1, [0.4907111064022327, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84855077]
bas 1, expnt(s) = [18354.8968802]
bas 2, expnt(s) = [2232.34761861]
bas 3, expnt(s) = [457.44354939]
bas 4, expnt(s) = [121.87951989]
bas 5, expnt(s) = [37.61839125]
bas 6, expnt(s) = [4.74177632]
bas 7, expnt(s) = [0.39121054]
bas 8, expnt(s) = [8.59738593]
bas 9, expnt(s) = [0.49071111]
CPU time:        80.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198486e+04 1.12687343e+04 1.83548969e+04 3.98408858e+03
 2.23234762e+03 8.20514748e+02 4.57443549e+02 2.49901093e+02
 1.21879520e+02 9.26751026e+01 3.76183913e+01 3.83764845e+01
 4.74177632e+00 8.11840703e+00 3.91210544e-01 1.24974940e+00
 8.59738593e+00 4.29479482e+01 4.90711106e-01 1.19816534e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32014581560154
cond(S) = 44.40931637039097
E1 = -689.035125315634  E_coul = 184.90588792428397
init E= -504.12923739135
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.681047578308608  LUMO = 85.1762086426552
  mo_energy =
[-1.21648066e+02 -1.32816247e+01 -7.62221251e+00 -7.62221251e+00
 -7.62221251e+00 -1.65084610e+00 -6.81047578e-01 -6.81047578e-01
 -6.81047578e-01  8.51762086e+01  6.78253219e+02  3.93646206e+03
  2.99899247e+04  1.63987442e+05]
E1 = -706.5638489400911  E_coul = 198.9330158266172
cycle= 1 E= -507.630833113474  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407072
diis-c [-0.16570721  1.        ]
  HOMO = -0.23658003540686  LUMO = 86.5091314516398
  mo_energy =
[-1.20260373e+02 -1.22537079e+01 -6.65385931e+00 -6.65385931e+00
 -6.65385931e+00 -1.16372047e+00 -2.36580035e-01 -2.36580035e-01
 -2.36580035e-01  8.65091315e+01  6.79623391e+02  3.93771289e+03
  2.99910117e+04  1.63988454e+05]
E1 = -706.5324903474162  E_coul = 198.90123050792334
cycle= 2 E= -507.631259839493  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503363
diis-c [-2.52845095e-05 -5.65683810e-04  1.00056568e+00]
  HOMO = -0.236754666298474  LUMO = 86.5056183626344
  mo_energy =
[-1.20268995e+02 -1.22548935e+01 -6.65569543e+00 -6.65569543e+00
 -6.65569543e+00 -1.16378507e+00 -2.36754666e-01 -2.36754666e-01
 -2.36754666e-01  8.65056184e+01  6.79612821e+02  3.93769703e+03
  2.99909924e+04  1.63988434e+05]
E1 = -706.5320515486419  E_coul = 198.9007915995248
cycle= 3 E= -507.631259949117  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012621
diis-c [-3.87214491e-10  3.51296470e-05 -2.54012987e-02  1.02536617e+00]
  HOMO = -0.236756858150581  LUMO = 86.5055740422213
  mo_energy =
[-1.20269107e+02 -1.22549092e+01 -6.65572218e+00 -6.65572218e+00
 -6.65572218e+00 -1.16378571e+00 -2.36756858e-01 -2.36756858e-01
 -2.36756858e-01  8.65055740e+01  6.79612705e+02  3.93769688e+03
  2.99909923e+04  1.63988434e+05]
E1 = -706.53204436707  E_coul = 198.90078441791306
cycle= 4 E= -507.631259949157  delta_E= -3.98e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.53204436707  E_coul = 198.90078441791306
  HOMO = -0.236756842196971  LUMO = 86.5055743739579
  mo_energy =
[-1.20269106e+02 -1.22549091e+01 -6.65572203e+00 -6.65572203e+00
 -6.65572203e+00 -1.16378571e+00 -2.36756842e-01 -2.36756842e-01
 -2.36756842e-01  8.65055744e+01  6.79612706e+02  3.93769688e+03
  2.99909923e+04  1.63988434e+05]
E1 = -706.5320444032538  E_coul = 198.90078445409694
Extra cycle  E= -507.631259949157  delta_E= -5.68e-14  |g|= 6.29e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [7.34198486e+04 1.83548969e+04 2.23234762e+03 4.57443549e+02
 1.21879520e+02 3.76183913e+01 4.74177632e+00 3.91210544e-01
 8.59738593e+00 4.90711106e-01]
E = -507.6312599491569
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8485508        1
[INPUT] 0    0    [1    /1   ]  18354.8968802        1
[INPUT] 0    0    [1    /1   ]  2232.34761861        1
[INPUT] 0    0    [1    /1   ]  457.443549389        1
[INPUT] 0    0    [1    /1   ]  121.879519894        1
[INPUT] 0    0    [1    /1   ]  37.618391254         1
[INPUT] 0    0    [1    /1   ]  4.74177631956        1
[INPUT] 0    0    [1    /1   ]  0.391210543586       1
[INPUT] 1    0    [1    /1   ]  8.59738592827        1
[INPUT] 1    0    [1    /1   ]  0.490711106402       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8485507677, 1.0]], [0, [18354.896880203738, 1.0]], [0, [2232.347618606073, 1.0]], [0, [457.443549388769, 1.0]], [0, [121.87951989439217, 1.0]], [0, [37.61839125402525, 1.0]], [0, [4.741776319557717, 1.0]], [0, [0.3912105435862869, 1.0]], [1, [8.59738592826613, 1.0]], [1, [0.4907111064022327, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.84855077]
bas 1, expnt(s) = [18354.8968802]
bas 2, expnt(s) = [2232.34761861]
bas 3, expnt(s) = [457.44354939]
bas 4, expnt(s) = [121.87951989]
bas 5, expnt(s) = [37.61839125]
bas 6, expnt(s) = [4.74177632]
bas 7, expnt(s) = [0.39121054]
bas 8, expnt(s) = [8.59738593]
bas 9, expnt(s) = [0.49071111]
CPU time:        81.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198486e+04 1.12687343e+04 1.83548969e+04 3.98408858e+03
 2.23234762e+03 8.20514748e+02 4.57443549e+02 2.49901093e+02
 1.21879520e+02 9.26751026e+01 3.76183913e+01 3.83764845e+01
 4.74177632e+00 8.11840703e+00 3.91210544e-01 1.24974940e+00
 8.59738593e+00 4.29479482e+01 4.90711106e-01 1.19816534e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32014581560154
cond(S) = 44.40931637039097
E1 = -689.035125315634  E_coul = 184.90588792428397
init E= -504.12923739135
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681047578308608  LUMO = 85.1762086426552
  mo_energy =
[-1.21648066e+02 -1.32816247e+01 -7.62221251e+00 -7.62221251e+00
 -7.62221251e+00 -1.65084610e+00 -6.81047578e-01 -6.81047578e-01
 -6.81047578e-01  8.51762086e+01  6.78253219e+02  3.93646206e+03
  2.99899247e+04  1.63987442e+05]
E1 = -706.5638489400911  E_coul = 198.9330158266172
cycle= 1 E= -507.630833113474  delta_E= -3.5  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407072
diis-c [-0.16570721  1.        ]
  HOMO = -0.23658003540686  LUMO = 86.5091314516398
  mo_energy =
[-1.20260373e+02 -1.22537079e+01 -6.65385931e+00 -6.65385931e+00
 -6.65385931e+00 -1.16372047e+00 -2.36580035e-01 -2.36580035e-01
 -2.36580035e-01  8.65091315e+01  6.79623391e+02  3.93771289e+03
  2.99910117e+04  1.63988454e+05]
E1 = -706.5324903474162  E_coul = 198.90123050792334
cycle= 2 E= -507.631259839493  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503363
diis-c [-2.52845095e-05 -5.65683810e-04  1.00056568e+00]
  HOMO = -0.236754666298474  LUMO = 86.5056183626344
  mo_energy =
[-1.20268995e+02 -1.22548935e+01 -6.65569543e+00 -6.65569543e+00
 -6.65569543e+00 -1.16378507e+00 -2.36754666e-01 -2.36754666e-01
 -2.36754666e-01  8.65056184e+01  6.79612821e+02  3.93769703e+03
  2.99909924e+04  1.63988434e+05]
E1 = -706.5320515486419  E_coul = 198.9007915995248
cycle= 3 E= -507.631259949117  delta_E= -1.1e-07  |g|= 9.43e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012621
diis-c [-3.87214491e-10  3.51296470e-05 -2.54012987e-02  1.02536617e+00]
  HOMO = -0.236756858150581  LUMO = 86.5055740422213
  mo_energy =
[-1.20269107e+02 -1.22549092e+01 -6.65572218e+00 -6.65572218e+00
 -6.65572218e+00 -1.16378571e+00 -2.36756858e-01 -2.36756858e-01
 -2.36756858e-01  8.65055740e+01  6.79612705e+02  3.93769688e+03
  2.99909923e+04  1.63988434e+05]
E1 = -706.53204436707  E_coul = 198.90078441791306
cycle= 4 E= -507.631259949157  delta_E= -3.98e-11  |g|= 3.66e-07  |ddm|= 3.42e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.53204436707  E_coul = 198.90078441791306
  HOMO = -0.236756842196971  LUMO = 86.5055743739579
  mo_energy =
[-1.20269106e+02 -1.22549091e+01 -6.65572203e+00 -6.65572203e+00
 -6.65572203e+00 -1.16378571e+00 -2.36756842e-01 -2.36756842e-01
 -2.36756842e-01  8.65055744e+01  6.79612706e+02  3.93769688e+03
  2.99909923e+04  1.63988434e+05]
E1 = -706.5320444032538  E_coul = 198.90078445409694
Extra cycle  E= -507.631259949157  delta_E= -5.68e-14  |g|= 6.29e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.40931637039097
E1 = -706.5320444032538  E_coul = 198.90078445409694
init E= -507.631259949157
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236756842010741  LUMO = 86.5055743780049
  mo_energy =
[-1.20269106e+02 -1.22549091e+01 -6.65572202e+00 -6.65572202e+00
 -6.65572202e+00 -1.16378571e+00 -2.36756842e-01 -2.36756842e-01
 -2.36756842e-01  8.65055744e+01  6.79612706e+02  3.93769688e+03
  2.99909923e+04  1.63988434e+05]
E1 = -706.5320444037999  E_coul = 198.90078445464314
cycle= 1 E= -507.631259949157  delta_E= 1.71e-13  |g|= 1.24e-10  |ddm|= 2.48e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5320444037999  E_coul = 198.90078445464314
  HOMO = -0.23675684200812  LUMO = 86.5055743780626
  mo_energy =
[-1.20269106e+02 -1.22549091e+01 -6.65572202e+00 -6.65572202e+00
 -6.65572202e+00 -1.16378571e+00 -2.36756842e-01 -2.36756842e-01
 -2.36756842e-01  8.65055744e+01  6.79612706e+02  3.93769688e+03
  2.99909923e+04  1.63988434e+05]
E1 = -706.5320444038093  E_coul = 198.90078445465255
Extra cycle  E= -507.631259949157  delta_E=    0  |g|= 1.23e-11  |ddm|= 4.4e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [7.34198486e+04 1.83548969e+04 2.23234762e+03 4.57443549e+02
 1.21879520e+02 3.76183913e+01 4.74177632e+00 3.91210544e-01
 8.59738593e+00 4.90711106e-01]
grad_E = [-2.20553594e-07  7.40744011e-06 -2.19302304e-05  5.02219710e-05
 -7.67948244e-05  9.28576096e-05  3.54753670e-04 -3.54368554e-04
 -8.84099405e-04 -3.82501310e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8508272        1
[INPUT] 0    0    [1    /1   ]  18354.8204339        1
[INPUT] 0    0    [1    /1   ]  2232.56985659        1
[INPUT] 0    0    [1    /1   ]  457.093408977        1
[INPUT] 0    0    [1    /1   ]  121.714458293        1
[INPUT] 0    0    [1    /1   ]  37.5823751834        1
[INPUT] 0    0    [1    /1   ]  4.7419070513         1
[INPUT] 0    0    [1    /1   ]  0.391211681706       1
[INPUT] 1    0    [1    /1   ]  8.59685846639        1
[INPUT] 1    0    [1    /1   ]  0.490652808804       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8508271876, 1.0]], [0, [18354.820433901972, 1.0]], [0, [2232.5698565892753, 1.0]], [0, [457.0934089767919, 1.0]], [0, [121.7144582928552, 1.0]], [0, [37.582375183374815, 1.0]], [0, [4.741907051300302, 1.0]], [0, [0.3912116817056863, 1.0]], [1, [8.596858466392536, 1.0]], [1, [0.49065280880363865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.85082719]
bas 1, expnt(s) = [18354.8204339]
bas 2, expnt(s) = [2232.56985659]
bas 3, expnt(s) = [457.09340898]
bas 4, expnt(s) = [121.71445829]
bas 5, expnt(s) = [37.58237518]
bas 6, expnt(s) = [4.74190705]
bas 7, expnt(s) = [0.39121168]
bas 8, expnt(s) = [8.59685847]
bas 9, expnt(s) = [0.49065281]
CPU time:        85.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198508e+04 1.12687345e+04 1.83548204e+04 3.98407614e+03
 2.23256986e+03 8.20576012e+02 4.57093409e+02 2.49757618e+02
 1.21714458e+02 9.25809541e+01 3.75823752e+01 3.83489248e+01
 4.74190705e+00 8.11857490e+00 3.91211682e-01 1.24975213e+00
 8.59685847e+00 4.29446545e+01 4.90652809e-01 1.19798741e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320222495725325
cond(S) = 44.386658882210824
E1 = -689.031233003354  E_coul = 184.9017496596913
init E= -504.129483343663
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681109990937562  LUMO = 85.0309476711123
  mo_energy =
[-1.21648725e+02 -1.32819556e+01 -7.62248353e+00 -7.62248353e+00
 -7.62248353e+00 -1.65091090e+00 -6.81109991e-01 -6.81109991e-01
 -6.81109991e-01  8.50309477e+01  6.77384690e+02  3.93492453e+03
  2.99888154e+04  1.63986404e+05]
E1 = -706.558590378255  E_coul = 198.92774805745168
cycle= 1 E= -507.630842320803  delta_E= -3.5  |g|= 0.317  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407062
diis-c [-0.16569972  1.        ]
  HOMO = -0.236710583624772  LUMO = 86.3636222169328
  mo_energy =
[-1.20261069e+02 -1.22541167e+01 -6.65420293e+00 -6.65420293e+00
 -6.65420293e+00 -1.16383203e+00 -2.36710584e-01 -2.36710584e-01
 -2.36710584e-01  8.63636222e+01  6.78754832e+02  3.93617525e+03
  2.99899022e+04  1.63987416e+05]
E1 = -706.5271612072921  E_coul = 198.8958912068058
cycle= 2 E= -507.631270000486  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503851
diis-c [-2.53349636e-05 -5.58754886e-04  1.00055875e+00]
  HOMO = -0.236885656021533  LUMO = 86.3601047816963
  mo_energy =
[-1.20269708e+02 -1.22553056e+01 -6.65604381e+00 -6.65604381e+00
 -6.65604381e+00 -1.16389681e+00 -2.36885656e-01 -2.36885656e-01
 -2.36885656e-01  8.63601048e+01  6.78744247e+02  3.93615936e+03
  2.99898830e+04  1.63987396e+05]
E1 = -706.5267209562878  E_coul = 198.8954508457446
cycle= 3 E= -507.631270110543  delta_E= -1.1e-07  |g|= 9.45e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126482
diis-c [-3.88906034e-10  3.51391360e-05 -2.54305199e-02  1.02539538e+00]
  HOMO = -0.236887856784002  LUMO = 86.3600603172116
  mo_energy =
[-1.20269820e+02 -1.22553213e+01 -6.65607067e+00 -6.65607067e+00
 -6.65607067e+00 -1.16389746e+00 -2.36887857e-01 -2.36887857e-01
 -2.36887857e-01  8.63600603e+01  6.78744130e+02  3.93615922e+03
  2.99898828e+04  1.63987396e+05]
E1 = -706.5267137400405  E_coul = 198.8954436294575
cycle= 4 E= -507.631270110583  delta_E= -3.97e-11  |g|= 3.68e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5267137400405  E_coul = 198.8954436294575
  HOMO = -0.236887840750507  LUMO = 86.3600606499525
  mo_energy =
[-1.20269820e+02 -1.22553212e+01 -6.65607051e+00 -6.65607051e+00
 -6.65607051e+00 -1.16389745e+00 -2.36887841e-01 -2.36887841e-01
 -2.36887841e-01  8.63600606e+01  6.78744131e+02  3.93615922e+03
  2.99898828e+04  1.63987396e+05]
E1 = -706.526713776418  E_coul = 198.8954436658353
Extra cycle  E= -507.631270110583  delta_E= 2.27e-13  |g|= 6.32e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [7.34198508e+04 1.83548204e+04 2.23256986e+03 4.57093409e+02
 1.21714458e+02 3.75823752e+01 4.74190705e+00 3.91211682e-01
 8.59685847e+00 4.90652809e-01]
E = -507.6312701105827
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8508272        1
[INPUT] 0    0    [1    /1   ]  18354.8204339        1
[INPUT] 0    0    [1    /1   ]  2232.56985659        1
[INPUT] 0    0    [1    /1   ]  457.093408977        1
[INPUT] 0    0    [1    /1   ]  121.714458293        1
[INPUT] 0    0    [1    /1   ]  37.5823751834        1
[INPUT] 0    0    [1    /1   ]  4.7419070513         1
[INPUT] 0    0    [1    /1   ]  0.391211681706       1
[INPUT] 1    0    [1    /1   ]  8.59685846639        1
[INPUT] 1    0    [1    /1   ]  0.490652808804       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8508271876, 1.0]], [0, [18354.820433901972, 1.0]], [0, [2232.5698565892753, 1.0]], [0, [457.0934089767919, 1.0]], [0, [121.7144582928552, 1.0]], [0, [37.582375183374815, 1.0]], [0, [4.741907051300302, 1.0]], [0, [0.3912116817056863, 1.0]], [1, [8.596858466392536, 1.0]], [1, [0.49065280880363865, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.85082719]
bas 1, expnt(s) = [18354.8204339]
bas 2, expnt(s) = [2232.56985659]
bas 3, expnt(s) = [457.09340898]
bas 4, expnt(s) = [121.71445829]
bas 5, expnt(s) = [37.58237518]
bas 6, expnt(s) = [4.74190705]
bas 7, expnt(s) = [0.39121168]
bas 8, expnt(s) = [8.59685847]
bas 9, expnt(s) = [0.49065281]
CPU time:        85.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198508e+04 1.12687345e+04 1.83548204e+04 3.98407614e+03
 2.23256986e+03 8.20576012e+02 4.57093409e+02 2.49757618e+02
 1.21714458e+02 9.25809541e+01 3.75823752e+01 3.83489248e+01
 4.74190705e+00 8.11857490e+00 3.91211682e-01 1.24975213e+00
 8.59685847e+00 4.29446545e+01 4.90652809e-01 1.19798741e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320222495725325
cond(S) = 44.386658882210824
E1 = -689.031233003354  E_coul = 184.9017496596913
init E= -504.129483343663
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681109990937562  LUMO = 85.0309476711123
  mo_energy =
[-1.21648725e+02 -1.32819556e+01 -7.62248353e+00 -7.62248353e+00
 -7.62248353e+00 -1.65091090e+00 -6.81109991e-01 -6.81109991e-01
 -6.81109991e-01  8.50309477e+01  6.77384690e+02  3.93492453e+03
  2.99888154e+04  1.63986404e+05]
E1 = -706.558590378255  E_coul = 198.92774805745168
cycle= 1 E= -507.630842320803  delta_E= -3.5  |g|= 0.317  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407062
diis-c [-0.16569972  1.        ]
  HOMO = -0.236710583624772  LUMO = 86.3636222169328
  mo_energy =
[-1.20261069e+02 -1.22541167e+01 -6.65420293e+00 -6.65420293e+00
 -6.65420293e+00 -1.16383203e+00 -2.36710584e-01 -2.36710584e-01
 -2.36710584e-01  8.63636222e+01  6.78754832e+02  3.93617525e+03
  2.99899022e+04  1.63987416e+05]
E1 = -706.5271612072921  E_coul = 198.8958912068058
cycle= 2 E= -507.631270000486  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503851
diis-c [-2.53349636e-05 -5.58754886e-04  1.00055875e+00]
  HOMO = -0.236885656021533  LUMO = 86.3601047816963
  mo_energy =
[-1.20269708e+02 -1.22553056e+01 -6.65604381e+00 -6.65604381e+00
 -6.65604381e+00 -1.16389681e+00 -2.36885656e-01 -2.36885656e-01
 -2.36885656e-01  8.63601048e+01  6.78744247e+02  3.93615936e+03
  2.99898830e+04  1.63987396e+05]
E1 = -706.5267209562878  E_coul = 198.8954508457446
cycle= 3 E= -507.631270110543  delta_E= -1.1e-07  |g|= 9.45e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126482
diis-c [-3.88906034e-10  3.51391360e-05 -2.54305199e-02  1.02539538e+00]
  HOMO = -0.236887856784002  LUMO = 86.3600603172116
  mo_energy =
[-1.20269820e+02 -1.22553213e+01 -6.65607067e+00 -6.65607067e+00
 -6.65607067e+00 -1.16389746e+00 -2.36887857e-01 -2.36887857e-01
 -2.36887857e-01  8.63600603e+01  6.78744130e+02  3.93615922e+03
  2.99898828e+04  1.63987396e+05]
E1 = -706.5267137400405  E_coul = 198.8954436294575
cycle= 4 E= -507.631270110583  delta_E= -3.97e-11  |g|= 3.68e-07  |ddm|= 3.44e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5267137400405  E_coul = 198.8954436294575
  HOMO = -0.236887840750507  LUMO = 86.3600606499525
  mo_energy =
[-1.20269820e+02 -1.22553212e+01 -6.65607051e+00 -6.65607051e+00
 -6.65607051e+00 -1.16389745e+00 -2.36887841e-01 -2.36887841e-01
 -2.36887841e-01  8.63600606e+01  6.78744131e+02  3.93615922e+03
  2.99898828e+04  1.63987396e+05]
E1 = -706.526713776418  E_coul = 198.8954436658353
Extra cycle  E= -507.631270110583  delta_E= 2.27e-13  |g|= 6.32e-09  |ddm|= 1.61e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.386658882210824
E1 = -706.526713776418  E_coul = 198.8954436658353
init E= -507.631270110583
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236887840563172  LUMO = 86.3600606540161
  mo_energy =
[-1.20269820e+02 -1.22553212e+01 -6.65607051e+00 -6.65607051e+00
 -6.65607051e+00 -1.16389745e+00 -2.36887841e-01 -2.36887841e-01
 -2.36887841e-01  8.63600607e+01  6.78744131e+02  3.93615922e+03
  2.99898828e+04  1.63987396e+05]
E1 = -706.5267137769677  E_coul = 198.895443666385
cycle= 1 E= -507.631270110583  delta_E= 5.68e-14  |g|= 1.26e-10  |ddm|= 2.49e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5267137769677  E_coul = 198.895443666385
  HOMO = -0.236887840560538  LUMO = 86.3600606540734
  mo_energy =
[-1.20269820e+02 -1.22553212e+01 -6.65607051e+00 -6.65607051e+00
 -6.65607051e+00 -1.16389745e+00 -2.36887841e-01 -2.36887841e-01
 -2.36887841e-01  8.63600607e+01  6.78744131e+02  3.93615922e+03
  2.99898828e+04  1.63987396e+05]
E1 = -706.526713776977  E_coul = 198.89544366639453
Extra cycle  E= -507.631270110582  delta_E= 1.71e-13  |g|= 1.43e-11  |ddm|= 4.45e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [7.34198508e+04 1.83548204e+04 2.23256986e+03 4.57093409e+02
 1.21714458e+02 3.75823752e+01 4.74190705e+00 3.91211682e-01
 8.59685847e+00 4.90652809e-01]
grad_E = [-2.20559019e-07  7.39726113e-06 -2.13926533e-05  5.48516089e-05
 -1.25640940e-04  1.28349121e-04  5.07761271e-04 -5.06782902e-04
 -1.26371176e-03 -5.46750424e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8552723        1
[INPUT] 0    0    [1    /1   ]  18354.6711446        1
[INPUT] 0    0    [1    /1   ]  2233.00527786        1
[INPUT] 0    0    [1    /1   ]  456.386733432        1
[INPUT] 0    0    [1    /1   ]  121.46859786         1
[INPUT] 0    0    [1    /1   ]  37.5320751112        1
[INPUT] 0    0    [1    /1   ]  4.74188874905        1
[INPUT] 0    0    [1    /1   ]  0.391209423914       1
[INPUT] 1    0    [1    /1   ]  8.59654921169        1
[INPUT] 1    0    [1    /1   ]  0.490618672707       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.85527225927, 1.0]], [0, [18354.67114459404, 1.0]], [0, [2233.0052778599625, 1.0]], [0, [456.3867334315746, 1.0]], [0, [121.4685978597515, 1.0]], [0, [37.532075111208364, 1.0]], [0, [4.741888749053676, 1.0]], [0, [0.39120942391406927, 1.0]], [1, [8.596549211691173, 1.0]], [1, [0.4906186727065511, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.85527226]
bas 1, expnt(s) = [18354.67114459]
bas 2, expnt(s) = [2233.00527786]
bas 3, expnt(s) = [456.38673343]
bas 4, expnt(s) = [121.46859786]
bas 5, expnt(s) = [37.53207511]
bas 6, expnt(s) = [4.74188875]
bas 7, expnt(s) = [0.39120942]
bas 8, expnt(s) = [8.59654921]
bas 9, expnt(s) = [0.49061867]
CPU time:        88.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198553e+04 1.12687350e+04 1.83546711e+04 3.98405183e+03
 2.23300528e+03 8.20696037e+02 4.56386733e+02 2.49467964e+02
 1.21468598e+02 9.24406601e+01 3.75320751e+01 3.83104238e+01
 4.74188875e+00 8.11855140e+00 3.91209424e-01 1.24974672e+00
 8.59654921e+00 4.29427235e+01 4.90618673e-01 1.19788323e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32027100757226
cond(S) = 44.3696972389376
E1 = -689.0293725316034  E_coul = 184.89918790108098
init E= -504.130184630522
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681146813566419  LUMO = 84.8220294212853
  mo_energy =
[-1.21649142e+02 -1.32821538e+01 -7.62265626e+00 -7.62265626e+00
 -7.62265626e+00 -1.65094446e+00 -6.81146814e-01 -6.81146814e-01
 -6.81146814e-01  8.48220294e+01  6.75951924e+02  3.93219731e+03
  2.99868665e+04  1.63984566e+05]
E1 = -706.5553501098702  E_coul = 198.92449111955827
cycle= 1 E= -507.630858990312  delta_E= -3.5  |g|= 0.317  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407089
diis-c [-0.16572131  1.        ]
  HOMO = -0.236790240235192  LUMO = 86.1544054475965
  mo_energy =
[-1.20261496e+02 -1.22543667e+01 -6.65442107e+00 -6.65442107e+00
 -6.65442107e+00 -1.16389860e+00 -2.36790240e-01 -2.36790240e-01
 -2.36790240e-01  8.61544054e+01  6.77322070e+02  3.93344791e+03
  2.99879531e+04  1.63985578e+05]
E1 = -706.5238136329021  E_coul = 198.89252545523883
cycle= 2 E= -507.631288177663  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504626
diis-c [-2.54148758e-05 -5.49029322e-04  1.00054903e+00]
  HOMO = -0.236966015625975  LUMO = 86.1508811709964
  mo_energy =
[-1.20270161e+02 -1.22555603e+01 -6.65626917e+00 -6.65626917e+00
 -6.65626917e+00 -1.16396366e+00 -2.36966016e-01 -2.36966016e-01
 -2.36966016e-01  8.61508812e+01  6.77311461e+02  3.93343198e+03
  2.99879338e+04  1.63985558e+05]
E1 = -706.5233712011095  E_coul = 198.89208291273135
cycle= 3 E= -507.631288288378  delta_E= -1.11e-07  |g|= 9.49e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126884
diis-c [-3.91385200e-10  3.51485968e-05 -2.54713812e-02  1.02543623e+00]
  HOMO = -0.236968230107108  LUMO = 86.1508364907783
  mo_energy =
[-1.20270274e+02 -1.22555761e+01 -6.65629619e+00 -6.65629619e+00
 -6.65629619e+00 -1.16396431e+00 -2.36968230e-01 -2.36968230e-01
 -2.36968230e-01  8.61508365e+01  6.77311344e+02  3.93343184e+03
  2.99879337e+04  1.63985558e+05]
E1 = -706.5233639335313  E_coul = 198.89207564511312
cycle= 4 E= -507.631288288418  delta_E= -4e-11  |g|= 3.69e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5233639335313  E_coul = 198.89207564511312
  HOMO = -0.236968213953098  LUMO = 86.1508368250079
  mo_energy =
[-1.20270273e+02 -1.22555760e+01 -6.65629603e+00 -6.65629603e+00
 -6.65629603e+00 -1.16396431e+00 -2.36968214e-01 -2.36968214e-01
 -2.36968214e-01  8.61508368e+01  6.77311345e+02  3.93343184e+03
  2.99879337e+04  1.63985558e+05]
E1 = -706.5233639701939  E_coul = 198.89207568177605
Extra cycle  E= -507.631288288418  delta_E= 3.41e-13  |g|= 6.36e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198553e+04 1.83546711e+04 2.23300528e+03 4.56386733e+02
 1.21468598e+02 3.75320751e+01 4.74188875e+00 3.91209424e-01
 8.59654921e+00 4.90618673e-01]
E = -507.63128828841786
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8552723        1
[INPUT] 0    0    [1    /1   ]  18354.6711446        1
[INPUT] 0    0    [1    /1   ]  2233.00527786        1
[INPUT] 0    0    [1    /1   ]  456.386733432        1
[INPUT] 0    0    [1    /1   ]  121.46859786         1
[INPUT] 0    0    [1    /1   ]  37.5320751112        1
[INPUT] 0    0    [1    /1   ]  4.74188874905        1
[INPUT] 0    0    [1    /1   ]  0.391209423914       1
[INPUT] 1    0    [1    /1   ]  8.59654921169        1
[INPUT] 1    0    [1    /1   ]  0.490618672707       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.85527225927, 1.0]], [0, [18354.67114459404, 1.0]], [0, [2233.0052778599625, 1.0]], [0, [456.3867334315746, 1.0]], [0, [121.4685978597515, 1.0]], [0, [37.532075111208364, 1.0]], [0, [4.741888749053676, 1.0]], [0, [0.39120942391406927, 1.0]], [1, [8.596549211691173, 1.0]], [1, [0.4906186727065511, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.85527226]
bas 1, expnt(s) = [18354.67114459]
bas 2, expnt(s) = [2233.00527786]
bas 3, expnt(s) = [456.38673343]
bas 4, expnt(s) = [121.46859786]
bas 5, expnt(s) = [37.53207511]
bas 6, expnt(s) = [4.74188875]
bas 7, expnt(s) = [0.39120942]
bas 8, expnt(s) = [8.59654921]
bas 9, expnt(s) = [0.49061867]
CPU time:        89.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198553e+04 1.12687350e+04 1.83546711e+04 3.98405183e+03
 2.23300528e+03 8.20696037e+02 4.56386733e+02 2.49467964e+02
 1.21468598e+02 9.24406601e+01 3.75320751e+01 3.83104238e+01
 4.74188875e+00 8.11855140e+00 3.91209424e-01 1.24974672e+00
 8.59654921e+00 4.29427235e+01 4.90618673e-01 1.19788323e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32027100757226
cond(S) = 44.3696972389376
E1 = -689.0293725316034  E_coul = 184.89918790108098
init E= -504.130184630522
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.681146813566419  LUMO = 84.8220294212853
  mo_energy =
[-1.21649142e+02 -1.32821538e+01 -7.62265626e+00 -7.62265626e+00
 -7.62265626e+00 -1.65094446e+00 -6.81146814e-01 -6.81146814e-01
 -6.81146814e-01  8.48220294e+01  6.75951924e+02  3.93219731e+03
  2.99868665e+04  1.63984566e+05]
E1 = -706.5553501098702  E_coul = 198.92449111955827
cycle= 1 E= -507.630858990312  delta_E= -3.5  |g|= 0.317  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407089
diis-c [-0.16572131  1.        ]
  HOMO = -0.236790240235192  LUMO = 86.1544054475965
  mo_energy =
[-1.20261496e+02 -1.22543667e+01 -6.65442107e+00 -6.65442107e+00
 -6.65442107e+00 -1.16389860e+00 -2.36790240e-01 -2.36790240e-01
 -2.36790240e-01  8.61544054e+01  6.77322070e+02  3.93344791e+03
  2.99879531e+04  1.63985578e+05]
E1 = -706.5238136329021  E_coul = 198.89252545523883
cycle= 2 E= -507.631288177663  delta_E= -0.000429  |g|= 0.00475  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00504626
diis-c [-2.54148758e-05 -5.49029322e-04  1.00054903e+00]
  HOMO = -0.236966015625975  LUMO = 86.1508811709964
  mo_energy =
[-1.20270161e+02 -1.22555603e+01 -6.65626917e+00 -6.65626917e+00
 -6.65626917e+00 -1.16396366e+00 -2.36966016e-01 -2.36966016e-01
 -2.36966016e-01  8.61508812e+01  6.77311461e+02  3.93343198e+03
  2.99879338e+04  1.63985558e+05]
E1 = -706.5233712011095  E_coul = 198.89208291273135
cycle= 3 E= -507.631288288378  delta_E= -1.11e-07  |g|= 9.49e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000126884
diis-c [-3.91385200e-10  3.51485968e-05 -2.54713812e-02  1.02543623e+00]
  HOMO = -0.236968230107108  LUMO = 86.1508364907783
  mo_energy =
[-1.20270274e+02 -1.22555761e+01 -6.65629619e+00 -6.65629619e+00
 -6.65629619e+00 -1.16396431e+00 -2.36968230e-01 -2.36968230e-01
 -2.36968230e-01  8.61508365e+01  6.77311344e+02  3.93343184e+03
  2.99879337e+04  1.63985558e+05]
E1 = -706.5233639335313  E_coul = 198.89207564511312
cycle= 4 E= -507.631288288418  delta_E= -4e-11  |g|= 3.69e-07  |ddm|= 3.46e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5233639335313  E_coul = 198.89207564511312
  HOMO = -0.236968213953098  LUMO = 86.1508368250079
  mo_energy =
[-1.20270273e+02 -1.22555760e+01 -6.65629603e+00 -6.65629603e+00
 -6.65629603e+00 -1.16396431e+00 -2.36968214e-01 -2.36968214e-01
 -2.36968214e-01  8.61508368e+01  6.77311345e+02  3.93343184e+03
  2.99879337e+04  1.63985558e+05]
E1 = -706.5233639701939  E_coul = 198.89207568177605
Extra cycle  E= -507.631288288418  delta_E= 3.41e-13  |g|= 6.36e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.3696972389376
E1 = -706.5233639701939  E_coul = 198.89207568177605
init E= -507.631288288418
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.2369682137641  LUMO = 86.1508368290981
  mo_energy =
[-1.20270273e+02 -1.22555760e+01 -6.65629603e+00 -6.65629603e+00
 -6.65629603e+00 -1.16396431e+00 -2.36968214e-01 -2.36968214e-01
 -2.36968214e-01  8.61508368e+01  6.77311345e+02  3.93343184e+03
  2.99879337e+04  1.63985558e+05]
E1 = -706.5233639707494  E_coul = 198.8920756823312
cycle= 1 E= -507.631288288418  delta_E= -3.41e-13  |g|= 1.28e-10  |ddm|= 2.52e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5233639707494  E_coul = 198.8920756823312
  HOMO = -0.236968213761433  LUMO = 86.1508368291566
  mo_energy =
[-1.20270273e+02 -1.22555760e+01 -6.65629603e+00 -6.65629603e+00
 -6.65629603e+00 -1.16396431e+00 -2.36968214e-01 -2.36968214e-01
 -2.36968214e-01  8.61508368e+01  6.77311345e+02  3.93343184e+03
  2.99879337e+04  1.63985558e+05]
E1 = -706.523363970759  E_coul = 198.8920756823406
Extra cycle  E= -507.631288288418  delta_E= -1.71e-13  |g|= 9.29e-12  |ddm|= 4.47e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.18 sec
exp = [7.34198553e+04 1.83546711e+04 2.23300528e+03 4.56386733e+02
 1.21468598e+02 3.75320751e+01 4.74188875e+00 3.91209424e-01
 8.59654921e+00 4.90618673e-01]
grad_E = [-2.20569361e-07  7.36944321e-06 -1.95521470e-05  4.99517394e-05
 -1.60762404e-04  1.47980281e-04  6.00657455e-04 -5.98526345e-04
 -1.49184220e-03 -6.45442331e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8608089        1
[INPUT] 0    0    [1    /1   ]  18354.4851758        1
[INPUT] 0    0    [1    /1   ]  2233.54930574        1
[INPUT] 0    0    [1    /1   ]  455.480190658        1
[INPUT] 0    0    [1    /1   ]  121.250039384        1
[INPUT] 0    0    [1    /1   ]  37.4923358683        1
[INPUT] 0    0    [1    /1   ]  4.74154597465        1
[INPUT] 0    0    [1    /1   ]  0.391201355883       1
[INPUT] 1    0    [1    /1   ]  8.59700201187        1
[INPUT] 1    0    [1    /1   ]  0.49066878466        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86080892173, 1.0]], [0, [18354.485175795253, 1.0]], [0, [2233.5493057430685, 1.0]], [0, [455.4801906575074, 1.0]], [0, [121.2500393842424, 1.0]], [0, [37.49233586829546, 1.0]], [0, [4.741545974652532, 1.0]], [0, [0.39120135588282434, 1.0]], [1, [8.597002011873599, 1.0]], [1, [0.49066878466036395, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86080892]
bas 1, expnt(s) = [18354.4851758]
bas 2, expnt(s) = [2233.54930574]
bas 3, expnt(s) = [455.48019066]
bas 4, expnt(s) = [121.25003938]
bas 5, expnt(s) = [37.49233587]
bas 6, expnt(s) = [4.74154597]
bas 7, expnt(s) = [0.39120136]
bas 8, expnt(s) = [8.59700201]
bas 9, expnt(s) = [0.49066878]
CPU time:        93.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198608e+04 1.12687357e+04 1.83544852e+04 3.98402156e+03
 2.23354931e+03 8.20845992e+02 4.55480191e+02 2.49096224e+02
 1.21250039e+02 9.23158856e+01 3.74923359e+01 3.82799973e+01
 4.74154597e+00 8.11811125e+00 3.91201356e-01 1.24972739e+00
 8.59700201e+00 4.29455509e+01 4.90668785e-01 1.19803617e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320213981793923
cond(S) = 44.37982707931731
E1 = -689.0337188448932  E_coul = 184.90241134242004
init E= -504.131307502473
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.681093827219369  LUMO = 84.6473006977154
  mo_energy =
[-1.21648652e+02 -1.32818783e+01 -7.62245726e+00 -7.62245726e+00
 -7.62245726e+00 -1.65087786e+00 -6.81093827e-01 -6.81093827e-01
 -6.81093827e-01  8.46473007e+01  6.74469039e+02  3.92911511e+03
  2.99846881e+04  1.63982493e+05]
E1 = -706.5594680055569  E_coul = 198.9285901812173
cycle= 1 E= -507.63087782434  delta_E= -3.5  |g|= 0.318  |ddm|=  0.3
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407174
diis-c [-0.16579101  1.        ]
  HOMO = -0.236685939613102  LUMO = 85.9795186840201
  mo_energy =
[-1.20260950e+02 -1.22540397e+01 -6.65416755e+00 -6.65416755e+00
 -6.65416755e+00 -1.16380561e+00 -2.36685940e-01 -2.36685940e-01
 -2.36685940e-01  8.59795187e+01  6.75839257e+02  3.93036568e+03
  2.99857745e+04  1.63983505e+05]
E1 = -706.5278327684086  E_coul = 198.89652428149964
cycle= 2 E= -507.631308486909  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505391
diis-c [-2.54934854e-05 -5.41254900e-04  1.00054125e+00]
  HOMO = -0.236862409391428  LUMO = 85.9759877430174
  mo_energy =
[-1.20269638e+02 -1.22552376e+01 -6.65602226e+00 -6.65602226e+00
 -6.65602226e+00 -1.16387090e+00 -2.36862409e-01 -2.36862409e-01
 -2.36862409e-01  8.59759877e+01  6.75828627e+02  3.93034971e+03
  2.99857552e+04  1.63983485e+05]
E1 = -706.5273883727616  E_coul = 198.89607977453304
cycle= 3 E= -507.631308598229  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127241
diis-c [-3.93525646e-10  3.51492417e-05 -2.55036573e-02  1.02546851e+00]
  HOMO = -0.236864636743315  LUMO = 85.9759428691399
  mo_energy =
[-1.20269752e+02 -1.22552535e+01 -6.65604943e+00 -6.65604943e+00
 -6.65604943e+00 -1.16387156e+00 -2.36864637e-01 -2.36864637e-01
 -2.36864637e-01  8.59759429e+01  6.75828509e+02  3.93034956e+03
  2.99857550e+04  1.63983484e+05]
E1 = -706.5273810601291  E_coul = 198.89607246185963
cycle= 4 E= -507.631308598269  delta_E= -4.09e-11  |g|= 3.71e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5273810601291  E_coul = 198.89607246185963
  HOMO = -0.236864620480046  LUMO = 85.9759432046909
  mo_energy =
[-1.20269751e+02 -1.22552534e+01 -6.65604927e+00 -6.65604927e+00
 -6.65604927e+00 -1.16387156e+00 -2.36864620e-01 -2.36864620e-01
 -2.36864620e-01  8.59759432e+01  6.75828510e+02  3.93034957e+03
  2.99857550e+04  1.63983484e+05]
E1 = -706.5273810970378  E_coul = 198.8960724987689
Extra cycle  E= -507.631308598269  delta_E= 5.12e-13  |g|= 6.4e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [7.34198608e+04 1.83544852e+04 2.23354931e+03 4.55480191e+02
 1.21250039e+02 3.74923359e+01 4.74154597e+00 3.91201356e-01
 8.59700201e+00 4.90668785e-01]
E = -507.63130859826896
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8608089        1
[INPUT] 0    0    [1    /1   ]  18354.4851758        1
[INPUT] 0    0    [1    /1   ]  2233.54930574        1
[INPUT] 0    0    [1    /1   ]  455.480190658        1
[INPUT] 0    0    [1    /1   ]  121.250039384        1
[INPUT] 0    0    [1    /1   ]  37.4923358683        1
[INPUT] 0    0    [1    /1   ]  4.74154597465        1
[INPUT] 0    0    [1    /1   ]  0.391201355883       1
[INPUT] 1    0    [1    /1   ]  8.59700201187        1
[INPUT] 1    0    [1    /1   ]  0.49066878466        1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86080892173, 1.0]], [0, [18354.485175795253, 1.0]], [0, [2233.5493057430685, 1.0]], [0, [455.4801906575074, 1.0]], [0, [121.2500393842424, 1.0]], [0, [37.49233586829546, 1.0]], [0, [4.741545974652532, 1.0]], [0, [0.39120135588282434, 1.0]], [1, [8.597002011873599, 1.0]], [1, [0.49066878466036395, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86080892]
bas 1, expnt(s) = [18354.4851758]
bas 2, expnt(s) = [2233.54930574]
bas 3, expnt(s) = [455.48019066]
bas 4, expnt(s) = [121.25003938]
bas 5, expnt(s) = [37.49233587]
bas 6, expnt(s) = [4.74154597]
bas 7, expnt(s) = [0.39120136]
bas 8, expnt(s) = [8.59700201]
bas 9, expnt(s) = [0.49066878]
CPU time:        93.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198608e+04 1.12687357e+04 1.83544852e+04 3.98402156e+03
 2.23354931e+03 8.20845992e+02 4.55480191e+02 2.49096224e+02
 1.21250039e+02 9.23158856e+01 3.74923359e+01 3.82799973e+01
 4.74154597e+00 8.11811125e+00 3.91201356e-01 1.24972739e+00
 8.59700201e+00 4.29455509e+01 4.90668785e-01 1.19803617e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320213981793923
cond(S) = 44.37982707931731
E1 = -689.0337188448932  E_coul = 184.90241134242004
init E= -504.131307502473
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.681093827219369  LUMO = 84.6473006977154
  mo_energy =
[-1.21648652e+02 -1.32818783e+01 -7.62245726e+00 -7.62245726e+00
 -7.62245726e+00 -1.65087786e+00 -6.81093827e-01 -6.81093827e-01
 -6.81093827e-01  8.46473007e+01  6.74469039e+02  3.92911511e+03
  2.99846881e+04  1.63982493e+05]
E1 = -706.5594680055569  E_coul = 198.9285901812173
cycle= 1 E= -507.63087782434  delta_E= -3.5  |g|= 0.318  |ddm|=  0.3
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407174
diis-c [-0.16579101  1.        ]
  HOMO = -0.236685939613102  LUMO = 85.9795186840201
  mo_energy =
[-1.20260950e+02 -1.22540397e+01 -6.65416755e+00 -6.65416755e+00
 -6.65416755e+00 -1.16380561e+00 -2.36685940e-01 -2.36685940e-01
 -2.36685940e-01  8.59795187e+01  6.75839257e+02  3.93036568e+03
  2.99857745e+04  1.63983505e+05]
E1 = -706.5278327684086  E_coul = 198.89652428149964
cycle= 2 E= -507.631308486909  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505391
diis-c [-2.54934854e-05 -5.41254900e-04  1.00054125e+00]
  HOMO = -0.236862409391428  LUMO = 85.9759877430174
  mo_energy =
[-1.20269638e+02 -1.22552376e+01 -6.65602226e+00 -6.65602226e+00
 -6.65602226e+00 -1.16387090e+00 -2.36862409e-01 -2.36862409e-01
 -2.36862409e-01  8.59759877e+01  6.75828627e+02  3.93034971e+03
  2.99857552e+04  1.63983485e+05]
E1 = -706.5273883727616  E_coul = 198.89607977453304
cycle= 3 E= -507.631308598229  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127241
diis-c [-3.93525646e-10  3.51492417e-05 -2.55036573e-02  1.02546851e+00]
  HOMO = -0.236864636743315  LUMO = 85.9759428691399
  mo_energy =
[-1.20269752e+02 -1.22552535e+01 -6.65604943e+00 -6.65604943e+00
 -6.65604943e+00 -1.16387156e+00 -2.36864637e-01 -2.36864637e-01
 -2.36864637e-01  8.59759429e+01  6.75828509e+02  3.93034956e+03
  2.99857550e+04  1.63983484e+05]
E1 = -706.5273810601291  E_coul = 198.89607246185963
cycle= 4 E= -507.631308598269  delta_E= -4.09e-11  |g|= 3.71e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5273810601291  E_coul = 198.89607246185963
  HOMO = -0.236864620480046  LUMO = 85.9759432046909
  mo_energy =
[-1.20269751e+02 -1.22552534e+01 -6.65604927e+00 -6.65604927e+00
 -6.65604927e+00 -1.16387156e+00 -2.36864620e-01 -2.36864620e-01
 -2.36864620e-01  8.59759432e+01  6.75828510e+02  3.93034957e+03
  2.99857550e+04  1.63983484e+05]
E1 = -706.5273810970378  E_coul = 198.8960724987689
Extra cycle  E= -507.631308598269  delta_E= 5.12e-13  |g|= 6.4e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.37982707931731
E1 = -706.5273810970378  E_coul = 198.8960724987689
init E= -507.631308598269
    CPU time for initialize scf      0.07 sec, wall time      0.08 sec
  HOMO = -0.23686462028956  LUMO = 85.9759432088021
  mo_energy =
[-1.20269751e+02 -1.22552534e+01 -6.65604927e+00 -6.65604927e+00
 -6.65604927e+00 -1.16387156e+00 -2.36864620e-01 -2.36864620e-01
 -2.36864620e-01  8.59759432e+01  6.75828510e+02  3.93034957e+03
  2.99857550e+04  1.63983484e+05]
E1 = -706.5273810975973  E_coul = 198.8960724993284
cycle= 1 E= -507.631308598269  delta_E= 5.68e-14  |g|= 1.28e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5273810975973  E_coul = 198.8960724993284
  HOMO = -0.236864620286872  LUMO = 85.975943208862
  mo_energy =
[-1.20269751e+02 -1.22552534e+01 -6.65604927e+00 -6.65604927e+00
 -6.65604927e+00 -1.16387156e+00 -2.36864620e-01 -2.36864620e-01
 -2.36864620e-01  8.59759432e+01  6.75828510e+02  3.93034957e+03
  2.99857550e+04  1.63983484e+05]
E1 = -706.5273810976067  E_coul = 198.8960724993377
Extra cycle  E= -507.631308598269  delta_E= -1.14e-13  |g|= 1.65e-11  |ddm|= 4.52e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [7.34198608e+04 1.83544852e+04 2.23354931e+03 4.55480191e+02
 1.21250039e+02 3.74923359e+01 4.74154597e+00 3.91201356e-01
 8.59700201e+00 4.90668785e-01]
grad_E = [-2.20579792e-07  7.32561545e-06 -1.63345084e-05  2.74676565e-05
 -1.33781588e-04  1.12832997e-04  4.74173685e-04 -4.72347288e-04
 -1.17984873e-03 -5.10379674e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8635884        1
[INPUT] 0    0    [1    /1   ]  18354.391801         1
[INPUT] 0    0    [1    /1   ]  2233.82393951        1
[INPUT] 0    0    [1    /1   ]  455.001127872        1
[INPUT] 0    0    [1    /1   ]  121.220211233        1
[INPUT] 0    0    [1    /1   ]  37.4933662706        1
[INPUT] 0    0    [1    /1   ]  4.74107314013        1
[INPUT] 0    0    [1    /1   ]  0.391192254342       1
[INPUT] 1    0    [1    /1   ]  8.59801537284        1
[INPUT] 1    0    [1    /1   ]  0.490780763453       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86358838808, 1.0]], [0, [18354.391801013713, 1.0]], [0, [2233.82393950707, 1.0]], [0, [455.0011278715406, 1.0]], [0, [121.22021123307587, 1.0]], [0, [37.493366270624435, 1.0]], [0, [4.741073140125162, 1.0]], [0, [0.3911922543416493, 1.0]], [1, [8.598015372839715, 1.0]], [1, [0.490780763453049, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86358839]
bas 1, expnt(s) = [18354.39180101]
bas 2, expnt(s) = [2233.82393951]
bas 3, expnt(s) = [455.00112787]
bas 4, expnt(s) = [121.22021123]
bas 5, expnt(s) = [37.49336627]
bas 6, expnt(s) = [4.74107314]
bas 7, expnt(s) = [0.39119225]
bas 8, expnt(s) = [8.59801537]
bas 9, expnt(s) = [0.49078076]
CPU time:        96.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198636e+04 1.12687360e+04 1.83543918e+04 3.98400636e+03
 2.23382394e+03 8.20921689e+02 4.55001128e+02 2.48899703e+02
 1.21220211e+02 9.22988525e+01 3.74933663e+01 3.82807863e+01
 4.74107314e+00 8.11750408e+00 3.91192254e-01 1.24970558e+00
 8.59801537e+00 4.29518787e+01 4.90780763e-01 1.19837794e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320075132033807
cond(S) = 44.41331560491793
E1 = -689.0421260603221  E_coul = 184.91003469031406
init E= -504.132091370008
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680974682697099  LUMO = 84.6374787982881
  mo_energy =
[-1.21647462e+02 -1.32812499e+01 -7.62196973e+00 -7.62196973e+00
 -7.62196973e+00 -1.65074282e+00 -6.80974683e-01 -6.80974683e-01
 -6.80974683e-01  8.46374788e+01  6.73999831e+02  3.92785547e+03
  2.99838213e+04  1.63981649e+05]
E1 = -706.56916986114  E_coul = 198.93828221640334
cycle= 1 E= -507.630887644737  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407266
diis-c [-0.16586536  1.        ]
  HOMO = -0.236442886165994  LUMO = 85.969816114304
  mo_energy =
[-1.20259669e+02 -1.22532770e+01 -6.65354868e+00 -6.65354868e+00
 -6.65354868e+00 -1.16359406e+00 -2.36442886e-01 -2.36442886e-01
 -2.36442886e-01  8.59698161e+01  6.75370146e+02  3.92910610e+03
  2.99849077e+04  1.63982661e+05]
E1 = -706.5375171314654  E_coul = 198.90619845130234
cycle= 2 E= -507.631318680163  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505595
diis-c [-2.55141000e-05 -5.41357401e-04  1.00054136e+00]
  HOMO = -0.236619538348861  LUMO = 85.9662835104596
  mo_energy =
[-1.20268362e+02 -1.22544754e+01 -6.65540453e+00 -6.65540453e+00
 -6.65540453e+00 -1.16365938e+00 -2.36619538e-01 -2.36619538e-01
 -2.36619538e-01  8.59662835e+01  6.75359513e+02  3.92909013e+03
  2.99848883e+04  1.63982640e+05]
E1 = -706.5370724460796  E_coul = 198.90575365449092
cycle= 3 E= -507.631318791589  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127287
diis-c [-3.93720895e-10  3.51392224e-05 -2.55027307e-02  1.02546759e+00]
  HOMO = -0.236621768251225  LUMO = 85.9662386085874
  mo_energy =
[-1.20268476e+02 -1.22544913e+01 -6.65543172e+00 -6.65543172e+00
 -6.65543172e+00 -1.16366004e+00 -2.36621768e-01 -2.36621768e-01
 -2.36621768e-01  8.59662386e+01  6.75359395e+02  3.92908998e+03
  2.99848882e+04  1.63982640e+05]
E1 = -706.5370651284143  E_coul = 198.90574633678537
cycle= 4 E= -507.631318791629  delta_E= -4.02e-11  |g|= 3.71e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5370651284143  E_coul = 198.90574633678537
  HOMO = -0.236621751971201  LUMO = 85.9662389443095
  mo_energy =
[-1.20268475e+02 -1.22544912e+01 -6.65543156e+00 -6.65543156e+00
 -6.65543156e+00 -1.16366004e+00 -2.36621752e-01 -2.36621752e-01
 -2.36621752e-01  8.59662389e+01  6.75359397e+02  3.92908998e+03
  2.99848882e+04  1.63982640e+05]
E1 = -706.5370651653451  E_coul = 198.90574637371634
Extra cycle  E= -507.631318791629  delta_E= 1.71e-13  |g|= 6.4e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [7.34198636e+04 1.83543918e+04 2.23382394e+03 4.55001128e+02
 1.21220211e+02 3.74933663e+01 4.74107314e+00 3.91192254e-01
 8.59801537e+00 4.90780763e-01]
E = -507.63131879162876
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8635884        1
[INPUT] 0    0    [1    /1   ]  18354.391801         1
[INPUT] 0    0    [1    /1   ]  2233.82393951        1
[INPUT] 0    0    [1    /1   ]  455.001127872        1
[INPUT] 0    0    [1    /1   ]  121.220211233        1
[INPUT] 0    0    [1    /1   ]  37.4933662706        1
[INPUT] 0    0    [1    /1   ]  4.74107314013        1
[INPUT] 0    0    [1    /1   ]  0.391192254342       1
[INPUT] 1    0    [1    /1   ]  8.59801537284        1
[INPUT] 1    0    [1    /1   ]  0.490780763453       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86358838808, 1.0]], [0, [18354.391801013713, 1.0]], [0, [2233.82393950707, 1.0]], [0, [455.0011278715406, 1.0]], [0, [121.22021123307587, 1.0]], [0, [37.493366270624435, 1.0]], [0, [4.741073140125162, 1.0]], [0, [0.3911922543416493, 1.0]], [1, [8.598015372839715, 1.0]], [1, [0.490780763453049, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86358839]
bas 1, expnt(s) = [18354.39180101]
bas 2, expnt(s) = [2233.82393951]
bas 3, expnt(s) = [455.00112787]
bas 4, expnt(s) = [121.22021123]
bas 5, expnt(s) = [37.49336627]
bas 6, expnt(s) = [4.74107314]
bas 7, expnt(s) = [0.39119225]
bas 8, expnt(s) = [8.59801537]
bas 9, expnt(s) = [0.49078076]
CPU time:        97.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198636e+04 1.12687360e+04 1.83543918e+04 3.98400636e+03
 2.23382394e+03 8.20921689e+02 4.55001128e+02 2.48899703e+02
 1.21220211e+02 9.22988525e+01 3.74933663e+01 3.82807863e+01
 4.74107314e+00 8.11750408e+00 3.91192254e-01 1.24970558e+00
 8.59801537e+00 4.29518787e+01 4.90780763e-01 1.19837794e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320075132033807
cond(S) = 44.41331560491793
E1 = -689.0421260603221  E_coul = 184.91003469031406
init E= -504.132091370008
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680974682697099  LUMO = 84.6374787982881
  mo_energy =
[-1.21647462e+02 -1.32812499e+01 -7.62196973e+00 -7.62196973e+00
 -7.62196973e+00 -1.65074282e+00 -6.80974683e-01 -6.80974683e-01
 -6.80974683e-01  8.46374788e+01  6.73999831e+02  3.92785547e+03
  2.99838213e+04  1.63981649e+05]
E1 = -706.56916986114  E_coul = 198.93828221640334
cycle= 1 E= -507.630887644737  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407266
diis-c [-0.16586536  1.        ]
  HOMO = -0.236442886165994  LUMO = 85.969816114304
  mo_energy =
[-1.20259669e+02 -1.22532770e+01 -6.65354868e+00 -6.65354868e+00
 -6.65354868e+00 -1.16359406e+00 -2.36442886e-01 -2.36442886e-01
 -2.36442886e-01  8.59698161e+01  6.75370146e+02  3.92910610e+03
  2.99849077e+04  1.63982661e+05]
E1 = -706.5375171314654  E_coul = 198.90619845130234
cycle= 2 E= -507.631318680163  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505595
diis-c [-2.55141000e-05 -5.41357401e-04  1.00054136e+00]
  HOMO = -0.236619538348861  LUMO = 85.9662835104596
  mo_energy =
[-1.20268362e+02 -1.22544754e+01 -6.65540453e+00 -6.65540453e+00
 -6.65540453e+00 -1.16365938e+00 -2.36619538e-01 -2.36619538e-01
 -2.36619538e-01  8.59662835e+01  6.75359513e+02  3.92909013e+03
  2.99848883e+04  1.63982640e+05]
E1 = -706.5370724460796  E_coul = 198.90575365449092
cycle= 3 E= -507.631318791589  delta_E= -1.11e-07  |g|= 9.52e-05  |ddm|= 0.000204
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127287
diis-c [-3.93720895e-10  3.51392224e-05 -2.55027307e-02  1.02546759e+00]
  HOMO = -0.236621768251225  LUMO = 85.9662386085874
  mo_energy =
[-1.20268476e+02 -1.22544913e+01 -6.65543172e+00 -6.65543172e+00
 -6.65543172e+00 -1.16366004e+00 -2.36621768e-01 -2.36621768e-01
 -2.36621768e-01  8.59662386e+01  6.75359395e+02  3.92908998e+03
  2.99848882e+04  1.63982640e+05]
E1 = -706.5370651284143  E_coul = 198.90574633678537
cycle= 4 E= -507.631318791629  delta_E= -4.02e-11  |g|= 3.71e-07  |ddm|= 3.48e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5370651284143  E_coul = 198.90574633678537
  HOMO = -0.236621751971201  LUMO = 85.9662389443095
  mo_energy =
[-1.20268475e+02 -1.22544912e+01 -6.65543156e+00 -6.65543156e+00
 -6.65543156e+00 -1.16366004e+00 -2.36621752e-01 -2.36621752e-01
 -2.36621752e-01  8.59662389e+01  6.75359397e+02  3.92908998e+03
  2.99848882e+04  1.63982640e+05]
E1 = -706.5370651653451  E_coul = 198.90574637371634
Extra cycle  E= -507.631318791629  delta_E= 1.71e-13  |g|= 6.4e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.41331560491793
E1 = -706.5370651653451  E_coul = 198.90574637371634
init E= -507.631318791629
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236621751780512  LUMO = 85.9662389484225
  mo_energy =
[-1.20268475e+02 -1.22544912e+01 -6.65543156e+00 -6.65543156e+00
 -6.65543156e+00 -1.16366004e+00 -2.36621752e-01 -2.36621752e-01
 -2.36621752e-01  8.59662389e+01  6.75359397e+02  3.92908998e+03
  2.99848882e+04  1.63982640e+05]
E1 = -706.537065165905  E_coul = 198.9057463742762
cycle= 1 E= -507.631318791629  delta_E= -5.68e-14  |g|= 1.28e-10  |ddm|= 2.54e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.537065165905  E_coul = 198.9057463742762
  HOMO = -0.236621751777819  LUMO = 85.9662389484816
  mo_energy =
[-1.20268475e+02 -1.22544912e+01 -6.65543156e+00 -6.65543156e+00
 -6.65543156e+00 -1.16366004e+00 -2.36621752e-01 -2.36621752e-01
 -2.36621752e-01  8.59662389e+01  6.75359397e+02  3.92908998e+03
  2.99848882e+04  1.63982640e+05]
E1 = -706.5370651659146  E_coul = 198.90574637428583
Extra cycle  E= -507.631318791629  delta_E= 1.14e-13  |g|= 1.44e-11  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198636e+04 1.83543918e+04 2.23382394e+03 4.55001128e+02
 1.21220211e+02 3.74933663e+01 4.74107314e+00 3.91192254e-01
 8.59801537e+00 4.90780763e-01]
grad_E = [-2.20582780e-07  7.29532942e-06 -1.38828297e-05  1.23114989e-06
 -5.55005642e-05  4.01940049e-05  1.81888426e-04 -1.84165377e-04
 -4.64384948e-04 -2.00973549e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8633599        1
[INPUT] 0    0    [1    /1   ]  18354.3994637        1
[INPUT] 0    0    [1    /1   ]  2233.80261344        1
[INPUT] 0    0    [1    /1   ]  455.020805548        1
[INPUT] 0    0    [1    /1   ]  121.288420187        1
[INPUT] 0    0    [1    /1   ]  37.5107487553        1
[INPUT] 0    0    [1    /1   ]  4.74086654611        1
[INPUT] 0    0    [1    /1   ]  0.391188787321       1
[INPUT] 1    0    [1    /1   ]  8.59858270583        1
[INPUT] 1    0    [1    /1   ]  0.490843481016       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8633598969, 1.0]], [0, [18354.399463661262, 1.0]], [0, [2233.8026134432307, 1.0]], [0, [455.02080554816143, 1.0]], [0, [121.28842018713564, 1.0]], [0, [37.510748755273, 1.0]], [0, [4.740866546109748, 1.0]], [0, [0.39118878732114953, 1.0]], [1, [8.598582705834062, 1.0]], [1, [0.4908434810163507, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.8633599]
bas 1, expnt(s) = [18354.39946366]
bas 2, expnt(s) = [2233.80261344]
bas 3, expnt(s) = [455.02080555]
bas 4, expnt(s) = [121.28842019]
bas 5, expnt(s) = [37.51074876]
bas 6, expnt(s) = [4.74086655]
bas 7, expnt(s) = [0.39118879]
bas 8, expnt(s) = [8.59858271]
bas 9, expnt(s) = [0.49084348]
CPU time:       100.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198634e+04 1.12687360e+04 1.83543995e+04 3.98400761e+03
 2.23380261e+03 8.20915811e+02 4.55020806e+02 2.48907777e+02
 1.21288420e+02 9.23378012e+01 3.75107488e+01 3.82940962e+01
 4.74086655e+00 8.11723879e+00 3.91188787e-01 1.24969727e+00
 8.59858271e+00 4.29554214e+01 4.90843481e-01 1.19856938e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319995101881354
cond(S) = 44.434089532827244
E1 = -689.0465937595543  E_coul = 184.9143832824024
init E= -504.132210477152
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680907822234353  LUMO = 84.702790495247
  mo_energy =
[-1.21646779e+02 -1.32808970e+01 -7.62168847e+00 -7.62168847e+00
 -7.62168847e+00 -1.65067006e+00 -6.80907822e-01 -6.80907822e-01
 -6.80907822e-01  8.47027905e+01  6.74265641e+02  3.92819696e+03
  2.99840797e+04  1.63981880e+05]
E1 = -706.5747134461765  E_coul = 198.9438236499771
cycle= 1 E= -507.630889796199  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407298
diis-c [-0.16589145  1.        ]
  HOMO = -0.23630476063419  LUMO = 86.0352845401066
  mo_energy =
[-1.20258938e+02 -1.22528445e+01 -6.65319127e+00 -6.65319127e+00
 -6.65319127e+00 -1.16347501e+00 -2.36304761e-01 -2.36304761e-01
 -2.36304761e-01  8.60352845e+01  6.75636003e+02  3.92944767e+03
  2.99851661e+04  1.63982892e+05]
E1 = -706.5430889467963  E_coul = 198.9117684543886
cycle= 2 E= -507.631320492408  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505427
diis-c [-2.54964391e-05 -5.44707320e-04  1.00054471e+00]
  HOMO = -0.236481258901301  LUMO = 86.0317534935089
  mo_energy =
[-1.20267624e+02 -1.22540416e+01 -6.65504521e+00 -6.65504521e+00
 -6.65504521e+00 -1.16354025e+00 -2.36481259e-01 -2.36481259e-01
 -2.36481259e-01  8.60317535e+01  6.75625377e+02  3.92943171e+03
  2.99851468e+04  1.63982872e+05]
E1 = -706.5426448652324  E_coul = 198.9113242615736
cycle= 3 E= -507.631320603659  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127172
diis-c [-3.92972244e-10  3.51319971e-05 -2.54886224e-02  1.02545349e+00]
  HOMO = -0.23648348532525  LUMO = 86.0317086518004
  mo_energy =
[-1.20267737e+02 -1.22540575e+01 -6.65507235e+00 -6.65507235e+00
 -6.65507235e+00 -1.16354091e+00 -2.36483485e-01 -2.36483485e-01
 -2.36483485e-01  8.60317087e+01  6.75625259e+02  3.92943156e+03
  2.99851466e+04  1.63982872e+05]
E1 = -706.5426375626356  E_coul = 198.9113169589361
cycle= 4 E= -507.631320603699  delta_E= -4.06e-11  |g|= 3.71e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5426375626356  E_coul = 198.9113169589361
  HOMO = -0.236483469078335  LUMO = 86.0317089870948
  mo_energy =
[-1.20267737e+02 -1.22540574e+01 -6.65507219e+00 -6.65507219e+00
 -6.65507219e+00 -1.16354091e+00 -2.36483469e-01 -2.36483469e-01
 -2.36483469e-01  8.60317090e+01  6.75625260e+02  3.92943157e+03
  2.99851466e+04  1.63982872e+05]
E1 = -706.5426375994799  E_coul = 198.91131699578062
Extra cycle  E= -507.631320603699  delta_E= 1.71e-13  |g|= 6.39e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198634e+04 1.83543995e+04 2.23380261e+03 4.55020806e+02
 1.21288420e+02 3.75107488e+01 4.74086655e+00 3.91188787e-01
 8.59858271e+00 4.90843481e-01]
E = -507.6313206036993
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8633599        1
[INPUT] 0    0    [1    /1   ]  18354.3994637        1
[INPUT] 0    0    [1    /1   ]  2233.80261344        1
[INPUT] 0    0    [1    /1   ]  455.020805548        1
[INPUT] 0    0    [1    /1   ]  121.288420187        1
[INPUT] 0    0    [1    /1   ]  37.5107487553        1
[INPUT] 0    0    [1    /1   ]  4.74086654611        1
[INPUT] 0    0    [1    /1   ]  0.391188787321       1
[INPUT] 1    0    [1    /1   ]  8.59858270583        1
[INPUT] 1    0    [1    /1   ]  0.490843481016       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8633598969, 1.0]], [0, [18354.399463661262, 1.0]], [0, [2233.8026134432307, 1.0]], [0, [455.02080554816143, 1.0]], [0, [121.28842018713564, 1.0]], [0, [37.510748755273, 1.0]], [0, [4.740866546109748, 1.0]], [0, [0.39118878732114953, 1.0]], [1, [8.598582705834062, 1.0]], [1, [0.4908434810163507, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.8633599]
bas 1, expnt(s) = [18354.39946366]
bas 2, expnt(s) = [2233.80261344]
bas 3, expnt(s) = [455.02080555]
bas 4, expnt(s) = [121.28842019]
bas 5, expnt(s) = [37.51074876]
bas 6, expnt(s) = [4.74086655]
bas 7, expnt(s) = [0.39118879]
bas 8, expnt(s) = [8.59858271]
bas 9, expnt(s) = [0.49084348]
CPU time:       101.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198634e+04 1.12687360e+04 1.83543995e+04 3.98400761e+03
 2.23380261e+03 8.20915811e+02 4.55020806e+02 2.48907777e+02
 1.21288420e+02 9.23378012e+01 3.75107488e+01 3.82940962e+01
 4.74086655e+00 8.11723879e+00 3.91188787e-01 1.24969727e+00
 8.59858271e+00 4.29554214e+01 4.90843481e-01 1.19856938e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319995101881354
cond(S) = 44.434089532827244
E1 = -689.0465937595543  E_coul = 184.9143832824024
init E= -504.132210477152
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680907822234353  LUMO = 84.702790495247
  mo_energy =
[-1.21646779e+02 -1.32808970e+01 -7.62168847e+00 -7.62168847e+00
 -7.62168847e+00 -1.65067006e+00 -6.80907822e-01 -6.80907822e-01
 -6.80907822e-01  8.47027905e+01  6.74265641e+02  3.92819696e+03
  2.99840797e+04  1.63981880e+05]
E1 = -706.5747134461765  E_coul = 198.9438236499771
cycle= 1 E= -507.630889796199  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407298
diis-c [-0.16589145  1.        ]
  HOMO = -0.23630476063419  LUMO = 86.0352845401066
  mo_energy =
[-1.20258938e+02 -1.22528445e+01 -6.65319127e+00 -6.65319127e+00
 -6.65319127e+00 -1.16347501e+00 -2.36304761e-01 -2.36304761e-01
 -2.36304761e-01  8.60352845e+01  6.75636003e+02  3.92944767e+03
  2.99851661e+04  1.63982892e+05]
E1 = -706.5430889467963  E_coul = 198.9117684543886
cycle= 2 E= -507.631320492408  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505427
diis-c [-2.54964391e-05 -5.44707320e-04  1.00054471e+00]
  HOMO = -0.236481258901301  LUMO = 86.0317534935089
  mo_energy =
[-1.20267624e+02 -1.22540416e+01 -6.65504521e+00 -6.65504521e+00
 -6.65504521e+00 -1.16354025e+00 -2.36481259e-01 -2.36481259e-01
 -2.36481259e-01  8.60317535e+01  6.75625377e+02  3.92943171e+03
  2.99851468e+04  1.63982872e+05]
E1 = -706.5426448652324  E_coul = 198.9113242615736
cycle= 3 E= -507.631320603659  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127172
diis-c [-3.92972244e-10  3.51319971e-05 -2.54886224e-02  1.02545349e+00]
  HOMO = -0.23648348532525  LUMO = 86.0317086518004
  mo_energy =
[-1.20267737e+02 -1.22540575e+01 -6.65507235e+00 -6.65507235e+00
 -6.65507235e+00 -1.16354091e+00 -2.36483485e-01 -2.36483485e-01
 -2.36483485e-01  8.60317087e+01  6.75625259e+02  3.92943156e+03
  2.99851466e+04  1.63982872e+05]
E1 = -706.5426375626356  E_coul = 198.9113169589361
cycle= 4 E= -507.631320603699  delta_E= -4.06e-11  |g|= 3.71e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5426375626356  E_coul = 198.9113169589361
  HOMO = -0.236483469078335  LUMO = 86.0317089870948
  mo_energy =
[-1.20267737e+02 -1.22540574e+01 -6.65507219e+00 -6.65507219e+00
 -6.65507219e+00 -1.16354091e+00 -2.36483469e-01 -2.36483469e-01
 -2.36483469e-01  8.60317090e+01  6.75625260e+02  3.92943157e+03
  2.99851466e+04  1.63982872e+05]
E1 = -706.5426375994799  E_coul = 198.91131699578062
Extra cycle  E= -507.631320603699  delta_E= 1.71e-13  |g|= 6.39e-09  |ddm|= 1.64e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.434089532827244
E1 = -706.5426375994799  E_coul = 198.91131699578062
init E= -507.631320603699
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236483468888117  LUMO = 86.0317089912021
  mo_energy =
[-1.20267737e+02 -1.22540574e+01 -6.65507219e+00 -6.65507219e+00
 -6.65507219e+00 -1.16354091e+00 -2.36483469e-01 -2.36483469e-01
 -2.36483469e-01  8.60317090e+01  6.75625260e+02  3.92943157e+03
  2.99851466e+04  1.63982872e+05]
E1 = -706.5426376000381  E_coul = 198.91131699633888
cycle= 1 E= -507.631320603699  delta_E= 5.68e-14  |g|= 1.26e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5426376000381  E_coul = 198.91131699633888
  HOMO = -0.236483468885428  LUMO = 86.0317089912606
  mo_energy =
[-1.20267737e+02 -1.22540574e+01 -6.65507219e+00 -6.65507219e+00
 -6.65507219e+00 -1.16354091e+00 -2.36483469e-01 -2.36483469e-01
 -2.36483469e-01  8.60317090e+01  6.75625260e+02  3.92943157e+03
  2.99851466e+04  1.63982872e+05]
E1 = -706.5426376000472  E_coul = 198.91131699634832
Extra cycle  E= -507.631320603699  delta_E= 3.41e-13  |g|= 1.22e-11  |ddm|= 4.51e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198634e+04 1.83543995e+04 2.23380261e+03 4.55020806e+02
 1.21288420e+02 3.75107488e+01 4.74086655e+00 3.91188787e-01
 8.59858271e+00 4.90843481e-01]
grad_E = [-2.20581843e-07  7.29108064e-06 -1.34094470e-05 -8.68577607e-06
 -9.78831161e-06  3.60821224e-06  2.05483117e-05 -2.34646921e-05
 -6.01280961e-05 -2.61758586e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8629517        1
[INPUT] 0    0    [1    /1   ]  18354.4131717        1
[INPUT] 0    0    [1    /1   ]  2233.76273662        1
[INPUT] 0    0    [1    /1   ]  455.083915644        1
[INPUT] 0    0    [1    /1   ]  121.317104255        1
[INPUT] 0    0    [1    /1   ]  37.5170942722        1
[INPUT] 0    0    [1    /1   ]  4.74084954657        1
[INPUT] 0    0    [1    /1   ]  0.391188635047       1
[INPUT] 1    0    [1    /1   ]  8.59866898634        1
[INPUT] 1    0    [1    /1   ]  0.490853085264       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8629517092, 1.0]], [0, [18354.413171667555, 1.0]], [0, [2233.762736619561, 1.0]], [0, [455.0839156444818, 1.0]], [0, [121.31710425481042, 1.0]], [0, [37.51709427221715, 1.0]], [0, [4.7408495465710185, 1.0]], [0, [0.3911886350466889, 1.0]], [1, [8.598668986336595, 1.0]], [1, [0.49085308526404725, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86295171]
bas 1, expnt(s) = [18354.41317167]
bas 2, expnt(s) = [2233.76273662]
bas 3, expnt(s) = [455.08391564]
bas 4, expnt(s) = [121.31710425]
bas 5, expnt(s) = [37.51709427]
bas 6, expnt(s) = [4.74084955]
bas 7, expnt(s) = [0.39118864]
bas 8, expnt(s) = [8.59866899]
bas 9, expnt(s) = [0.49085309]
CPU time:       104.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198630e+04 1.12687359e+04 1.83544132e+04 3.98400984e+03
 2.23376274e+03 8.20904820e+02 4.55083916e+02 2.48933668e+02
 1.21317104e+02 9.23541788e+01 3.75170943e+01 3.82989546e+01
 4.74084955e+00 8.11721696e+00 3.91188635e-01 1.24969691e+00
 8.59866899e+00 4.29559602e+01 4.90853085e-01 1.19859869e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982341478013
cond(S) = 44.43791886427441
E1 = -689.0472318457493  E_coul = 184.91506761662873
init E= -504.132164229121
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897521707372  LUMO = 84.728177266014
  mo_energy =
[-1.21646671e+02 -1.32808430e+01 -7.62164345e+00 -7.62164345e+00
 -7.62164345e+00 -1.65065962e+00 -6.80897522e-01 -6.80897522e-01
 -6.80897522e-01  8.47281773e+01  6.74418734e+02  3.92847018e+03
  2.99842763e+04  1.63982064e+05]
E1 = -706.5755921328808  E_coul = 198.9447020680396
cycle= 1 E= -507.630890064841  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407299
diis-c [-0.16589243  1.        ]
  HOMO = -0.236283113483258  LUMO = 86.0607152512065
  mo_energy =
[-1.20258821e+02 -1.22527772e+01 -6.65313381e+00 -6.65313381e+00
 -6.65313381e+00 -1.16345667e+00 -2.36283113e-01 -2.36283113e-01
 -2.36283113e-01  8.60607153e+01  6.75789102e+02  3.92972090e+03
  2.99853628e+04  1.63983076e+05]
E1 = -706.5439802482272  E_coul = 198.91265965912967
cycle= 2 E= -507.631320589098  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505338
diis-c [-2.54872428e-05 -5.45934471e-04  1.00054593e+00]
  HOMO = -0.236459532466809  LUMO = 86.0571849902014
  mo_energy =
[-1.20267504e+02 -1.22539738e+01 -6.65498690e+00 -6.65498690e+00
 -6.65498690e+00 -1.16352188e+00 -2.36459532e-01 -2.36459532e-01
 -2.36459532e-01  8.60571850e+01  6.75778479e+02  3.92970495e+03
  2.99853435e+04  1.63983056e+05]
E1 = -706.543536425733  E_coul = 198.91221572546183
cycle= 3 E= -507.631320700271  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127124
diis-c [-3.92669690e-10  3.51307175e-05 -2.54835220e-02  1.02544839e+00]
  HOMO = -0.236461757292441  LUMO = 86.0571401742169
  mo_energy =
[-1.20267618e+02 -1.22539896e+01 -6.65501402e+00 -6.65501402e+00
 -6.65501402e+00 -1.16352254e+00 -2.36461757e-01 -2.36461757e-01
 -2.36461757e-01  8.60571402e+01  6.75778362e+02  3.92970480e+03
  2.99853433e+04  1.63983056e+05]
E1 = -706.5435291293259  E_coul = 198.91220842901416
cycle= 4 E= -507.631320700312  delta_E= -4.05e-11  |g|= 3.71e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435291293259  E_coul = 198.91220842901416
  HOMO = -0.236461741059836  LUMO = 86.0571405093326
  mo_energy =
[-1.20267617e+02 -1.22539895e+01 -6.65501386e+00 -6.65501386e+00
 -6.65501386e+00 -1.16352253e+00 -2.36461741e-01 -2.36461741e-01
 -2.36461741e-01  8.60571405e+01  6.75778363e+02  3.92970480e+03
  2.99853433e+04  1.63983056e+05]
E1 = -706.5435291661358  E_coul = 198.91220846582422
Extra cycle  E= -507.631320700312  delta_E= 5.68e-14  |g|= 6.38e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198630e+04 1.83544132e+04 2.23376274e+03 4.55083916e+02
 1.21317104e+02 3.75170943e+01 4.74084955e+00 3.91188635e-01
 8.59866899e+00 4.90853085e-01]
E = -507.6313207003116
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.8629517        1
[INPUT] 0    0    [1    /1   ]  18354.4131717        1
[INPUT] 0    0    [1    /1   ]  2233.76273662        1
[INPUT] 0    0    [1    /1   ]  455.083915644        1
[INPUT] 0    0    [1    /1   ]  121.317104255        1
[INPUT] 0    0    [1    /1   ]  37.5170942722        1
[INPUT] 0    0    [1    /1   ]  4.74084954657        1
[INPUT] 0    0    [1    /1   ]  0.391188635047       1
[INPUT] 1    0    [1    /1   ]  8.59866898634        1
[INPUT] 1    0    [1    /1   ]  0.490853085264       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.8629517092, 1.0]], [0, [18354.413171667555, 1.0]], [0, [2233.762736619561, 1.0]], [0, [455.0839156444818, 1.0]], [0, [121.31710425481042, 1.0]], [0, [37.51709427221715, 1.0]], [0, [4.7408495465710185, 1.0]], [0, [0.3911886350466889, 1.0]], [1, [8.598668986336595, 1.0]], [1, [0.49085308526404725, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86295171]
bas 1, expnt(s) = [18354.41317167]
bas 2, expnt(s) = [2233.76273662]
bas 3, expnt(s) = [455.08391564]
bas 4, expnt(s) = [121.31710425]
bas 5, expnt(s) = [37.51709427]
bas 6, expnt(s) = [4.74084955]
bas 7, expnt(s) = [0.39118864]
bas 8, expnt(s) = [8.59866899]
bas 9, expnt(s) = [0.49085309]
CPU time:       105.01
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198630e+04 1.12687359e+04 1.83544132e+04 3.98400984e+03
 2.23376274e+03 8.20904820e+02 4.55083916e+02 2.48933668e+02
 1.21317104e+02 9.23541788e+01 3.75170943e+01 3.82989546e+01
 4.74084955e+00 8.11721696e+00 3.91188635e-01 1.24969691e+00
 8.59866899e+00 4.29559602e+01 4.90853085e-01 1.19859869e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982341478013
cond(S) = 44.43791886427441
E1 = -689.0472318457493  E_coul = 184.91506761662873
init E= -504.132164229121
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897521707372  LUMO = 84.728177266014
  mo_energy =
[-1.21646671e+02 -1.32808430e+01 -7.62164345e+00 -7.62164345e+00
 -7.62164345e+00 -1.65065962e+00 -6.80897522e-01 -6.80897522e-01
 -6.80897522e-01  8.47281773e+01  6.74418734e+02  3.92847018e+03
  2.99842763e+04  1.63982064e+05]
E1 = -706.5755921328808  E_coul = 198.9447020680396
cycle= 1 E= -507.630890064841  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407299
diis-c [-0.16589243  1.        ]
  HOMO = -0.236283113483258  LUMO = 86.0607152512065
  mo_energy =
[-1.20258821e+02 -1.22527772e+01 -6.65313381e+00 -6.65313381e+00
 -6.65313381e+00 -1.16345667e+00 -2.36283113e-01 -2.36283113e-01
 -2.36283113e-01  8.60607153e+01  6.75789102e+02  3.92972090e+03
  2.99853628e+04  1.63983076e+05]
E1 = -706.5439802482272  E_coul = 198.91265965912967
cycle= 2 E= -507.631320589098  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505338
diis-c [-2.54872428e-05 -5.45934471e-04  1.00054593e+00]
  HOMO = -0.236459532466809  LUMO = 86.0571849902014
  mo_energy =
[-1.20267504e+02 -1.22539738e+01 -6.65498690e+00 -6.65498690e+00
 -6.65498690e+00 -1.16352188e+00 -2.36459532e-01 -2.36459532e-01
 -2.36459532e-01  8.60571850e+01  6.75778479e+02  3.92970495e+03
  2.99853435e+04  1.63983056e+05]
E1 = -706.543536425733  E_coul = 198.91221572546183
cycle= 3 E= -507.631320700271  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127124
diis-c [-3.92669690e-10  3.51307175e-05 -2.54835220e-02  1.02544839e+00]
  HOMO = -0.236461757292441  LUMO = 86.0571401742169
  mo_energy =
[-1.20267618e+02 -1.22539896e+01 -6.65501402e+00 -6.65501402e+00
 -6.65501402e+00 -1.16352254e+00 -2.36461757e-01 -2.36461757e-01
 -2.36461757e-01  8.60571402e+01  6.75778362e+02  3.92970480e+03
  2.99853433e+04  1.63983056e+05]
E1 = -706.5435291293259  E_coul = 198.91220842901416
cycle= 4 E= -507.631320700312  delta_E= -4.05e-11  |g|= 3.71e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435291293259  E_coul = 198.91220842901416
  HOMO = -0.236461741059836  LUMO = 86.0571405093326
  mo_energy =
[-1.20267617e+02 -1.22539895e+01 -6.65501386e+00 -6.65501386e+00
 -6.65501386e+00 -1.16352253e+00 -2.36461741e-01 -2.36461741e-01
 -2.36461741e-01  8.60571405e+01  6.75778363e+02  3.92970480e+03
  2.99853433e+04  1.63983056e+05]
E1 = -706.5435291661358  E_coul = 198.91220846582422
Extra cycle  E= -507.631320700312  delta_E= 5.68e-14  |g|= 6.38e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.43791886427441
E1 = -706.5435291661358  E_coul = 198.91220846582422
init E= -507.631320700312
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.23646174086981  LUMO = 86.0571405134358
  mo_energy =
[-1.20267617e+02 -1.22539895e+01 -6.65501386e+00 -6.65501386e+00
 -6.65501386e+00 -1.16352253e+00 -2.36461741e-01 -2.36461741e-01
 -2.36461741e-01  8.60571405e+01  6.75778363e+02  3.92970480e+03
  2.99853433e+04  1.63983056e+05]
E1 = -706.5435291666937  E_coul = 198.91220846638183
cycle= 1 E= -507.631320700312  delta_E= -2.84e-13  |g|= 1.26e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5435291666937  E_coul = 198.91220846638183
  HOMO = -0.23646174086713  LUMO = 86.0571405134961
  mo_energy =
[-1.20267617e+02 -1.22539895e+01 -6.65501386e+00 -6.65501386e+00
 -6.65501386e+00 -1.16352253e+00 -2.36461741e-01 -2.36461741e-01
 -2.36461741e-01  8.60571405e+01  6.75778363e+02  3.92970480e+03
  2.99853433e+04  1.63983056e+05]
E1 = -706.5435291667028  E_coul = 198.9122084663912
Extra cycle  E= -507.631320700312  delta_E= 3.41e-13  |g|= 1.21e-11  |ddm|= 4.46e-12
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
exp = [7.34198630e+04 1.83544132e+04 2.23376274e+03 4.55083916e+02
 1.21317104e+02 3.75170943e+01 4.74084955e+00 3.91188635e-01
 8.59866899e+00 4.90853085e-01]
grad_E = [-2.20581287e-07  7.29304735e-06 -1.35215984e-05 -9.26316468e-06
 -2.21989368e-06 -8.25882308e-07 -1.52521817e-06  9.86397154e-07
  2.30129689e-06  1.02217899e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152797        1
[INPUT] 0    0    [1    /1   ]  2233.75656911        1
[INPUT] 0    0    [1    /1   ]  455.094115882        1
[INPUT] 0    0    [1    /1   ]  121.3200069          1
[INPUT] 0    0    [1    /1   ]  37.5176689698        1
[INPUT] 0    0    [1    /1   ]  4.74085303413        1
[INPUT] 0    0    [1    /1   ]  0.39118871784        1
[INPUT] 1    0    [1    /1   ]  8.5986666061         1
[INPUT] 1    0    [1    /1   ]  0.490852822076       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86288895053, 1.0]], [0, [18354.41527968452, 1.0]], [0, [2233.756569110406, 1.0]], [0, [455.0941158818518, 1.0]], [0, [121.32000689951782, 1.0]], [0, [37.51766896980932, 1.0]], [0, [4.74085303412843, 1.0]], [0, [0.3911887178397283, 1.0]], [1, [8.598666606104421, 1.0]], [1, [0.490852822076203, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86288895]
bas 1, expnt(s) = [18354.41527968]
bas 2, expnt(s) = [2233.75656911]
bas 3, expnt(s) = [455.09411588]
bas 4, expnt(s) = [121.3200069]
bas 5, expnt(s) = [37.51766897]
bas 6, expnt(s) = [4.74085303]
bas 7, expnt(s) = [0.39118872]
bas 8, expnt(s) = [8.59866661]
bas 9, expnt(s) = [0.49085282]
CPU time:       108.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198629e+04 1.12687359e+04 1.83544153e+04 3.98401018e+03
 2.23375657e+03 8.20903120e+02 4.55094116e+02 2.48937853e+02
 1.21320007e+02 9.23558360e+01 3.75176690e+01 3.82993946e+01
 4.74085303e+00 8.11722144e+00 3.91188718e-01 1.24969711e+00
 8.59866661e+00 4.29559453e+01 4.90852822e-01 1.19859789e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982589016956
cond(S) = 44.437964919290394
E1 = -689.047206087143  E_coul = 184.91505321366
init E= -504.132152873483
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897791144123  LUMO = 84.7306018204707
  mo_energy =
[-1.21646673e+02 -1.32808444e+01 -7.62164424e+00 -7.62164424e+00
 -7.62164424e+00 -1.65066005e+00 -6.80897791e-01 -6.80897791e-01
 -6.80897791e-01  8.47306018e+01  6.74437099e+02  3.92850685e+03
  2.99843024e+04  1.63982089e+05]
E1 = -706.5755748104502  E_coul = 198.94468472443228
cycle= 1 E= -507.630890086018  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407298
diis-c [-0.16589183  1.        ]
  HOMO = -0.236283604704549  LUMO = 86.0631426432688
  mo_energy =
[-1.20258824e+02 -1.22527788e+01 -6.65313478e+00 -6.65313478e+00
 -6.65313478e+00 -1.16345715e+00 -2.36283605e-01 -2.36283605e-01
 -2.36283605e-01  8.60631426e+01  6.75807467e+02  3.92975758e+03
  2.99853889e+04  1.63983101e+05]
E1 = -706.5439642617328  E_coul = 198.91264367109935
cycle= 2 E= -507.631320590633  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505327
diis-c [-2.54861732e-05 -5.46045082e-04  1.00054605e+00]
  HOMO = -0.236460014562796  LUMO = 86.0596124716459
  mo_energy =
[-1.20267506e+02 -1.22539753e+01 -6.65498778e+00 -6.65498778e+00
 -6.65498778e+00 -1.16352235e+00 -2.36460015e-01 -2.36460015e-01
 -2.36460015e-01  8.60596125e+01  6.75796845e+02  3.92974163e+03
  2.99853695e+04  1.63983081e+05]
E1 = -706.5435204659377  E_coul = 198.912199764139
cycle= 3 E= -507.631320701799  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127119
diis-c [-3.92639828e-10  3.51307265e-05 -2.54830663e-02  1.02544794e+00]
  HOMO = -0.236462239216161  LUMO = 86.059567658301
  mo_energy =
[-1.20267620e+02 -1.22539911e+01 -6.65501490e+00 -6.65501490e+00
 -6.65501490e+00 -1.16352301e+00 -2.36462239e-01 -2.36462239e-01
 -2.36462239e-01  8.60595677e+01  6.75796727e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435131701485  E_coul = 198.9121924683096
cycle= 4 E= -507.631320701839  delta_E= -4.01e-11  |g|= 3.7e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435131701485  E_coul = 198.9121924683096
  HOMO = -0.236462222985033  LUMO = 86.0595679933986
  mo_energy =
[-1.20267619e+02 -1.22539910e+01 -6.65501474e+00 -6.65501474e+00
 -6.65501474e+00 -1.16352301e+00 -2.36462223e-01 -2.36462223e-01
 -2.36462223e-01  8.60595680e+01  6.75796728e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435132069553  E_coul = 198.91219250511637
Extra cycle  E= -507.631320701839  delta_E= -5.68e-14  |g|= 6.38e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198629e+04 1.83544153e+04 2.23375657e+03 4.55094116e+02
 1.21320007e+02 3.75176690e+01 4.74085303e+00 3.91188718e-01
 8.59866661e+00 4.90852822e-01]
E = -507.6313207018389
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152797        1
[INPUT] 0    0    [1    /1   ]  2233.75656911        1
[INPUT] 0    0    [1    /1   ]  455.094115882        1
[INPUT] 0    0    [1    /1   ]  121.3200069          1
[INPUT] 0    0    [1    /1   ]  37.5176689698        1
[INPUT] 0    0    [1    /1   ]  4.74085303413        1
[INPUT] 0    0    [1    /1   ]  0.39118871784        1
[INPUT] 1    0    [1    /1   ]  8.5986666061         1
[INPUT] 1    0    [1    /1   ]  0.490852822076       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86288895053, 1.0]], [0, [18354.41527968452, 1.0]], [0, [2233.756569110406, 1.0]], [0, [455.0941158818518, 1.0]], [0, [121.32000689951782, 1.0]], [0, [37.51766896980932, 1.0]], [0, [4.74085303412843, 1.0]], [0, [0.3911887178397283, 1.0]], [1, [8.598666606104421, 1.0]], [1, [0.490852822076203, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86288895]
bas 1, expnt(s) = [18354.41527968]
bas 2, expnt(s) = [2233.75656911]
bas 3, expnt(s) = [455.09411588]
bas 4, expnt(s) = [121.3200069]
bas 5, expnt(s) = [37.51766897]
bas 6, expnt(s) = [4.74085303]
bas 7, expnt(s) = [0.39118872]
bas 8, expnt(s) = [8.59866661]
bas 9, expnt(s) = [0.49085282]
CPU time:       108.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198629e+04 1.12687359e+04 1.83544153e+04 3.98401018e+03
 2.23375657e+03 8.20903120e+02 4.55094116e+02 2.48937853e+02
 1.21320007e+02 9.23558360e+01 3.75176690e+01 3.82993946e+01
 4.74085303e+00 8.11722144e+00 3.91188718e-01 1.24969711e+00
 8.59866661e+00 4.29559453e+01 4.90852822e-01 1.19859789e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982589016956
cond(S) = 44.437964919290394
E1 = -689.047206087143  E_coul = 184.91505321366
init E= -504.132152873483
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680897791144123  LUMO = 84.7306018204707
  mo_energy =
[-1.21646673e+02 -1.32808444e+01 -7.62164424e+00 -7.62164424e+00
 -7.62164424e+00 -1.65066005e+00 -6.80897791e-01 -6.80897791e-01
 -6.80897791e-01  8.47306018e+01  6.74437099e+02  3.92850685e+03
  2.99843024e+04  1.63982089e+05]
E1 = -706.5755748104502  E_coul = 198.94468472443228
cycle= 1 E= -507.630890086018  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.407298
diis-c [-0.16589183  1.        ]
  HOMO = -0.236283604704549  LUMO = 86.0631426432688
  mo_energy =
[-1.20258824e+02 -1.22527788e+01 -6.65313478e+00 -6.65313478e+00
 -6.65313478e+00 -1.16345715e+00 -2.36283605e-01 -2.36283605e-01
 -2.36283605e-01  8.60631426e+01  6.75807467e+02  3.92975758e+03
  2.99853889e+04  1.63983101e+05]
E1 = -706.5439642617328  E_coul = 198.91264367109935
cycle= 2 E= -507.631320590633  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00505327
diis-c [-2.54861732e-05 -5.46045082e-04  1.00054605e+00]
  HOMO = -0.236460014562796  LUMO = 86.0596124716459
  mo_energy =
[-1.20267506e+02 -1.22539753e+01 -6.65498778e+00 -6.65498778e+00
 -6.65498778e+00 -1.16352235e+00 -2.36460015e-01 -2.36460015e-01
 -2.36460015e-01  8.60596125e+01  6.75796845e+02  3.92974163e+03
  2.99853695e+04  1.63983081e+05]
E1 = -706.5435204659377  E_coul = 198.912199764139
cycle= 3 E= -507.631320701799  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127119
diis-c [-3.92639828e-10  3.51307265e-05 -2.54830663e-02  1.02544794e+00]
  HOMO = -0.236462239216161  LUMO = 86.059567658301
  mo_energy =
[-1.20267620e+02 -1.22539911e+01 -6.65501490e+00 -6.65501490e+00
 -6.65501490e+00 -1.16352301e+00 -2.36462239e-01 -2.36462239e-01
 -2.36462239e-01  8.60595677e+01  6.75796727e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435131701485  E_coul = 198.9121924683096
cycle= 4 E= -507.631320701839  delta_E= -4.01e-11  |g|= 3.7e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435131701485  E_coul = 198.9121924683096
  HOMO = -0.236462222985033  LUMO = 86.0595679933986
  mo_energy =
[-1.20267619e+02 -1.22539910e+01 -6.65501474e+00 -6.65501474e+00
 -6.65501474e+00 -1.16352301e+00 -2.36462223e-01 -2.36462223e-01
 -2.36462223e-01  8.60595680e+01  6.75796728e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435132069553  E_coul = 198.91219250511637
Extra cycle  E= -507.631320701839  delta_E= -5.68e-14  |g|= 6.38e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 44.437964919290394
E1 = -706.5435132069553  E_coul = 198.91219250511637
init E= -507.631320701839
    CPU time for initialize scf      0.07 sec, wall time      0.07 sec
  HOMO = -0.236462222795027  LUMO = 86.0595679975018
  mo_energy =
[-1.20267619e+02 -1.22539910e+01 -6.65501474e+00 -6.65501474e+00
 -6.65501474e+00 -1.16352301e+00 -2.36462223e-01 -2.36462223e-01
 -2.36462223e-01  8.60595680e+01  6.75796728e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435132075123  E_coul = 198.9121925056736
cycle= 1 E= -507.631320701839  delta_E= 1.71e-13  |g|= 1.26e-10  |ddm|= 2.53e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5435132075123  E_coul = 198.9121925056736
  HOMO = -0.236462222792351  LUMO = 86.0595679975594
  mo_energy =
[-1.20267619e+02 -1.22539910e+01 -6.65501474e+00 -6.65501474e+00
 -6.65501474e+00 -1.16352301e+00 -2.36462223e-01 -2.36462223e-01
 -2.36462223e-01  8.60595680e+01  6.75796728e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.543513207522  E_coul = 198.91219250568338
Extra cycle  E= -507.631320701839  delta_E= 1.14e-13  |g|= 1.93e-11  |ddm|= 4.53e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [7.34198629e+04 1.83544153e+04 2.23375657e+03 4.55094116e+02
 1.21320007e+02 3.75176690e+01 4.74085303e+00 3.91188718e-01
 8.59866661e+00 4.90852822e-01]
grad_E = [-2.20581220e-07  7.29350687e-06 -1.35545485e-05 -9.07263997e-06
 -2.25972171e-06 -5.20435689e-07 -3.31119081e-07  3.27975926e-07
  7.86216901e-07  3.55794998e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.6313207018389
       x: [ 7.342e+04  1.835e+04  2.234e+03  4.551e+02  1.213e+02
            3.752e+01  4.741e+00  3.912e-01  8.599e+00  4.909e-01]
     nit: 31
     jac: [-2.206e-07  7.294e-06 -1.355e-05 -9.073e-06 -2.260e-06
           -5.204e-07 -3.311e-07  3.280e-07  7.862e-07  3.558e-06]
    nfev: 33
    njev: 31
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((10, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "8s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:01:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  73419.862889         1
[INPUT] 0    0    [1    /1   ]  18354.4152797        1
[INPUT] 0    0    [1    /1   ]  2233.75656911        1
[INPUT] 0    0    [1    /1   ]  455.094115882        1
[INPUT] 0    0    [1    /1   ]  121.3200069          1
[INPUT] 0    0    [1    /1   ]  37.5176689698        1
[INPUT] 0    0    [1    /1   ]  4.74085303413        1
[INPUT] 0    0    [1    /1   ]  0.39118871784        1
[INPUT] 1    0    [1    /1   ]  8.5986666061         1
[INPUT] 1    0    [1    /1   ]  0.490852822076       1

nuclear repulsion = 0
number of shells = 10
number of NR pGTOs = 14
number of NR cGTOs = 14
basis = {'Ar': [[0, [73419.86288895053, 1.0]], [0, [18354.41527968452, 1.0]], [0, [2233.756569110406, 1.0]], [0, [455.0941158818518, 1.0]], [0, [121.32000689951782, 1.0]], [0, [37.51766896980932, 1.0]], [0, [4.74085303412843, 1.0]], [0, [0.3911887178397283, 1.0]], [1, [8.598666606104421, 1.0]], [1, [0.490852822076203, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [73419.86288895]
bas 1, expnt(s) = [18354.41527968]
bas 2, expnt(s) = [2233.75656911]
bas 3, expnt(s) = [455.09411588]
bas 4, expnt(s) = [121.3200069]
bas 5, expnt(s) = [37.51766897]
bas 6, expnt(s) = [4.74085303]
bas 7, expnt(s) = [0.39118872]
bas 8, expnt(s) = [8.59866661]
bas 9, expnt(s) = [0.49085282]
CPU time:       112.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  1  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 7.34198629e+04 1.12687359e+04 1.83544153e+04 3.98401018e+03
 2.23375657e+03 8.20903120e+02 4.55094116e+02 2.48937853e+02
 1.21320007e+02 9.23558360e+01 3.75176690e+01 3.82993946e+01
 4.74085303e+00 8.11722144e+00 3.91188718e-01 1.24969711e+00
 8.59866661e+00 4.29559453e+01 4.90852822e-01 1.19859789e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319982589016956
cond(S) = 44.437964919290394
E1 = -689.047206087143  E_coul = 184.91505321366
init E= -504.132152873483
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680897791144123  LUMO = 84.7306018204707
  mo_energy =
[-1.21646673e+02 -1.32808444e+01 -7.62164424e+00 -7.62164424e+00
 -7.62164424e+00 -1.65066005e+00 -6.80897791e-01 -6.80897791e-01
 -6.80897791e-01  8.47306018e+01  6.74437099e+02  3.92850685e+03
  2.99843024e+04  1.63982089e+05]
E1 = -706.5755748104502  E_coul = 198.94468472443228
cycle= 1 E= -507.630890086018  delta_E= -3.5  |g|= 0.318  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.407298
diis-c [-0.16589183  1.        ]
  HOMO = -0.236283604704549  LUMO = 86.0631426432688
  mo_energy =
[-1.20258824e+02 -1.22527788e+01 -6.65313478e+00 -6.65313478e+00
 -6.65313478e+00 -1.16345715e+00 -2.36283605e-01 -2.36283605e-01
 -2.36283605e-01  8.60631426e+01  6.75807467e+02  3.92975758e+03
  2.99853889e+04  1.63983101e+05]
E1 = -706.5439642617328  E_coul = 198.91264367109935
cycle= 2 E= -507.631320590633  delta_E= -0.000431  |g|= 0.00476  |ddm|= 0.0144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00505327
diis-c [-2.54861732e-05 -5.46045082e-04  1.00054605e+00]
  HOMO = -0.236460014562796  LUMO = 86.0596124716459
  mo_energy =
[-1.20267506e+02 -1.22539753e+01 -6.65498778e+00 -6.65498778e+00
 -6.65498778e+00 -1.16352235e+00 -2.36460015e-01 -2.36460015e-01
 -2.36460015e-01  8.60596125e+01  6.75796845e+02  3.92974163e+03
  2.99853695e+04  1.63983081e+05]
E1 = -706.5435204659377  E_coul = 198.912199764139
cycle= 3 E= -507.631320701799  delta_E= -1.11e-07  |g|= 9.51e-05  |ddm|= 0.000203
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000127119
diis-c [-3.92639828e-10  3.51307265e-05 -2.54830663e-02  1.02544794e+00]
  HOMO = -0.236462239216161  LUMO = 86.059567658301
  mo_energy =
[-1.20267620e+02 -1.22539911e+01 -6.65501490e+00 -6.65501490e+00
 -6.65501490e+00 -1.16352301e+00 -2.36462239e-01 -2.36462239e-01
 -2.36462239e-01  8.60595677e+01  6.75796727e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435131701485  E_coul = 198.9121924683096
cycle= 4 E= -507.631320701839  delta_E= -4.01e-11  |g|= 3.7e-07  |ddm|= 3.47e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435131701485  E_coul = 198.9121924683096
  HOMO = -0.236462222985033  LUMO = 86.0595679933986
  mo_energy =
[-1.20267619e+02 -1.22539910e+01 -6.65501474e+00 -6.65501474e+00
 -6.65501474e+00 -1.16352301e+00 -2.36462223e-01 -2.36462223e-01
 -2.36462223e-01  8.60595680e+01  6.75796728e+02  3.92974148e+03
  2.99853694e+04  1.63983080e+05]
E1 = -706.5435132069553  E_coul = 198.91219250511637
Extra cycle  E= -507.631320701839  delta_E= -5.68e-14  |g|= 6.38e-09  |ddm|= 1.63e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [7.34198629e+04 1.83544153e+04 2.23375657e+03 4.55094116e+02
 1.21320007e+02 3.75176690e+01 4.74085303e+00 3.91188718e-01
 8.59866661e+00 4.90852822e-01]
E = -507.6313207018389
E = -507.6313207018389
exp = [7.3419862888950534e+04,1.8354415279684519e+04,2.2337565691104060e+03,4.5509411588185179e+02,1.2132000689951782e+02,3.7517668969809321e+01,4.7408530341284303e+00,3.9118871783972831e-01,8.5986666061044215e+00,4.9085282207620301e-01]
