#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:34:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [800000.0, 1.0]], [0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [800000.]
bas 2, expnt(s) = [18354.96165567]
bas 3, expnt(s) = [2232.15693733]
bas 4, expnt(s) = [457.77843089]
bas 5, expnt(s) = [121.89136989]
bas 6, expnt(s) = [37.61846071]
bas 7, expnt(s) = [4.74115623]
bas 8, expnt(s) = [0.39118886]
bas 9, expnt(s) = [8.59867023]
bas 10, expnt(s) = [0.49085158]
CPU time:         1.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778431e+02 2.50038289e+02 1.21891370e+02 9.26818604e+01
 3.76184607e+01 3.83765377e+01 4.74115623e+00 8.11761078e+00
 3.91188864e-01 1.24969746e+00 8.59867023e+00 4.29559679e+01
 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972794303766
cond(S) = 42.97061973406507
E1 = -688.6351233823672  E_coul = 184.91517051254266
init E= -503.719952869825
    CPU time for initialize scf      0.16 sec, wall time      0.17 sec
  HOMO = -0.680904328564969  LUMO = 85.1877613126908
  mo_energy =
[-1.21646285e+02 -1.32807986e+01 -7.62162572e+00 -7.62162572e+00
 -7.62162572e+00 -1.65067119e+00 -6.80904329e-01 -6.80904329e-01
 -6.80904329e-01  8.51877613e+01  6.78609851e+02  3.94754540e+03
  3.15207049e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5747431604439  E_coul = 198.9446540062338
cycle= 1 E= -507.63008915421  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.38 sec
diis-norm(errvec)=0.377327
diis-c [-0.14237592  1.        ]
  HOMO = -0.23628289650713  LUMO = 86.5208342933314
  mo_energy =
[-1.20258545e+02 -1.22527243e+01 -6.65311814e+00 -6.65311814e+00
 -6.65311814e+00 -1.16345546e+00 -2.36282897e-01 -2.36282897e-01
 -2.36282897e-01  8.65208343e+01  6.79979987e+02  3.94879540e+03
  3.15217854e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5433740767946  E_coul = 198.91285786890901
cycle= 2 E= -507.630516207886  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.12 sec, wall time      0.12 sec
diis-norm(errvec)=0.00503334
diis-c [-2.52497600e-05 -7.72212346e-04  1.00077221e+00]
  HOMO = -0.236457706817866  LUMO = 86.5173187228555
  mo_energy =
[-1.20267172e+02 -1.22539104e+01 -6.65495527e+00 -6.65495527e+00
 -6.65495527e+00 -1.16352007e+00 -2.36457707e-01 -2.36457707e-01
 -2.36457707e-01  8.65173187e+01  6.79969409e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429350817637  E_coul = 198.91241876417948
cycle= 3 E= -507.630516317584  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74638049e-10  3.85671900e-05 -2.52164745e-02  1.02517791e+00]
  HOMO = -0.236459863828124  LUMO = 86.5172751249737
  mo_energy =
[-1.20267283e+02 -1.22539258e+01 -6.65498165e+00 -6.65498165e+00
 -6.65498165e+00 -1.16352071e+00 -2.36459864e-01 -2.36459864e-01
 -2.36459864e-01  8.65172751e+01  6.79969295e+02  3.94877937e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429279911258  E_coul = 198.91241167350327
cycle= 4 E= -507.630516317623  delta_E= -3.83e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429279911258  E_coul = 198.91241167350327
  HOMO = -0.236459848402649  LUMO = 86.517275446042
  mo_energy =
[-1.20267282e+02 -1.22539257e+01 -6.65498150e+00 -6.65498150e+00
 -6.65498150e+00 -1.16352070e+00 -2.36459848e-01 -2.36459848e-01
 -2.36459848e-01  8.65172754e+01  6.79969296e+02  3.94877937e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429280260086  E_coul = 198.91241170838583
Extra cycle  E= -507.630516317623  delta_E= -1.71e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.71 sec, wall time      0.72 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778431e+02 1.21891370e+02 3.76184607e+01 4.74115623e+00
 3.91188864e-01 8.59867023e+00 4.90851581e-01]
E = -507.6305163176227
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:34:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616557        1
[INPUT] 0    0    [1    /1   ]  2232.15693733        1
[INPUT] 0    0    [1    /1   ]  457.778430886        1
[INPUT] 0    0    [1    /1   ]  121.891369888        1
[INPUT] 0    0    [1    /1   ]  37.6184607146        1
[INPUT] 0    0    [1    /1   ]  4.74115622749        1
[INPUT] 0    0    [1    /1   ]  0.391188864          1
[INPUT] 1    0    [1    /1   ]  8.59867023247        1
[INPUT] 1    0    [1    /1   ]  0.490851580864       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [800000.0, 1.0]], [0, [18354.961655666553, 1.0]], [0, [2232.1569373256953, 1.0]], [0, [457.77843088607506, 1.0]], [0, [121.89136988757589, 1.0]], [0, [37.61846071461031, 1.0]], [0, [4.741156227489762, 1.0]], [0, [0.3911888640001866, 1.0]], [1, [8.598670232469381, 1.0]], [1, [0.4908515808635091, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [800000.]
bas 2, expnt(s) = [18354.96165567]
bas 3, expnt(s) = [2232.15693733]
bas 4, expnt(s) = [457.77843089]
bas 5, expnt(s) = [121.89136989]
bas 6, expnt(s) = [37.61846071]
bas 7, expnt(s) = [4.74115623]
bas 8, expnt(s) = [0.39118886]
bas 9, expnt(s) = [8.59867023]
bas 10, expnt(s) = [0.49085158]
CPU time:         2.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778431e+02 2.50038289e+02 1.21891370e+02 9.26818604e+01
 3.76184607e+01 3.83765377e+01 4.74115623e+00 8.11761078e+00
 3.91188864e-01 1.24969746e+00 8.59867023e+00 4.29559679e+01
 4.90851581e-01 1.19859410e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972794303766
cond(S) = 42.97061973406507
E1 = -688.6351233823672  E_coul = 184.91517051254266
init E= -503.719952869825
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680904328564969  LUMO = 85.1877613126908
  mo_energy =
[-1.21646285e+02 -1.32807986e+01 -7.62162572e+00 -7.62162572e+00
 -7.62162572e+00 -1.65067119e+00 -6.80904329e-01 -6.80904329e-01
 -6.80904329e-01  8.51877613e+01  6.78609851e+02  3.94754540e+03
  3.15207049e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5747431604439  E_coul = 198.9446540062338
cycle= 1 E= -507.63008915421  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377327
diis-c [-0.14237592  1.        ]
  HOMO = -0.23628289650713  LUMO = 86.5208342933314
  mo_energy =
[-1.20258545e+02 -1.22527243e+01 -6.65311814e+00 -6.65311814e+00
 -6.65311814e+00 -1.16345546e+00 -2.36282897e-01 -2.36282897e-01
 -2.36282897e-01  8.65208343e+01  6.79979987e+02  3.94879540e+03
  3.15217854e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5433740767946  E_coul = 198.91285786890901
cycle= 2 E= -507.630516207886  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00503334
diis-c [-2.52497600e-05 -7.72212346e-04  1.00077221e+00]
  HOMO = -0.236457706817866  LUMO = 86.5173187228555
  mo_energy =
[-1.20267172e+02 -1.22539104e+01 -6.65495527e+00 -6.65495527e+00
 -6.65495527e+00 -1.16352007e+00 -2.36457707e-01 -2.36457707e-01
 -2.36457707e-01  8.65173187e+01  6.79969409e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429350817637  E_coul = 198.91241876417948
cycle= 3 E= -507.630516317584  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74638049e-10  3.85671900e-05 -2.52164745e-02  1.02517791e+00]
  HOMO = -0.236459863828124  LUMO = 86.5172751249737
  mo_energy =
[-1.20267283e+02 -1.22539258e+01 -6.65498165e+00 -6.65498165e+00
 -6.65498165e+00 -1.16352071e+00 -2.36459864e-01 -2.36459864e-01
 -2.36459864e-01  8.65172751e+01  6.79969295e+02  3.94877937e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429279911258  E_coul = 198.91241167350327
cycle= 4 E= -507.630516317623  delta_E= -3.83e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.01 sec, wall time      0.02 sec
E1 = -706.5429279911258  E_coul = 198.91241167350327
  HOMO = -0.236459848402649  LUMO = 86.517275446042
  mo_energy =
[-1.20267282e+02 -1.22539257e+01 -6.65498150e+00 -6.65498150e+00
 -6.65498150e+00 -1.16352070e+00 -2.36459848e-01 -2.36459848e-01
 -2.36459848e-01  8.65172754e+01  6.79969296e+02  3.94877937e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429280260086  E_coul = 198.91241170838583
Extra cycle  E= -507.630516317623  delta_E= -1.71e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.09 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97061973406507
E1 = -706.5429280260086  E_coul = 198.91241170838583
init E= -507.630516317623
    CPU time for initialize scf      0.38 sec, wall time      0.38 sec
  HOMO = -0.236459848223028  LUMO = 86.5172754499536
  mo_energy =
[-1.20267282e+02 -1.22539257e+01 -6.65498149e+00 -6.65498149e+00
 -6.65498149e+00 -1.16352070e+00 -2.36459848e-01 -2.36459848e-01
 -2.36459848e-01  8.65172754e+01  6.79969296e+02  3.94877937e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429280265336  E_coul = 198.91241170891107
cycle= 1 E= -507.630516317622  delta_E= 2.27e-13  |g|= 1.33e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5429280265336  E_coul = 198.91241170891107
  HOMO = -0.236459848220508  LUMO = 86.5172754500082
  mo_energy =
[-1.20267282e+02 -1.22539257e+01 -6.65498149e+00 -6.65498149e+00
 -6.65498149e+00 -1.16352070e+00 -2.36459848e-01 -2.36459848e-01
 -2.36459848e-01  8.65172755e+01  6.79969296e+02  3.94877937e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429280265425  E_coul = 198.91241170891993
Extra cycle  E= -507.630516317623  delta_E= -1.14e-13  |g|= 1e-10  |ddm|= 4.23e-12
    CPU time for scf_cycle      1.42 sec, wall time      1.42 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778431e+02 1.21891370e+02 3.76184607e+01 4.74115623e+00
 3.91188864e-01 8.59867023e+00 4.90851581e-01]
grad_E = [ 1.58637598e-10  9.14388586e-09  4.38898259e-06 -1.68825120e-06
  5.61604156e-06 -1.08587640e-05  9.93833105e-06 -1.01524085e-04
 -1.29145288e-04  1.33533045e-05  2.74644856e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:34:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616513        1
[INPUT] 0    0    [1    /1   ]  2232.15693901        1
[INPUT] 0    0    [1    /1   ]  457.77842527         1
[INPUT] 0    0    [1    /1   ]  121.891380746        1
[INPUT] 0    0    [1    /1   ]  37.6184507763        1
[INPUT] 0    0    [1    /1   ]  4.74125775157        1
[INPUT] 0    0    [1    /1   ]  0.391318009288       1
[INPUT] 1    0    [1    /1   ]  8.59865687916        1
[INPUT] 1    0    [1    /1   ]  0.490848834415       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999908, 1.0]], [0, [18354.961651277572, 1.0]], [0, [2232.1569390139466, 1.0]], [0, [457.7784252700335, 1.0]], [0, [121.89138074633989, 1.0]], [0, [37.61845077627926, 1.0]], [0, [4.741257751574571, 1.0]], [0, [0.39131800928787364, 1.0]], [1, [8.5986568791649, 1.0]], [1, [0.49084883441495075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999999]
bas 2, expnt(s) = [18354.96165128]
bas 3, expnt(s) = [2232.15693901]
bas 4, expnt(s) = [457.77842527]
bas 5, expnt(s) = [121.89138075]
bas 6, expnt(s) = [37.61845078]
bas 7, expnt(s) = [4.74125775]
bas 8, expnt(s) = [0.39131801]
bas 9, expnt(s) = [8.59865688]
bas 10, expnt(s) = [0.49084883]
CPU time:         9.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462184e+02
 4.57778425e+02 2.50038287e+02 1.21891381e+02 9.26818666e+01
 3.76184508e+01 3.83765301e+01 4.74125775e+00 8.11774114e+00
 3.91318009e-01 1.25000687e+00 8.59865688e+00 4.29558846e+01
 4.90848834e-01 1.19858572e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319959855447166
cond(S) = 42.97113802444383
E1 = -688.6373476005393  E_coul = 184.9171186421755
init E= -503.720228958364
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680847298118173  LUMO = 85.1888521170351
  mo_energy =
[-1.21646121e+02 -1.32806552e+01 -7.62146238e+00 -7.62146238e+00
 -7.62146238e+00 -1.65067454e+00 -6.80847298e-01 -6.80847298e-01
 -6.80847298e-01  8.51888521e+01  6.78610716e+02  3.94754613e+03
  3.15207055e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5773228143707  E_coul = 198.94723370182083
cycle= 1 E= -507.63008911255  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377331
diis-c [-0.14237904  1.        ]
  HOMO = -0.236214931514539  LUMO = 86.5219736856121
  mo_energy =
[-1.20258294e+02 -1.22525488e+01 -6.65291664e+00 -6.65291664e+00
 -6.65291664e+00 -1.16340007e+00 -2.36214932e-01 -2.36214932e-01
 -2.36214932e-01  8.65219737e+01  6.79980949e+02  3.94879625e+03
  3.15217862e+04  1.12121517e+06  7.13808436e+06]
E1 = -706.5459550451387  E_coul = 198.9154389475461
cycle= 2 E= -507.630516097593  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503295
diis-c [-2.52459575e-05 -7.71606055e-04  1.00077161e+00]
  HOMO = -0.23638973080323  LUMO = 86.5184582491238
  mo_energy =
[-1.20266921e+02 -1.22537349e+01 -6.65475366e+00 -6.65475366e+00
 -6.65475366e+00 -1.16346470e+00 -2.36389731e-01 -2.36389731e-01
 -2.36389731e-01  8.65184582e+01  6.79970371e+02  3.94878036e+03
  3.15217669e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455160712172  E_coul = 198.9149998639412
cycle= 3 E= -507.630516207276  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012511
diis-c [-3.74588147e-10  3.85669897e-05 -2.52174019e-02  1.02517883e+00]
  HOMO = -0.23639188785342  LUMO = 86.5184146510777
  mo_energy =
[-1.20267032e+02 -1.22537503e+01 -6.65478003e+00 -6.65478003e+00
 -6.65478003e+00 -1.16346534e+00 -2.36391888e-01 -2.36391888e-01
 -2.36391888e-01  8.65184147e+01  6.79970257e+02  3.94878022e+03
  3.15217667e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455089807122  E_coul = 198.9149927733972
cycle= 4 E= -507.630516207315  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5455089807122  E_coul = 198.9149927733972
  HOMO = -0.23639187242781  LUMO = 86.5184149721519
  mo_energy =
[-1.20267031e+02 -1.22537502e+01 -6.65477988e+00 -6.65477988e+00
 -6.65477988e+00 -1.16346533e+00 -2.36391872e-01 -2.36391872e-01
 -2.36391872e-01  8.65184150e+01  6.79970258e+02  3.94878022e+03
  3.15217667e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455090155959  E_coul = 198.91499280828117
Extra cycle  E= -507.630516207315  delta_E= 1.71e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778425e+02 1.21891381e+02 3.76184508e+01 4.74125775e+00
 3.91318009e-01 8.59865688e+00 4.90848834e-01]
E = -507.63051620731477
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:34:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616513        1
[INPUT] 0    0    [1    /1   ]  2232.15693901        1
[INPUT] 0    0    [1    /1   ]  457.77842527         1
[INPUT] 0    0    [1    /1   ]  121.891380746        1
[INPUT] 0    0    [1    /1   ]  37.6184507763        1
[INPUT] 0    0    [1    /1   ]  4.74125775157        1
[INPUT] 0    0    [1    /1   ]  0.391318009288       1
[INPUT] 1    0    [1    /1   ]  8.59865687916        1
[INPUT] 1    0    [1    /1   ]  0.490848834415       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999908, 1.0]], [0, [18354.961651277572, 1.0]], [0, [2232.1569390139466, 1.0]], [0, [457.7784252700335, 1.0]], [0, [121.89138074633989, 1.0]], [0, [37.61845077627926, 1.0]], [0, [4.741257751574571, 1.0]], [0, [0.39131800928787364, 1.0]], [1, [8.5986568791649, 1.0]], [1, [0.49084883441495075, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999999]
bas 2, expnt(s) = [18354.96165128]
bas 3, expnt(s) = [2232.15693901]
bas 4, expnt(s) = [457.77842527]
bas 5, expnt(s) = [121.89138075]
bas 6, expnt(s) = [37.61845078]
bas 7, expnt(s) = [4.74125775]
bas 8, expnt(s) = [0.39131801]
bas 9, expnt(s) = [8.59865688]
bas 10, expnt(s) = [0.49084883]
CPU time:         9.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462184e+02
 4.57778425e+02 2.50038287e+02 1.21891381e+02 9.26818666e+01
 3.76184508e+01 3.83765301e+01 4.74125775e+00 8.11774114e+00
 3.91318009e-01 1.25000687e+00 8.59865688e+00 4.29558846e+01
 4.90848834e-01 1.19858572e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319959855447166
cond(S) = 42.97113802444383
E1 = -688.6373476005393  E_coul = 184.9171186421755
init E= -503.720228958364
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680847298118173  LUMO = 85.1888521170351
  mo_energy =
[-1.21646121e+02 -1.32806552e+01 -7.62146238e+00 -7.62146238e+00
 -7.62146238e+00 -1.65067454e+00 -6.80847298e-01 -6.80847298e-01
 -6.80847298e-01  8.51888521e+01  6.78610716e+02  3.94754613e+03
  3.15207055e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5773228143707  E_coul = 198.94723370182083
cycle= 1 E= -507.63008911255  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377331
diis-c [-0.14237904  1.        ]
  HOMO = -0.236214931514539  LUMO = 86.5219736856121
  mo_energy =
[-1.20258294e+02 -1.22525488e+01 -6.65291664e+00 -6.65291664e+00
 -6.65291664e+00 -1.16340007e+00 -2.36214932e-01 -2.36214932e-01
 -2.36214932e-01  8.65219737e+01  6.79980949e+02  3.94879625e+03
  3.15217862e+04  1.12121517e+06  7.13808436e+06]
E1 = -706.5459550451387  E_coul = 198.9154389475461
cycle= 2 E= -507.630516097593  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503295
diis-c [-2.52459575e-05 -7.71606055e-04  1.00077161e+00]
  HOMO = -0.23638973080323  LUMO = 86.5184582491238
  mo_energy =
[-1.20266921e+02 -1.22537349e+01 -6.65475366e+00 -6.65475366e+00
 -6.65475366e+00 -1.16346470e+00 -2.36389731e-01 -2.36389731e-01
 -2.36389731e-01  8.65184582e+01  6.79970371e+02  3.94878036e+03
  3.15217669e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455160712172  E_coul = 198.9149998639412
cycle= 3 E= -507.630516207276  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00012511
diis-c [-3.74588147e-10  3.85669897e-05 -2.52174019e-02  1.02517883e+00]
  HOMO = -0.23639188785342  LUMO = 86.5184146510777
  mo_energy =
[-1.20267032e+02 -1.22537503e+01 -6.65478003e+00 -6.65478003e+00
 -6.65478003e+00 -1.16346534e+00 -2.36391888e-01 -2.36391888e-01
 -2.36391888e-01  8.65184147e+01  6.79970257e+02  3.94878022e+03
  3.15217667e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455089807122  E_coul = 198.9149927733972
cycle= 4 E= -507.630516207315  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5455089807122  E_coul = 198.9149927733972
  HOMO = -0.23639187242781  LUMO = 86.5184149721519
  mo_energy =
[-1.20267031e+02 -1.22537502e+01 -6.65477988e+00 -6.65477988e+00
 -6.65477988e+00 -1.16346533e+00 -2.36391872e-01 -2.36391872e-01
 -2.36391872e-01  8.65184150e+01  6.79970258e+02  3.94878022e+03
  3.15217667e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455090155959  E_coul = 198.91499280828117
Extra cycle  E= -507.630516207315  delta_E= 1.71e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97113802444383
E1 = -706.5455090155959  E_coul = 198.91499280828117
init E= -507.630516207315
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236391872248187  LUMO = 86.5184149760641
  mo_energy =
[-1.20267031e+02 -1.22537502e+01 -6.65477988e+00 -6.65477988e+00
 -6.65477988e+00 -1.16346533e+00 -2.36391872e-01 -2.36391872e-01
 -2.36391872e-01  8.65184150e+01  6.79970258e+02  3.94878022e+03
  3.15217667e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455090161211  E_coul = 198.9149928088063
cycle= 1 E= -507.630516207315  delta_E=    0  |g|= 1.4e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5455090161211  E_coul = 198.9149928088063
  HOMO = -0.236391872245666  LUMO = 86.5184149761208
  mo_energy =
[-1.20267031e+02 -1.22537502e+01 -6.65477988e+00 -6.65477988e+00
 -6.65477988e+00 -1.16346533e+00 -2.36391872e-01 -2.36391872e-01
 -2.36391872e-01  8.65184150e+01  6.79970258e+02  3.94878022e+03
  3.15217667e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5455090161295  E_coul = 198.91499280881501
Extra cycle  E= -507.630516207314  delta_E= 2.84e-13  |g|= 5.4e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.16 sec, wall time      0.16 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778425e+02 1.21891381e+02 3.76184508e+01 4.74125775e+00
 3.91318009e-01 8.59865688e+00 4.90848834e-01]
grad_E = [ 1.58638088e-10  9.14391369e-09  4.38898923e-06 -1.68779905e-06
  5.60338604e-06 -1.08319158e-05  9.55766767e-06 -2.35530002e-05
  1.94978495e-03  2.19769162e-05  2.98927548e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616552        1
[INPUT] 0    0    [1    /1   ]  2232.15693749        1
[INPUT] 0    0    [1    /1   ]  457.778430327        1
[INPUT] 0    0    [1    /1   ]  121.891370969        1
[INPUT] 0    0    [1    /1   ]  37.6184597248        1
[INPUT] 0    0    [1    /1   ]  4.74116633855        1
[INPUT] 0    0    [1    /1   ]  0.391201725936       1
[INPUT] 1    0    [1    /1   ]  8.59866890258        1
[INPUT] 1    0    [1    /1   ]  0.490851307337       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999991, 1.0]], [0, [18354.961655229443, 1.0]], [0, [2232.1569374938326, 1.0]], [0, [457.778430326758, 1.0]], [0, [121.89137096903015, 1.0]], [0, [37.61845972482451, 1.0]], [0, [4.741166338553376, 1.0]], [0, [0.39120172593557523, 1.0]], [1, [8.598668902576959, 1.0]], [1, [0.49085130733712234, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [800000.]
bas 2, expnt(s) = [18354.96165523]
bas 3, expnt(s) = [2232.15693749]
bas 4, expnt(s) = [457.77843033]
bas 5, expnt(s) = [121.89137097]
bas 6, expnt(s) = [37.61845972]
bas 7, expnt(s) = [4.74116634]
bas 8, expnt(s) = [0.39120173]
bas 9, expnt(s) = [8.5986689]
bas 10, expnt(s) = [0.49085131]
CPU time:        12.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778430e+02 2.50038289e+02 1.21891371e+02 9.26818610e+01
 3.76184597e+01 3.83765369e+01 4.74116634e+00 8.11762376e+00
 3.91201726e-01 1.24972828e+00 8.59866890e+00 4.29559596e+01
 4.90851307e-01 1.19859326e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997151164201
cond(S) = 42.970671349779764
E1 = -688.6353450553001  E_coul = 184.9153646301727
init E= -503.719980425127
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680898644342108  LUMO = 85.1878699548661
  mo_energy =
[-1.21646268e+02 -1.32807843e+01 -7.62160945e+00 -7.62160945e+00
 -7.62160945e+00 -1.65067153e+00 -6.80898644e-01 -6.80898644e-01
 -6.80898644e-01  8.51878700e+01  6.78609937e+02  3.94754547e+03
  3.15207050e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5750001185269  E_coul = 198.94491095611338
cycle= 1 E= -507.630089162413  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237623  1.        ]
  HOMO = -0.236276126536701  LUMO = 86.5209477695046
  mo_energy =
[-1.20258520e+02 -1.22527068e+01 -6.65309807e+00 -6.65309807e+00
 -6.65309807e+00 -1.16344995e+00 -2.36276127e-01 -2.36276127e-01
 -2.36276127e-01  8.65209478e+01  6.79980083e+02  3.94879548e+03
  3.15217855e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436311657609  E_coul = 198.91311495650714
cycle= 2 E= -507.630516209254  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050333
diis-c [-2.52493813e-05 -7.72151981e-04  1.00077215e+00]
  HOMO = -0.236450935749921  LUMO = 86.5174322123711
  mo_energy =
[-1.20267147e+02 -1.22538929e+01 -6.65493519e+00 -6.65493519e+00
 -6.65493519e+00 -1.16351456e+00 -2.36450936e-01 -2.36450936e-01
 -2.36450936e-01  8.65174322e+01  6.79969505e+02  3.94877959e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431921728318  E_coul = 198.91267585388127
cycle= 3 E= -507.630516318951  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74632494e-10  3.85672520e-05 -2.52165680e-02  1.02517800e+00]
  HOMO = -0.236453092764148  LUMO = 86.5173886144745
  mo_energy =
[-1.20267258e+02 -1.22539083e+01 -6.65496157e+00 -6.65496157e+00
 -6.65496157e+00 -1.16351520e+00 -2.36453093e-01 -2.36453093e-01
 -2.36453093e-01  8.65173886e+01  6.79969391e+02  3.94877945e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543185082207  E_coul = 198.91266876321805
cycle= 4 E= -507.630516318989  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543185082207  E_coul = 198.91266876321805
  HOMO = -0.23645307733867  LUMO = 86.5173889355414
  mo_energy =
[-1.20267257e+02 -1.22539082e+01 -6.65496141e+00 -6.65496141e+00
 -6.65496141e+00 -1.16351519e+00 -2.36453077e-01 -2.36453077e-01
 -2.36453077e-01  8.65173889e+01  6.79969392e+02  3.94877945e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431851170908  E_coul = 198.9126687981012
Extra cycle  E= -507.63051631899  delta_E= -7.39e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778430e+02 1.21891371e+02 3.76184597e+01 4.74116634e+00
 3.91201726e-01 8.59866890e+00 4.90851307e-01]
E = -507.63051631898963
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616552        1
[INPUT] 0    0    [1    /1   ]  2232.15693749        1
[INPUT] 0    0    [1    /1   ]  457.778430327        1
[INPUT] 0    0    [1    /1   ]  121.891370969        1
[INPUT] 0    0    [1    /1   ]  37.6184597248        1
[INPUT] 0    0    [1    /1   ]  4.74116633855        1
[INPUT] 0    0    [1    /1   ]  0.391201725936       1
[INPUT] 1    0    [1    /1   ]  8.59866890258        1
[INPUT] 1    0    [1    /1   ]  0.490851307337       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999991, 1.0]], [0, [18354.961655229443, 1.0]], [0, [2232.1569374938326, 1.0]], [0, [457.778430326758, 1.0]], [0, [121.89137096903015, 1.0]], [0, [37.61845972482451, 1.0]], [0, [4.741166338553376, 1.0]], [0, [0.39120172593557523, 1.0]], [1, [8.598668902576959, 1.0]], [1, [0.49085130733712234, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [800000.]
bas 2, expnt(s) = [18354.96165523]
bas 3, expnt(s) = [2232.15693749]
bas 4, expnt(s) = [457.77843033]
bas 5, expnt(s) = [121.89137097]
bas 6, expnt(s) = [37.61845972]
bas 7, expnt(s) = [4.74116634]
bas 8, expnt(s) = [0.39120173]
bas 9, expnt(s) = [8.5986689]
bas 10, expnt(s) = [0.49085131]
CPU time:        13.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778430e+02 2.50038289e+02 1.21891371e+02 9.26818610e+01
 3.76184597e+01 3.83765369e+01 4.74116634e+00 8.11762376e+00
 3.91201726e-01 1.24972828e+00 8.59866890e+00 4.29559596e+01
 4.90851307e-01 1.19859326e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997151164201
cond(S) = 42.970671349779764
E1 = -688.6353450553001  E_coul = 184.9153646301727
init E= -503.719980425127
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680898644342108  LUMO = 85.1878699548661
  mo_energy =
[-1.21646268e+02 -1.32807843e+01 -7.62160945e+00 -7.62160945e+00
 -7.62160945e+00 -1.65067153e+00 -6.80898644e-01 -6.80898644e-01
 -6.80898644e-01  8.51878700e+01  6.78609937e+02  3.94754547e+03
  3.15207050e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5750001185269  E_coul = 198.94491095611338
cycle= 1 E= -507.630089162413  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237623  1.        ]
  HOMO = -0.236276126536701  LUMO = 86.5209477695046
  mo_energy =
[-1.20258520e+02 -1.22527068e+01 -6.65309807e+00 -6.65309807e+00
 -6.65309807e+00 -1.16344995e+00 -2.36276127e-01 -2.36276127e-01
 -2.36276127e-01  8.65209478e+01  6.79980083e+02  3.94879548e+03
  3.15217855e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436311657609  E_coul = 198.91311495650714
cycle= 2 E= -507.630516209254  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050333
diis-c [-2.52493813e-05 -7.72151981e-04  1.00077215e+00]
  HOMO = -0.236450935749921  LUMO = 86.5174322123711
  mo_energy =
[-1.20267147e+02 -1.22538929e+01 -6.65493519e+00 -6.65493519e+00
 -6.65493519e+00 -1.16351456e+00 -2.36450936e-01 -2.36450936e-01
 -2.36450936e-01  8.65174322e+01  6.79969505e+02  3.94877959e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431921728318  E_coul = 198.91267585388127
cycle= 3 E= -507.630516318951  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74632494e-10  3.85672520e-05 -2.52165680e-02  1.02517800e+00]
  HOMO = -0.236453092764148  LUMO = 86.5173886144745
  mo_energy =
[-1.20267258e+02 -1.22539083e+01 -6.65496157e+00 -6.65496157e+00
 -6.65496157e+00 -1.16351520e+00 -2.36453093e-01 -2.36453093e-01
 -2.36453093e-01  8.65173886e+01  6.79969391e+02  3.94877945e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543185082207  E_coul = 198.91266876321805
cycle= 4 E= -507.630516318989  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543185082207  E_coul = 198.91266876321805
  HOMO = -0.23645307733867  LUMO = 86.5173889355414
  mo_energy =
[-1.20267257e+02 -1.22539082e+01 -6.65496141e+00 -6.65496141e+00
 -6.65496141e+00 -1.16351519e+00 -2.36453077e-01 -2.36453077e-01
 -2.36453077e-01  8.65173889e+01  6.79969392e+02  3.94877945e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431851170908  E_coul = 198.9126687981012
Extra cycle  E= -507.63051631899  delta_E= -7.39e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.970671349779764
E1 = -706.5431851170908  E_coul = 198.9126687981012
init E= -507.63051631899
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236453077159046  LUMO = 86.5173889394529
  mo_energy =
[-1.20267257e+02 -1.22539082e+01 -6.65496141e+00 -6.65496141e+00
 -6.65496141e+00 -1.16351519e+00 -2.36453077e-01 -2.36453077e-01
 -2.36453077e-01  8.65173889e+01  6.79969392e+02  3.94877945e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431851176153  E_coul = 198.91266879862613
cycle= 1 E= -507.630516318989  delta_E= 4.55e-13  |g|= 1.2e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431851176153  E_coul = 198.91266879862613
  HOMO = -0.236453077156529  LUMO = 86.5173889395082
  mo_energy =
[-1.20267257e+02 -1.22539082e+01 -6.65496141e+00 -6.65496141e+00
 -6.65496141e+00 -1.16351519e+00 -2.36453077e-01 -2.36453077e-01
 -2.36453077e-01  8.65173889e+01  6.79969392e+02  3.94877945e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431851176248  E_coul = 198.91266879863528
Extra cycle  E= -507.63051631899  delta_E= -3.41e-13  |g|= 8.86e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.16 sec, wall time      0.16 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778430e+02 1.21891371e+02 3.76184597e+01 4.74116634e+00
 3.91201726e-01 8.59866890e+00 4.90851307e-01]
grad_E = [ 1.58637647e-10  9.14388863e-09  4.38898325e-06 -1.68820616e-06
  5.61478107e-06 -1.08560889e-05  9.90040954e-06 -9.37597192e-05
  7.79522815e-05  1.42121662e-05  3.22482799e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.961654         1
[INPUT] 0    0    [1    /1   ]  2232.15693795        1
[INPUT] 0    0    [1    /1   ]  457.778428815        1
[INPUT] 0    0    [1    /1   ]  121.891373892        1
[INPUT] 0    0    [1    /1   ]  37.6184570558        1
[INPUT] 0    0    [1    /1   ]  4.7411923599         1
[INPUT] 0    0    [1    /1   ]  0.391201579139       1
[INPUT] 1    0    [1    /1   ]  8.59866516308        1
[INPUT] 1    0    [1    /1   ]  0.490845594548       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999966, 1.0]], [0, [18354.96165404793, 1.0]], [0, [2232.156937948302, 1.0]], [0, [457.7784288151326, 1.0]], [0, [121.89137389175751, 1.0]], [0, [37.6184570558195, 1.0]], [0, [4.741192359904355, 1.0]], [0, [0.3912015791387299, 1.0]], [1, [8.59866516308086, 1.0]], [1, [0.4908455945477835, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [800000.]
bas 2, expnt(s) = [18354.96165405]
bas 3, expnt(s) = [2232.15693795]
bas 4, expnt(s) = [457.77842882]
bas 5, expnt(s) = [121.89137389]
bas 6, expnt(s) = [37.61845706]
bas 7, expnt(s) = [4.74119236]
bas 8, expnt(s) = [0.39120158]
bas 9, expnt(s) = [8.59866516]
bas 10, expnt(s) = [0.49084559]
CPU time:        16.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778429e+02 2.50038288e+02 1.21891374e+02 9.26818627e+01
 3.76184571e+01 3.83765349e+01 4.74119236e+00 8.11765717e+00
 3.91201579e-01 1.24972792e+00 8.59866516e+00 4.29559363e+01
 4.90845595e-01 1.19857583e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978504202947
cond(S) = 42.970719898945376
E1 = -688.6351585305775  E_coul = 184.915184191678
init E= -503.7199743389
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680905569630047  LUMO = 85.1879652556371
  mo_energy =
[-1.21646284e+02 -1.32808000e+01 -7.62161953e+00 -7.62161953e+00
 -7.62161953e+00 -1.65067765e+00 -6.80905570e-01 -6.80905570e-01
 -6.80905570e-01  8.51879653e+01  6.78610012e+02  3.94754553e+03
  3.15207050e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5747419893829  E_coul = 198.9446528125794
cycle= 1 E= -507.630089176803  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237615  1.        ]
  HOMO = -0.236288759744537  LUMO = 86.5210390221762
  mo_energy =
[-1.20258537e+02 -1.22527276e+01 -6.65311264e+00 -6.65311264e+00
 -6.65311264e+00 -1.16345984e+00 -2.36288760e-01 -2.36288760e-01
 -2.36288760e-01  8.65210390e+01  6.79980158e+02  3.94879554e+03
  3.15217856e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5433734902042  E_coul = 198.91285727903517
cycle= 2 E= -507.630516211169  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050332
diis-c [-2.52483492e-05 -7.72065063e-04  1.00077207e+00]
  HOMO = -0.236463563115109  LUMO = 86.5175235155339
  mo_energy =
[-1.20267164e+02 -1.22539137e+01 -6.65494973e+00 -6.65494973e+00
 -6.65494973e+00 -1.16352445e+00 -2.36463563e-01 -2.36463563e-01
 -2.36463563e-01  8.65175235e+01  6.79969579e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429345044813  E_coul = 198.91241818361885
cycle= 3 E= -507.630516320862  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125113
diis-c [-3.74624929e-10  3.85675738e-05 -2.52166986e-02  1.02517813e+00]
  HOMO = -0.236465720064703  LUMO = 86.5174799180281
  mo_energy =
[-1.20267274e+02 -1.22539291e+01 -6.65497610e+00 -6.65497610e+00
 -6.65497610e+00 -1.16352509e+00 -2.36465720e-01 -2.36465720e-01
 -2.36465720e-01  8.65174799e+01  6.79969466e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429274139402  E_coul = 198.91241109303922
cycle= 4 E= -507.630516320901  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429274139402  E_coul = 198.91241109303922
  HOMO = -0.236465704639691  LUMO = 86.5174802390909
  mo_energy =
[-1.20267274e+02 -1.22539290e+01 -6.65497595e+00 -6.65497595e+00
 -6.65497595e+00 -1.16352508e+00 -2.36465705e-01 -2.36465705e-01
 -2.36465705e-01  8.65174802e+01  6.79969467e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429274488223  E_coul = 198.91241112792156
Extra cycle  E= -507.630516320901  delta_E= 2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778429e+02 1.21891374e+02 3.76184571e+01 4.74119236e+00
 3.91201579e-01 8.59866516e+00 4.90845595e-01]
E = -507.6305163209007
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.961654         1
[INPUT] 0    0    [1    /1   ]  2232.15693795        1
[INPUT] 0    0    [1    /1   ]  457.778428815        1
[INPUT] 0    0    [1    /1   ]  121.891373892        1
[INPUT] 0    0    [1    /1   ]  37.6184570558        1
[INPUT] 0    0    [1    /1   ]  4.7411923599         1
[INPUT] 0    0    [1    /1   ]  0.391201579139       1
[INPUT] 1    0    [1    /1   ]  8.59866516308        1
[INPUT] 1    0    [1    /1   ]  0.490845594548       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999966, 1.0]], [0, [18354.96165404793, 1.0]], [0, [2232.156937948302, 1.0]], [0, [457.7784288151326, 1.0]], [0, [121.89137389175751, 1.0]], [0, [37.6184570558195, 1.0]], [0, [4.741192359904355, 1.0]], [0, [0.3912015791387299, 1.0]], [1, [8.59866516308086, 1.0]], [1, [0.4908455945477835, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [800000.]
bas 2, expnt(s) = [18354.96165405]
bas 3, expnt(s) = [2232.15693795]
bas 4, expnt(s) = [457.77842882]
bas 5, expnt(s) = [121.89137389]
bas 6, expnt(s) = [37.61845706]
bas 7, expnt(s) = [4.74119236]
bas 8, expnt(s) = [0.39120158]
bas 9, expnt(s) = [8.59866516]
bas 10, expnt(s) = [0.49084559]
CPU time:        16.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462183e+02
 4.57778429e+02 2.50038288e+02 1.21891374e+02 9.26818627e+01
 3.76184571e+01 3.83765349e+01 4.74119236e+00 8.11765717e+00
 3.91201579e-01 1.24972792e+00 8.59866516e+00 4.29559363e+01
 4.90845595e-01 1.19857583e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319978504202947
cond(S) = 42.970719898945376
E1 = -688.6351585305775  E_coul = 184.915184191678
init E= -503.7199743389
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680905569630047  LUMO = 85.1879652556371
  mo_energy =
[-1.21646284e+02 -1.32808000e+01 -7.62161953e+00 -7.62161953e+00
 -7.62161953e+00 -1.65067765e+00 -6.80905570e-01 -6.80905570e-01
 -6.80905570e-01  8.51879653e+01  6.78610012e+02  3.94754553e+03
  3.15207050e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5747419893829  E_coul = 198.9446528125794
cycle= 1 E= -507.630089176803  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237615  1.        ]
  HOMO = -0.236288759744537  LUMO = 86.5210390221762
  mo_energy =
[-1.20258537e+02 -1.22527276e+01 -6.65311264e+00 -6.65311264e+00
 -6.65311264e+00 -1.16345984e+00 -2.36288760e-01 -2.36288760e-01
 -2.36288760e-01  8.65210390e+01  6.79980158e+02  3.94879554e+03
  3.15217856e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5433734902042  E_coul = 198.91285727903517
cycle= 2 E= -507.630516211169  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050332
diis-c [-2.52483492e-05 -7.72065063e-04  1.00077207e+00]
  HOMO = -0.236463563115109  LUMO = 86.5175235155339
  mo_energy =
[-1.20267164e+02 -1.22539137e+01 -6.65494973e+00 -6.65494973e+00
 -6.65494973e+00 -1.16352445e+00 -2.36463563e-01 -2.36463563e-01
 -2.36463563e-01  8.65175235e+01  6.79969579e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429345044813  E_coul = 198.91241818361885
cycle= 3 E= -507.630516320862  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125113
diis-c [-3.74624929e-10  3.85675738e-05 -2.52166986e-02  1.02517813e+00]
  HOMO = -0.236465720064703  LUMO = 86.5174799180281
  mo_energy =
[-1.20267274e+02 -1.22539291e+01 -6.65497610e+00 -6.65497610e+00
 -6.65497610e+00 -1.16352509e+00 -2.36465720e-01 -2.36465720e-01
 -2.36465720e-01  8.65174799e+01  6.79969466e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429274139402  E_coul = 198.91241109303922
cycle= 4 E= -507.630516320901  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429274139402  E_coul = 198.91241109303922
  HOMO = -0.236465704639691  LUMO = 86.5174802390909
  mo_energy =
[-1.20267274e+02 -1.22539290e+01 -6.65497595e+00 -6.65497595e+00
 -6.65497595e+00 -1.16352508e+00 -2.36465705e-01 -2.36465705e-01
 -2.36465705e-01  8.65174802e+01  6.79969467e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429274488223  E_coul = 198.91241112792156
Extra cycle  E= -507.630516320901  delta_E= 2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.970719898945376
E1 = -706.5429274488223  E_coul = 198.91241112792156
init E= -507.630516320901
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236465704460078  LUMO = 86.5174802430035
  mo_energy =
[-1.20267274e+02 -1.22539290e+01 -6.65497595e+00 -6.65497595e+00
 -6.65497595e+00 -1.16352508e+00 -2.36465704e-01 -2.36465704e-01
 -2.36465704e-01  8.65174802e+01  6.79969467e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5429274493478  E_coul = 198.91241112844673
cycle= 1 E= -507.630516320901  delta_E= -3.41e-13  |g|= 1.28e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5429274493478  E_coul = 198.91241112844673
  HOMO = -0.236465704457558  LUMO = 86.5174802430589
  mo_energy =
[-1.20267274e+02 -1.22539290e+01 -6.65497595e+00 -6.65497595e+00
 -6.65497595e+00 -1.16352508e+00 -2.36465704e-01 -2.36465704e-01
 -2.36465704e-01  8.65174802e+01  6.79969467e+02  3.94877951e+03
  3.15217661e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.542927449357  E_coul = 198.91241112845577
Extra cycle  E= -507.630516320901  delta_E= -1.14e-13  |g|= 4.5e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778429e+02 1.21891374e+02 3.76184571e+01 4.74119236e+00
 3.91201579e-01 8.59866516e+00 4.90845595e-01]
grad_E = [ 1.58637697e-10  9.14389150e-09  4.38898451e-06 -1.68822732e-06
  5.61474336e-06 -1.08903756e-05  1.00043182e-05 -7.31154570e-05
  5.77608396e-05  1.80828021e-05 -1.73419584e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616522        1
[INPUT] 0    0    [1    /1   ]  2232.15693866        1
[INPUT] 0    0    [1    /1   ]  457.778426458        1
[INPUT] 0    0    [1    /1   ]  121.891378452        1
[INPUT] 0    0    [1    /1   ]  37.6184528876        1
[INPUT] 0    0    [1    /1   ]  4.74123150455        1
[INPUT] 0    0    [1    /1   ]  0.391199594145       1
[INPUT] 1    0    [1    /1   ]  8.59865907156        1
[INPUT] 1    0    [1    /1   ]  0.490849398093       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999928, 1.0]], [0, [18354.961652205442, 1.0]], [0, [2232.156938657016, 1.0]], [0, [457.77842645788087, 1.0]], [0, [121.89137845169594, 1.0]], [0, [37.61845288761139, 1.0]], [0, [4.741231504554692, 1.0]], [0, [0.3911995941449789, 1.0]], [1, [8.598659071556295, 1.0]], [1, [0.49084939809294365, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999999]
bas 2, expnt(s) = [18354.96165221]
bas 3, expnt(s) = [2232.15693866]
bas 4, expnt(s) = [457.77842646]
bas 5, expnt(s) = [121.89137845]
bas 6, expnt(s) = [37.61845289]
bas 7, expnt(s) = [4.7412315]
bas 8, expnt(s) = [0.39119959]
bas 9, expnt(s) = [8.59865907]
bas 10, expnt(s) = [0.4908494]
CPU time:        20.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462184e+02
 4.57778426e+02 2.50038287e+02 1.21891378e+02 9.26818653e+01
 3.76184529e+01 3.83765317e+01 4.74123150e+00 8.11770744e+00
 3.91199594e-01 1.24972317e+00 8.59865907e+00 4.29558982e+01
 4.90849398e-01 1.19858744e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973283952645
cond(S) = 42.97078828355752
E1 = -688.6352980770432  E_coul = 184.91529577438095
init E= -503.720002302662
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090163812404  LUMO = 85.1881341722485
  mo_energy =
[-1.21646276e+02 -1.32807912e+01 -7.62161217e+00 -7.62161217e+00
 -7.62161217e+00 -1.65067522e+00 -6.80901638e-01 -6.80901638e-01
 -6.80901638e-01  8.51881342e+01  6.78610152e+02  3.94754564e+03
  3.15207051e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749695044543  E_coul = 198.94488031117345
cycle= 1 E= -507.630089193281  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237639  1.        ]
  HOMO = -0.236280335692862  LUMO = 86.5212177943096
  mo_energy =
[-1.20258513e+02 -1.22527117e+01 -6.65309821e+00 -6.65309821e+00
 -6.65309821e+00 -1.16345419e+00 -2.36280336e-01 -2.36280336e-01
 -2.36280336e-01  8.65212178e+01  6.79980314e+02  3.94879568e+03
  3.15217857e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543601509362  E_coul = 198.9130852952989
cycle= 2 E= -507.630516214063  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503306
diis-c [-2.52470312e-05 -7.71935163e-04  1.00077194e+00]
  HOMO = -0.236455138915779  LUMO = 86.5177023450387
  mo_energy =
[-1.20267140e+02 -1.22538977e+01 -6.65493527e+00 -6.65493527e+00
 -6.65493527e+00 -1.16351880e+00 -2.36455139e-01 -2.36455139e-01
 -2.36455139e-01  8.65177023e+01  6.79969736e+02  3.94877979e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431625322254  E_coul = 198.91264620847429
cycle= 3 E= -507.630516323751  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125111
diis-c [-3.74618885e-10  3.85680405e-05 -2.52168830e-02  1.02517831e+00]
  HOMO = -0.23645729587929  LUMO = 86.5176587479147
  mo_energy =
[-1.20267251e+02 -1.22539131e+01 -6.65496164e+00 -6.65496164e+00
 -6.65496164e+00 -1.16351944e+00 -2.36457296e-01 -2.36457296e-01
 -2.36457296e-01  8.65176587e+01  6.79969622e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431554417767  E_coul = 198.91263911798666
cycle= 4 E= -507.63051632379  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431554417767  E_coul = 198.91263911798666
  HOMO = -0.236457280454254  LUMO = 86.5176590689727
  mo_energy =
[-1.20267250e+02 -1.22539130e+01 -6.65496149e+00 -6.65496149e+00
 -6.65496149e+00 -1.16351943e+00 -2.36457280e-01 -2.36457280e-01
 -2.36457280e-01  8.65176591e+01  6.79969623e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431554766587  E_coul = 198.9126391528687
Extra cycle  E= -507.63051632379  delta_E= -5.68e-14  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778426e+02 1.21891378e+02 3.76184529e+01 4.74123150e+00
 3.91199594e-01 8.59865907e+00 4.90849398e-01]
E = -507.63051632379006
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616522        1
[INPUT] 0    0    [1    /1   ]  2232.15693866        1
[INPUT] 0    0    [1    /1   ]  457.778426458        1
[INPUT] 0    0    [1    /1   ]  121.891378452        1
[INPUT] 0    0    [1    /1   ]  37.6184528876        1
[INPUT] 0    0    [1    /1   ]  4.74123150455        1
[INPUT] 0    0    [1    /1   ]  0.391199594145       1
[INPUT] 1    0    [1    /1   ]  8.59865907156        1
[INPUT] 1    0    [1    /1   ]  0.490849398093       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3200000.0, 1.0]], [0, [799999.9999999928, 1.0]], [0, [18354.961652205442, 1.0]], [0, [2232.156938657016, 1.0]], [0, [457.77842645788087, 1.0]], [0, [121.89137845169594, 1.0]], [0, [37.61845288761139, 1.0]], [0, [4.741231504554692, 1.0]], [0, [0.3911995941449789, 1.0]], [1, [8.598659071556295, 1.0]], [1, [0.49084939809294365, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999999]
bas 2, expnt(s) = [18354.96165221]
bas 3, expnt(s) = [2232.15693866]
bas 4, expnt(s) = [457.77842646]
bas 5, expnt(s) = [121.89137845]
bas 6, expnt(s) = [37.61845289]
bas 7, expnt(s) = [4.7412315]
bas 8, expnt(s) = [0.39119959]
bas 9, expnt(s) = [8.59865907]
bas 10, expnt(s) = [0.4908494]
CPU time:        20.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549617e+04 3.98409913e+03 2.23215694e+03 8.20462184e+02
 4.57778426e+02 2.50038287e+02 1.21891378e+02 9.26818653e+01
 3.76184529e+01 3.83765317e+01 4.74123150e+00 8.11770744e+00
 3.91199594e-01 1.24972317e+00 8.59865907e+00 4.29558982e+01
 4.90849398e-01 1.19858744e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973283952645
cond(S) = 42.97078828355752
E1 = -688.6352980770432  E_coul = 184.91529577438095
init E= -503.720002302662
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.68090163812404  LUMO = 85.1881341722485
  mo_energy =
[-1.21646276e+02 -1.32807912e+01 -7.62161217e+00 -7.62161217e+00
 -7.62161217e+00 -1.65067522e+00 -6.80901638e-01 -6.80901638e-01
 -6.80901638e-01  8.51881342e+01  6.78610152e+02  3.94754564e+03
  3.15207051e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749695044543  E_coul = 198.94488031117345
cycle= 1 E= -507.630089193281  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237639  1.        ]
  HOMO = -0.236280335692862  LUMO = 86.5212177943096
  mo_energy =
[-1.20258513e+02 -1.22527117e+01 -6.65309821e+00 -6.65309821e+00
 -6.65309821e+00 -1.16345419e+00 -2.36280336e-01 -2.36280336e-01
 -2.36280336e-01  8.65212178e+01  6.79980314e+02  3.94879568e+03
  3.15217857e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543601509362  E_coul = 198.9130852952989
cycle= 2 E= -507.630516214063  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503306
diis-c [-2.52470312e-05 -7.71935163e-04  1.00077194e+00]
  HOMO = -0.236455138915779  LUMO = 86.5177023450387
  mo_energy =
[-1.20267140e+02 -1.22538977e+01 -6.65493527e+00 -6.65493527e+00
 -6.65493527e+00 -1.16351880e+00 -2.36455139e-01 -2.36455139e-01
 -2.36455139e-01  8.65177023e+01  6.79969736e+02  3.94877979e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431625322254  E_coul = 198.91264620847429
cycle= 3 E= -507.630516323751  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125111
diis-c [-3.74618885e-10  3.85680405e-05 -2.52168830e-02  1.02517831e+00]
  HOMO = -0.23645729587929  LUMO = 86.5176587479147
  mo_energy =
[-1.20267251e+02 -1.22539131e+01 -6.65496164e+00 -6.65496164e+00
 -6.65496164e+00 -1.16351944e+00 -2.36457296e-01 -2.36457296e-01
 -2.36457296e-01  8.65176587e+01  6.79969622e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431554417767  E_coul = 198.91263911798666
cycle= 4 E= -507.63051632379  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431554417767  E_coul = 198.91263911798666
  HOMO = -0.236457280454254  LUMO = 86.5176590689727
  mo_energy =
[-1.20267250e+02 -1.22539130e+01 -6.65496149e+00 -6.65496149e+00
 -6.65496149e+00 -1.16351943e+00 -2.36457280e-01 -2.36457280e-01
 -2.36457280e-01  8.65176591e+01  6.79969623e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431554766587  E_coul = 198.9126391528687
Extra cycle  E= -507.63051632379  delta_E= -5.68e-14  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97078828355752
E1 = -706.5431554766587  E_coul = 198.9126391528687
init E= -507.63051632379
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236457280274636  LUMO = 86.5176590728847
  mo_energy =
[-1.20267250e+02 -1.22539130e+01 -6.65496149e+00 -6.65496149e+00
 -6.65496149e+00 -1.16351943e+00 -2.36457280e-01 -2.36457280e-01
 -2.36457280e-01  8.65176591e+01  6.79969623e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431554771837  E_coul = 198.91263915339363
cycle= 1 E= -507.63051632379  delta_E= -5.68e-14  |g|= 1.23e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431554771837  E_coul = 198.91263915339363
  HOMO = -0.236457280272122  LUMO = 86.5176590729411
  mo_energy =
[-1.20267250e+02 -1.22539130e+01 -6.65496149e+00 -6.65496149e+00
 -6.65496149e+00 -1.16351943e+00 -2.36457280e-01 -2.36457280e-01
 -2.36457280e-01  8.65176591e+01  6.79969623e+02  3.94877965e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431554771926  E_coul = 198.9126391534026
Extra cycle  E= -507.63051632379  delta_E= 1.14e-13  |g|= 6.28e-11  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.26 sec, wall time      0.30 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549617e+04 2.23215694e+03
 4.57778426e+02 1.21891378e+02 3.76184529e+01 4.74123150e+00
 3.91199594e-01 8.59865907e+00 4.90849398e-01]
grad_E = [ 1.58637766e-10  9.14389551e-09  4.38898641e-06 -1.68827168e-06
  5.61497211e-06 -1.09467243e-05  1.01836968e-05 -4.01030458e-05
  3.42779745e-05  1.13515092e-05 -2.54609930e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616451        1
[INPUT] 0    0    [1    /1   ]  2232.15694138        1
[INPUT] 0    0    [1    /1   ]  457.778417416        1
[INPUT] 0    0    [1    /1   ]  121.891396102        1
[INPUT] 0    0    [1    /1   ]  37.6184364094        1
[INPUT] 0    0    [1    /1   ]  4.74128433652        1
[INPUT] 0    0    [1    /1   ]  0.391197649208       1
[INPUT] 1    0    [1    /1   ]  8.59864335017        1
[INPUT] 1    0    [1    /1   ]  0.490849581106       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999995, 1.0]], [0, [799999.9999999781, 1.0]], [0, [18354.961645138235, 1.0]], [0, [2232.156941375521, 1.0]], [0, [457.7784174162271, 1.0]], [0, [121.89139610160728, 1.0]], [0, [37.618436409411906, 1.0]], [0, [4.741284336524965, 1.0]], [0, [0.3911976492076633, 1.0]], [1, [8.598643350165394, 1.0]], [1, [0.49084958110646254, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999998]
bas 2, expnt(s) = [18354.96164514]
bas 3, expnt(s) = [2232.15694138]
bas 4, expnt(s) = [457.77841742]
bas 5, expnt(s) = [121.8913961]
bas 6, expnt(s) = [37.61843641]
bas 7, expnt(s) = [4.74128434]
bas 8, expnt(s) = [0.39119765]
bas 9, expnt(s) = [8.59864335]
bas 10, expnt(s) = [0.49084958]
CPU time:        25.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409913e+03 2.23215694e+03 8.20462184e+02
 4.57778417e+02 2.50038284e+02 1.21891396e+02 9.26818753e+01
 3.76184364e+01 3.83765191e+01 4.74128434e+00 8.11777528e+00
 3.91197649e-01 1.24971851e+00 8.59864335e+00 4.29558001e+01
 4.90849581e-01 1.19858799e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997254535722
cond(S) = 42.970869328055855
E1 = -688.6352847166563  E_coul = 184.91525970961146
init E= -503.720025007045
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901953081091  LUMO = 85.1883286579748
  mo_energy =
[-1.21646284e+02 -1.32807947e+01 -7.62161363e+00 -7.62161363e+00
 -7.62161363e+00 -1.65067670e+00 -6.80901953e-01 -6.80901953e-01
 -6.80901953e-01  8.51883287e+01  6.78610308e+02  3.94754577e+03
  3.15207052e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749917975345  E_coul = 198.94490258185394
cycle= 1 E= -507.630089215681  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237648  1.        ]
  HOMO = -0.236279916804541  LUMO = 86.5214185594715
  mo_energy =
[-1.20258509e+02 -1.22527118e+01 -6.65309606e+00 -6.65309606e+00
 -6.65309606e+00 -1.16345492e+00 -2.36279917e-01 -2.36279917e-01
 -2.36279917e-01  8.65214186e+01  6.79980485e+02  3.94879582e+03
  3.15217858e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436245701478  E_coul = 198.9131083545231
cycle= 2 E= -507.630516215625  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503287
diis-c [-2.52451384e-05 -7.71755088e-04  1.00077176e+00]
  HOMO = -0.236454716175442  LUMO = 86.5179031963113
  mo_energy =
[-1.20267136e+02 -1.22538979e+01 -6.65493306e+00 -6.65493306e+00
 -6.65493306e+00 -1.16351953e+00 -2.36454716e-01 -2.36454716e-01
 -2.36454716e-01  8.65179032e+01  6.79969907e+02  3.94877993e+03
  3.15217665e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543185605721  E_coul = 198.91266928041435
cycle= 3 E= -507.630516325307  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125107
diis-c [-3.74607768e-10  3.85687593e-05 -2.52171455e-02  1.02517858e+00]
  HOMO = -0.236456873111323  LUMO = 86.5178595997825
  mo_energy =
[-1.20267246e+02 -1.22539133e+01 -6.65495943e+00 -6.65495943e+00
 -6.65495943e+00 -1.16352017e+00 -2.36456873e-01 -2.36456873e-01
 -2.36456873e-01  8.65178596e+01  6.79969793e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431785154102  E_coul = 198.91266219006516
cycle= 4 E= -507.630516325345  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431785154102  E_coul = 198.91266219006516
  HOMO = -0.236456857686573  LUMO = 86.5178599208332
  mo_energy =
[-1.20267245e+02 -1.22539132e+01 -6.65495928e+00 -6.65495928e+00
 -6.65495928e+00 -1.16352016e+00 -2.36456858e-01 -2.36456858e-01
 -2.36456858e-01  8.65178599e+01  6.79969794e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431785502919  E_coul = 198.91266222494662
Extra cycle  E= -507.630516325345  delta_E= -2.27e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215694e+03
 4.57778417e+02 1.21891396e+02 3.76184364e+01 4.74128434e+00
 3.91197649e-01 8.59864335e+00 4.90849581e-01]
E = -507.6305163253453
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616451        1
[INPUT] 0    0    [1    /1   ]  2232.15694138        1
[INPUT] 0    0    [1    /1   ]  457.778417416        1
[INPUT] 0    0    [1    /1   ]  121.891396102        1
[INPUT] 0    0    [1    /1   ]  37.6184364094        1
[INPUT] 0    0    [1    /1   ]  4.74128433652        1
[INPUT] 0    0    [1    /1   ]  0.391197649208       1
[INPUT] 1    0    [1    /1   ]  8.59864335017        1
[INPUT] 1    0    [1    /1   ]  0.490849581106       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999995, 1.0]], [0, [799999.9999999781, 1.0]], [0, [18354.961645138235, 1.0]], [0, [2232.156941375521, 1.0]], [0, [457.7784174162271, 1.0]], [0, [121.89139610160728, 1.0]], [0, [37.618436409411906, 1.0]], [0, [4.741284336524965, 1.0]], [0, [0.3911976492076633, 1.0]], [1, [8.598643350165394, 1.0]], [1, [0.49084958110646254, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999998]
bas 2, expnt(s) = [18354.96164514]
bas 3, expnt(s) = [2232.15694138]
bas 4, expnt(s) = [457.77841742]
bas 5, expnt(s) = [121.8913961]
bas 6, expnt(s) = [37.61843641]
bas 7, expnt(s) = [4.74128434]
bas 8, expnt(s) = [0.39119765]
bas 9, expnt(s) = [8.59864335]
bas 10, expnt(s) = [0.49084958]
CPU time:        25.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409913e+03 2.23215694e+03 8.20462184e+02
 4.57778417e+02 2.50038284e+02 1.21891396e+02 9.26818753e+01
 3.76184364e+01 3.83765191e+01 4.74128434e+00 8.11777528e+00
 3.91197649e-01 1.24971851e+00 8.59864335e+00 4.29558001e+01
 4.90849581e-01 1.19858799e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997254535722
cond(S) = 42.970869328055855
E1 = -688.6352847166563  E_coul = 184.91525970961146
init E= -503.720025007045
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901953081091  LUMO = 85.1883286579748
  mo_energy =
[-1.21646284e+02 -1.32807947e+01 -7.62161363e+00 -7.62161363e+00
 -7.62161363e+00 -1.65067670e+00 -6.80901953e-01 -6.80901953e-01
 -6.80901953e-01  8.51883287e+01  6.78610308e+02  3.94754577e+03
  3.15207052e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749917975345  E_coul = 198.94490258185394
cycle= 1 E= -507.630089215681  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237648  1.        ]
  HOMO = -0.236279916804541  LUMO = 86.5214185594715
  mo_energy =
[-1.20258509e+02 -1.22527118e+01 -6.65309606e+00 -6.65309606e+00
 -6.65309606e+00 -1.16345492e+00 -2.36279917e-01 -2.36279917e-01
 -2.36279917e-01  8.65214186e+01  6.79980485e+02  3.94879582e+03
  3.15217858e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436245701478  E_coul = 198.9131083545231
cycle= 2 E= -507.630516215625  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503287
diis-c [-2.52451384e-05 -7.71755088e-04  1.00077176e+00]
  HOMO = -0.236454716175442  LUMO = 86.5179031963113
  mo_energy =
[-1.20267136e+02 -1.22538979e+01 -6.65493306e+00 -6.65493306e+00
 -6.65493306e+00 -1.16351953e+00 -2.36454716e-01 -2.36454716e-01
 -2.36454716e-01  8.65179032e+01  6.79969907e+02  3.94877993e+03
  3.15217665e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543185605721  E_coul = 198.91266928041435
cycle= 3 E= -507.630516325307  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125107
diis-c [-3.74607768e-10  3.85687593e-05 -2.52171455e-02  1.02517858e+00]
  HOMO = -0.236456873111323  LUMO = 86.5178595997825
  mo_energy =
[-1.20267246e+02 -1.22539133e+01 -6.65495943e+00 -6.65495943e+00
 -6.65495943e+00 -1.16352017e+00 -2.36456873e-01 -2.36456873e-01
 -2.36456873e-01  8.65178596e+01  6.79969793e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431785154102  E_coul = 198.91266219006516
cycle= 4 E= -507.630516325345  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431785154102  E_coul = 198.91266219006516
  HOMO = -0.236456857686573  LUMO = 86.5178599208332
  mo_energy =
[-1.20267245e+02 -1.22539132e+01 -6.65495928e+00 -6.65495928e+00
 -6.65495928e+00 -1.16352016e+00 -2.36456858e-01 -2.36456858e-01
 -2.36456858e-01  8.65178599e+01  6.79969794e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431785502919  E_coul = 198.91266222494662
Extra cycle  E= -507.630516325345  delta_E= -2.27e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.970869328055855
E1 = -706.5431785502919  E_coul = 198.91266222494662
init E= -507.630516325345
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456857506957  LUMO = 86.5178599247451
  mo_energy =
[-1.20267245e+02 -1.22539132e+01 -6.65495928e+00 -6.65495928e+00
 -6.65495928e+00 -1.16352016e+00 -2.36456858e-01 -2.36456858e-01
 -2.36456858e-01  8.65178599e+01  6.79969794e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431785508166  E_coul = 198.9126622254715
cycle= 1 E= -507.630516325345  delta_E= 2.27e-13  |g|= 1.42e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5431785508166  E_coul = 198.9126622254715
  HOMO = -0.23645685750444  LUMO = 86.5178599248026
  mo_energy =
[-1.20267245e+02 -1.22539132e+01 -6.65495928e+00 -6.65495928e+00
 -6.65495928e+00 -1.16352016e+00 -2.36456858e-01 -2.36456858e-01
 -2.36456858e-01  8.65178599e+01  6.79969794e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431785508252  E_coul = 198.9126622254804
Extra cycle  E= -507.630516325345  delta_E= 2.27e-13  |g|= 9.49e-11  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215694e+03
 4.57778417e+02 1.21891396e+02 3.76184364e+01 4.74128434e+00
 3.91197649e-01 8.59864335e+00 4.90849581e-01]
grad_E = [ 1.58637879e-10  9.14390173e-09  4.38898437e-06 -1.68793249e-06
  5.60693291e-06 -1.09531614e-05  1.02161013e-05  3.12988326e-06
 -2.79047640e-07  7.73623981e-07 -8.83268115e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616393        1
[INPUT] 0    0    [1    /1   ]  2232.15694363        1
[INPUT] 0    0    [1    /1   ]  457.778409931        1
[INPUT] 0    0    [1    /1   ]  121.891410718        1
[INPUT] 0    0    [1    /1   ]  37.618422782         1
[INPUT] 0    0    [1    /1   ]  4.74129021612        1
[INPUT] 0    0    [1    /1   ]  0.391197437743       1
[INPUT] 1    0    [1    /1   ]  8.59864021895        1
[INPUT] 1    0    [1    /1   ]  0.490849591071       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999995, 1.0]], [0, [799999.9999999659, 1.0]], [0, [18354.96163928053, 1.0]], [0, [2232.156943628375, 1.0]], [0, [457.77840993120293, 1.0]], [0, [121.89141071821699, 1.0]], [0, [37.61842278203228, 1.0]], [0, [4.741290216117052, 1.0]], [0, [0.3911974377433803, 1.0]], [1, [8.59864021895461, 1.0]], [1, [0.4908495910713655, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999997]
bas 2, expnt(s) = [18354.96163928]
bas 3, expnt(s) = [2232.15694363]
bas 4, expnt(s) = [457.77840993]
bas 5, expnt(s) = [121.89141072]
bas 6, expnt(s) = [37.61842278]
bas 7, expnt(s) = [4.74129022]
bas 8, expnt(s) = [0.39119744]
bas 9, expnt(s) = [8.59864022]
bas 10, expnt(s) = [0.49084959]
CPU time:        29.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409912e+03 2.23215694e+03 8.20462185e+02
 4.57778410e+02 2.50038281e+02 1.21891411e+02 9.26818837e+01
 3.76184228e+01 3.83765086e+01 4.74129022e+00 8.11778283e+00
 3.91197438e-01 1.24971800e+00 8.59864022e+00 4.29557805e+01
 4.90849591e-01 1.19858803e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997248127418
cond(S) = 42.970864121489164
E1 = -688.635276337701  E_coul = 184.91524915510894
init E= -503.720027182592
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901982015361  LUMO = 85.188330367072
  mo_energy =
[-1.21646287e+02 -1.32807955e+01 -7.62161426e+00 -7.62161426e+00
 -7.62161426e+00 -1.65067688e+00 -6.80901982e-01 -6.80901982e-01
 -6.80901982e-01  8.51883304e+01  6.78610309e+02  3.94754577e+03
  3.15207052e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749861585739  E_coul = 198.94489694035045
cycle= 1 E= -507.630089218223  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237645  1.        ]
  HOMO = -0.23627989708942  LUMO = 86.5214207418363
  mo_energy =
[-1.20258510e+02 -1.22527124e+01 -6.65309639e+00 -6.65309639e+00
 -6.65309639e+00 -1.16345505e+00 -2.36279897e-01 -2.36279897e-01
 -2.36279897e-01  8.65214207e+01  6.79980487e+02  3.94879582e+03
  3.15217858e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436190059553  E_coul = 198.9131027899945
cycle= 2 E= -507.630516215961  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503285
diis-c [-2.52449433e-05 -7.71730983e-04  1.00077173e+00]
  HOMO = -0.23645469605919  LUMO = 86.5179053868523
  mo_energy =
[-1.20267137e+02 -1.22538984e+01 -6.65493339e+00 -6.65493339e+00
 -6.65493339e+00 -1.16351966e+00 -2.36454696e-01 -2.36454696e-01
 -2.36454696e-01  8.65179054e+01  6.79969909e+02  3.94877993e+03
  3.15217665e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431800427789  E_coul = 198.91266371713715
cycle= 3 E= -507.630516325642  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125107
diis-c [-3.74606831e-10  3.85687878e-05 -2.52171783e-02  1.02517861e+00]
  HOMO = -0.236456852993097  LUMO = 86.5178617903552
  mo_energy =
[-1.20267247e+02 -1.22539138e+01 -6.65495976e+00 -6.65495976e+00
 -6.65495976e+00 -1.16352029e+00 -2.36456853e-01 -2.36456853e-01
 -2.36456853e-01  8.65178618e+01  6.79969795e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431729524793  E_coul = 198.91265662679874
cycle= 4 E= -507.630516325681  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5431729524793  E_coul = 198.91265662679874
  HOMO = -0.236456837568359  LUMO = 86.5178621114062
  mo_energy =
[-1.20267247e+02 -1.22539137e+01 -6.65495961e+00 -6.65495961e+00
 -6.65495961e+00 -1.16352029e+00 -2.36456838e-01 -2.36456838e-01
 -2.36456838e-01  8.65178621e+01  6.79969796e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431729873602  E_coul = 198.9126566616799
Extra cycle  E= -507.63051632568  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215694e+03
 4.57778410e+02 1.21891411e+02 3.76184228e+01 4.74129022e+00
 3.91197438e-01 8.59864022e+00 4.90849591e-01]
E = -507.63051632568033
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616393        1
[INPUT] 0    0    [1    /1   ]  2232.15694363        1
[INPUT] 0    0    [1    /1   ]  457.778409931        1
[INPUT] 0    0    [1    /1   ]  121.891410718        1
[INPUT] 0    0    [1    /1   ]  37.618422782         1
[INPUT] 0    0    [1    /1   ]  4.74129021612        1
[INPUT] 0    0    [1    /1   ]  0.391197437743       1
[INPUT] 1    0    [1    /1   ]  8.59864021895        1
[INPUT] 1    0    [1    /1   ]  0.490849591071       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999995, 1.0]], [0, [799999.9999999659, 1.0]], [0, [18354.96163928053, 1.0]], [0, [2232.156943628375, 1.0]], [0, [457.77840993120293, 1.0]], [0, [121.89141071821699, 1.0]], [0, [37.61842278203228, 1.0]], [0, [4.741290216117052, 1.0]], [0, [0.3911974377433803, 1.0]], [1, [8.59864021895461, 1.0]], [1, [0.4908495910713655, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999997]
bas 2, expnt(s) = [18354.96163928]
bas 3, expnt(s) = [2232.15694363]
bas 4, expnt(s) = [457.77840993]
bas 5, expnt(s) = [121.89141072]
bas 6, expnt(s) = [37.61842278]
bas 7, expnt(s) = [4.74129022]
bas 8, expnt(s) = [0.39119744]
bas 9, expnt(s) = [8.59864022]
bas 10, expnt(s) = [0.49084959]
CPU time:        30.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409912e+03 2.23215694e+03 8.20462185e+02
 4.57778410e+02 2.50038281e+02 1.21891411e+02 9.26818837e+01
 3.76184228e+01 3.83765086e+01 4.74129022e+00 8.11778283e+00
 3.91197438e-01 1.24971800e+00 8.59864022e+00 4.29557805e+01
 4.90849591e-01 1.19858803e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997248127418
cond(S) = 42.970864121489164
E1 = -688.635276337701  E_coul = 184.91524915510894
init E= -503.720027182592
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901982015361  LUMO = 85.188330367072
  mo_energy =
[-1.21646287e+02 -1.32807955e+01 -7.62161426e+00 -7.62161426e+00
 -7.62161426e+00 -1.65067688e+00 -6.80901982e-01 -6.80901982e-01
 -6.80901982e-01  8.51883304e+01  6.78610309e+02  3.94754577e+03
  3.15207052e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749861585739  E_coul = 198.94489694035045
cycle= 1 E= -507.630089218223  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237645  1.        ]
  HOMO = -0.23627989708942  LUMO = 86.5214207418363
  mo_energy =
[-1.20258510e+02 -1.22527124e+01 -6.65309639e+00 -6.65309639e+00
 -6.65309639e+00 -1.16345505e+00 -2.36279897e-01 -2.36279897e-01
 -2.36279897e-01  8.65214207e+01  6.79980487e+02  3.94879582e+03
  3.15217858e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436190059553  E_coul = 198.9131027899945
cycle= 2 E= -507.630516215961  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503285
diis-c [-2.52449433e-05 -7.71730983e-04  1.00077173e+00]
  HOMO = -0.23645469605919  LUMO = 86.5179053868523
  mo_energy =
[-1.20267137e+02 -1.22538984e+01 -6.65493339e+00 -6.65493339e+00
 -6.65493339e+00 -1.16351966e+00 -2.36454696e-01 -2.36454696e-01
 -2.36454696e-01  8.65179054e+01  6.79969909e+02  3.94877993e+03
  3.15217665e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431800427789  E_coul = 198.91266371713715
cycle= 3 E= -507.630516325642  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125107
diis-c [-3.74606831e-10  3.85687878e-05 -2.52171783e-02  1.02517861e+00]
  HOMO = -0.236456852993097  LUMO = 86.5178617903552
  mo_energy =
[-1.20267247e+02 -1.22539138e+01 -6.65495976e+00 -6.65495976e+00
 -6.65495976e+00 -1.16352029e+00 -2.36456853e-01 -2.36456853e-01
 -2.36456853e-01  8.65178618e+01  6.79969795e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431729524793  E_coul = 198.91265662679874
cycle= 4 E= -507.630516325681  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431729524793  E_coul = 198.91265662679874
  HOMO = -0.236456837568359  LUMO = 86.5178621114062
  mo_energy =
[-1.20267247e+02 -1.22539137e+01 -6.65495961e+00 -6.65495961e+00
 -6.65495961e+00 -1.16352029e+00 -2.36456838e-01 -2.36456838e-01
 -2.36456838e-01  8.65178621e+01  6.79969796e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431729873602  E_coul = 198.9126566616799
Extra cycle  E= -507.63051632568  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.970864121489164
E1 = -706.5431729873602  E_coul = 198.9126566616799
init E= -507.63051632568
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236456837388749  LUMO = 86.5178621153173
  mo_energy =
[-1.20267247e+02 -1.22539137e+01 -6.65495961e+00 -6.65495961e+00
 -6.65495961e+00 -1.16352029e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65178621e+01  6.79969796e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431729878858  E_coul = 198.912656662205
cycle= 1 E= -507.630516325681  delta_E= -4.55e-13  |g|= 1.23e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431729878858  E_coul = 198.912656662205
  HOMO = -0.236456837386228  LUMO = 86.5178621153739
  mo_energy =
[-1.20267247e+02 -1.22539137e+01 -6.65495961e+00 -6.65495961e+00
 -6.65495961e+00 -1.16352029e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65178621e+01  6.79969796e+02  3.94877979e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431729878944  E_coul = 198.91265666221386
Extra cycle  E= -507.630516325681  delta_E= 2.27e-13  |g|= 3.51e-11  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.25 sec, wall time      0.26 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215694e+03
 4.57778410e+02 1.21891411e+02 3.76184228e+01 4.74129022e+00
 3.91197438e-01 8.59864022e+00 4.90849591e-01]
grad_E = [ 1.58637909e-10  9.14390306e-09  4.38897922e-06 -1.68747910e-06
  5.59737777e-06 -1.08841383e-05  1.00164648e-05  7.75856719e-06
 -4.10349988e-06 -1.58866249e-06  2.79806034e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616276        1
[INPUT] 0    0    [1    /1   ]  2232.15694811        1
[INPUT] 0    0    [1    /1   ]  457.77839506         1
[INPUT] 0    0    [1    /1   ]  121.891439696        1
[INPUT] 0    0    [1    /1   ]  37.6183959342        1
[INPUT] 0    0    [1    /1   ]  4.74129582568        1
[INPUT] 0    0    [1    /1   ]  0.391197234981       1
[INPUT] 1    0    [1    /1   ]  8.59863701134        1
[INPUT] 1    0    [1    /1   ]  0.490849594651       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999999, 1.0]], [0, [799999.9999999417, 1.0]], [0, [18354.96162763336, 1.0]], [0, [2232.1569481072756, 1.0]], [0, [457.77839506023514, 1.0]], [0, [121.89143969566753, 1.0]], [0, [37.618395934188165, 1.0]], [0, [4.741295825676897, 1.0]], [0, [0.3911972349808359, 1.0]], [1, [8.598637011336589, 1.0]], [1, [0.49084959465108813, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999994]
bas 2, expnt(s) = [18354.96162763]
bas 3, expnt(s) = [2232.15694811]
bas 4, expnt(s) = [457.77839506]
bas 5, expnt(s) = [121.8914397]
bas 6, expnt(s) = [37.61839593]
bas 7, expnt(s) = [4.74129583]
bas 8, expnt(s) = [0.39119723]
bas 9, expnt(s) = [8.59863701]
bas 10, expnt(s) = [0.49084959]
CPU time:        34.33
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409912e+03 2.23215695e+03 8.20462186e+02
 4.57778395e+02 2.50038275e+02 1.21891440e+02 9.26819002e+01
 3.76183959e+01 3.83764881e+01 4.74129583e+00 8.11779004e+00
 3.91197235e-01 1.24971752e+00 8.59863701e+00 4.29557605e+01
 4.90849595e-01 1.19858804e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972429587946
cond(S) = 42.97084244372404
E1 = -688.6352665582922  E_coul = 184.91523771523845
init E= -503.720028843054
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.680902015396292  LUMO = 85.1883097331294
  mo_energy =
[-1.21646289e+02 -1.32807963e+01 -7.62161496e+00 -7.62161496e+00
 -7.62161496e+00 -1.65067706e+00 -6.80902015e-01 -6.80902015e-01
 -6.80902015e-01  8.51883097e+01  6.78610292e+02  3.94754575e+03
  3.15207052e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749785169902  E_coul = 198.94488929626246
cycle= 1 E= -507.630089220728  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237639  1.        ]
  HOMO = -0.236279897272178  LUMO = 86.5214004028646
  mo_energy =
[-1.20258512e+02 -1.22527129e+01 -6.65309687e+00 -6.65309687e+00
 -6.65309687e+00 -1.16345517e+00 -2.36279897e-01 -2.36279897e-01
 -2.36279897e-01  8.65214004e+01  6.79980471e+02  3.94879580e+03
  3.15217858e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436114173742  E_coul = 198.91309520076024
cycle= 2 E= -507.630516216614  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503283
diis-c [-2.52447836e-05 -7.71703134e-04  1.00077170e+00]
  HOMO = -0.23645469594702  LUMO = 86.5178850534533
  mo_energy =
[-1.20267138e+02 -1.22538989e+01 -6.65493386e+00 -6.65493386e+00
 -6.65493386e+00 -1.16351978e+00 -2.36454696e-01 -2.36454696e-01
 -2.36454696e-01  8.65178851e+01  6.79969893e+02  3.94877992e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543172455117  E_coul = 198.91265612882296
cycle= 3 E= -507.630516326294  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125107
diis-c [-3.74607436e-10  3.85686228e-05 -2.52172119e-02  1.02517864e+00]
  HOMO = -0.236456852881099  LUMO = 86.5178414569399
  mo_energy =
[-1.20267249e+02 -1.22539143e+01 -6.65496023e+00 -6.65496023e+00
 -6.65496023e+00 -1.16352042e+00 -2.36456853e-01 -2.36456853e-01
 -2.36456853e-01  8.65178415e+01  6.79969779e+02  3.94877978e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431653648199  E_coul = 198.91264903848742
cycle= 4 E= -507.630516326332  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431653648199  E_coul = 198.91264903848742
  HOMO = -0.236456837456352  LUMO = 86.5178417779911
  mo_energy =
[-1.20267248e+02 -1.22539142e+01 -6.65496008e+00 -6.65496008e+00
 -6.65496008e+00 -1.16352041e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65178418e+01  6.79969780e+02  3.94877978e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431653997008  E_coul = 198.91264907336847
Extra cycle  E= -507.630516326332  delta_E= 1.14e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215695e+03
 4.57778395e+02 1.21891440e+02 3.76183959e+01 4.74129583e+00
 3.91197235e-01 8.59863701e+00 4.90849595e-01]
E = -507.6305163263323
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9616276        1
[INPUT] 0    0    [1    /1   ]  2232.15694811        1
[INPUT] 0    0    [1    /1   ]  457.77839506         1
[INPUT] 0    0    [1    /1   ]  121.891439696        1
[INPUT] 0    0    [1    /1   ]  37.6183959342        1
[INPUT] 0    0    [1    /1   ]  4.74129582568        1
[INPUT] 0    0    [1    /1   ]  0.391197234981       1
[INPUT] 1    0    [1    /1   ]  8.59863701134        1
[INPUT] 1    0    [1    /1   ]  0.490849594651       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999999, 1.0]], [0, [799999.9999999417, 1.0]], [0, [18354.96162763336, 1.0]], [0, [2232.1569481072756, 1.0]], [0, [457.77839506023514, 1.0]], [0, [121.89143969566753, 1.0]], [0, [37.618395934188165, 1.0]], [0, [4.741295825676897, 1.0]], [0, [0.3911972349808359, 1.0]], [1, [8.598637011336589, 1.0]], [1, [0.49084959465108813, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999994]
bas 2, expnt(s) = [18354.96162763]
bas 3, expnt(s) = [2232.15694811]
bas 4, expnt(s) = [457.77839506]
bas 5, expnt(s) = [121.8914397]
bas 6, expnt(s) = [37.61839593]
bas 7, expnt(s) = [4.74129583]
bas 8, expnt(s) = [0.39119723]
bas 9, expnt(s) = [8.59863701]
bas 10, expnt(s) = [0.49084959]
CPU time:        34.66
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409912e+03 2.23215695e+03 8.20462186e+02
 4.57778395e+02 2.50038275e+02 1.21891440e+02 9.26819002e+01
 3.76183959e+01 3.83764881e+01 4.74129583e+00 8.11779004e+00
 3.91197235e-01 1.24971752e+00 8.59863701e+00 4.29557605e+01
 4.90849595e-01 1.19858804e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972429587946
cond(S) = 42.97084244372404
E1 = -688.6352665582922  E_coul = 184.91523771523845
init E= -503.720028843054
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902015396292  LUMO = 85.1883097331294
  mo_energy =
[-1.21646289e+02 -1.32807963e+01 -7.62161496e+00 -7.62161496e+00
 -7.62161496e+00 -1.65067706e+00 -6.80902015e-01 -6.80902015e-01
 -6.80902015e-01  8.51883097e+01  6.78610292e+02  3.94754575e+03
  3.15207052e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749785169902  E_coul = 198.94488929626246
cycle= 1 E= -507.630089220728  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237639  1.        ]
  HOMO = -0.236279897272178  LUMO = 86.5214004028646
  mo_energy =
[-1.20258512e+02 -1.22527129e+01 -6.65309687e+00 -6.65309687e+00
 -6.65309687e+00 -1.16345517e+00 -2.36279897e-01 -2.36279897e-01
 -2.36279897e-01  8.65214004e+01  6.79980471e+02  3.94879580e+03
  3.15217858e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436114173742  E_coul = 198.91309520076024
cycle= 2 E= -507.630516216614  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503283
diis-c [-2.52447836e-05 -7.71703134e-04  1.00077170e+00]
  HOMO = -0.23645469594702  LUMO = 86.5178850534533
  mo_energy =
[-1.20267138e+02 -1.22538989e+01 -6.65493386e+00 -6.65493386e+00
 -6.65493386e+00 -1.16351978e+00 -2.36454696e-01 -2.36454696e-01
 -2.36454696e-01  8.65178851e+01  6.79969893e+02  3.94877992e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543172455117  E_coul = 198.91265612882296
cycle= 3 E= -507.630516326294  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125107
diis-c [-3.74607436e-10  3.85686228e-05 -2.52172119e-02  1.02517864e+00]
  HOMO = -0.236456852881099  LUMO = 86.5178414569399
  mo_energy =
[-1.20267249e+02 -1.22539143e+01 -6.65496023e+00 -6.65496023e+00
 -6.65496023e+00 -1.16352042e+00 -2.36456853e-01 -2.36456853e-01
 -2.36456853e-01  8.65178415e+01  6.79969779e+02  3.94877978e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431653648199  E_coul = 198.91264903848742
cycle= 4 E= -507.630516326332  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431653648199  E_coul = 198.91264903848742
  HOMO = -0.236456837456352  LUMO = 86.5178417779911
  mo_energy =
[-1.20267248e+02 -1.22539142e+01 -6.65496008e+00 -6.65496008e+00
 -6.65496008e+00 -1.16352041e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65178418e+01  6.79969780e+02  3.94877978e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431653997008  E_coul = 198.91264907336847
Extra cycle  E= -507.630516326332  delta_E= 1.14e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97084244372404
E1 = -706.5431653997008  E_coul = 198.91264907336847
init E= -507.630516326332
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456837276743  LUMO = 86.517841781902
  mo_energy =
[-1.20267248e+02 -1.22539142e+01 -6.65496008e+00 -6.65496008e+00
 -6.65496008e+00 -1.16352041e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65178418e+01  6.79969780e+02  3.94877978e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431654002261  E_coul = 198.91264907389362
cycle= 1 E= -507.630516326333  delta_E= -2.27e-13  |g|= 1.2e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5431654002261  E_coul = 198.91264907389362
  HOMO = -0.236456837274226  LUMO = 86.5178417819582
  mo_energy =
[-1.20267248e+02 -1.22539142e+01 -6.65496008e+00 -6.65496008e+00
 -6.65496008e+00 -1.16352041e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65178418e+01  6.79969780e+02  3.94877978e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431654002354  E_coul = 198.91264907390277
Extra cycle  E= -507.630516326333  delta_E=    0  |g|= 4.64e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215695e+03
 4.57778395e+02 1.21891440e+02 3.76183959e+01 4.74129583e+00
 3.91197235e-01 8.59863701e+00 4.90849595e-01]
grad_E = [ 1.58637957e-10  9.14390505e-09  4.38896852e-06 -1.68655808e-06
  5.57809604e-06 -1.07368281e-05  9.58951343e-06  1.20425829e-05
 -7.69690013e-06 -4.05869402e-06  6.27806003e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.961581         1
[INPUT] 0    0    [1    /1   ]  2232.15696602        1
[INPUT] 0    0    [1    /1   ]  457.778335576        1
[INPUT] 0    0    [1    /1   ]  121.891555605        1
[INPUT] 0    0    [1    /1   ]  37.6182885428        1
[INPUT] 0    0    [1    /1   ]  4.74131826392        1
[INPUT] 0    0    [1    /1   ]  0.391196423931       1
[INPUT] 1    0    [1    /1   ]  8.59862418086        1
[INPUT] 1    0    [1    /1   ]  0.49084960897        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999997, 1.0]], [0, [799999.9999998446, 1.0]], [0, [18354.96158104469, 1.0]], [0, [2232.1569660228797, 1.0]], [0, [457.77833557636404, 1.0]], [0, [121.89155560546968, 1.0]], [0, [37.6182885428117, 1.0]], [0, [4.741318263916276, 1.0]], [0, [0.3911964239306585, 1.0]], [1, [8.5986241808645, 1.0]], [1, [0.49084960896997876, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999984]
bas 2, expnt(s) = [18354.96158104]
bas 3, expnt(s) = [2232.15696602]
bas 4, expnt(s) = [457.77833558]
bas 5, expnt(s) = [121.89155561]
bas 6, expnt(s) = [37.61828854]
bas 7, expnt(s) = [4.74131826]
bas 8, expnt(s) = [0.39119642]
bas 9, expnt(s) = [8.59862418]
bas 10, expnt(s) = [0.49084961]
CPU time:        38.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409911e+03 2.23215697e+03 8.20462191e+02
 4.57778336e+02 2.50038250e+02 1.21891556e+02 9.26819663e+01
 3.76182885e+01 3.83764059e+01 4.74131826e+00 8.11781885e+00
 3.91196424e-01 1.24971557e+00 8.59862418e+00 4.29556804e+01
 4.90849609e-01 1.19858808e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997222282527
cond(S) = 42.9707557333182
E1 = -688.6352274385357  E_coul = 184.9151919550962
init E= -503.72003548344
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090214893495  LUMO = 85.1882271969907
  mo_energy =
[-1.21646300e+02 -1.32807993e+01 -7.62161777e+00 -7.62161777e+00
 -7.62161777e+00 -1.65067776e+00 -6.80902149e-01 -6.80902149e-01
 -6.80902149e-01  8.51882272e+01  6.78610225e+02  3.94754568e+03
  3.15207051e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.574947949841  E_coul = 198.94485871958207
cycle= 1 E= -507.630089230259  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237614  1.        ]
  HOMO = -0.236279898005877  LUMO = 86.5213190466394
  mo_energy =
[-1.20258519e+02 -1.22527150e+01 -6.65309877e+00 -6.65309877e+00
 -6.65309877e+00 -1.16345567e+00 -2.36279898e-01 -2.36279898e-01
 -2.36279898e-01  8.65213190e+01  6.79980408e+02  3.94879574e+03
  3.15217857e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435810622304  E_coul = 198.91306484349198
cycle= 2 E= -507.630516218738  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503277
diis-c [-2.52441446e-05 -7.71591428e-04  1.00077159e+00]
  HOMO = -0.236454695500992  LUMO = 86.5178037195268
  mo_energy =
[-1.20267145e+02 -1.22539010e+01 -6.65493575e+00 -6.65493575e+00
 -6.65493575e+00 -1.16352028e+00 -2.36454696e-01 -2.36454696e-01
 -2.36454696e-01  8.65178037e+01  6.79969830e+02  3.94877985e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431421036523  E_coul = 198.91262577523568
cycle= 3 E= -507.630516328417  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125106
diis-c [-3.74605595e-10  3.85685182e-05 -2.52173541e-02  1.02517879e+00]
  HOMO = -0.236456852435741  LUMO = 86.5177601229428
  mo_energy =
[-1.20267256e+02 -1.22539164e+01 -6.65496212e+00 -6.65496212e+00
 -6.65496212e+00 -1.16352092e+00 -2.36456852e-01 -2.36456852e-01
 -2.36456852e-01  8.65177601e+01  6.79969716e+02  3.94877971e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431350133672  E_coul = 198.91261868491216
cycle= 4 E= -507.630516328455  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431350133672  E_coul = 198.91261868491216
  HOMO = -0.236456837011017  LUMO = 86.5177604439935
  mo_energy =
[-1.20267255e+02 -1.22539163e+01 -6.65496197e+00 -6.65496197e+00
 -6.65496197e+00 -1.16352091e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65177604e+01  6.79969717e+02  3.94877971e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431350482482  E_coul = 198.9126187197932
Extra cycle  E= -507.630516328455  delta_E= -5.68e-14  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215697e+03
 4.57778336e+02 1.21891556e+02 3.76182885e+01 4.74131826e+00
 3.91196424e-01 8.59862418e+00 4.90849609e-01]
E = -507.6305163284551
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:27 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.961581         1
[INPUT] 0    0    [1    /1   ]  2232.15696602        1
[INPUT] 0    0    [1    /1   ]  457.778335576        1
[INPUT] 0    0    [1    /1   ]  121.891555605        1
[INPUT] 0    0    [1    /1   ]  37.6182885428        1
[INPUT] 0    0    [1    /1   ]  4.74131826392        1
[INPUT] 0    0    [1    /1   ]  0.391196423931       1
[INPUT] 1    0    [1    /1   ]  8.59862418086        1
[INPUT] 1    0    [1    /1   ]  0.49084960897        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999997, 1.0]], [0, [799999.9999998446, 1.0]], [0, [18354.96158104469, 1.0]], [0, [2232.1569660228797, 1.0]], [0, [457.77833557636404, 1.0]], [0, [121.89155560546968, 1.0]], [0, [37.6182885428117, 1.0]], [0, [4.741318263916276, 1.0]], [0, [0.3911964239306585, 1.0]], [1, [8.5986241808645, 1.0]], [1, [0.49084960896997876, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3200000.]
bas 1, expnt(s) = [799999.99999984]
bas 2, expnt(s) = [18354.96158104]
bas 3, expnt(s) = [2232.15696602]
bas 4, expnt(s) = [457.77833558]
bas 5, expnt(s) = [121.89155561]
bas 6, expnt(s) = [37.61828854]
bas 7, expnt(s) = [4.74131826]
bas 8, expnt(s) = [0.39119642]
bas 9, expnt(s) = [8.59862418]
bas 10, expnt(s) = [0.49084961]
CPU time:        38.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549616e+04 3.98409911e+03 2.23215697e+03 8.20462191e+02
 4.57778336e+02 2.50038250e+02 1.21891556e+02 9.26819663e+01
 3.76182885e+01 3.83764059e+01 4.74131826e+00 8.11781885e+00
 3.91196424e-01 1.24971557e+00 8.59862418e+00 4.29556804e+01
 4.90849609e-01 1.19858808e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997222282527
cond(S) = 42.9707557333182
E1 = -688.6352274385357  E_coul = 184.9151919550962
init E= -503.72003548344
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090214893495  LUMO = 85.1882271969907
  mo_energy =
[-1.21646300e+02 -1.32807993e+01 -7.62161777e+00 -7.62161777e+00
 -7.62161777e+00 -1.65067776e+00 -6.80902149e-01 -6.80902149e-01
 -6.80902149e-01  8.51882272e+01  6.78610225e+02  3.94754568e+03
  3.15207051e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.574947949841  E_coul = 198.94485871958207
cycle= 1 E= -507.630089230259  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377328
diis-c [-0.14237614  1.        ]
  HOMO = -0.236279898005877  LUMO = 86.5213190466394
  mo_energy =
[-1.20258519e+02 -1.22527150e+01 -6.65309877e+00 -6.65309877e+00
 -6.65309877e+00 -1.16345567e+00 -2.36279898e-01 -2.36279898e-01
 -2.36279898e-01  8.65213190e+01  6.79980408e+02  3.94879574e+03
  3.15217857e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435810622304  E_coul = 198.91306484349198
cycle= 2 E= -507.630516218738  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503277
diis-c [-2.52441446e-05 -7.71591428e-04  1.00077159e+00]
  HOMO = -0.236454695500992  LUMO = 86.5178037195268
  mo_energy =
[-1.20267145e+02 -1.22539010e+01 -6.65493575e+00 -6.65493575e+00
 -6.65493575e+00 -1.16352028e+00 -2.36454696e-01 -2.36454696e-01
 -2.36454696e-01  8.65178037e+01  6.79969830e+02  3.94877985e+03
  3.15217663e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431421036523  E_coul = 198.91262577523568
cycle= 3 E= -507.630516328417  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125106
diis-c [-3.74605595e-10  3.85685182e-05 -2.52173541e-02  1.02517879e+00]
  HOMO = -0.236456852435741  LUMO = 86.5177601229428
  mo_energy =
[-1.20267256e+02 -1.22539164e+01 -6.65496212e+00 -6.65496212e+00
 -6.65496212e+00 -1.16352092e+00 -2.36456852e-01 -2.36456852e-01
 -2.36456852e-01  8.65177601e+01  6.79969716e+02  3.94877971e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431350133672  E_coul = 198.91261868491216
cycle= 4 E= -507.630516328455  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5431350133672  E_coul = 198.91261868491216
  HOMO = -0.236456837011017  LUMO = 86.5177604439935
  mo_energy =
[-1.20267255e+02 -1.22539163e+01 -6.65496197e+00 -6.65496197e+00
 -6.65496197e+00 -1.16352091e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65177604e+01  6.79969717e+02  3.94877971e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431350482482  E_coul = 198.9126187197932
Extra cycle  E= -507.630516328455  delta_E= -5.68e-14  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.14 sec, wall time      0.15 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.9707557333182
E1 = -706.5431350482482  E_coul = 198.9126187197932
init E= -507.630516328455
    CPU time for initialize scf      0.10 sec, wall time      0.11 sec
  HOMO = -0.236456836831405  LUMO = 86.5177604479054
  mo_energy =
[-1.20267255e+02 -1.22539163e+01 -6.65496197e+00 -6.65496197e+00
 -6.65496197e+00 -1.16352091e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65177604e+01  6.79969717e+02  3.94877971e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431350487733  E_coul = 198.91261872031828
cycle= 1 E= -507.630516328455  delta_E= 1.14e-13  |g|= 1.21e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431350487733  E_coul = 198.91261872031828
  HOMO = -0.236456836828886  LUMO = 86.5177604479615
  mo_energy =
[-1.20267255e+02 -1.22539163e+01 -6.65496197e+00 -6.65496197e+00
 -6.65496197e+00 -1.16352091e+00 -2.36456837e-01 -2.36456837e-01
 -2.36456837e-01  8.65177604e+01  6.79969717e+02  3.94877971e+03
  3.15217662e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431350487814  E_coul = 198.91261872032698
Extra cycle  E= -507.630516328454  delta_E= 5.12e-13  |g|= 1.21e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549616e+04 2.23215697e+03
 4.57778336e+02 1.21891556e+02 3.76182885e+01 4.74131826e+00
 3.91196424e-01 8.59862418e+00 4.90849609e-01]
grad_E = [ 1.58638150e-10  9.14391303e-09  4.38892573e-06 -1.68287400e-06
  5.50096919e-06 -1.01475845e-05  7.88170069e-06  2.91785158e-05
 -2.20706363e-05 -1.39388412e-05  2.01980404e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9614602        1
[INPUT] 0    0    [1    /1   ]  2232.15701249        1
[INPUT] 0    0    [1    /1   ]  457.778181448        1
[INPUT] 0    0    [1    /1   ]  121.89185498         1
[INPUT] 0    0    [1    /1   ]  37.6180137027        1
[INPUT] 0    0    [1    /1   ]  4.74134616948        1
[INPUT] 0    0    [1    /1   ]  0.391195385022       1
[INPUT] 1    0    [1    /1   ]  8.5986085447         1
[INPUT] 1    0    [1    /1   ]  0.490849630925       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999993, 1.0]], [0, [799999.9999995928, 1.0]], [0, [18354.961460199047, 1.0]], [0, [2232.1570124859722, 1.0]], [0, [457.77818144827864, 1.0]], [0, [121.89185498044418, 1.0]], [0, [37.618013702726664, 1.0]], [0, [4.74134616948464, 1.0]], [0, [0.3911953850219264, 1.0]], [1, [8.598608544695617, 1.0]], [1, [0.4908496309252702, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999999]
bas 1, expnt(s) = [799999.99999959]
bas 2, expnt(s) = [18354.9614602]
bas 3, expnt(s) = [2232.15701249]
bas 4, expnt(s) = [457.77818145]
bas 5, expnt(s) = [121.89185498]
bas 6, expnt(s) = [37.6180137]
bas 7, expnt(s) = [4.74134617]
bas 8, expnt(s) = [0.39119539]
bas 9, expnt(s) = [8.59860854]
bas 10, expnt(s) = [0.49084963]
CPU time:        42.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549615e+04 3.98409910e+03 2.23215701e+03 8.20462204e+02
 4.57778181e+02 2.50038187e+02 1.21891855e+02 9.26821370e+01
 3.76180137e+01 3.83761956e+01 4.74134617e+00 8.11785468e+00
 3.91195385e-01 1.24971308e+00 8.59860854e+00 4.29555827e+01
 4.90849631e-01 1.19858815e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971973009864
cond(S) = 42.97047744012373
E1 = -688.6351739037372  E_coul = 184.9151342687321
init E= -503.720039635005
    CPU time for initialize scf      0.04 sec, wall time      0.06 sec
  HOMO = -0.680902336184895  LUMO = 85.1879002410057
  mo_energy =
[-1.21646314e+02 -1.32808019e+01 -7.62162140e+00 -7.62162140e+00
 -7.62162140e+00 -1.65067851e+00 -6.80902336e-01 -6.80902336e-01
 -6.80902336e-01  8.51879002e+01  6.78609967e+02  3.94754544e+03
  3.15207047e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749028068968  E_coul = 198.94481356591052
cycle= 1 E= -507.630089240986  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377327
diis-c [-0.14237549  1.        ]
  HOMO = -0.236279952125449  LUMO = 86.520992225491
  mo_energy =
[-1.20258531e+02 -1.22527167e+01 -6.65310161e+00 -6.65310161e+00
 -6.65310161e+00 -1.16345621e+00 -2.36279952e-01 -2.36279952e-01
 -2.36279952e-01  8.65209922e+01  6.79980152e+02  3.94879550e+03
  3.15217853e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435359846417  E_coul = 198.91301976155603
cycle= 2 E= -507.630516223086  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503271
diis-c [-2.52436334e-05 -7.71403604e-04  1.00077140e+00]
  HOMO = -0.236454749186136  LUMO = 86.517476902238
  mo_energy =
[-1.20267157e+02 -1.22539027e+01 -6.65493858e+00 -6.65493858e+00
 -6.65493858e+00 -1.16352082e+00 -2.36454749e-01 -2.36454749e-01
 -2.36454749e-01  8.65174769e+01  6.79969574e+02  3.94877961e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543097027688  E_coul = 198.91258069492747
cycle= 3 E= -507.630516332761  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125106
diis-c [-3.74610692e-10  3.85674593e-05 -2.52175651e-02  1.02517900e+00]
  HOMO = -0.236456906144395  LUMO = 86.5174333050769
  mo_energy =
[-1.20267268e+02 -1.22539181e+01 -6.65496495e+00 -6.65496495e+00
 -6.65496495e+00 -1.16352145e+00 -2.36456906e-01 -2.36456906e-01
 -2.36456906e-01  8.65174333e+01  6.79969460e+02  3.94877947e+03
  3.15217659e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430899373438  E_coul = 198.91257360454438
cycle= 4 E= -507.630516332799  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5430899373438  E_coul = 198.91257360454438
  HOMO = -0.236456890719479  LUMO = 86.5174336261308
  mo_energy =
[-1.20267267e+02 -1.22539180e+01 -6.65496480e+00 -6.65496480e+00
 -6.65496480e+00 -1.16352145e+00 -2.36456891e-01 -2.36456891e-01
 -2.36456891e-01  8.65174336e+01  6.79969461e+02  3.94877948e+03
  3.15217659e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430899722252  E_coul = 198.91257363942563
Extra cycle  E= -507.6305163328  delta_E= -1.14e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549615e+04 2.23215701e+03
 4.57778181e+02 1.21891855e+02 3.76180137e+01 4.74134617e+00
 3.91195385e-01 8.59860854e+00 4.90849631e-01]
E = -507.6305163327995
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:31 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  800000               1
[INPUT] 0    0    [1    /1   ]  18354.9614602        1
[INPUT] 0    0    [1    /1   ]  2232.15701249        1
[INPUT] 0    0    [1    /1   ]  457.778181448        1
[INPUT] 0    0    [1    /1   ]  121.89185498         1
[INPUT] 0    0    [1    /1   ]  37.6180137027        1
[INPUT] 0    0    [1    /1   ]  4.74134616948        1
[INPUT] 0    0    [1    /1   ]  0.391195385022       1
[INPUT] 1    0    [1    /1   ]  8.5986085447         1
[INPUT] 1    0    [1    /1   ]  0.490849630925       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999993, 1.0]], [0, [799999.9999995928, 1.0]], [0, [18354.961460199047, 1.0]], [0, [2232.1570124859722, 1.0]], [0, [457.77818144827864, 1.0]], [0, [121.89185498044418, 1.0]], [0, [37.618013702726664, 1.0]], [0, [4.74134616948464, 1.0]], [0, [0.3911953850219264, 1.0]], [1, [8.598608544695617, 1.0]], [1, [0.4908496309252702, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999999]
bas 1, expnt(s) = [799999.99999959]
bas 2, expnt(s) = [18354.9614602]
bas 3, expnt(s) = [2232.15701249]
bas 4, expnt(s) = [457.77818145]
bas 5, expnt(s) = [121.89185498]
bas 6, expnt(s) = [37.6180137]
bas 7, expnt(s) = [4.74134617]
bas 8, expnt(s) = [0.39119539]
bas 9, expnt(s) = [8.59860854]
bas 10, expnt(s) = [0.49084963]
CPU time:        43.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549615e+04 3.98409910e+03 2.23215701e+03 8.20462204e+02
 4.57778181e+02 2.50038187e+02 1.21891855e+02 9.26821370e+01
 3.76180137e+01 3.83761956e+01 4.74134617e+00 8.11785468e+00
 3.91195385e-01 1.24971308e+00 8.59860854e+00 4.29555827e+01
 4.90849631e-01 1.19858815e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971973009864
cond(S) = 42.97047744012373
E1 = -688.6351739037372  E_coul = 184.9151342687321
init E= -503.720039635005
    CPU time for initialize scf      0.03 sec, wall time      0.04 sec
  HOMO = -0.680902336184895  LUMO = 85.1879002410057
  mo_energy =
[-1.21646314e+02 -1.32808019e+01 -7.62162140e+00 -7.62162140e+00
 -7.62162140e+00 -1.65067851e+00 -6.80902336e-01 -6.80902336e-01
 -6.80902336e-01  8.51879002e+01  6.78609967e+02  3.94754544e+03
  3.15207047e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749028068968  E_coul = 198.94481356591052
cycle= 1 E= -507.630089240986  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377327
diis-c [-0.14237549  1.        ]
  HOMO = -0.236279952125449  LUMO = 86.520992225491
  mo_energy =
[-1.20258531e+02 -1.22527167e+01 -6.65310161e+00 -6.65310161e+00
 -6.65310161e+00 -1.16345621e+00 -2.36279952e-01 -2.36279952e-01
 -2.36279952e-01  8.65209922e+01  6.79980152e+02  3.94879550e+03
  3.15217853e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435359846417  E_coul = 198.91301976155603
cycle= 2 E= -507.630516223086  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503271
diis-c [-2.52436334e-05 -7.71403604e-04  1.00077140e+00]
  HOMO = -0.236454749186136  LUMO = 86.517476902238
  mo_energy =
[-1.20267157e+02 -1.22539027e+01 -6.65493858e+00 -6.65493858e+00
 -6.65493858e+00 -1.16352082e+00 -2.36454749e-01 -2.36454749e-01
 -2.36454749e-01  8.65174769e+01  6.79969574e+02  3.94877961e+03
  3.15217660e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543097027688  E_coul = 198.91258069492747
cycle= 3 E= -507.630516332761  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125106
diis-c [-3.74610692e-10  3.85674593e-05 -2.52175651e-02  1.02517900e+00]
  HOMO = -0.236456906144395  LUMO = 86.5174333050769
  mo_energy =
[-1.20267268e+02 -1.22539181e+01 -6.65496495e+00 -6.65496495e+00
 -6.65496495e+00 -1.16352145e+00 -2.36456906e-01 -2.36456906e-01
 -2.36456906e-01  8.65174333e+01  6.79969460e+02  3.94877947e+03
  3.15217659e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430899373438  E_coul = 198.91257360454438
cycle= 4 E= -507.630516332799  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430899373438  E_coul = 198.91257360454438
  HOMO = -0.236456890719479  LUMO = 86.5174336261308
  mo_energy =
[-1.20267267e+02 -1.22539180e+01 -6.65496480e+00 -6.65496480e+00
 -6.65496480e+00 -1.16352145e+00 -2.36456891e-01 -2.36456891e-01
 -2.36456891e-01  8.65174336e+01  6.79969461e+02  3.94877948e+03
  3.15217659e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430899722252  E_coul = 198.91257363942563
Extra cycle  E= -507.6305163328  delta_E= -1.14e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.14 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97047744012373
E1 = -706.5430899722252  E_coul = 198.91257363942563
init E= -507.6305163328
    CPU time for initialize scf      0.10 sec, wall time      0.11 sec
  HOMO = -0.236456890539865  LUMO = 86.517433630043
  mo_energy =
[-1.20267267e+02 -1.22539180e+01 -6.65496480e+00 -6.65496480e+00
 -6.65496480e+00 -1.16352145e+00 -2.36456891e-01 -2.36456891e-01
 -2.36456891e-01  8.65174336e+01  6.79969461e+02  3.94877948e+03
  3.15217659e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430899727506  E_coul = 198.91257363995086
cycle= 1 E= -507.6305163328  delta_E= -2.27e-13  |g|= 1.31e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5430899727506  E_coul = 198.91257363995086
  HOMO = -0.236456890537341  LUMO = 86.5174336300976
  mo_energy =
[-1.20267267e+02 -1.22539180e+01 -6.65496480e+00 -6.65496480e+00
 -6.65496480e+00 -1.16352145e+00 -2.36456891e-01 -2.36456891e-01
 -2.36456891e-01  8.65174336e+01  6.79969461e+02  3.94877948e+03
  3.15217659e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543089972759  E_coul = 198.91257363995962
Extra cycle  E= -507.630516332799  delta_E= 3.41e-13  |g|= 2.98e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549615e+04 2.23215701e+03
 4.57778181e+02 1.21891855e+02 3.76180137e+01 4.74134617e+00
 3.91195385e-01 8.59860854e+00 4.90849631e-01]
grad_E = [ 1.58638593e-10  9.14393042e-09  4.38881308e-06 -1.67328127e-06
  5.30085366e-06 -8.58148972e-06  3.34245076e-06  4.92977887e-05
 -3.92910907e-05 -2.63334872e-05  3.70447647e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9612611        1
[INPUT] 0    0    [1    /1   ]  2232.15708903        1
[INPUT] 0    0    [1    /1   ]  457.777927885        1
[INPUT] 0    0    [1    /1   ]  121.892344949        1
[INPUT] 0    0    [1    /1   ]  37.6175705981        1
[INPUT] 0    0    [1    /1   ]  4.74135602047        1
[INPUT] 0    0    [1    /1   ]  0.39119493692        1
[INPUT] 1    0    [1    /1   ]  8.59860475456        1
[INPUT] 1    0    [1    /1   ]  0.490849671991       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999986, 1.0]], [0, [799999.9999991779, 1.0]], [0, [18354.96126105223, 1.0]], [0, [2232.1570890339594, 1.0]], [0, [457.77792788455287, 1.0]], [0, [121.8923449492717, 1.0]], [0, [37.61757059814395, 1.0]], [0, [4.741356020473928, 1.0]], [0, [0.3911949369203893, 1.0]], [1, [8.598604754555145, 1.0]], [1, [0.4908496719906082, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999999]
bas 1, expnt(s) = [799999.99999918]
bas 2, expnt(s) = [18354.96126105]
bas 3, expnt(s) = [2232.15708903]
bas 4, expnt(s) = [457.77792788]
bas 5, expnt(s) = [121.89234495]
bas 6, expnt(s) = [37.6175706]
bas 7, expnt(s) = [4.74135602]
bas 8, expnt(s) = [0.39119494]
bas 9, expnt(s) = [8.59860475]
bas 10, expnt(s) = [0.49084967]
CPU time:        46.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549613e+04 3.98409906e+03 2.23215709e+03 8.20462225e+02
 4.57777928e+02 2.50038083e+02 1.21892345e+02 9.26824164e+01
 3.76175706e+01 3.83758566e+01 4.74135602e+00 8.11786733e+00
 3.91194937e-01 1.24971201e+00 8.59860475e+00 4.29555591e+01
 4.90849672e-01 1.19858827e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971870873566
cond(S) = 42.96996185404926
E1 = -688.6351478778183  E_coul = 184.91511683499405
init E= -503.720031042824
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902440980855  LUMO = 85.1872378961391
  mo_energy =
[-1.21646321e+02 -1.32807995e+01 -7.62162267e+00 -7.62162267e+00
 -7.62162267e+00 -1.65067841e+00 -6.80902441e-01 -6.80902441e-01
 -6.80902441e-01  8.51872379e+01  6.78609460e+02  3.94754498e+03
  3.15207042e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5748752029726  E_coul = 198.94478596170055
cycle= 1 E= -507.630089241272  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237444  1.        ]
  HOMO = -0.23628005146892  LUMO = 86.5203267560336
  mo_energy =
[-1.20258541e+02 -1.22527146e+01 -6.65310337e+00 -6.65310337e+00
 -6.65310337e+00 -1.16345612e+00 -2.36280051e-01 -2.36280051e-01
 -2.36280051e-01  8.65203268e+01  6.79979639e+02  3.94879503e+03
  3.15217847e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543507914238  E_coul = 198.91299168610402
cycle= 2 E= -507.630516228134  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503276
diis-c [-2.52441531e-05 -7.71217111e-04  1.00077122e+00]
  HOMO = -0.236454850951955  LUMO = 86.5168113752289
  mo_energy =
[-1.20267168e+02 -1.22539007e+01 -6.65494037e+00 -6.65494037e+00
 -6.65494037e+00 -1.16352073e+00 -2.36454851e-01 -2.36454851e-01
 -2.36454851e-01  8.65168114e+01  6.79969061e+02  3.94877915e+03
  3.15217654e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430689505898  E_coul = 198.91255261277954
cycle= 3 E= -507.63051633781  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125108
diis-c [-3.74627191e-10  3.85653531e-05 -2.52177343e-02  1.02517917e+00]
  HOMO = -0.236457007974581  LUMO = 86.5167677766406
  mo_energy =
[-1.20267278e+02 -1.22539161e+01 -6.65496674e+00 -6.65496674e+00
 -6.65496674e+00 -1.16352137e+00 -2.36457008e-01 -2.36457008e-01
 -2.36457008e-01  8.65167678e+01  6.79968947e+02  3.94877901e+03
  3.15217653e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543061860042  E_coul = 198.91254552219294
cycle= 4 E= -507.630516337849  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543061860042  E_coul = 198.91254552219294
  HOMO = -0.236456992549164  LUMO = 86.5167680977057
  mo_energy =
[-1.20267277e+02 -1.22539160e+01 -6.65496659e+00 -6.65496659e+00
 -6.65496659e+00 -1.16352136e+00 -2.36456993e-01 -2.36456993e-01
 -2.36456993e-01  8.65167681e+01  6.79968948e+02  3.94877901e+03
  3.15217653e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543061894924  E_coul = 198.91254555707502
Extra cycle  E= -507.630516337849  delta_E= 1.14e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549613e+04 2.23215709e+03
 4.57777928e+02 1.21892345e+02 3.76175706e+01 4.74135602e+00
 3.91194937e-01 8.59860475e+00 4.90849672e-01]
E = -507.630516337849
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9612611        1
[INPUT] 0    0    [1    /1   ]  2232.15708903        1
[INPUT] 0    0    [1    /1   ]  457.777927885        1
[INPUT] 0    0    [1    /1   ]  121.892344949        1
[INPUT] 0    0    [1    /1   ]  37.6175705981        1
[INPUT] 0    0    [1    /1   ]  4.74135602047        1
[INPUT] 0    0    [1    /1   ]  0.39119493692        1
[INPUT] 1    0    [1    /1   ]  8.59860475456        1
[INPUT] 1    0    [1    /1   ]  0.490849671991       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999986, 1.0]], [0, [799999.9999991779, 1.0]], [0, [18354.96126105223, 1.0]], [0, [2232.1570890339594, 1.0]], [0, [457.77792788455287, 1.0]], [0, [121.8923449492717, 1.0]], [0, [37.61757059814395, 1.0]], [0, [4.741356020473928, 1.0]], [0, [0.3911949369203893, 1.0]], [1, [8.598604754555145, 1.0]], [1, [0.4908496719906082, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999999]
bas 1, expnt(s) = [799999.99999918]
bas 2, expnt(s) = [18354.96126105]
bas 3, expnt(s) = [2232.15708903]
bas 4, expnt(s) = [457.77792788]
bas 5, expnt(s) = [121.89234495]
bas 6, expnt(s) = [37.6175706]
bas 7, expnt(s) = [4.74135602]
bas 8, expnt(s) = [0.39119494]
bas 9, expnt(s) = [8.59860475]
bas 10, expnt(s) = [0.49084967]
CPU time:        47.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549613e+04 3.98409906e+03 2.23215709e+03 8.20462225e+02
 4.57777928e+02 2.50038083e+02 1.21892345e+02 9.26824164e+01
 3.76175706e+01 3.83758566e+01 4.74135602e+00 8.11786733e+00
 3.91194937e-01 1.24971201e+00 8.59860475e+00 4.29555591e+01
 4.90849672e-01 1.19858827e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319971870873566
cond(S) = 42.96996185404926
E1 = -688.6351478778183  E_coul = 184.91511683499405
init E= -503.720031042824
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902440980855  LUMO = 85.1872378961391
  mo_energy =
[-1.21646321e+02 -1.32807995e+01 -7.62162267e+00 -7.62162267e+00
 -7.62162267e+00 -1.65067841e+00 -6.80902441e-01 -6.80902441e-01
 -6.80902441e-01  8.51872379e+01  6.78609460e+02  3.94754498e+03
  3.15207042e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5748752029726  E_coul = 198.94478596170055
cycle= 1 E= -507.630089241272  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237444  1.        ]
  HOMO = -0.23628005146892  LUMO = 86.5203267560336
  mo_energy =
[-1.20258541e+02 -1.22527146e+01 -6.65310337e+00 -6.65310337e+00
 -6.65310337e+00 -1.16345612e+00 -2.36280051e-01 -2.36280051e-01
 -2.36280051e-01  8.65203268e+01  6.79979639e+02  3.94879503e+03
  3.15217847e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543507914238  E_coul = 198.91299168610402
cycle= 2 E= -507.630516228134  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503276
diis-c [-2.52441531e-05 -7.71217111e-04  1.00077122e+00]
  HOMO = -0.236454850951955  LUMO = 86.5168113752289
  mo_energy =
[-1.20267168e+02 -1.22539007e+01 -6.65494037e+00 -6.65494037e+00
 -6.65494037e+00 -1.16352073e+00 -2.36454851e-01 -2.36454851e-01
 -2.36454851e-01  8.65168114e+01  6.79969061e+02  3.94877915e+03
  3.15217654e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430689505898  E_coul = 198.91255261277954
cycle= 3 E= -507.63051633781  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125108
diis-c [-3.74627191e-10  3.85653531e-05 -2.52177343e-02  1.02517917e+00]
  HOMO = -0.236457007974581  LUMO = 86.5167677766406
  mo_energy =
[-1.20267278e+02 -1.22539161e+01 -6.65496674e+00 -6.65496674e+00
 -6.65496674e+00 -1.16352137e+00 -2.36457008e-01 -2.36457008e-01
 -2.36457008e-01  8.65167678e+01  6.79968947e+02  3.94877901e+03
  3.15217653e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543061860042  E_coul = 198.91254552219294
cycle= 4 E= -507.630516337849  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543061860042  E_coul = 198.91254552219294
  HOMO = -0.236456992549164  LUMO = 86.5167680977057
  mo_energy =
[-1.20267277e+02 -1.22539160e+01 -6.65496659e+00 -6.65496659e+00
 -6.65496659e+00 -1.16352136e+00 -2.36456993e-01 -2.36456993e-01
 -2.36456993e-01  8.65167681e+01  6.79968948e+02  3.94877901e+03
  3.15217653e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543061894924  E_coul = 198.91254555707502
Extra cycle  E= -507.630516337849  delta_E= 1.14e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96996185404926
E1 = -706.543061894924  E_coul = 198.91254555707502
init E= -507.630516337849
    CPU time for initialize scf      0.11 sec, wall time      0.11 sec
  HOMO = -0.236456992369552  LUMO = 86.5167681016176
  mo_energy =
[-1.20267277e+02 -1.22539160e+01 -6.65496659e+00 -6.65496659e+00
 -6.65496659e+00 -1.16352136e+00 -2.36456992e-01 -2.36456992e-01
 -2.36456992e-01  8.65167681e+01  6.79968948e+02  3.94877901e+03
  3.15217653e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430618954496  E_coul = 198.91254555760034
cycle= 1 E= -507.630516337849  delta_E= -2.84e-13  |g|= 1.77e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5430618954496  E_coul = 198.91254555760034
  HOMO = -0.23645699236703  LUMO = 86.5167681016731
  mo_energy =
[-1.20267277e+02 -1.22539160e+01 -6.65496659e+00 -6.65496659e+00
 -6.65496659e+00 -1.16352136e+00 -2.36456992e-01 -2.36456992e-01
 -2.36456992e-01  8.65167681e+01  6.79968948e+02  3.94877901e+03
  3.15217653e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430618954583  E_coul = 198.9125455576093
Extra cycle  E= -507.630516337849  delta_E= 2.27e-13  |g|= 9.46e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.22 sec, wall time      0.23 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549613e+04 2.23215709e+03
 4.57777928e+02 1.21892345e+02 3.76175706e+01 4.74135602e+00
 3.91194937e-01 8.59860475e+00 4.90849672e-01]
grad_E = [ 1.58639250e-10  9.14395495e-09  4.38862687e-06 -1.65755136e-06
  4.97373200e-06 -5.98018635e-06 -4.19149285e-06  5.35307131e-05
 -4.37266489e-05 -3.02003956e-05  4.17790778e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9611348        1
[INPUT] 0    0    [1    /1   ]  2232.15713753        1
[INPUT] 0    0    [1    /1   ]  457.777767851        1
[INPUT] 0    0    [1    /1   ]  121.892649898        1
[INPUT] 0    0    [1    /1   ]  37.617306132         1
[INPUT] 0    0    [1    /1   ]  4.74133207351        1
[INPUT] 0    0    [1    /1   ]  0.391195708776       1
[INPUT] 1    0    [1    /1   ]  8.59862091577        1
[INPUT] 1    0    [1    /1   ]  0.490849707236       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999814, 1.0]], [0, [799999.9999989149, 1.0]], [0, [18354.961134799738, 1.0]], [0, [2232.157137528535, 1.0]], [0, [457.7777678506447, 1.0]], [0, [121.89264989763404, 1.0]], [0, [37.61730613203879, 1.0]], [0, [4.741332073510373, 1.0]], [0, [0.3911957087757395, 1.0]], [1, [8.598620915768123, 1.0]], [1, [0.4908497072358782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999891]
bas 2, expnt(s) = [18354.9611348]
bas 3, expnt(s) = [2232.15713753]
bas 4, expnt(s) = [457.77776785]
bas 5, expnt(s) = [121.8926499]
bas 6, expnt(s) = [37.61730613]
bas 7, expnt(s) = [4.74133207]
bas 8, expnt(s) = [0.39119571]
bas 9, expnt(s) = [8.59862092]
bas 10, expnt(s) = [0.49084971]
CPU time:        50.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409904e+03 2.23215714e+03 8.20462238e+02
 4.57777768e+02 2.50038018e+02 1.21892650e+02 9.26825903e+01
 3.76173061e+01 3.83756543e+01 4.74133207e+00 8.11783658e+00
 3.91195709e-01 1.24971386e+00 8.59862092e+00 4.29556600e+01
 4.90849707e-01 1.19858838e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997205696162
cond(S) = 42.96959764609562
E1 = -688.6351846755758  E_coul = 184.91517180078722
init E= -503.720012874789
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902333057376  LUMO = 85.1867307812001
  mo_energy =
[-1.21646312e+02 -1.32807925e+01 -7.62161947e+00 -7.62161947e+00
 -7.62161947e+00 -1.65067724e+00 -6.80902333e-01 -6.80902333e-01
 -6.80902333e-01  8.51867308e+01  6.78609093e+02  3.94754465e+03
  3.15207038e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5748984922853  E_coul = 198.94480926394374
cycle= 1 E= -507.630089228342  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237382  1.        ]
  HOMO = -0.236280108681157  LUMO = 86.5198149562649
  mo_energy =
[-1.20258540e+02 -1.22527092e+01 -6.65310193e+00 -6.65310193e+00
 -6.65310193e+00 -1.16345524e+00 -2.36280109e-01 -2.36280109e-01
 -2.36280109e-01  8.65198150e+01  6.79979261e+02  3.94879469e+03
  3.15217843e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435304393344  E_coul = 198.9130142085005
cycle= 2 E= -507.630516230834  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503291
diis-c [-2.52456059e-05 -7.71204356e-04  1.00077120e+00]
  HOMO = -0.23645491226614  LUMO = 86.5162994868059
  mo_energy =
[-1.20267167e+02 -1.22538953e+01 -6.65493898e+00 -6.65493898e+00
 -6.65493898e+00 -1.16351986e+00 -2.36454912e-01 -2.36454912e-01
 -2.36454912e-01  8.65162995e+01  6.79968682e+02  3.94877881e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430914637916  E_coul = 198.91257512327638
cycle= 3 E= -507.630516340515  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125111
diis-c [-3.74643701e-10  3.85637371e-05 -2.52176862e-02  1.02517912e+00]
  HOMO = -0.236457069349749  LUMO = 86.5162558869499
  mo_energy =
[-1.20267277e+02 -1.22539107e+01 -6.65496535e+00 -6.65496535e+00
 -6.65496535e+00 -1.16352049e+00 -2.36457069e-01 -2.36457069e-01
 -2.36457069e-01  8.65162559e+01  6.79968568e+02  3.94877867e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430843730311  E_coul = 198.91256803247765
cycle= 4 E= -507.630516340553  delta_E= -3.82e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430843730311  E_coul = 198.91256803247765
  HOMO = -0.236457053923843  LUMO = 86.516256208026
  mo_energy =
[-1.20267276e+02 -1.22539106e+01 -6.65496520e+00 -6.65496520e+00
 -6.65496520e+00 -1.16352049e+00 -2.36457054e-01 -2.36457054e-01
 -2.36457054e-01  8.65162562e+01  6.79968569e+02  3.94877867e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430844079145  E_coul = 198.91256806736084
Extra cycle  E= -507.630516340554  delta_E= -2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215714e+03
 4.57777768e+02 1.21892650e+02 3.76173061e+01 4.74133207e+00
 3.91195709e-01 8.59862092e+00 4.90849707e-01]
E = -507.6305163405537
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9611348        1
[INPUT] 0    0    [1    /1   ]  2232.15713753        1
[INPUT] 0    0    [1    /1   ]  457.777767851        1
[INPUT] 0    0    [1    /1   ]  121.892649898        1
[INPUT] 0    0    [1    /1   ]  37.617306132         1
[INPUT] 0    0    [1    /1   ]  4.74133207351        1
[INPUT] 0    0    [1    /1   ]  0.391195708776       1
[INPUT] 1    0    [1    /1   ]  8.59862091577        1
[INPUT] 1    0    [1    /1   ]  0.490849707236       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999814, 1.0]], [0, [799999.9999989149, 1.0]], [0, [18354.961134799738, 1.0]], [0, [2232.157137528535, 1.0]], [0, [457.7777678506447, 1.0]], [0, [121.89264989763404, 1.0]], [0, [37.61730613203879, 1.0]], [0, [4.741332073510373, 1.0]], [0, [0.3911957087757395, 1.0]], [1, [8.598620915768123, 1.0]], [1, [0.4908497072358782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999891]
bas 2, expnt(s) = [18354.9611348]
bas 3, expnt(s) = [2232.15713753]
bas 4, expnt(s) = [457.77776785]
bas 5, expnt(s) = [121.8926499]
bas 6, expnt(s) = [37.61730613]
bas 7, expnt(s) = [4.74133207]
bas 8, expnt(s) = [0.39119571]
bas 9, expnt(s) = [8.59862092]
bas 10, expnt(s) = [0.49084971]
CPU time:        51.33
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409904e+03 2.23215714e+03 8.20462238e+02
 4.57777768e+02 2.50038018e+02 1.21892650e+02 9.26825903e+01
 3.76173061e+01 3.83756543e+01 4.74133207e+00 8.11783658e+00
 3.91195709e-01 1.24971386e+00 8.59862092e+00 4.29556600e+01
 4.90849707e-01 1.19858838e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997205696162
cond(S) = 42.96959764609562
E1 = -688.6351846755758  E_coul = 184.91517180078722
init E= -503.720012874789
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902333057376  LUMO = 85.1867307812001
  mo_energy =
[-1.21646312e+02 -1.32807925e+01 -7.62161947e+00 -7.62161947e+00
 -7.62161947e+00 -1.65067724e+00 -6.80902333e-01 -6.80902333e-01
 -6.80902333e-01  8.51867308e+01  6.78609093e+02  3.94754465e+03
  3.15207038e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5748984922853  E_coul = 198.94480926394374
cycle= 1 E= -507.630089228342  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237382  1.        ]
  HOMO = -0.236280108681157  LUMO = 86.5198149562649
  mo_energy =
[-1.20258540e+02 -1.22527092e+01 -6.65310193e+00 -6.65310193e+00
 -6.65310193e+00 -1.16345524e+00 -2.36280109e-01 -2.36280109e-01
 -2.36280109e-01  8.65198150e+01  6.79979261e+02  3.94879469e+03
  3.15217843e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435304393344  E_coul = 198.9130142085005
cycle= 2 E= -507.630516230834  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503291
diis-c [-2.52456059e-05 -7.71204356e-04  1.00077120e+00]
  HOMO = -0.23645491226614  LUMO = 86.5162994868059
  mo_energy =
[-1.20267167e+02 -1.22538953e+01 -6.65493898e+00 -6.65493898e+00
 -6.65493898e+00 -1.16351986e+00 -2.36454912e-01 -2.36454912e-01
 -2.36454912e-01  8.65162995e+01  6.79968682e+02  3.94877881e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430914637916  E_coul = 198.91257512327638
cycle= 3 E= -507.630516340515  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125111
diis-c [-3.74643701e-10  3.85637371e-05 -2.52176862e-02  1.02517912e+00]
  HOMO = -0.236457069349749  LUMO = 86.5162558869499
  mo_energy =
[-1.20267277e+02 -1.22539107e+01 -6.65496535e+00 -6.65496535e+00
 -6.65496535e+00 -1.16352049e+00 -2.36457069e-01 -2.36457069e-01
 -2.36457069e-01  8.65162559e+01  6.79968568e+02  3.94877867e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430843730311  E_coul = 198.91256803247765
cycle= 4 E= -507.630516340553  delta_E= -3.82e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430843730311  E_coul = 198.91256803247765
  HOMO = -0.236457053923843  LUMO = 86.516256208026
  mo_energy =
[-1.20267276e+02 -1.22539106e+01 -6.65496520e+00 -6.65496520e+00
 -6.65496520e+00 -1.16352049e+00 -2.36457054e-01 -2.36457054e-01
 -2.36457054e-01  8.65162562e+01  6.79968569e+02  3.94877867e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430844079145  E_coul = 198.91256806736084
Extra cycle  E= -507.630516340554  delta_E= -2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96959764609562
E1 = -706.5430844079145  E_coul = 198.91256806736084
init E= -507.630516340554
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236457053744221  LUMO = 86.5162562119387
  mo_energy =
[-1.20267276e+02 -1.22539106e+01 -6.65496520e+00 -6.65496520e+00
 -6.65496520e+00 -1.16352049e+00 -2.36457054e-01 -2.36457054e-01
 -2.36457054e-01  8.65162562e+01  6.79968569e+02  3.94877867e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543084408439  E_coul = 198.91256806788573
cycle= 1 E= -507.630516340553  delta_E= 4.55e-13  |g|= 1.21e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.543084408439  E_coul = 198.91256806788573
  HOMO = -0.236457053741704  LUMO = 86.5162562119942
  mo_energy =
[-1.20267276e+02 -1.22539106e+01 -6.65496520e+00 -6.65496520e+00
 -6.65496520e+00 -1.16352049e+00 -2.36457054e-01 -2.36457054e-01
 -2.36457054e-01  8.65162562e+01  6.79968569e+02  3.94877867e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5430844084484  E_coul = 198.91256806789474
Extra cycle  E= -507.630516340554  delta_E= -3.98e-13  |g|= 1.72e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215714e+03
 4.57777768e+02 1.21892650e+02 3.76173061e+01 4.74133207e+00
 3.91195709e-01 8.59862092e+00 4.90849707e-01]
grad_E = [ 1.58639599e-10  9.14396679e-09  4.38851050e-06 -1.64782980e-06
  4.77269530e-06 -4.35084751e-06 -8.89672181e-06  3.21195566e-05
 -2.65593117e-05 -1.86336334e-05  2.55468223e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610882        1
[INPUT] 0    0    [1    /1   ]  2232.15715538        1
[INPUT] 0    0    [1    /1   ]  457.777709898        1
[INPUT] 0    0    [1    /1   ]  121.89275358         1
[INPUT] 0    0    [1    /1   ]  37.6172342203        1
[INPUT] 0    0    [1    /1   ]  4.74129990051        1
[INPUT] 0    0    [1    /1   ]  0.391196812065       1
[INPUT] 1    0    [1    /1   ]  8.59864123117        1
[INPUT] 1    0    [1    /1   ]  0.490849727699       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999795, 1.0]], [0, [799999.9999988178, 1.0]], [0, [18354.961088197546, 1.0]], [0, [2232.1571553752033, 1.0]], [0, [457.7777098977769, 1.0]], [0, [121.89275357970351, 1.0]], [0, [37.61723422034817, 1.0]], [0, [4.7412999005114465, 1.0]], [0, [0.39119681206535967, 1.0]], [1, [8.598641231166942, 1.0]], [1, [0.4908497276989023, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999882]
bas 2, expnt(s) = [18354.9610882]
bas 3, expnt(s) = [2232.15715538]
bas 4, expnt(s) = [457.7777099]
bas 5, expnt(s) = [121.89275358]
bas 6, expnt(s) = [37.61723422]
bas 7, expnt(s) = [4.7412999]
bas 8, expnt(s) = [0.39119681]
bas 9, expnt(s) = [8.59864123]
bas 10, expnt(s) = [0.49084973]
CPU time:        55.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215716e+03 8.20462243e+02
 4.57777710e+02 2.50037994e+02 1.21892754e+02 9.26826495e+01
 3.76172342e+01 3.83755992e+01 4.74129990e+00 8.11779527e+00
 3.91196812e-01 1.24971650e+00 8.59864123e+00 4.29557868e+01
 4.90849728e-01 1.19858844e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972317832434
cond(S) = 42.969450524187785
E1 = -688.6352399100514  E_coul = 184.91524331841865
init E= -503.719996591633
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902156484525  LUMO = 85.1865011756739
  mo_energy =
[-1.21646297e+02 -1.32807856e+01 -7.62161517e+00 -7.62161517e+00
 -7.62161517e+00 -1.65067596e+00 -6.80902156e-01 -6.80902156e-01
 -6.80902156e-01  8.51865012e+01  6.78608960e+02  3.94754454e+03
  3.15207036e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749393347792  E_coul = 198.94485012059724
cycle= 1 E= -507.630089214182  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377324
diis-c [-0.14237365  1.        ]
  HOMO = -0.236280119707804  LUMO = 86.5195816450352
  mo_energy =
[-1.20258533e+02 -1.22527041e+01 -6.65309938e+00 -6.65309938e+00
 -6.65309938e+00 -1.16345429e+00 -2.36280120e-01 -2.36280120e-01
 -2.36280120e-01  8.65195816e+01  6.79979118e+02  3.94879457e+03
  3.15217842e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435706568242  E_coul = 198.91305442490653
cycle= 2 E= -507.630516231918  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503304
diis-c [-2.52469851e-05 -7.71285186e-04  1.00077129e+00]
  HOMO = -0.236454926685244  LUMO = 86.5160661046231
  mo_energy =
[-1.20267160e+02 -1.22538902e+01 -6.65493646e+00 -6.65493646e+00
 -6.65493646e+00 -1.16351891e+00 -2.36454927e-01 -2.36454927e-01
 -2.36454927e-01  8.65160661e+01  6.79968539e+02  3.94877868e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431316712834  E_coul = 198.91261532967997
cycle= 3 E= -507.630516341603  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125114
diis-c [-3.74654171e-10  3.85629762e-05 -2.52175455e-02  1.02517898e+00]
  HOMO = -0.236457083804722  LUMO = 86.5160225040655
  mo_energy =
[-1.20267271e+02 -1.22539056e+01 -6.65496284e+00 -6.65496284e+00
 -6.65496284e+00 -1.16351954e+00 -2.36457084e-01 -2.36457084e-01
 -2.36457084e-01  8.65160225e+01  6.79968425e+02  3.94877854e+03
  3.15217647e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431245803878  E_coul = 198.91260823874578
cycle= 4 E= -507.630516341642  delta_E= -3.87e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431245803878  E_coul = 198.91260823874578
  HOMO = -0.236457068378524  LUMO = 86.5160228251487
  mo_energy =
[-1.20267270e+02 -1.22539055e+01 -6.65496268e+00 -6.65496268e+00
 -6.65496268e+00 -1.16351954e+00 -2.36457068e-01 -2.36457068e-01
 -2.36457068e-01  8.65160228e+01  6.79968426e+02  3.94877854e+03
  3.15217647e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431246152716  E_coul = 198.91260827362956
Extra cycle  E= -507.630516341642  delta_E=    0  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215716e+03
 4.57777710e+02 1.21892754e+02 3.76172342e+01 4.74129990e+00
 3.91196812e-01 8.59864123e+00 4.90849728e-01]
E = -507.6305163416421
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610882        1
[INPUT] 0    0    [1    /1   ]  2232.15715538        1
[INPUT] 0    0    [1    /1   ]  457.777709898        1
[INPUT] 0    0    [1    /1   ]  121.89275358         1
[INPUT] 0    0    [1    /1   ]  37.6172342203        1
[INPUT] 0    0    [1    /1   ]  4.74129990051        1
[INPUT] 0    0    [1    /1   ]  0.391196812065       1
[INPUT] 1    0    [1    /1   ]  8.59864123117        1
[INPUT] 1    0    [1    /1   ]  0.490849727699       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999795, 1.0]], [0, [799999.9999988178, 1.0]], [0, [18354.961088197546, 1.0]], [0, [2232.1571553752033, 1.0]], [0, [457.7777098977769, 1.0]], [0, [121.89275357970351, 1.0]], [0, [37.61723422034817, 1.0]], [0, [4.7412999005114465, 1.0]], [0, [0.39119681206535967, 1.0]], [1, [8.598641231166942, 1.0]], [1, [0.4908497276989023, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999882]
bas 2, expnt(s) = [18354.9610882]
bas 3, expnt(s) = [2232.15715538]
bas 4, expnt(s) = [457.7777099]
bas 5, expnt(s) = [121.89275358]
bas 6, expnt(s) = [37.61723422]
bas 7, expnt(s) = [4.7412999]
bas 8, expnt(s) = [0.39119681]
bas 9, expnt(s) = [8.59864123]
bas 10, expnt(s) = [0.49084973]
CPU time:        55.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215716e+03 8.20462243e+02
 4.57777710e+02 2.50037994e+02 1.21892754e+02 9.26826495e+01
 3.76172342e+01 3.83755992e+01 4.74129990e+00 8.11779527e+00
 3.91196812e-01 1.24971650e+00 8.59864123e+00 4.29557868e+01
 4.90849728e-01 1.19858844e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972317832434
cond(S) = 42.969450524187785
E1 = -688.6352399100514  E_coul = 184.91524331841865
init E= -503.719996591633
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902156484525  LUMO = 85.1865011756739
  mo_energy =
[-1.21646297e+02 -1.32807856e+01 -7.62161517e+00 -7.62161517e+00
 -7.62161517e+00 -1.65067596e+00 -6.80902156e-01 -6.80902156e-01
 -6.80902156e-01  8.51865012e+01  6.78608960e+02  3.94754454e+03
  3.15207036e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749393347792  E_coul = 198.94485012059724
cycle= 1 E= -507.630089214182  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377324
diis-c [-0.14237365  1.        ]
  HOMO = -0.236280119707804  LUMO = 86.5195816450352
  mo_energy =
[-1.20258533e+02 -1.22527041e+01 -6.65309938e+00 -6.65309938e+00
 -6.65309938e+00 -1.16345429e+00 -2.36280120e-01 -2.36280120e-01
 -2.36280120e-01  8.65195816e+01  6.79979118e+02  3.94879457e+03
  3.15217842e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5435706568242  E_coul = 198.91305442490653
cycle= 2 E= -507.630516231918  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503304
diis-c [-2.52469851e-05 -7.71285186e-04  1.00077129e+00]
  HOMO = -0.236454926685244  LUMO = 86.5160661046231
  mo_energy =
[-1.20267160e+02 -1.22538902e+01 -6.65493646e+00 -6.65493646e+00
 -6.65493646e+00 -1.16351891e+00 -2.36454927e-01 -2.36454927e-01
 -2.36454927e-01  8.65160661e+01  6.79968539e+02  3.94877868e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431316712834  E_coul = 198.91261532967997
cycle= 3 E= -507.630516341603  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125114
diis-c [-3.74654171e-10  3.85629762e-05 -2.52175455e-02  1.02517898e+00]
  HOMO = -0.236457083804722  LUMO = 86.5160225040655
  mo_energy =
[-1.20267271e+02 -1.22539056e+01 -6.65496284e+00 -6.65496284e+00
 -6.65496284e+00 -1.16351954e+00 -2.36457084e-01 -2.36457084e-01
 -2.36457084e-01  8.65160225e+01  6.79968425e+02  3.94877854e+03
  3.15217647e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431245803878  E_coul = 198.91260823874578
cycle= 4 E= -507.630516341642  delta_E= -3.87e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431245803878  E_coul = 198.91260823874578
  HOMO = -0.236457068378524  LUMO = 86.5160228251487
  mo_energy =
[-1.20267270e+02 -1.22539055e+01 -6.65496268e+00 -6.65496268e+00
 -6.65496268e+00 -1.16351954e+00 -2.36457068e-01 -2.36457068e-01
 -2.36457068e-01  8.65160228e+01  6.79968426e+02  3.94877854e+03
  3.15217647e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431246152716  E_coul = 198.91260827362956
Extra cycle  E= -507.630516341642  delta_E=    0  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.969450524187785
E1 = -706.5431246152716  E_coul = 198.91260827362956
init E= -507.630516341642
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236457068198902  LUMO = 86.5160228290608
  mo_energy =
[-1.20267270e+02 -1.22539055e+01 -6.65496268e+00 -6.65496268e+00
 -6.65496268e+00 -1.16351954e+00 -2.36457068e-01 -2.36457068e-01
 -2.36457068e-01  8.65160228e+01  6.79968426e+02  3.94877854e+03
  3.15217647e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431246157971  E_coul = 198.91260827415485
cycle= 1 E= -507.630516341642  delta_E= -1.14e-13  |g|= 1.22e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431246157971  E_coul = 198.91260827415485
  HOMO = -0.236457068196378  LUMO = 86.5160228291155
  mo_energy =
[-1.20267270e+02 -1.22539055e+01 -6.65496268e+00 -6.65496268e+00
 -6.65496268e+00 -1.16351954e+00 -2.36457068e-01 -2.36457068e-01
 -2.36457068e-01  8.65160228e+01  6.79968426e+02  3.94877854e+03
  3.15217647e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543124615807  E_coul = 198.91260827416434
Extra cycle  E= -507.630516341643  delta_E= -4.55e-13  |g|= 3.61e-11  |ddm|= 4.24e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215716e+03
 4.57777710e+02 1.21892754e+02 3.76172342e+01 4.74129990e+00
 3.91196812e-01 8.59864123e+00 4.90849728e-01]
grad_E = [ 1.58639664e-10  9.14396790e-09  4.38847222e-06 -1.64472649e-06
  4.70988792e-06 -3.82273701e-06 -1.03967331e-05  5.68577424e-06
 -4.83155402e-06 -3.49935950e-06  4.72433550e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610878        1
[INPUT] 0    0    [1    /1   ]  2232.15715547        1
[INPUT] 0    0    [1    /1   ]  457.777710742        1
[INPUT] 0    0    [1    /1   ]  121.892743656        1
[INPUT] 0    0    [1    /1   ]  37.6172649743        1
[INPUT] 0    0    [1    /1   ]  4.74128710617        1
[INPUT] 0    0    [1    /1   ]  0.391197264335       1
[INPUT] 1    0    [1    /1   ]  8.59864904333        1
[INPUT] 1    0    [1    /1   ]  0.490849730704       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999795, 1.0]], [0, [799999.9999988169, 1.0]], [0, [18354.961087777025, 1.0]], [0, [2232.157155470681, 1.0]], [0, [457.77771074169743, 1.0]], [0, [121.89274365552438, 1.0]], [0, [37.61726497432711, 1.0]], [0, [4.741287106166296, 1.0]], [0, [0.3911972643354355, 1.0]], [1, [8.598649043333289, 1.0]], [1, [0.490849730704332, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999882]
bas 2, expnt(s) = [18354.96108778]
bas 3, expnt(s) = [2232.15715547]
bas 4, expnt(s) = [457.77771074]
bas 5, expnt(s) = [121.89274366]
bas 6, expnt(s) = [37.61726497]
bas 7, expnt(s) = [4.74128711]
bas 8, expnt(s) = [0.39119726]
bas 9, expnt(s) = [8.59864904]
bas 10, expnt(s) = [0.49084973]
CPU time:        59.47
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215716e+03 8.20462243e+02
 4.57777711e+02 2.50037994e+02 1.21892744e+02 9.26826438e+01
 3.76172650e+01 3.83756228e+01 4.74128711e+00 8.11777884e+00
 3.91197264e-01 1.24971759e+00 8.59864904e+00 4.29558356e+01
 4.90849731e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997242319793
cond(S) = 42.969464343943855
E1 = -688.6352630216036  E_coul = 184.9152713668446
init E= -503.719991654759
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090207976486  LUMO = 85.1865101943279
  mo_energy =
[-1.21646291e+02 -1.32807834e+01 -7.62161345e+00 -7.62161345e+00
 -7.62161345e+00 -1.65067551e+00 -6.80902080e-01 -6.80902080e-01
 -6.80902080e-01  8.51865102e+01  6.78609010e+02  3.94754458e+03
  3.15207037e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749575617795  E_coul = 198.94486835215014
cycle= 1 E= -507.630089209629  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377324
diis-c [-0.14237372  1.        ]
  HOMO = -0.236280110227202  LUMO = 86.5195897178818
  mo_energy =
[-1.20258529e+02 -1.22527025e+01 -6.65309823e+00 -6.65309823e+00
 -6.65309823e+00 -1.16345396e+00 -2.36280110e-01 -2.36280110e-01
 -2.36280110e-01  8.65195897e+01  6.79979165e+02  3.94879461e+03
  3.15217842e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543588720681  E_coul = 198.913072488478
cycle= 2 E= -507.630516232203  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503309
diis-c [-2.52474146e-05 -7.71337315e-04  1.00077134e+00]
  HOMO = -0.236454918095926  LUMO = 86.516074159205
  mo_energy =
[-1.20267156e+02 -1.22538886e+01 -6.65493533e+00 -6.65493533e+00
 -6.65493533e+00 -1.16351858e+00 -2.36454918e-01 -2.36454918e-01
 -2.36454918e-01  8.65160742e+01  6.79968586e+02  3.94877872e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431497324643  E_coul = 198.91263339057403
cycle= 3 E= -507.63051634189  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74656466e-10  3.85628403e-05 -2.52174700e-02  1.02517891e+00]
  HOMO = -0.236457075219831  LUMO = 86.5160305585762
  mo_energy =
[-1.20267267e+02 -1.22539040e+01 -6.65496170e+00 -6.65496170e+00
 -6.65496170e+00 -1.16351921e+00 -2.36457075e-01 -2.36457075e-01
 -2.36457075e-01  8.65160306e+01  6.79968472e+02  3.94877858e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431426415475  E_coul = 198.9126262996184
cycle= 4 E= -507.630516341929  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431426415475  E_coul = 198.9126262996184
  HOMO = -0.236457059793579  LUMO = 86.5160308796617
  mo_energy =
[-1.20267266e+02 -1.22539039e+01 -6.65496155e+00 -6.65496155e+00
 -6.65496155e+00 -1.16351921e+00 -2.36457060e-01 -2.36457060e-01
 -2.36457060e-01  8.65160309e+01  6.79968473e+02  3.94877858e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543142676431  E_coul = 198.91262633450236
Extra cycle  E= -507.630516341929  delta_E= 5.12e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215716e+03
 4.57777711e+02 1.21892744e+02 3.76172650e+01 4.74128711e+00
 3.91197264e-01 8.59864904e+00 4.90849731e-01]
E = -507.6305163419286
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610878        1
[INPUT] 0    0    [1    /1   ]  2232.15715547        1
[INPUT] 0    0    [1    /1   ]  457.777710742        1
[INPUT] 0    0    [1    /1   ]  121.892743656        1
[INPUT] 0    0    [1    /1   ]  37.6172649743        1
[INPUT] 0    0    [1    /1   ]  4.74128710617        1
[INPUT] 0    0    [1    /1   ]  0.391197264335       1
[INPUT] 1    0    [1    /1   ]  8.59864904333        1
[INPUT] 1    0    [1    /1   ]  0.490849730704       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999795, 1.0]], [0, [799999.9999988169, 1.0]], [0, [18354.961087777025, 1.0]], [0, [2232.157155470681, 1.0]], [0, [457.77771074169743, 1.0]], [0, [121.89274365552438, 1.0]], [0, [37.61726497432711, 1.0]], [0, [4.741287106166296, 1.0]], [0, [0.3911972643354355, 1.0]], [1, [8.598649043333289, 1.0]], [1, [0.490849730704332, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999882]
bas 2, expnt(s) = [18354.96108778]
bas 3, expnt(s) = [2232.15715547]
bas 4, expnt(s) = [457.77771074]
bas 5, expnt(s) = [121.89274366]
bas 6, expnt(s) = [37.61726497]
bas 7, expnt(s) = [4.74128711]
bas 8, expnt(s) = [0.39119726]
bas 9, expnt(s) = [8.59864904]
bas 10, expnt(s) = [0.49084973]
CPU time:        59.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215716e+03 8.20462243e+02
 4.57777711e+02 2.50037994e+02 1.21892744e+02 9.26826438e+01
 3.76172650e+01 3.83756228e+01 4.74128711e+00 8.11777884e+00
 3.91197264e-01 1.24971759e+00 8.59864904e+00 4.29558356e+01
 4.90849731e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997242319793
cond(S) = 42.969464343943855
E1 = -688.6352630216036  E_coul = 184.9152713668446
init E= -503.719991654759
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090207976486  LUMO = 85.1865101943279
  mo_energy =
[-1.21646291e+02 -1.32807834e+01 -7.62161345e+00 -7.62161345e+00
 -7.62161345e+00 -1.65067551e+00 -6.80902080e-01 -6.80902080e-01
 -6.80902080e-01  8.51865102e+01  6.78609010e+02  3.94754458e+03
  3.15207037e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749575617795  E_coul = 198.94486835215014
cycle= 1 E= -507.630089209629  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377324
diis-c [-0.14237372  1.        ]
  HOMO = -0.236280110227202  LUMO = 86.5195897178818
  mo_energy =
[-1.20258529e+02 -1.22527025e+01 -6.65309823e+00 -6.65309823e+00
 -6.65309823e+00 -1.16345396e+00 -2.36280110e-01 -2.36280110e-01
 -2.36280110e-01  8.65195897e+01  6.79979165e+02  3.94879461e+03
  3.15217842e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543588720681  E_coul = 198.913072488478
cycle= 2 E= -507.630516232203  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503309
diis-c [-2.52474146e-05 -7.71337315e-04  1.00077134e+00]
  HOMO = -0.236454918095926  LUMO = 86.516074159205
  mo_energy =
[-1.20267156e+02 -1.22538886e+01 -6.65493533e+00 -6.65493533e+00
 -6.65493533e+00 -1.16351858e+00 -2.36454918e-01 -2.36454918e-01
 -2.36454918e-01  8.65160742e+01  6.79968586e+02  3.94877872e+03
  3.15217649e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431497324643  E_coul = 198.91263339057403
cycle= 3 E= -507.63051634189  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74656466e-10  3.85628403e-05 -2.52174700e-02  1.02517891e+00]
  HOMO = -0.236457075219831  LUMO = 86.5160305585762
  mo_energy =
[-1.20267267e+02 -1.22539040e+01 -6.65496170e+00 -6.65496170e+00
 -6.65496170e+00 -1.16351921e+00 -2.36457075e-01 -2.36457075e-01
 -2.36457075e-01  8.65160306e+01  6.79968472e+02  3.94877858e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431426415475  E_coul = 198.9126262996184
cycle= 4 E= -507.630516341929  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431426415475  E_coul = 198.9126262996184
  HOMO = -0.236457059793579  LUMO = 86.5160308796617
  mo_energy =
[-1.20267266e+02 -1.22539039e+01 -6.65496155e+00 -6.65496155e+00
 -6.65496155e+00 -1.16351921e+00 -2.36457060e-01 -2.36457060e-01
 -2.36457060e-01  8.65160309e+01  6.79968473e+02  3.94877858e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543142676431  E_coul = 198.91262633450236
Extra cycle  E= -507.630516341929  delta_E= 5.12e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.969464343943855
E1 = -706.543142676431  E_coul = 198.91262633450236
init E= -507.630516341929
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236457059613952  LUMO = 86.516030883573
  mo_energy =
[-1.20267266e+02 -1.22539039e+01 -6.65496155e+00 -6.65496155e+00
 -6.65496155e+00 -1.16351921e+00 -2.36457060e-01 -2.36457060e-01
 -2.36457060e-01  8.65160309e+01  6.79968473e+02  3.94877858e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431426769566  E_coul = 198.91262633502762
cycle= 1 E= -507.630516341929  delta_E= -2.84e-13  |g|= 1.36e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5431426769566  E_coul = 198.91262633502762
  HOMO = -0.236457059611433  LUMO = 86.5160308836288
  mo_energy =
[-1.20267266e+02 -1.22539039e+01 -6.65496155e+00 -6.65496155e+00
 -6.65496155e+00 -1.16351921e+00 -2.36457060e-01 -2.36457060e-01
 -2.36457060e-01  8.65160309e+01  6.79968473e+02  3.94877858e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431426769655  E_coul = 198.9126263350367
Extra cycle  E= -507.630516341929  delta_E= 5.68e-14  |g|= 9.79e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215716e+03
 4.57777711e+02 1.21892744e+02 3.76172650e+01 4.74128711e+00
 3.91197264e-01 8.59864904e+00 4.90849731e-01]
grad_E = [ 1.58639615e-10  9.14396562e-09  4.38847897e-06 -1.64535348e-06
  4.72423574e-06 -3.93587316e-06 -1.00369562e-05 -4.36358504e-06
  3.54470529e-06  2.44819322e-06 -3.36125305e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610813        1
[INPUT] 0    0    [1    /1   ]  2232.15715783        1
[INPUT] 0    0    [1    /1   ]  457.777705542        1
[INPUT] 0    0    [1    /1   ]  121.892735118        1
[INPUT] 0    0    [1    /1   ]  37.6173214344        1
[INPUT] 0    0    [1    /1   ]  4.74127491452        1
[INPUT] 0    0    [1    /1   ]  0.391197700901       1
[INPUT] 1    0    [1    /1   ]  8.59865639317        1
[INPUT] 1    0    [1    /1   ]  0.49084973165        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999979, 1.0]], [0, [799999.9999988033, 1.0]], [0, [18354.96108126424, 1.0]], [0, [2232.1571578256094, 1.0]], [0, [457.7777055415753, 1.0]], [0, [121.89273511780549, 1.0]], [0, [37.61732143436422, 1.0]], [0, [4.741274914518975, 1.0]], [0, [0.3911977009013457, 1.0]], [1, [8.598656393167765, 1.0]], [1, [0.4908497316503167, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.9999988]
bas 2, expnt(s) = [18354.96108126]
bas 3, expnt(s) = [2232.15715783]
bas 4, expnt(s) = [457.77770554]
bas 5, expnt(s) = [121.89273512]
bas 6, expnt(s) = [37.61732143]
bas 7, expnt(s) = [4.74127491]
bas 8, expnt(s) = [0.3911977]
bas 9, expnt(s) = [8.59865639]
bas 10, expnt(s) = [0.49084973]
CPU time:        63.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215716e+03 8.20462244e+02
 4.57777706e+02 2.50037992e+02 1.21892735e+02 9.26826389e+01
 3.76173214e+01 3.83756660e+01 4.74127491e+00 8.11776318e+00
 3.91197701e-01 1.24971863e+00 8.59865639e+00 4.29558815e+01
 4.90849732e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199725238372
cond(S) = 42.96951185262935
E1 = -688.6352853301122  E_coul = 184.91529798613502
init E= -503.719987343977
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902004204313  LUMO = 85.1865754446944
  mo_energy =
[-1.21646285e+02 -1.32807815e+01 -7.62161181e+00 -7.62161181e+00
 -7.62161181e+00 -1.65067511e+00 -6.80902004e-01 -6.80902004e-01
 -6.80902004e-01  8.51865754e+01  6.78609156e+02  3.94754470e+03
  3.15207038e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749756775051  E_coul = 198.94488647147338
cycle= 1 E= -507.630089206032  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237385  1.        ]
  HOMO = -0.236280095845165  LUMO = 86.5196542795505
  mo_energy =
[-1.20258525e+02 -1.22527011e+01 -6.65309709e+00 -6.65309709e+00
 -6.65309709e+00 -1.16345366e+00 -2.36280096e-01 -2.36280096e-01
 -2.36280096e-01  8.65196543e+01  6.79979309e+02  3.94879473e+03
  3.15217843e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436067225039  E_coul = 198.91309048988504
cycle= 2 E= -507.630516232619  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503312
diis-c [-2.52477711e-05 -7.71395115e-04  1.00077140e+00]
  HOMO = -0.236454904326092  LUMO = 86.516138707777
  mo_energy =
[-1.20267152e+02 -1.22538872e+01 -6.65493420e+00 -6.65493420e+00
 -6.65493420e+00 -1.16351827e+00 -2.36454904e-01 -2.36454904e-01
 -2.36454904e-01  8.65161387e+01  6.79968730e+02  3.94877884e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431677324225  E_coul = 198.9126513901142
cycle= 3 E= -507.630516342308  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74658013e-10  3.85627518e-05 -2.52173869e-02  1.02517882e+00]
  HOMO = -0.236457061449289  LUMO = 86.5160951071806
  mo_energy =
[-1.20267263e+02 -1.22539026e+01 -6.65496057e+00 -6.65496057e+00
 -6.65496057e+00 -1.16351891e+00 -2.36457061e-01 -2.36457061e-01
 -2.36457061e-01  8.65160951e+01  6.79968616e+02  3.94877870e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431606415012  E_coul = 198.91264429915452
cycle= 4 E= -507.630516342347  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431606415012  E_coul = 198.91264429915452
  HOMO = -0.236457046023023  LUMO = 86.5160954282648
  mo_energy =
[-1.20267262e+02 -1.22539025e+01 -6.65496042e+00 -6.65496042e+00
 -6.65496042e+00 -1.16351890e+00 -2.36457046e-01 -2.36457046e-01
 -2.36457046e-01  8.65160954e+01  6.79968617e+02  3.94877870e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431606763852  E_coul = 198.9126443340388
Extra cycle  E= -507.630516342346  delta_E= 2.27e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215716e+03
 4.57777706e+02 1.21892735e+02 3.76173214e+01 4.74127491e+00
 3.91197701e-01 8.59865639e+00 4.90849732e-01]
E = -507.6305163423465
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610813        1
[INPUT] 0    0    [1    /1   ]  2232.15715783        1
[INPUT] 0    0    [1    /1   ]  457.777705542        1
[INPUT] 0    0    [1    /1   ]  121.892735118        1
[INPUT] 0    0    [1    /1   ]  37.6173214344        1
[INPUT] 0    0    [1    /1   ]  4.74127491452        1
[INPUT] 0    0    [1    /1   ]  0.391197700901       1
[INPUT] 1    0    [1    /1   ]  8.59865639317        1
[INPUT] 1    0    [1    /1   ]  0.49084973165        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999979, 1.0]], [0, [799999.9999988033, 1.0]], [0, [18354.96108126424, 1.0]], [0, [2232.1571578256094, 1.0]], [0, [457.7777055415753, 1.0]], [0, [121.89273511780549, 1.0]], [0, [37.61732143436422, 1.0]], [0, [4.741274914518975, 1.0]], [0, [0.3911977009013457, 1.0]], [1, [8.598656393167765, 1.0]], [1, [0.4908497316503167, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.9999988]
bas 2, expnt(s) = [18354.96108126]
bas 3, expnt(s) = [2232.15715783]
bas 4, expnt(s) = [457.77770554]
bas 5, expnt(s) = [121.89273512]
bas 6, expnt(s) = [37.61732143]
bas 7, expnt(s) = [4.74127491]
bas 8, expnt(s) = [0.3911977]
bas 9, expnt(s) = [8.59865639]
bas 10, expnt(s) = [0.49084973]
CPU time:        64.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215716e+03 8.20462244e+02
 4.57777706e+02 2.50037992e+02 1.21892735e+02 9.26826389e+01
 3.76173214e+01 3.83756660e+01 4.74127491e+00 8.11776318e+00
 3.91197701e-01 1.24971863e+00 8.59865639e+00 4.29558815e+01
 4.90849732e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3199725238372
cond(S) = 42.96951185262935
E1 = -688.6352853301122  E_coul = 184.91529798613502
init E= -503.719987343977
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902004204313  LUMO = 85.1865754446944
  mo_energy =
[-1.21646285e+02 -1.32807815e+01 -7.62161181e+00 -7.62161181e+00
 -7.62161181e+00 -1.65067511e+00 -6.80902004e-01 -6.80902004e-01
 -6.80902004e-01  8.51865754e+01  6.78609156e+02  3.94754470e+03
  3.15207038e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749756775051  E_coul = 198.94488647147338
cycle= 1 E= -507.630089206032  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237385  1.        ]
  HOMO = -0.236280095845165  LUMO = 86.5196542795505
  mo_energy =
[-1.20258525e+02 -1.22527011e+01 -6.65309709e+00 -6.65309709e+00
 -6.65309709e+00 -1.16345366e+00 -2.36280096e-01 -2.36280096e-01
 -2.36280096e-01  8.65196543e+01  6.79979309e+02  3.94879473e+03
  3.15217843e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436067225039  E_coul = 198.91309048988504
cycle= 2 E= -507.630516232619  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503312
diis-c [-2.52477711e-05 -7.71395115e-04  1.00077140e+00]
  HOMO = -0.236454904326092  LUMO = 86.516138707777
  mo_energy =
[-1.20267152e+02 -1.22538872e+01 -6.65493420e+00 -6.65493420e+00
 -6.65493420e+00 -1.16351827e+00 -2.36454904e-01 -2.36454904e-01
 -2.36454904e-01  8.65161387e+01  6.79968730e+02  3.94877884e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431677324225  E_coul = 198.9126513901142
cycle= 3 E= -507.630516342308  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74658013e-10  3.85627518e-05 -2.52173869e-02  1.02517882e+00]
  HOMO = -0.236457061449289  LUMO = 86.5160951071806
  mo_energy =
[-1.20267263e+02 -1.22539026e+01 -6.65496057e+00 -6.65496057e+00
 -6.65496057e+00 -1.16351891e+00 -2.36457061e-01 -2.36457061e-01
 -2.36457061e-01  8.65160951e+01  6.79968616e+02  3.94877870e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431606415012  E_coul = 198.91264429915452
cycle= 4 E= -507.630516342347  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431606415012  E_coul = 198.91264429915452
  HOMO = -0.236457046023023  LUMO = 86.5160954282648
  mo_energy =
[-1.20267262e+02 -1.22539025e+01 -6.65496042e+00 -6.65496042e+00
 -6.65496042e+00 -1.16351890e+00 -2.36457046e-01 -2.36457046e-01
 -2.36457046e-01  8.65160954e+01  6.79968617e+02  3.94877870e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431606763852  E_coul = 198.9126443340388
Extra cycle  E= -507.630516342346  delta_E= 2.27e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96951185262935
E1 = -706.5431606763852  E_coul = 198.9126443340388
init E= -507.630516342346
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236457045843396  LUMO = 86.5160954321773
  mo_energy =
[-1.20267262e+02 -1.22539025e+01 -6.65496042e+00 -6.65496042e+00
 -6.65496042e+00 -1.16351890e+00 -2.36457046e-01 -2.36457046e-01
 -2.36457046e-01  8.65160954e+01  6.79968617e+02  3.94877870e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431606769104  E_coul = 198.91264433456408
cycle= 1 E= -507.630516342346  delta_E= 2.27e-13  |g|= 1.56e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431606769104  E_coul = 198.91264433456408
  HOMO = -0.236457045840874  LUMO = 86.5160954322329
  mo_energy =
[-1.20267262e+02 -1.22539025e+01 -6.65496042e+00 -6.65496042e+00
 -6.65496042e+00 -1.16351890e+00 -2.36457046e-01 -2.36457046e-01
 -2.36457046e-01  8.65160954e+01  6.79968617e+02  3.94877870e+03
  3.15217648e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431606769195  E_coul = 198.9126443345729
Extra cycle  E= -507.630516342347  delta_E= -3.41e-13  |g|= 1.05e-10  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215716e+03
 4.57777706e+02 1.21892735e+02 3.76173214e+01 4.74127491e+00
 3.91197701e-01 8.59865639e+00 4.90849732e-01]
grad_E = [ 1.58639554e-10  9.14396293e-09  4.38849025e-06 -1.64638046e-06
  4.74821225e-06 -4.14507122e-06 -9.35724145e-06 -1.37776432e-05
  1.14332369e-05  8.09229394e-06 -1.09966331e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610529        1
[INPUT] 0    0    [1    /1   ]  2232.15716845        1
[INPUT] 0    0    [1    /1   ]  457.777675406        1
[INPUT] 0    0    [1    /1   ]  121.892757255        1
[INPUT] 0    0    [1    /1   ]  37.6173959693        1
[INPUT] 0    0    [1    /1   ]  4.74126282159        1
[INPUT] 0    0    [1    /1   ]  0.391198137063       1
[INPUT] 1    0    [1    /1   ]  8.59866364763        1
[INPUT] 1    0    [1    /1   ]  0.490849731674       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999978, 1.0]], [0, [799999.9999987441, 1.0]], [0, [18354.961052874507, 1.0]], [0, [2232.1571684492533, 1.0]], [0, [457.77767540572626, 1.0]], [0, [121.892757255166, 1.0]], [0, [37.61739596929334, 1.0]], [0, [4.741262821589699, 1.0]], [0, [0.39119813706287215, 1.0]], [1, [8.598663647628245, 1.0]], [1, [0.49084973167425, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999874]
bas 2, expnt(s) = [18354.96105287]
bas 3, expnt(s) = [2232.15716845]
bas 4, expnt(s) = [457.77767541]
bas 5, expnt(s) = [121.89275726]
bas 6, expnt(s) = [37.61739597]
bas 7, expnt(s) = [4.74126282]
bas 8, expnt(s) = [0.39119814]
bas 9, expnt(s) = [8.59866365]
bas 10, expnt(s) = [0.49084973]
CPU time:        67.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215717e+03 8.20462247e+02
 4.57777675e+02 2.50037980e+02 1.21892757e+02 9.26826516e+01
 3.76173960e+01 3.83757230e+01 4.74126282e+00 8.11774765e+00
 3.91198137e-01 1.24971968e+00 8.59866365e+00 4.29559268e+01
 4.90849732e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972623387734
cond(S) = 42.96958395222604
E1 = -688.6353073289962  E_coul = 184.91532437546306
init E= -503.719982953533
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901928303787  LUMO = 85.186692082716
  mo_energy =
[-1.21646279e+02 -1.32807797e+01 -7.62161018e+00 -7.62161018e+00
 -7.62161018e+00 -1.65067471e+00 -6.80901928e-01 -6.80901928e-01
 -6.80901928e-01  8.51866921e+01  6.78609434e+02  3.94754494e+03
  3.15207039e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749939232572  E_coul = 198.94490472001496
cycle= 1 E= -507.630089203242  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237401  1.        ]
  HOMO = -0.236280079459808  LUMO = 86.5197703432491
  mo_energy =
[-1.20258521e+02 -1.22526998e+01 -6.65309594e+00 -6.65309594e+00
 -6.65309594e+00 -1.16345337e+00 -2.36280079e-01 -2.36280079e-01
 -2.36280079e-01  8.65197703e+01  6.79979584e+02  3.94879496e+03
  3.15217845e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436248867201  E_coul = 198.913108653362
cycle= 2 E= -507.630516233358  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503316
diis-c [-2.52480907e-05 -7.71456937e-04  1.00077146e+00]
  HOMO = -0.236454888351799  LUMO = 86.5162547611342
  mo_energy =
[-1.20267148e+02 -1.22538859e+01 -6.65493305e+00 -6.65493305e+00
 -6.65493305e+00 -1.16351798e+00 -2.36454888e-01 -2.36454888e-01
 -2.36454888e-01  8.65162548e+01  6.79969006e+02  3.94877907e+03
  3.15217651e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431858953627  E_coul = 198.9126695523151
cycle= 3 E= -507.630516343048  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74657989e-10  3.85627946e-05 -2.52172956e-02  1.02517873e+00]
  HOMO = -0.2364570454704  LUMO = 86.5162111606348
  mo_energy =
[-1.20267259e+02 -1.22539013e+01 -6.65495943e+00 -6.65495943e+00
 -6.65495943e+00 -1.16351862e+00 -2.36457045e-01 -2.36457045e-01
 -2.36457045e-01  8.65162112e+01  6.79968892e+02  3.94877893e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431788044513  E_coul = 198.91266246136533
cycle= 4 E= -507.630516343086  delta_E= -3.83e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431788044513  E_coul = 198.91266246136533
  HOMO = -0.23645703004417  LUMO = 86.5162114817187
  mo_energy =
[-1.20267258e+02 -1.22539012e+01 -6.65495927e+00 -6.65495927e+00
 -6.65495927e+00 -1.16351861e+00 -2.36457030e-01 -2.36457030e-01
 -2.36457030e-01  8.65162115e+01  6.79968893e+02  3.94877893e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431788393361  E_coul = 198.91266249624974
Extra cycle  E= -507.630516343086  delta_E= -4.55e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215717e+03
 4.57777675e+02 1.21892757e+02 3.76173960e+01 4.74126282e+00
 3.91198137e-01 8.59866365e+00 4.90849732e-01]
E = -507.63051634308636
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:35:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9610529        1
[INPUT] 0    0    [1    /1   ]  2232.15716845        1
[INPUT] 0    0    [1    /1   ]  457.777675406        1
[INPUT] 0    0    [1    /1   ]  121.892757255        1
[INPUT] 0    0    [1    /1   ]  37.6173959693        1
[INPUT] 0    0    [1    /1   ]  4.74126282159        1
[INPUT] 0    0    [1    /1   ]  0.391198137063       1
[INPUT] 1    0    [1    /1   ]  8.59866364763        1
[INPUT] 1    0    [1    /1   ]  0.490849731674       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999978, 1.0]], [0, [799999.9999987441, 1.0]], [0, [18354.961052874507, 1.0]], [0, [2232.1571684492533, 1.0]], [0, [457.77767540572626, 1.0]], [0, [121.892757255166, 1.0]], [0, [37.61739596929334, 1.0]], [0, [4.741262821589699, 1.0]], [0, [0.39119813706287215, 1.0]], [1, [8.598663647628245, 1.0]], [1, [0.49084973167425, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.99999874]
bas 2, expnt(s) = [18354.96105287]
bas 3, expnt(s) = [2232.15716845]
bas 4, expnt(s) = [457.77767541]
bas 5, expnt(s) = [121.89275726]
bas 6, expnt(s) = [37.61739597]
bas 7, expnt(s) = [4.74126282]
bas 8, expnt(s) = [0.39119814]
bas 9, expnt(s) = [8.59866365]
bas 10, expnt(s) = [0.49084973]
CPU time:        68.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549611e+04 3.98409903e+03 2.23215717e+03 8.20462247e+02
 4.57777675e+02 2.50037980e+02 1.21892757e+02 9.26826516e+01
 3.76173960e+01 3.83757230e+01 4.74126282e+00 8.11774765e+00
 3.91198137e-01 1.24971968e+00 8.59866365e+00 4.29559268e+01
 4.90849732e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972623387734
cond(S) = 42.96958395222604
E1 = -688.6353073289962  E_coul = 184.91532437546306
init E= -503.719982953533
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901928303787  LUMO = 85.186692082716
  mo_energy =
[-1.21646279e+02 -1.32807797e+01 -7.62161018e+00 -7.62161018e+00
 -7.62161018e+00 -1.65067471e+00 -6.80901928e-01 -6.80901928e-01
 -6.80901928e-01  8.51866921e+01  6.78609434e+02  3.94754494e+03
  3.15207039e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5749939232572  E_coul = 198.94490472001496
cycle= 1 E= -507.630089203242  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237401  1.        ]
  HOMO = -0.236280079459808  LUMO = 86.5197703432491
  mo_energy =
[-1.20258521e+02 -1.22526998e+01 -6.65309594e+00 -6.65309594e+00
 -6.65309594e+00 -1.16345337e+00 -2.36280079e-01 -2.36280079e-01
 -2.36280079e-01  8.65197703e+01  6.79979584e+02  3.94879496e+03
  3.15217845e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436248867201  E_coul = 198.913108653362
cycle= 2 E= -507.630516233358  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503316
diis-c [-2.52480907e-05 -7.71456937e-04  1.00077146e+00]
  HOMO = -0.236454888351799  LUMO = 86.5162547611342
  mo_energy =
[-1.20267148e+02 -1.22538859e+01 -6.65493305e+00 -6.65493305e+00
 -6.65493305e+00 -1.16351798e+00 -2.36454888e-01 -2.36454888e-01
 -2.36454888e-01  8.65162548e+01  6.79969006e+02  3.94877907e+03
  3.15217651e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431858953627  E_coul = 198.9126695523151
cycle= 3 E= -507.630516343048  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74657989e-10  3.85627946e-05 -2.52172956e-02  1.02517873e+00]
  HOMO = -0.2364570454704  LUMO = 86.5162111606348
  mo_energy =
[-1.20267259e+02 -1.22539013e+01 -6.65495943e+00 -6.65495943e+00
 -6.65495943e+00 -1.16351862e+00 -2.36457045e-01 -2.36457045e-01
 -2.36457045e-01  8.65162112e+01  6.79968892e+02  3.94877893e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431788044513  E_coul = 198.91266246136533
cycle= 4 E= -507.630516343086  delta_E= -3.83e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431788044513  E_coul = 198.91266246136533
  HOMO = -0.23645703004417  LUMO = 86.5162114817187
  mo_energy =
[-1.20267258e+02 -1.22539012e+01 -6.65495927e+00 -6.65495927e+00
 -6.65495927e+00 -1.16351861e+00 -2.36457030e-01 -2.36457030e-01
 -2.36457030e-01  8.65162115e+01  6.79968893e+02  3.94877893e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431788393361  E_coul = 198.91266249624974
Extra cycle  E= -507.630516343086  delta_E= -4.55e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96958395222604
E1 = -706.5431788393361  E_coul = 198.91266249624974
init E= -507.630516343086
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236457029864537  LUMO = 86.5162114856309
  mo_energy =
[-1.20267258e+02 -1.22539012e+01 -6.65495927e+00 -6.65495927e+00
 -6.65495927e+00 -1.16351861e+00 -2.36457030e-01 -2.36457030e-01
 -2.36457030e-01  8.65162115e+01  6.79968893e+02  3.94877893e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431788398611  E_coul = 198.9126624967749
cycle= 1 E= -507.630516343086  delta_E= 2.27e-13  |g|= 1.29e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431788398611  E_coul = 198.9126624967749
  HOMO = -0.236457029862019  LUMO = 86.5162114856867
  mo_energy =
[-1.20267258e+02 -1.22539012e+01 -6.65495927e+00 -6.65495927e+00
 -6.65495927e+00 -1.16351861e+00 -2.36457030e-01 -2.36457030e-01
 -2.36457030e-01  8.65162115e+01  6.79968893e+02  3.94877893e+03
  3.15217650e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431788398703  E_coul = 198.91266249678392
Extra cycle  E= -507.630516343086  delta_E= -2.27e-13  |g|= 3.77e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549611e+04 2.23215717e+03
 4.57777675e+02 1.21892757e+02 3.76173960e+01 4.74126282e+00
 3.91198137e-01 8.59866365e+00 4.90849732e-01]
grad_E = [ 1.58639507e-10  9.14396080e-09  4.38849837e-06 -1.64717208e-06
  4.76955160e-06 -4.36450583e-06 -8.57717490e-06 -2.30666580e-05
  1.92281435e-05  1.36814949e-05 -1.85468900e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9609857        1
[INPUT] 0    0    [1    /1   ]  2232.15719373        1
[INPUT] 0    0    [1    /1   ]  457.777601003        1
[INPUT] 0    0    [1    /1   ]  121.892834416        1
[INPUT] 0    0    [1    /1   ]  37.6175005279        1
[INPUT] 0    0    [1    /1   ]  4.74124935287        1
[INPUT] 0    0    [1    /1   ]  0.391198626105       1
[INPUT] 1    0    [1    /1   ]  8.59867170047        1
[INPUT] 1    0    [1    /1   ]  0.490849730827       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999976, 1.0]], [0, [799999.9999986042, 1.0]], [0, [18354.96098571683, 1.0]], [0, [2232.1571937294543, 1.0]], [0, [457.77760100299463, 1.0]], [0, [121.8928344161032, 1.0]], [0, [37.61750052786677, 1.0]], [0, [4.741249352871887, 1.0]], [0, [0.3911986261050215, 1.0]], [1, [8.59867170047158, 1.0]], [1, [0.4908497308274959, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.9999986]
bas 2, expnt(s) = [18354.96098572]
bas 3, expnt(s) = [2232.15719373]
bas 4, expnt(s) = [457.777601]
bas 5, expnt(s) = [121.89283442]
bas 6, expnt(s) = [37.61750053]
bas 7, expnt(s) = [4.74124935]
bas 8, expnt(s) = [0.39119863]
bas 9, expnt(s) = [8.5986717]
bas 10, expnt(s) = [0.49084973]
CPU time:        72.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549610e+04 3.98409902e+03 2.23215719e+03 8.20462254e+02
 4.57777601e+02 2.50037949e+02 1.21892834e+02 9.26826956e+01
 3.76175005e+01 3.83758030e+01 4.74124935e+00 8.11773036e+00
 3.91198626e-01 1.24972085e+00 8.59867170e+00 4.29559771e+01
 4.90849731e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972733746695
cond(S) = 42.969694159604366
E1 = -688.6353314909094  E_coul = 184.91535377682476
init E= -503.719977714085
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090184308795  LUMO = 85.1868898235841
  mo_energy =
[-1.21646272e+02 -1.32807778e+01 -7.62160836e+00 -7.62160836e+00
 -7.62160836e+00 -1.65067428e+00 -6.80901843e-01 -6.80901843e-01
 -6.80901843e-01  8.51868898e+01  6.78609932e+02  3.94754535e+03
  3.15207042e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5750144264351  E_coul = 198.94492522521313
cycle= 1 E= -507.630089201222  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237423  1.        ]
  HOMO = -0.236280059681771  LUMO = 86.5199675503199
  mo_energy =
[-1.20258517e+02 -1.22526984e+01 -6.65309465e+00 -6.65309465e+00
 -6.65309465e+00 -1.16345304e+00 -2.36280060e-01 -2.36280060e-01
 -2.36280060e-01  8.65199676e+01  6.79980080e+02  3.94879537e+03
  3.15217847e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436453373864  E_coul = 198.91312910267044
cycle= 2 E= -507.630516234716  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.03 sec, wall time      0.04 sec
diis-norm(errvec)=0.00503319
diis-c [-2.52484082e-05 -7.71530202e-04  1.00077153e+00]
  HOMO = -0.236454868784045  LUMO = 86.5164519595952
  mo_energy =
[-1.20267144e+02 -1.22538845e+01 -6.65493176e+00 -6.65493176e+00
 -6.65493176e+00 -1.16351766e+00 -2.36454869e-01 -2.36454869e-01
 -2.36454869e-01  8.65164520e+01  6.79969502e+02  3.94877948e+03
  3.15217654e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432063453426  E_coul = 198.91269000093547
cycle= 3 E= -507.630516344407  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125116
diis-c [-3.74656089e-10  3.85629775e-05 -2.52171822e-02  1.02517862e+00]
  HOMO = -0.23645702589269  LUMO = 86.516408359282
  mo_energy =
[-1.20267254e+02 -1.22538999e+01 -6.65495814e+00 -6.65495814e+00
 -6.65495814e+00 -1.16351829e+00 -2.36457026e-01 -2.36457026e-01
 -2.36457026e-01  8.65164084e+01  6.79969388e+02  3.94877934e+03
  3.15217652e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431992544598  E_coul = 198.9126829100143
cycle= 4 E= -507.630516344445  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5431992544598  E_coul = 198.9126829100143
  HOMO = -0.236457010466545  LUMO = 86.516408680367
  mo_energy =
[-1.20267254e+02 -1.22538998e+01 -6.65495798e+00 -6.65495798e+00
 -6.65495798e+00 -1.16351829e+00 -2.36457010e-01 -2.36457010e-01
 -2.36457010e-01  8.65164087e+01  6.79969389e+02  3.94877934e+03
  3.15217652e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431992893434  E_coul = 198.91268294489822
Extra cycle  E= -507.630516344445  delta_E= 2.84e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.17 sec, wall time      0.20 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549610e+04 2.23215719e+03
 4.57777601e+02 1.21892834e+02 3.76175005e+01 4.74124935e+00
 3.91198626e-01 8.59867170e+00 4.90849731e-01]
E = -507.6305163444452
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999999        1
[INPUT] 0    0    [1    /1   ]  18354.9609857        1
[INPUT] 0    0    [1    /1   ]  2232.15719373        1
[INPUT] 0    0    [1    /1   ]  457.777601003        1
[INPUT] 0    0    [1    /1   ]  121.892834416        1
[INPUT] 0    0    [1    /1   ]  37.6175005279        1
[INPUT] 0    0    [1    /1   ]  4.74124935287        1
[INPUT] 0    0    [1    /1   ]  0.391198626105       1
[INPUT] 1    0    [1    /1   ]  8.59867170047        1
[INPUT] 1    0    [1    /1   ]  0.490849730827       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999976, 1.0]], [0, [799999.9999986042, 1.0]], [0, [18354.96098571683, 1.0]], [0, [2232.1571937294543, 1.0]], [0, [457.77760100299463, 1.0]], [0, [121.8928344161032, 1.0]], [0, [37.61750052786677, 1.0]], [0, [4.741249352871887, 1.0]], [0, [0.3911986261050215, 1.0]], [1, [8.59867170047158, 1.0]], [1, [0.4908497308274959, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999998]
bas 1, expnt(s) = [799999.9999986]
bas 2, expnt(s) = [18354.96098572]
bas 3, expnt(s) = [2232.15719373]
bas 4, expnt(s) = [457.777601]
bas 5, expnt(s) = [121.89283442]
bas 6, expnt(s) = [37.61750053]
bas 7, expnt(s) = [4.74124935]
bas 8, expnt(s) = [0.39119863]
bas 9, expnt(s) = [8.5986717]
bas 10, expnt(s) = [0.49084973]
CPU time:        73.12
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549610e+04 3.98409902e+03 2.23215719e+03 8.20462254e+02
 4.57777601e+02 2.50037949e+02 1.21892834e+02 9.26826956e+01
 3.76175005e+01 3.83758030e+01 4.74124935e+00 8.11773036e+00
 3.91198626e-01 1.24972085e+00 8.59867170e+00 4.29559771e+01
 4.90849731e-01 1.19858845e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972733746695
cond(S) = 42.969694159604366
E1 = -688.6353314909094  E_coul = 184.91535377682476
init E= -503.719977714085
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.68090184308795  LUMO = 85.1868898235841
  mo_energy =
[-1.21646272e+02 -1.32807778e+01 -7.62160836e+00 -7.62160836e+00
 -7.62160836e+00 -1.65067428e+00 -6.80901843e-01 -6.80901843e-01
 -6.80901843e-01  8.51868898e+01  6.78609932e+02  3.94754535e+03
  3.15207042e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5750144264351  E_coul = 198.94492522521313
cycle= 1 E= -507.630089201222  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377325
diis-c [-0.14237423  1.        ]
  HOMO = -0.236280059681771  LUMO = 86.5199675503199
  mo_energy =
[-1.20258517e+02 -1.22526984e+01 -6.65309465e+00 -6.65309465e+00
 -6.65309465e+00 -1.16345304e+00 -2.36280060e-01 -2.36280060e-01
 -2.36280060e-01  8.65199676e+01  6.79980080e+02  3.94879537e+03
  3.15217847e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436453373864  E_coul = 198.91312910267044
cycle= 2 E= -507.630516234716  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503319
diis-c [-2.52484082e-05 -7.71530202e-04  1.00077153e+00]
  HOMO = -0.236454868784045  LUMO = 86.5164519595952
  mo_energy =
[-1.20267144e+02 -1.22538845e+01 -6.65493176e+00 -6.65493176e+00
 -6.65493176e+00 -1.16351766e+00 -2.36454869e-01 -2.36454869e-01
 -2.36454869e-01  8.65164520e+01  6.79969502e+02  3.94877948e+03
  3.15217654e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432063453426  E_coul = 198.91269000093547
cycle= 3 E= -507.630516344407  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125116
diis-c [-3.74656089e-10  3.85629775e-05 -2.52171822e-02  1.02517862e+00]
  HOMO = -0.23645702589269  LUMO = 86.516408359282
  mo_energy =
[-1.20267254e+02 -1.22538999e+01 -6.65495814e+00 -6.65495814e+00
 -6.65495814e+00 -1.16351829e+00 -2.36457026e-01 -2.36457026e-01
 -2.36457026e-01  8.65164084e+01  6.79969388e+02  3.94877934e+03
  3.15217652e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431992544598  E_coul = 198.9126829100143
cycle= 4 E= -507.630516344445  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -706.5431992544598  E_coul = 198.9126829100143
  HOMO = -0.236457010466545  LUMO = 86.516408680367
  mo_energy =
[-1.20267254e+02 -1.22538998e+01 -6.65495798e+00 -6.65495798e+00
 -6.65495798e+00 -1.16351829e+00 -2.36457010e-01 -2.36457010e-01
 -2.36457010e-01  8.65164087e+01  6.79969389e+02  3.94877934e+03
  3.15217652e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431992893434  E_coul = 198.91268294489822
Extra cycle  E= -507.630516344445  delta_E= 2.84e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.17 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.969694159604366
E1 = -706.5431992893434  E_coul = 198.91268294489822
init E= -507.630516344445
    CPU time for initialize scf      0.11 sec, wall time      0.12 sec
  HOMO = -0.236457010286916  LUMO = 86.5164086842777
  mo_energy =
[-1.20267254e+02 -1.22538998e+01 -6.65495798e+00 -6.65495798e+00
 -6.65495798e+00 -1.16351829e+00 -2.36457010e-01 -2.36457010e-01
 -2.36457010e-01  8.65164087e+01  6.79969389e+02  3.94877934e+03
  3.15217652e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431992898687  E_coul = 198.91268294542348
cycle= 1 E= -507.630516344445  delta_E= 5.68e-14  |g|= 1.28e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
E1 = -706.5431992898687  E_coul = 198.91268294542348
  HOMO = -0.236457010284398  LUMO = 86.5164086843341
  mo_energy =
[-1.20267254e+02 -1.22538998e+01 -6.65495798e+00 -6.65495798e+00
 -6.65495798e+00 -1.16351829e+00 -2.36457010e-01 -2.36457010e-01
 -2.36457010e-01  8.65164087e+01  6.79969389e+02  3.94877934e+03
  3.15217652e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5431992898777  E_coul = 198.9126829454322
Extra cycle  E= -507.630516344446  delta_E= -3.98e-13  |g|= 2.23e-11  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.22 sec, wall time      0.26 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549610e+04 2.23215719e+03
 4.57777601e+02 1.21892834e+02 3.76175005e+01 4.74124935e+00
 3.91198626e-01 8.59867170e+00 4.90849731e-01]
grad_E = [ 1.58639483e-10  9.14395954e-09  4.38850020e-06 -1.64749611e-06
  4.78512821e-06 -4.59044052e-06 -7.65534646e-06 -3.33906189e-05
  2.78943366e-05  1.98985469e-05 -2.69424949e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999998        1
[INPUT] 0    0    [1    /1   ]  18354.960846         1
[INPUT] 0    0    [1    /1   ]  2232.15724646        1
[INPUT] 0    0    [1    /1   ]  457.777443776        1
[INPUT] 0    0    [1    /1   ]  121.893014043        1
[INPUT] 0    0    [1    /1   ]  37.6176628558        1
[INPUT] 0    0    [1    /1   ]  4.7412326038         1
[INPUT] 0    0    [1    /1   ]  0.391199239033       1
[INPUT] 1    0    [1    /1   ]  8.59868167818        1
[INPUT] 1    0    [1    /1   ]  0.490849728512       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999707, 1.0]], [0, [799999.999998313, 1.0]], [0, [18354.96084595152, 1.0]], [0, [2232.1572464554088, 1.0]], [0, [457.77744377617364, 1.0]], [0, [121.89301404335683, 1.0]], [0, [37.61766285581417, 1.0]], [0, [4.741232603802823, 1.0]], [0, [0.3911992390325247, 1.0]], [1, [8.598681678179837, 1.0]], [1, [0.49084972851224123, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999997]
bas 1, expnt(s) = [799999.99999831]
bas 2, expnt(s) = [18354.96084595]
bas 3, expnt(s) = [2232.15724646]
bas 4, expnt(s) = [457.77744378]
bas 5, expnt(s) = [121.89301404]
bas 6, expnt(s) = [37.61766286]
bas 7, expnt(s) = [4.7412326]
bas 8, expnt(s) = [0.39119924]
bas 9, expnt(s) = [8.59868168]
bas 10, expnt(s) = [0.49084973]
CPU time:        76.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549608e+04 3.98409900e+03 2.23215725e+03 8.20462268e+02
 4.57777444e+02 2.50037885e+02 1.21893014e+02 9.26827980e+01
 3.76176629e+01 3.83759272e+01 4.74123260e+00 8.11770885e+00
 3.91199239e-01 1.24972232e+00 8.59868168e+00 4.29560394e+01
 4.90849729e-01 1.19858844e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972870161905
cond(S) = 42.969876305414864
E1 = -688.6353609708009  E_coul = 184.91539035961378
init E= -503.719970611187
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901736226944  LUMO = 85.1872396219658
  mo_energy =
[-1.21646263e+02 -1.32807754e+01 -7.62160608e+00 -7.62160608e+00
 -7.62160608e+00 -1.65067375e+00 -6.80901736e-01 -6.80901736e-01
 -6.80901736e-01  8.51872396e+01  6.78610847e+02  3.94754610e+03
  3.15207046e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5750401525152  E_coul = 198.94495095214012
cycle= 1 E= -507.630089200375  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377326
diis-c [-0.14237456  1.        ]
  HOMO = -0.236280033086448  LUMO = 86.5203168375717
  mo_energy =
[-1.20258511e+02 -1.22526967e+01 -6.65309302e+00 -6.65309302e+00
 -6.65309302e+00 -1.16345265e+00 -2.36280033e-01 -2.36280033e-01
 -2.36280033e-01  8.65203168e+01  6.79980992e+02  3.94879611e+03
  3.15217851e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436710561058  E_coul = 198.91315481887122
cycle= 2 E= -507.630516237235  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503323
diis-c [-2.52487457e-05 -7.71627571e-04  1.00077163e+00]
  HOMO = -0.236454842073305  LUMO = 86.5168012404547
  mo_energy =
[-1.20267138e+02 -1.22538828e+01 -6.65493014e+00 -6.65493014e+00
 -6.65493014e+00 -1.16351726e+00 -2.36454842e-01 -2.36454842e-01
 -2.36454842e-01  8.65168012e+01  6.79970413e+02  3.94878023e+03
  3.15217658e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432320643239  E_coul = 198.91271571739742
cycle= 3 E= -507.630516346926  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125116
diis-c [-3.74653280e-10  3.85630978e-05 -2.52170195e-02  1.02517846e+00]
  HOMO = -0.236456999162335  LUMO = 86.5167576404896
  mo_energy =
[-1.20267249e+02 -1.22538982e+01 -6.65495651e+00 -6.65495651e+00
 -6.65495651e+00 -1.16351790e+00 -2.36456999e-01 -2.36456999e-01
 -2.36456999e-01  8.65167576e+01  6.79970299e+02  3.94878009e+03
  3.15217657e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432249735031  E_coul = 198.91270862653792
cycle= 4 E= -507.630516346965  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432249735031  E_coul = 198.91270862653792
  HOMO = -0.236456983736337  LUMO = 86.5167579615719
  mo_energy =
[-1.20267248e+02 -1.22538981e+01 -6.65495636e+00 -6.65495636e+00
 -6.65495636e+00 -1.16351789e+00 -2.36456984e-01 -2.36456984e-01
 -2.36456984e-01  8.65167580e+01  6.79970300e+02  3.94878009e+03
  3.15217657e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432250083867  E_coul = 198.91270866142156
Extra cycle  E= -507.630516346965  delta_E= 1.14e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549608e+04 2.23215725e+03
 4.57777444e+02 1.21893014e+02 3.76176629e+01 4.74123260e+00
 3.91199239e-01 8.59868168e+00 4.90849729e-01]
E = -507.6305163469651
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999998        1
[INPUT] 0    0    [1    /1   ]  18354.960846         1
[INPUT] 0    0    [1    /1   ]  2232.15724646        1
[INPUT] 0    0    [1    /1   ]  457.777443776        1
[INPUT] 0    0    [1    /1   ]  121.893014043        1
[INPUT] 0    0    [1    /1   ]  37.6176628558        1
[INPUT] 0    0    [1    /1   ]  4.7412326038         1
[INPUT] 0    0    [1    /1   ]  0.391199239033       1
[INPUT] 1    0    [1    /1   ]  8.59868167818        1
[INPUT] 1    0    [1    /1   ]  0.490849728512       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999707, 1.0]], [0, [799999.999998313, 1.0]], [0, [18354.96084595152, 1.0]], [0, [2232.1572464554088, 1.0]], [0, [457.77744377617364, 1.0]], [0, [121.89301404335683, 1.0]], [0, [37.61766285581417, 1.0]], [0, [4.741232603802823, 1.0]], [0, [0.3911992390325247, 1.0]], [1, [8.598681678179837, 1.0]], [1, [0.49084972851224123, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999997]
bas 1, expnt(s) = [799999.99999831]
bas 2, expnt(s) = [18354.96084595]
bas 3, expnt(s) = [2232.15724646]
bas 4, expnt(s) = [457.77744378]
bas 5, expnt(s) = [121.89301404]
bas 6, expnt(s) = [37.61766286]
bas 7, expnt(s) = [4.7412326]
bas 8, expnt(s) = [0.39119924]
bas 9, expnt(s) = [8.59868168]
bas 10, expnt(s) = [0.49084973]
CPU time:        77.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549608e+04 3.98409900e+03 2.23215725e+03 8.20462268e+02
 4.57777444e+02 2.50037885e+02 1.21893014e+02 9.26827980e+01
 3.76176629e+01 3.83759272e+01 4.74123260e+00 8.11770885e+00
 3.91199239e-01 1.24972232e+00 8.59868168e+00 4.29560394e+01
 4.90849729e-01 1.19858844e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972870161905
cond(S) = 42.969876305414864
E1 = -688.6353609708009  E_coul = 184.91539035961378
init E= -503.719970611187
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680901736226944  LUMO = 85.1872396219658
  mo_energy =
[-1.21646263e+02 -1.32807754e+01 -7.62160608e+00 -7.62160608e+00
 -7.62160608e+00 -1.65067375e+00 -6.80901736e-01 -6.80901736e-01
 -6.80901736e-01  8.51872396e+01  6.78610847e+02  3.94754610e+03
  3.15207046e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5750401525152  E_coul = 198.94495095214012
cycle= 1 E= -507.630089200375  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377326
diis-c [-0.14237456  1.        ]
  HOMO = -0.236280033086448  LUMO = 86.5203168375717
  mo_energy =
[-1.20258511e+02 -1.22526967e+01 -6.65309302e+00 -6.65309302e+00
 -6.65309302e+00 -1.16345265e+00 -2.36280033e-01 -2.36280033e-01
 -2.36280033e-01  8.65203168e+01  6.79980992e+02  3.94879611e+03
  3.15217851e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5436710561058  E_coul = 198.91315481887122
cycle= 2 E= -507.630516237235  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503323
diis-c [-2.52487457e-05 -7.71627571e-04  1.00077163e+00]
  HOMO = -0.236454842073305  LUMO = 86.5168012404547
  mo_energy =
[-1.20267138e+02 -1.22538828e+01 -6.65493014e+00 -6.65493014e+00
 -6.65493014e+00 -1.16351726e+00 -2.36454842e-01 -2.36454842e-01
 -2.36454842e-01  8.65168012e+01  6.79970413e+02  3.94878023e+03
  3.15217658e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432320643239  E_coul = 198.91271571739742
cycle= 3 E= -507.630516346926  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125116
diis-c [-3.74653280e-10  3.85630978e-05 -2.52170195e-02  1.02517846e+00]
  HOMO = -0.236456999162335  LUMO = 86.5167576404896
  mo_energy =
[-1.20267249e+02 -1.22538982e+01 -6.65495651e+00 -6.65495651e+00
 -6.65495651e+00 -1.16351790e+00 -2.36456999e-01 -2.36456999e-01
 -2.36456999e-01  8.65167576e+01  6.79970299e+02  3.94878009e+03
  3.15217657e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432249735031  E_coul = 198.91270862653792
cycle= 4 E= -507.630516346965  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432249735031  E_coul = 198.91270862653792
  HOMO = -0.236456983736337  LUMO = 86.5167579615719
  mo_energy =
[-1.20267248e+02 -1.22538981e+01 -6.65495636e+00 -6.65495636e+00
 -6.65495636e+00 -1.16351789e+00 -2.36456984e-01 -2.36456984e-01
 -2.36456984e-01  8.65167580e+01  6.79970300e+02  3.94878009e+03
  3.15217657e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432250083867  E_coul = 198.91270866142156
Extra cycle  E= -507.630516346965  delta_E= 1.14e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.969876305414864
E1 = -706.5432250083867  E_coul = 198.91270866142156
init E= -507.630516346965
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456983556714  LUMO = 86.5167579654842
  mo_energy =
[-1.20267248e+02 -1.22538981e+01 -6.65495636e+00 -6.65495636e+00
 -6.65495636e+00 -1.16351789e+00 -2.36456984e-01 -2.36456984e-01
 -2.36456984e-01  8.65167580e+01  6.79970301e+02  3.94878009e+03
  3.15217657e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432250089116  E_coul = 198.9127086619467
cycle= 1 E= -507.630516346965  delta_E= 2.27e-13  |g|= 1.23e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5432250089116  E_coul = 198.9127086619467
  HOMO = -0.236456983554193  LUMO = 86.5167579655397
  mo_energy =
[-1.20267248e+02 -1.22538981e+01 -6.65495636e+00 -6.65495636e+00
 -6.65495636e+00 -1.16351789e+00 -2.36456984e-01 -2.36456984e-01
 -2.36456984e-01  8.65167580e+01  6.79970301e+02  3.94878009e+03
  3.15217657e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543225008921  E_coul = 198.91270866195572
Extra cycle  E= -507.630516346965  delta_E= -3.98e-13  |g|= 4.8e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549608e+04 2.23215725e+03
 4.57777444e+02 1.21893014e+02 3.76176629e+01 4.74123260e+00
 3.91199239e-01 8.59868168e+00 4.90849729e-01]
grad_E = [ 1.58639500e-10  9.14395981e-09  4.38849064e-06 -1.64697693e-06
  4.79065277e-06 -4.83426233e-06 -6.44998515e-06 -4.62064862e-05
  3.86534712e-05  2.76182558e-05 -3.73663330e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:10 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999998        1
[INPUT] 0    0    [1    /1   ]  18354.9605648        1
[INPUT] 0    0    [1    /1   ]  2232.15735261        1
[INPUT] 0    0    [1    /1   ]  457.777125154        1
[INPUT] 0    0    [1    /1   ]  121.893394611        1
[INPUT] 0    0    [1    /1   ]  37.6179330677        1
[INPUT] 0    0    [1    /1   ]  4.74121031053        1
[INPUT] 0    0    [1    /1   ]  0.391200062831       1
[INPUT] 1    0    [1    /1   ]  8.59869489849        1
[INPUT] 1    0    [1    /1   ]  0.490849723324       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999604, 1.0]], [0, [799999.9999977273, 1.0]], [0, [18354.960564848487, 1.0]], [0, [2232.157352614879, 1.0]], [0, [457.7771251541058, 1.0]], [0, [121.89339461138842, 1.0]], [0, [37.617933067734604, 1.0]], [0, [4.741210310530172, 1.0]], [0, [0.3912000628312795, 1.0]], [1, [8.598694898485522, 1.0]], [1, [0.49084972332376786, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999996]
bas 1, expnt(s) = [799999.99999773]
bas 2, expnt(s) = [18354.96056485]
bas 3, expnt(s) = [2232.15735261]
bas 4, expnt(s) = [457.77712515]
bas 5, expnt(s) = [121.89339461]
bas 6, expnt(s) = [37.61793307]
bas 7, expnt(s) = [4.74121031]
bas 8, expnt(s) = [0.39120006]
bas 9, expnt(s) = [8.5986949]
bas 10, expnt(s) = [0.49084972]
CPU time:        81.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549606e+04 3.98409895e+03 2.23215735e+03 8.20462298e+02
 4.57777125e+02 2.50037754e+02 1.21893395e+02 9.26830150e+01
 3.76179331e+01 3.83761339e+01 4.74121031e+00 8.11768022e+00
 3.91200063e-01 1.24972429e+00 8.59869490e+00 4.29561220e+01
 4.90849723e-01 1.19858843e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973050345972
cond(S) = 42.97019440751014
E1 = -688.6353992440434  E_coul = 184.9154390873864
init E= -503.719960156657
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901592534831  LUMO = 85.1878799113225
  mo_energy =
[-1.21646252e+02 -1.32807724e+01 -7.62160304e+00 -7.62160304e+00
 -7.62160304e+00 -1.65067306e+00 -6.80901593e-01 -6.80901593e-01
 -6.80901593e-01  8.51878799e+01  6.78612560e+02  3.94754750e+03
  3.15207054e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.575074767363  E_coul = 198.94498556542263
cycle= 1 E= -507.63008920194  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377326
diis-c [-0.14237509  1.        ]
  HOMO = -0.236279994412229  LUMO = 86.5209567010347
  mo_energy =
[-1.20258503e+02 -1.22526945e+01 -6.65309083e+00 -6.65309083e+00
 -6.65309083e+00 -1.16345213e+00 -2.36279994e-01 -2.36279994e-01
 -2.36279994e-01  8.65209567e+01  6.79982702e+02  3.94879751e+03
  3.15217859e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5437057584105  E_coul = 198.9131895165317
cycle= 2 E= -507.630516241879  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503326
diis-c [-2.52490993e-05 -7.71767564e-04  1.00077177e+00]
  HOMO = -0.236454802612198  LUMO = 86.5174411026298
  mo_energy =
[-1.20267130e+02 -1.22538806e+01 -6.65492794e+00 -6.65492794e+00
 -6.65492794e+00 -1.16351674e+00 -2.36454803e-01 -2.36454803e-01
 -2.36454803e-01  8.65174411e+01  6.79972124e+02  3.94878162e+03
  3.15217666e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432667688536  E_coul = 198.9127504172826
cycle= 3 E= -507.630516351571  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74646160e-10  3.85634296e-05 -2.52167714e-02  1.02517821e+00]
  HOMO = -0.23645695966291  LUMO = 86.517397503323
  mo_energy =
[-1.20267241e+02 -1.22538960e+01 -6.65495431e+00 -6.65495431e+00
 -6.65495431e+00 -1.16351738e+00 -2.36456960e-01 -2.36456960e-01
 -2.36456960e-01  8.65173975e+01  6.79972010e+02  3.94878148e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432596781583  E_coul = 198.91274332654865
cycle= 4 E= -507.63051635161  delta_E= -3.86e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432596781583  E_coul = 198.91274332654865
  HOMO = -0.236456944237243  LUMO = 86.5173978244015
  mo_energy =
[-1.20267240e+02 -1.22538959e+01 -6.65495416e+00 -6.65495416e+00
 -6.65495416e+00 -1.16351737e+00 -2.36456944e-01 -2.36456944e-01
 -2.36456944e-01  8.65173978e+01  6.79972011e+02  3.94878149e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432597130417  E_coul = 198.91274336143178
Extra cycle  E= -507.63051635161  delta_E= -2.84e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549606e+04 2.23215735e+03
 4.57777125e+02 1.21893395e+02 3.76179331e+01 4.74121031e+00
 3.91200063e-01 8.59869490e+00 4.90849723e-01]
E = -507.6305163516099
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999998        1
[INPUT] 0    0    [1    /1   ]  18354.9605648        1
[INPUT] 0    0    [1    /1   ]  2232.15735261        1
[INPUT] 0    0    [1    /1   ]  457.777125154        1
[INPUT] 0    0    [1    /1   ]  121.893394611        1
[INPUT] 0    0    [1    /1   ]  37.6179330677        1
[INPUT] 0    0    [1    /1   ]  4.74121031053        1
[INPUT] 0    0    [1    /1   ]  0.391200062831       1
[INPUT] 1    0    [1    /1   ]  8.59869489849        1
[INPUT] 1    0    [1    /1   ]  0.490849723324       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999604, 1.0]], [0, [799999.9999977273, 1.0]], [0, [18354.960564848487, 1.0]], [0, [2232.157352614879, 1.0]], [0, [457.7771251541058, 1.0]], [0, [121.89339461138842, 1.0]], [0, [37.617933067734604, 1.0]], [0, [4.741210310530172, 1.0]], [0, [0.3912000628312795, 1.0]], [1, [8.598694898485522, 1.0]], [1, [0.49084972332376786, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999996]
bas 1, expnt(s) = [799999.99999773]
bas 2, expnt(s) = [18354.96056485]
bas 3, expnt(s) = [2232.15735261]
bas 4, expnt(s) = [457.77712515]
bas 5, expnt(s) = [121.89339461]
bas 6, expnt(s) = [37.61793307]
bas 7, expnt(s) = [4.74121031]
bas 8, expnt(s) = [0.39120006]
bas 9, expnt(s) = [8.5986949]
bas 10, expnt(s) = [0.49084972]
CPU time:        81.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549606e+04 3.98409895e+03 2.23215735e+03 8.20462298e+02
 4.57777125e+02 2.50037754e+02 1.21893395e+02 9.26830150e+01
 3.76179331e+01 3.83761339e+01 4.74121031e+00 8.11768022e+00
 3.91200063e-01 1.24972429e+00 8.59869490e+00 4.29561220e+01
 4.90849723e-01 1.19858843e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973050345972
cond(S) = 42.97019440751014
E1 = -688.6353992440434  E_coul = 184.9154390873864
init E= -503.719960156657
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901592534831  LUMO = 85.1878799113225
  mo_energy =
[-1.21646252e+02 -1.32807724e+01 -7.62160304e+00 -7.62160304e+00
 -7.62160304e+00 -1.65067306e+00 -6.80901593e-01 -6.80901593e-01
 -6.80901593e-01  8.51878799e+01  6.78612560e+02  3.94754750e+03
  3.15207054e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.575074767363  E_coul = 198.94498556542263
cycle= 1 E= -507.63008920194  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377326
diis-c [-0.14237509  1.        ]
  HOMO = -0.236279994412229  LUMO = 86.5209567010347
  mo_energy =
[-1.20258503e+02 -1.22526945e+01 -6.65309083e+00 -6.65309083e+00
 -6.65309083e+00 -1.16345213e+00 -2.36279994e-01 -2.36279994e-01
 -2.36279994e-01  8.65209567e+01  6.79982702e+02  3.94879751e+03
  3.15217859e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5437057584105  E_coul = 198.9131895165317
cycle= 2 E= -507.630516241879  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503326
diis-c [-2.52490993e-05 -7.71767564e-04  1.00077177e+00]
  HOMO = -0.236454802612198  LUMO = 86.5174411026298
  mo_energy =
[-1.20267130e+02 -1.22538806e+01 -6.65492794e+00 -6.65492794e+00
 -6.65492794e+00 -1.16351674e+00 -2.36454803e-01 -2.36454803e-01
 -2.36454803e-01  8.65174411e+01  6.79972124e+02  3.94878162e+03
  3.15217666e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432667688536  E_coul = 198.9127504172826
cycle= 3 E= -507.630516351571  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125115
diis-c [-3.74646160e-10  3.85634296e-05 -2.52167714e-02  1.02517821e+00]
  HOMO = -0.23645695966291  LUMO = 86.517397503323
  mo_energy =
[-1.20267241e+02 -1.22538960e+01 -6.65495431e+00 -6.65495431e+00
 -6.65495431e+00 -1.16351738e+00 -2.36456960e-01 -2.36456960e-01
 -2.36456960e-01  8.65173975e+01  6.79972010e+02  3.94878148e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432596781583  E_coul = 198.91274332654865
cycle= 4 E= -507.63051635161  delta_E= -3.86e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432596781583  E_coul = 198.91274332654865
  HOMO = -0.236456944237243  LUMO = 86.5173978244015
  mo_energy =
[-1.20267240e+02 -1.22538959e+01 -6.65495416e+00 -6.65495416e+00
 -6.65495416e+00 -1.16351737e+00 -2.36456944e-01 -2.36456944e-01
 -2.36456944e-01  8.65173978e+01  6.79972011e+02  3.94878149e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432597130417  E_coul = 198.91274336143178
Extra cycle  E= -507.63051635161  delta_E= -2.84e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97019440751014
E1 = -706.5432597130417  E_coul = 198.91274336143178
init E= -507.63051635161
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456944057624  LUMO = 86.517397828314
  mo_energy =
[-1.20267240e+02 -1.22538959e+01 -6.65495416e+00 -6.65495416e+00
 -6.65495416e+00 -1.16351737e+00 -2.36456944e-01 -2.36456944e-01
 -2.36456944e-01  8.65173978e+01  6.79972011e+02  3.94878149e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.543259713566  E_coul = 198.91274336195661
cycle= 1 E= -507.630516351609  delta_E= 4.55e-13  |g|= 1.21e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.543259713566  E_coul = 198.91274336195661
  HOMO = -0.236456944055107  LUMO = 86.5173978283688
  mo_energy =
[-1.20267240e+02 -1.22538959e+01 -6.65495416e+00 -6.65495416e+00
 -6.65495416e+00 -1.16351737e+00 -2.36456944e-01 -2.36456944e-01
 -2.36456944e-01  8.65173978e+01  6.79972011e+02  3.94878149e+03
  3.15217664e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5432597135751  E_coul = 198.91274336196568
Extra cycle  E= -507.630516351609  delta_E=    0  |g|= 3.89e-11  |ddm|= 4.23e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549606e+04 2.23215735e+03
 4.57777125e+02 1.21893395e+02 3.76179331e+01 4.74121031e+00
 3.91200063e-01 8.59869490e+00 4.90849723e-01]
grad_E = [ 1.58639602e-10  9.14396328e-09  4.38845779e-06 -1.64471879e-06
  4.77440891e-06 -5.09419707e-06 -4.75175372e-06 -6.32293975e-05
  5.29456684e-05  3.78740373e-05 -5.12138650e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999997        1
[INPUT] 0    0    [1    /1   ]  18354.9600052        1
[INPUT] 0    0    [1    /1   ]  2232.15756411        1
[INPUT] 0    0    [1    /1   ]  457.776487907        1
[INPUT] 0    0    [1    /1   ]  121.894175657        1
[INPUT] 0    0    [1    /1   ]  37.6184024809        1
[INPUT] 0    0    [1    /1   ]  4.74117977697        1
[INPUT] 0    0    [1    /1   ]  0.391201205771       1
[INPUT] 1    0    [1    /1   ]  8.59871289527        1
[INPUT] 1    0    [1    /1   ]  0.490849712355       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999404, 1.0]], [0, [799999.9999965612, 1.0]], [0, [18354.960005176494, 1.0]], [0, [2232.1575641131135, 1.0]], [0, [457.77648790667064, 1.0]], [0, [121.89417565725478, 1.0]], [0, [37.61840248092338, 1.0]], [0, [4.741179776967562, 1.0]], [0, [0.3912012057709489, 1.0]], [1, [8.598712895274263, 1.0]], [1, [0.4908497123545652, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999994]
bas 1, expnt(s) = [799999.99999656]
bas 2, expnt(s) = [18354.96000518]
bas 3, expnt(s) = [2232.15756411]
bas 4, expnt(s) = [457.77648791]
bas 5, expnt(s) = [121.89417566]
bas 6, expnt(s) = [37.61840248]
bas 7, expnt(s) = [4.74117978]
bas 8, expnt(s) = [0.39120121]
bas 9, expnt(s) = [8.5987129]
bas 10, expnt(s) = [0.49084971]
CPU time:        85.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549600e+04 3.98409886e+03 2.23215756e+03 8.20462356e+02
 4.57776488e+02 2.50037493e+02 1.21894176e+02 9.26834604e+01
 3.76184025e+01 3.83764931e+01 4.74117978e+00 8.11764102e+00
 3.91201206e-01 1.24972703e+00 8.59871290e+00 4.29562344e+01
 4.90849712e-01 1.19858840e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973294586134
cond(S) = 42.97076889551497
E1 = -688.6354498899583  E_coul = 184.9155058917098
init E= -503.719943998248
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901393063845  LUMO = 85.1890774443237
  mo_energy =
[-1.21646236e+02 -1.32807684e+01 -7.62159885e+00 -7.62159885e+00
 -7.62159885e+00 -1.65067215e+00 -6.80901393e-01 -6.80901393e-01
 -6.80901393e-01  8.51890774e+01  6.78615818e+02  3.94755016e+03
  3.15207069e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5751228580289  E_coul = 198.94503364935844
cycle= 1 E= -507.63008920867  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377327
diis-c [-0.142376  1.      ]
  HOMO = -0.236279935454606  LUMO = 86.5221541170149
  mo_energy =
[-1.20258492e+02 -1.22526917e+01 -6.65308778e+00 -6.65308778e+00
 -6.65308778e+00 -1.16345144e+00 -2.36279935e-01 -2.36279935e-01
 -2.36279935e-01  8.65221541e+01  6.79985957e+02  3.94880017e+03
  3.15217874e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543754147264  E_coul = 198.91323789701073
cycle= 2 E= -507.630516250253  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050333
diis-c [-2.52494076e-05 -7.71978883e-04  1.00077198e+00]
  HOMO = -0.236454741415126  LUMO = 86.5186385300802
  mo_energy =
[-1.20267119e+02 -1.22538777e+01 -6.65492487e+00 -6.65492487e+00
 -6.65492487e+00 -1.16351605e+00 -2.36454741e-01 -2.36454741e-01
 -2.36454741e-01  8.65186385e+01  6.79975378e+02  3.94878428e+03
  3.15217681e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433151641976  E_coul = 198.91279880425196
cycle= 3 E= -507.630516359946  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125114
diis-c [-3.74633147e-10  3.85637883e-05 -2.52163672e-02  1.02517780e+00]
  HOMO = -0.236456898390933  LUMO = 86.5185949320402
  mo_energy =
[-1.20267229e+02 -1.22538931e+01 -6.65495124e+00 -6.65495124e+00
 -6.65495124e+00 -1.16351668e+00 -2.36456898e-01 -2.36456898e-01
 -2.36456898e-01  8.65185949e+01  6.79975264e+02  3.94878414e+03
  3.15217679e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433080737552  E_coul = 198.91279171377099
cycle= 4 E= -507.630516359984  delta_E= -3.86e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5433080737552  E_coul = 198.91279171377099
  HOMO = -0.236456882965879  LUMO = 86.5185952531096
  mo_energy =
[-1.20267229e+02 -1.22538930e+01 -6.65495109e+00 -6.65495109e+00
 -6.65495109e+00 -1.16351668e+00 -2.36456883e-01 -2.36456883e-01
 -2.36456883e-01  8.65185953e+01  6.79975265e+02  3.94878414e+03
  3.15217679e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433081086379  E_coul = 198.91279174865306
Extra cycle  E= -507.630516359985  delta_E= -6.82e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549600e+04 2.23215756e+03
 4.57776488e+02 1.21894176e+02 3.76184025e+01 4.74117978e+00
 3.91201206e-01 8.59871290e+00 4.90849712e-01]
E = -507.6305163599849
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999997        1
[INPUT] 0    0    [1    /1   ]  18354.9600052        1
[INPUT] 0    0    [1    /1   ]  2232.15756411        1
[INPUT] 0    0    [1    /1   ]  457.776487907        1
[INPUT] 0    0    [1    /1   ]  121.894175657        1
[INPUT] 0    0    [1    /1   ]  37.6184024809        1
[INPUT] 0    0    [1    /1   ]  4.74117977697        1
[INPUT] 0    0    [1    /1   ]  0.391201205771       1
[INPUT] 1    0    [1    /1   ]  8.59871289527        1
[INPUT] 1    0    [1    /1   ]  0.490849712355       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999404, 1.0]], [0, [799999.9999965612, 1.0]], [0, [18354.960005176494, 1.0]], [0, [2232.1575641131135, 1.0]], [0, [457.77648790667064, 1.0]], [0, [121.89417565725478, 1.0]], [0, [37.61840248092338, 1.0]], [0, [4.741179776967562, 1.0]], [0, [0.3912012057709489, 1.0]], [1, [8.598712895274263, 1.0]], [1, [0.4908497123545652, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999994]
bas 1, expnt(s) = [799999.99999656]
bas 2, expnt(s) = [18354.96000518]
bas 3, expnt(s) = [2232.15756411]
bas 4, expnt(s) = [457.77648791]
bas 5, expnt(s) = [121.89417566]
bas 6, expnt(s) = [37.61840248]
bas 7, expnt(s) = [4.74117978]
bas 8, expnt(s) = [0.39120121]
bas 9, expnt(s) = [8.5987129]
bas 10, expnt(s) = [0.49084971]
CPU time:        85.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549600e+04 3.98409886e+03 2.23215756e+03 8.20462356e+02
 4.57776488e+02 2.50037493e+02 1.21894176e+02 9.26834604e+01
 3.76184025e+01 3.83764931e+01 4.74117978e+00 8.11764102e+00
 3.91201206e-01 1.24972703e+00 8.59871290e+00 4.29562344e+01
 4.90849712e-01 1.19858840e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973294586134
cond(S) = 42.97076889551497
E1 = -688.6354498899583  E_coul = 184.9155058917098
init E= -503.719943998248
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901393063845  LUMO = 85.1890774443237
  mo_energy =
[-1.21646236e+02 -1.32807684e+01 -7.62159885e+00 -7.62159885e+00
 -7.62159885e+00 -1.65067215e+00 -6.80901393e-01 -6.80901393e-01
 -6.80901393e-01  8.51890774e+01  6.78615818e+02  3.94755016e+03
  3.15207069e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5751228580289  E_coul = 198.94503364935844
cycle= 1 E= -507.63008920867  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377327
diis-c [-0.142376  1.      ]
  HOMO = -0.236279935454606  LUMO = 86.5221541170149
  mo_energy =
[-1.20258492e+02 -1.22526917e+01 -6.65308778e+00 -6.65308778e+00
 -6.65308778e+00 -1.16345144e+00 -2.36279935e-01 -2.36279935e-01
 -2.36279935e-01  8.65221541e+01  6.79985957e+02  3.94880017e+03
  3.15217874e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.543754147264  E_coul = 198.91323789701073
cycle= 2 E= -507.630516250253  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050333
diis-c [-2.52494076e-05 -7.71978883e-04  1.00077198e+00]
  HOMO = -0.236454741415126  LUMO = 86.5186385300802
  mo_energy =
[-1.20267119e+02 -1.22538777e+01 -6.65492487e+00 -6.65492487e+00
 -6.65492487e+00 -1.16351605e+00 -2.36454741e-01 -2.36454741e-01
 -2.36454741e-01  8.65186385e+01  6.79975378e+02  3.94878428e+03
  3.15217681e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433151641976  E_coul = 198.91279880425196
cycle= 3 E= -507.630516359946  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125114
diis-c [-3.74633147e-10  3.85637883e-05 -2.52163672e-02  1.02517780e+00]
  HOMO = -0.236456898390933  LUMO = 86.5185949320402
  mo_energy =
[-1.20267229e+02 -1.22538931e+01 -6.65495124e+00 -6.65495124e+00
 -6.65495124e+00 -1.16351668e+00 -2.36456898e-01 -2.36456898e-01
 -2.36456898e-01  8.65185949e+01  6.79975264e+02  3.94878414e+03
  3.15217679e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433080737552  E_coul = 198.91279171377099
cycle= 4 E= -507.630516359984  delta_E= -3.86e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5433080737552  E_coul = 198.91279171377099
  HOMO = -0.236456882965879  LUMO = 86.5185952531096
  mo_energy =
[-1.20267229e+02 -1.22538930e+01 -6.65495109e+00 -6.65495109e+00
 -6.65495109e+00 -1.16351668e+00 -2.36456883e-01 -2.36456883e-01
 -2.36456883e-01  8.65185953e+01  6.79975265e+02  3.94878414e+03
  3.15217679e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433081086379  E_coul = 198.91279174865306
Extra cycle  E= -507.630516359985  delta_E= -6.82e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97076889551497
E1 = -706.5433081086379  E_coul = 198.91279174865306
init E= -507.630516359985
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456882786262  LUMO = 86.5185952570214
  mo_energy =
[-1.20267229e+02 -1.22538930e+01 -6.65495109e+00 -6.65495109e+00
 -6.65495109e+00 -1.16351668e+00 -2.36456883e-01 -2.36456883e-01
 -2.36456883e-01  8.65185953e+01  6.79975265e+02  3.94878414e+03
  3.15217679e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433081091627  E_coul = 198.912791749178
cycle= 1 E= -507.630516359985  delta_E= 2.27e-13  |g|= 1.43e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5433081091627  E_coul = 198.912791749178
  HOMO = -0.236456882783744  LUMO = 86.5185952570763
  mo_energy =
[-1.20267229e+02 -1.22538930e+01 -6.65495109e+00 -6.65495109e+00
 -6.65495109e+00 -1.16351668e+00 -2.36456883e-01 -2.36456883e-01
 -2.36456883e-01  8.65185953e+01  6.79975265e+02  3.94878414e+03
  3.15217679e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433081091717  E_coul = 198.91279174918708
Extra cycle  E= -507.630516359985  delta_E= 5.68e-14  |g|= 7.54e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549600e+04 2.23215756e+03
 4.57776488e+02 1.21894176e+02 3.76184025e+01 4.74117978e+00
 3.91201206e-01 8.59871290e+00 4.90849712e-01]
grad_E = [ 1.58639889e-10  9.14397373e-09  4.38837580e-06 -1.63874599e-06
  4.70878072e-06 -5.33113956e-06 -2.25488639e-06 -8.64806243e-05
  7.24690359e-05  5.18853451e-05 -7.01310636e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999994        1
[INPUT] 0    0    [1    /1   ]  18354.9588958        1
[INPUT] 0    0    [1    /1   ]  2232.15798353        1
[INPUT] 0    0    [1    /1   ]  457.77522082         1
[INPUT] 0    0    [1    /1   ]  121.89575631         1
[INPUT] 0    0    [1    /1   ]  37.619236531         1
[INPUT] 0    0    [1    /1   ]  4.74113870054        1
[INPUT] 0    0    [1    /1   ]  0.391202773215       1
[INPUT] 1    0    [1    /1   ]  8.5987368816         1
[INPUT] 1    0    [1    /1   ]  0.490849689719       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999003, 1.0]], [0, [799999.9999942498, 1.0]], [0, [18354.958895805594, 1.0]], [0, [2232.1579835263155, 1.0]], [0, [457.77522082026957, 1.0]], [0, [121.89575630973012, 1.0]], [0, [37.6192365310274, 1.0]], [0, [4.7411387005397945, 1.0]], [0, [0.3912027732153621, 1.0]], [1, [8.59873688159942, 1.0]], [1, [0.4908496897190106, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999999]
bas 1, expnt(s) = [799999.99999425]
bas 2, expnt(s) = [18354.95889581]
bas 3, expnt(s) = [2232.15798353]
bas 4, expnt(s) = [457.77522082]
bas 5, expnt(s) = [121.89575631]
bas 6, expnt(s) = [37.61923653]
bas 7, expnt(s) = [4.7411387]
bas 8, expnt(s) = [0.39120277]
bas 9, expnt(s) = [8.59873688]
bas 10, expnt(s) = [0.49084969]
CPU time:        89.51
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549589e+04 3.98409868e+03 2.23215798e+03 8.20462472e+02
 4.57775221e+02 2.50036974e+02 1.21895756e+02 9.26843618e+01
 3.76192365e+01 3.83771312e+01 4.74113870e+00 8.11758827e+00
 3.91202773e-01 1.24973078e+00 8.59873688e+00 4.29563841e+01
 4.90849690e-01 1.19858833e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973617977066
cond(S) = 42.971824851104174
E1 = -688.6355144032341  E_coul = 184.91559589622142
init E= -503.719918507013
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.68090111927681  LUMO = 85.1913422758728
  mo_energy =
[-1.21646215e+02 -1.32807635e+01 -7.62159316e+00 -7.62159316e+00
 -7.62159316e+00 -1.65067098e+00 -6.80901119e-01 -6.80901119e-01
 -6.80901119e-01  8.51913423e+01  6.78622060e+02  3.94755525e+03
  3.15207096e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5751889418763  E_coul = 198.9450997157428
cycle= 1 E= -507.630089226133  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37733
diis-c [-0.14237759  1.        ]
  HOMO = -0.236279843929197  LUMO = 86.5244197419852
  mo_energy =
[-1.20258476e+02 -1.22526882e+01 -6.65308357e+00 -6.65308357e+00
 -6.65308357e+00 -1.16345054e+00 -2.36279844e-01 -2.36279844e-01
 -2.36279844e-01  8.65244197e+01  6.79992194e+02  3.94880525e+03
  3.15217901e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5438209960865  E_coul = 198.91330473140013
cycle= 2 E= -507.630516264686  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503331
diis-c [-2.52494635e-05 -7.72302974e-04  1.00077230e+00]
  HOMO = -0.236454644507893  LUMO = 86.5209041974787
  mo_energy =
[-1.20267103e+02 -1.22538742e+01 -6.65492062e+00 -6.65492062e+00
 -6.65492062e+00 -1.16351515e+00 -2.36454645e-01 -2.36454645e-01
 -2.36454645e-01  8.65209042e+01  6.79981615e+02  3.94878936e+03
  3.15217708e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433820287711  E_coul = 198.9128656543946
cycle= 3 E= -507.630516374376  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125111
diis-c [-3.74604819e-10  3.85646037e-05 -2.52156968e-02  1.02517713e+00]
  HOMO = -0.236456801337143  LUMO = 86.5208606018744
  mo_energy =
[-1.20267214e+02 -1.22538896e+01 -6.65494699e+00 -6.65494699e+00
 -6.65494699e+00 -1.16351578e+00 -2.36456801e-01 -2.36456801e-01
 -2.36456801e-01  8.65208606e+01  6.79981501e+02  3.94878922e+03
  3.15217707e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433749388344  E_coul = 198.91285856441894
cycle= 4 E= -507.630516374415  delta_E= -3.9e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5433749388344  E_coul = 198.91285856441894
  HOMO = -0.236456785913336  LUMO = 86.520860922929
  mo_energy =
[-1.20267213e+02 -1.22538895e+01 -6.65494684e+00 -6.65494684e+00
 -6.65494684e+00 -1.16351578e+00 -2.36456786e-01 -2.36456786e-01
 -2.36456786e-01  8.65208609e+01  6.79981502e+02  3.94878923e+03
  3.15217707e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433749737131  E_coul = 198.91285859929786
Extra cycle  E= -507.630516374415  delta_E= 2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549589e+04 2.23215798e+03
 4.57775221e+02 1.21895756e+02 3.76192365e+01 4.74113870e+00
 3.91202773e-01 8.59873688e+00 4.90849690e-01]
E = -507.6305163744152
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999994        1
[INPUT] 0    0    [1    /1   ]  18354.9588958        1
[INPUT] 0    0    [1    /1   ]  2232.15798353        1
[INPUT] 0    0    [1    /1   ]  457.77522082         1
[INPUT] 0    0    [1    /1   ]  121.89575631         1
[INPUT] 0    0    [1    /1   ]  37.619236531         1
[INPUT] 0    0    [1    /1   ]  4.74113870054        1
[INPUT] 0    0    [1    /1   ]  0.391202773215       1
[INPUT] 1    0    [1    /1   ]  8.5987368816         1
[INPUT] 1    0    [1    /1   ]  0.490849689719       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999999003, 1.0]], [0, [799999.9999942498, 1.0]], [0, [18354.958895805594, 1.0]], [0, [2232.1579835263155, 1.0]], [0, [457.77522082026957, 1.0]], [0, [121.89575630973012, 1.0]], [0, [37.6192365310274, 1.0]], [0, [4.7411387005397945, 1.0]], [0, [0.3912027732153621, 1.0]], [1, [8.59873688159942, 1.0]], [1, [0.4908496897190106, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999999]
bas 1, expnt(s) = [799999.99999425]
bas 2, expnt(s) = [18354.95889581]
bas 3, expnt(s) = [2232.15798353]
bas 4, expnt(s) = [457.77522082]
bas 5, expnt(s) = [121.89575631]
bas 6, expnt(s) = [37.61923653]
bas 7, expnt(s) = [4.7411387]
bas 8, expnt(s) = [0.39120277]
bas 9, expnt(s) = [8.59873688]
bas 10, expnt(s) = [0.49084969]
CPU time:        90.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549589e+04 3.98409868e+03 2.23215798e+03 8.20462472e+02
 4.57775221e+02 2.50036974e+02 1.21895756e+02 9.26843618e+01
 3.76192365e+01 3.83771312e+01 4.74113870e+00 8.11758827e+00
 3.91202773e-01 1.24973078e+00 8.59873688e+00 4.29563841e+01
 4.90849690e-01 1.19858833e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973617977066
cond(S) = 42.971824851104174
E1 = -688.6355144032341  E_coul = 184.91559589622142
init E= -503.719918507013
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090111927681  LUMO = 85.1913422758728
  mo_energy =
[-1.21646215e+02 -1.32807635e+01 -7.62159316e+00 -7.62159316e+00
 -7.62159316e+00 -1.65067098e+00 -6.80901119e-01 -6.80901119e-01
 -6.80901119e-01  8.51913423e+01  6.78622060e+02  3.94755525e+03
  3.15207096e+04  1.12121419e+06  7.13808339e+06]
E1 = -706.5751889418763  E_coul = 198.9450997157428
cycle= 1 E= -507.630089226133  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37733
diis-c [-0.14237759  1.        ]
  HOMO = -0.236279843929197  LUMO = 86.5244197419852
  mo_energy =
[-1.20258476e+02 -1.22526882e+01 -6.65308357e+00 -6.65308357e+00
 -6.65308357e+00 -1.16345054e+00 -2.36279844e-01 -2.36279844e-01
 -2.36279844e-01  8.65244197e+01  6.79992194e+02  3.94880525e+03
  3.15217901e+04  1.12121516e+06  7.13808436e+06]
E1 = -706.5438209960865  E_coul = 198.91330473140013
cycle= 2 E= -507.630516264686  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503331
diis-c [-2.52494635e-05 -7.72302974e-04  1.00077230e+00]
  HOMO = -0.236454644507893  LUMO = 86.5209041974787
  mo_energy =
[-1.20267103e+02 -1.22538742e+01 -6.65492062e+00 -6.65492062e+00
 -6.65492062e+00 -1.16351515e+00 -2.36454645e-01 -2.36454645e-01
 -2.36454645e-01  8.65209042e+01  6.79981615e+02  3.94878936e+03
  3.15217708e+04  1.12121514e+06  7.13808434e+06]
E1 = -706.5433820287711  E_coul = 198.9128656543946
cycle= 3 E= -507.630516374376  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125111
diis-c [-3.74604819e-10  3.85646037e-05 -2.52156968e-02  1.02517713e+00]
  HOMO = -0.236456801337143  LUMO = 86.5208606018744
  mo_energy =
[-1.20267214e+02 -1.22538896e+01 -6.65494699e+00 -6.65494699e+00
 -6.65494699e+00 -1.16351578e+00 -2.36456801e-01 -2.36456801e-01
 -2.36456801e-01  8.65208606e+01  6.79981501e+02  3.94878922e+03
  3.15217707e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433749388344  E_coul = 198.91285856441894
cycle= 4 E= -507.630516374415  delta_E= -3.9e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5433749388344  E_coul = 198.91285856441894
  HOMO = -0.236456785913336  LUMO = 86.520860922929
  mo_energy =
[-1.20267213e+02 -1.22538895e+01 -6.65494684e+00 -6.65494684e+00
 -6.65494684e+00 -1.16351578e+00 -2.36456786e-01 -2.36456786e-01
 -2.36456786e-01  8.65208609e+01  6.79981502e+02  3.94878923e+03
  3.15217707e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433749737131  E_coul = 198.91285859929786
Extra cycle  E= -507.630516374415  delta_E= 2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.971824851104174
E1 = -706.5433749737131  E_coul = 198.91285859929786
init E= -507.630516374415
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456785733738  LUMO = 86.5208609268404
  mo_energy =
[-1.20267213e+02 -1.22538895e+01 -6.65494683e+00 -6.65494683e+00
 -6.65494683e+00 -1.16351578e+00 -2.36456786e-01 -2.36456786e-01
 -2.36456786e-01  8.65208609e+01  6.79981502e+02  3.94878923e+03
  3.15217707e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.543374974238  E_coul = 198.91285859982287
cycle= 1 E= -507.630516374415  delta_E= 1.14e-13  |g|= 1.39e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.543374974238  E_coul = 198.91285859982287
  HOMO = -0.236456785731223  LUMO = 86.520860926895
  mo_energy =
[-1.20267213e+02 -1.22538895e+01 -6.65494683e+00 -6.65494683e+00
 -6.65494683e+00 -1.16351578e+00 -2.36456786e-01 -2.36456786e-01
 -2.36456786e-01  8.65208609e+01  6.79981502e+02  3.94878923e+03
  3.15217707e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433749742472  E_coul = 198.91285859983188
Extra cycle  E= -507.630516374415  delta_E= -1.71e-13  |g|= 9.03e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549589e+04 2.23215798e+03
 4.57775221e+02 1.21895756e+02 3.76192365e+01 4.74113870e+00
 3.91202773e-01 8.59873688e+00 4.90849690e-01]
grad_E = [ 1.58640574e-10  9.14399943e-09  4.38819007e-06 -1.62483573e-06
  4.53200062e-06 -5.40692903e-06  1.45238477e-06 -1.17630119e-04
  9.86284294e-05  7.06626083e-05 -9.54807281e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.99999         1
[INPUT] 0    0    [1    /1   ]  18354.9567175        1
[INPUT] 0    0    [1    /1   ]  2232.15880734        1
[INPUT] 0    0    [1    /1   ]  457.772726668        1
[INPUT] 0    0    [1    /1   ]  121.89891197         1
[INPUT] 0    0    [1    /1   ]  37.6207175908        1
[INPUT] 0    0    [1    /1   ]  4.74108958257        1
[INPUT] 0    0    [1    /1   ]  0.391204718837       1
[INPUT] 1    0    [1    /1   ]  8.59876502755        1
[INPUT] 1    0    [1    /1   ]  0.490849643834       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999998217, 1.0]], [0, [799999.9999897112, 1.0]], [0, [18354.956717530044, 1.0]], [0, [2232.158807341746, 1.0]], [0, [457.77272666810137, 1.0]], [0, [121.89891196984789, 1.0]], [0, [37.62071759077082, 1.0]], [0, [4.741089582573757, 1.0]], [0, [0.3912047188365275, 1.0]], [1, [8.598765027553888, 1.0]], [1, [0.4908496438344325, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999982]
bas 1, expnt(s) = [799999.99998971]
bas 2, expnt(s) = [18354.95671753]
bas 3, expnt(s) = [2232.15880734]
bas 4, expnt(s) = [457.77272667]
bas 5, expnt(s) = [121.89891197]
bas 6, expnt(s) = [37.62071759]
bas 7, expnt(s) = [4.74108958]
bas 8, expnt(s) = [0.39120472]
bas 9, expnt(s) = [8.59876503]
bas 10, expnt(s) = [0.49084964]
CPU time:        93.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549567e+04 3.98409832e+03 2.23215881e+03 8.20462699e+02
 4.57772727e+02 2.50035953e+02 1.21898912e+02 9.26861614e+01
 3.76207176e+01 3.83782644e+01 4.74108958e+00 8.11752520e+00
 3.91204719e-01 1.24973545e+00 8.59876503e+00 4.29565599e+01
 4.90849644e-01 1.19858819e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973992371857
cond(S) = 42.9737636959136
E1 = -688.6355829033745  E_coul = 184.9157038422875
init E= -503.719879061087
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680900778841128  LUMO = 85.1956119101367
  mo_energy =
[-1.21646188e+02 -1.32807586e+01 -7.62158623e+00 -7.62158623e+00
 -7.62158623e+00 -1.65066972e+00 -6.80900779e-01 -6.80900779e-01
 -6.80900779e-01  8.51956119e+01  6.78633962e+02  3.94756494e+03
  3.15207148e+04  1.12121418e+06  7.13808339e+06]
E1 = -706.5752712780777  E_coul = 198.94518201310458
cycle= 1 E= -507.630089264973  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377333
diis-c [-0.14238035  1.        ]
  HOMO = -0.236279705313616  LUMO = 86.5286925956376
  mo_energy =
[-1.20258456e+02 -1.22526848e+01 -6.65307829e+00 -6.65307829e+00
 -6.65307829e+00 -1.16344955e+00 -2.36279705e-01 -2.36279705e-01
 -2.36279705e-01  8.65286926e+01  6.80004091e+02  3.94881493e+03
  3.15217953e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5439051158191  E_coul = 198.9133888284384
cycle= 2 E= -507.630516287381  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503325
diis-c [-2.52486738e-05 -7.72784917e-04  1.00077278e+00]
  HOMO = -0.23645449379954  LUMO = 86.5251771663348
  mo_energy =
[-1.20267082e+02 -1.22538708e+01 -6.65491523e+00 -6.65491523e+00
 -6.65491523e+00 -1.16351415e+00 -2.36454494e-01 -2.36454494e-01
 -2.36454494e-01  8.65251772e+01  6.79993514e+02  3.94879905e+03
  3.15217760e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434661841003  E_coul = 198.91294978703758
cycle= 3 E= -507.630516397063  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125103
diis-c [-3.74549910e-10  3.85657531e-05 -2.52145883e-02  1.02517602e+00]
  HOMO = -0.23645665034444  LUMO = 86.5251335753979
  mo_energy =
[-1.20267193e+02 -1.22538862e+01 -6.65494160e+00 -6.65494160e+00
 -6.65494160e+00 -1.16351479e+00 -2.36456650e-01 -2.36456650e-01
 -2.36456650e-01  8.65251336e+01  6.79993400e+02  3.94879891e+03
  3.15217758e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434590951605  E_coul = 198.91294269805934
cycle= 4 E= -507.630516397101  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5434590951605  E_coul = 198.91294269805934
  HOMO = -0.236456634923021  LUMO = 86.5251338964209
  mo_energy =
[-1.20267192e+02 -1.22538861e+01 -6.65494145e+00 -6.65494145e+00
 -6.65494145e+00 -1.16351478e+00 -2.36456635e-01 -2.36456635e-01
 -2.36456635e-01  8.65251339e+01  6.79993401e+02  3.94879891e+03
  3.15217758e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434591300343  E_coul = 198.91294273293303
Extra cycle  E= -507.630516397101  delta_E= -5.68e-14  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549567e+04 2.23215881e+03
 4.57772727e+02 1.21898912e+02 3.76207176e+01 4.74108958e+00
 3.91204719e-01 8.59876503e+00 4.90849644e-01]
E = -507.63051639710125
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.99999         1
[INPUT] 0    0    [1    /1   ]  18354.9567175        1
[INPUT] 0    0    [1    /1   ]  2232.15880734        1
[INPUT] 0    0    [1    /1   ]  457.772726668        1
[INPUT] 0    0    [1    /1   ]  121.89891197         1
[INPUT] 0    0    [1    /1   ]  37.6207175908        1
[INPUT] 0    0    [1    /1   ]  4.74108958257        1
[INPUT] 0    0    [1    /1   ]  0.391204718837       1
[INPUT] 1    0    [1    /1   ]  8.59876502755        1
[INPUT] 1    0    [1    /1   ]  0.490849643834       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999998217, 1.0]], [0, [799999.9999897112, 1.0]], [0, [18354.956717530044, 1.0]], [0, [2232.158807341746, 1.0]], [0, [457.77272666810137, 1.0]], [0, [121.89891196984789, 1.0]], [0, [37.62071759077082, 1.0]], [0, [4.741089582573757, 1.0]], [0, [0.3912047188365275, 1.0]], [1, [8.598765027553888, 1.0]], [1, [0.4908496438344325, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999982]
bas 1, expnt(s) = [799999.99998971]
bas 2, expnt(s) = [18354.95671753]
bas 3, expnt(s) = [2232.15880734]
bas 4, expnt(s) = [457.77272667]
bas 5, expnt(s) = [121.89891197]
bas 6, expnt(s) = [37.62071759]
bas 7, expnt(s) = [4.74108958]
bas 8, expnt(s) = [0.39120472]
bas 9, expnt(s) = [8.59876503]
bas 10, expnt(s) = [0.49084964]
CPU time:        94.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549567e+04 3.98409832e+03 2.23215881e+03 8.20462699e+02
 4.57772727e+02 2.50035953e+02 1.21898912e+02 9.26861614e+01
 3.76207176e+01 3.83782644e+01 4.74108958e+00 8.11752520e+00
 3.91204719e-01 1.24973545e+00 8.59876503e+00 4.29565599e+01
 4.90849644e-01 1.19858819e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973992371857
cond(S) = 42.9737636959136
E1 = -688.6355829033745  E_coul = 184.9157038422875
init E= -503.719879061087
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900778841128  LUMO = 85.1956119101367
  mo_energy =
[-1.21646188e+02 -1.32807586e+01 -7.62158623e+00 -7.62158623e+00
 -7.62158623e+00 -1.65066972e+00 -6.80900779e-01 -6.80900779e-01
 -6.80900779e-01  8.51956119e+01  6.78633962e+02  3.94756494e+03
  3.15207148e+04  1.12121418e+06  7.13808339e+06]
E1 = -706.5752712780777  E_coul = 198.94518201310458
cycle= 1 E= -507.630089264973  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377333
diis-c [-0.14238035  1.        ]
  HOMO = -0.236279705313616  LUMO = 86.5286925956376
  mo_energy =
[-1.20258456e+02 -1.22526848e+01 -6.65307829e+00 -6.65307829e+00
 -6.65307829e+00 -1.16344955e+00 -2.36279705e-01 -2.36279705e-01
 -2.36279705e-01  8.65286926e+01  6.80004091e+02  3.94881493e+03
  3.15217953e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5439051158191  E_coul = 198.9133888284384
cycle= 2 E= -507.630516287381  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503325
diis-c [-2.52486738e-05 -7.72784917e-04  1.00077278e+00]
  HOMO = -0.23645449379954  LUMO = 86.5251771663348
  mo_energy =
[-1.20267082e+02 -1.22538708e+01 -6.65491523e+00 -6.65491523e+00
 -6.65491523e+00 -1.16351415e+00 -2.36454494e-01 -2.36454494e-01
 -2.36454494e-01  8.65251772e+01  6.79993514e+02  3.94879905e+03
  3.15217760e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434661841003  E_coul = 198.91294978703758
cycle= 3 E= -507.630516397063  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125103
diis-c [-3.74549910e-10  3.85657531e-05 -2.52145883e-02  1.02517602e+00]
  HOMO = -0.23645665034444  LUMO = 86.5251335753979
  mo_energy =
[-1.20267193e+02 -1.22538862e+01 -6.65494160e+00 -6.65494160e+00
 -6.65494160e+00 -1.16351479e+00 -2.36456650e-01 -2.36456650e-01
 -2.36456650e-01  8.65251336e+01  6.79993400e+02  3.94879891e+03
  3.15217758e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434590951605  E_coul = 198.91294269805934
cycle= 4 E= -507.630516397101  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5434590951605  E_coul = 198.91294269805934
  HOMO = -0.236456634923021  LUMO = 86.5251338964209
  mo_energy =
[-1.20267192e+02 -1.22538861e+01 -6.65494145e+00 -6.65494145e+00
 -6.65494145e+00 -1.16351478e+00 -2.36456635e-01 -2.36456635e-01
 -2.36456635e-01  8.65251339e+01  6.79993401e+02  3.94879891e+03
  3.15217758e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434591300343  E_coul = 198.91294273293303
Extra cycle  E= -507.630516397101  delta_E= -5.68e-14  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.9737636959136
E1 = -706.5434591300343  E_coul = 198.91294273293303
init E= -507.630516397101
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.23645663474346  LUMO = 86.5251339003331
  mo_energy =
[-1.20267192e+02 -1.22538861e+01 -6.65494144e+00 -6.65494144e+00
 -6.65494144e+00 -1.16351478e+00 -2.36456635e-01 -2.36456635e-01
 -2.36456635e-01  8.65251339e+01  6.79993401e+02  3.94879891e+03
  3.15217758e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.543459130559  E_coul = 198.91294273345775
cycle= 1 E= -507.630516397101  delta_E=    0  |g|= 1.49e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.543459130559  E_coul = 198.91294273345775
  HOMO = -0.23645663474094  LUMO = 86.5251339003899
  mo_energy =
[-1.20267192e+02 -1.22538861e+01 -6.65494144e+00 -6.65494144e+00
 -6.65494144e+00 -1.16351478e+00 -2.36456635e-01 -2.36456635e-01
 -2.36456635e-01  8.65251339e+01  6.79993401e+02  3.94879891e+03
  3.15217758e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434591305684  E_coul = 198.9129427334668
Extra cycle  E= -507.630516397102  delta_E= -3.41e-13  |g|= 3.35e-11  |ddm|= 4.18e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549567e+04 2.23215881e+03
 4.57772727e+02 1.21898912e+02 3.76207176e+01 4.74108958e+00
 3.91204719e-01 8.59876503e+00 4.90849644e-01]
grad_E = [ 1.58642107e-10  9.14405795e-09  4.38778777e-06 -1.59417034e-06
  4.10928879e-06 -4.91738937e-06  6.71717651e-06 -1.54566586e-04
  1.29658377e-04  9.29441736e-05 -1.25555725e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:28 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999983        1
[INPUT] 0    0    [1    /1   ]  18354.9533174        1
[INPUT] 0    0    [1    /1   ]  2232.16009371        1
[INPUT] 0    0    [1    /1   ]  457.768823778        1
[INPUT] 0    0    [1    /1   ]  121.903921212        1
[INPUT] 0    0    [1    /1   ]  37.6227731123        1
[INPUT] 0    0    [1    /1   ]  4.74106440188        1
[INPUT] 0    0    [1    /1   ]  0.391205907284       1
[INPUT] 1    0    [1    /1   ]  8.59877801921        1
[INPUT] 1    0    [1    /1   ]  0.490849569889       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999996987, 1.0]], [0, [799999.9999826269, 1.0]], [0, [18354.95331737009, 1.0]], [0, [2232.160093709823, 1.0]], [0, [457.7688237780939, 1.0]], [0, [121.90392121196342, 1.0]], [0, [37.62277311229967, 1.0]], [0, [4.741064401876109, 1.0]], [0, [0.391205907283651, 1.0]], [1, [8.598778019210483, 1.0]], [1, [0.49084956988902356, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999997]
bas 1, expnt(s) = [799999.99998263]
bas 2, expnt(s) = [18354.95331737]
bas 3, expnt(s) = [2232.16009371]
bas 4, expnt(s) = [457.76882378]
bas 5, expnt(s) = [121.90392121]
bas 6, expnt(s) = [37.62277311]
bas 7, expnt(s) = [4.7410644]
bas 8, expnt(s) = [0.39120591]
bas 9, expnt(s) = [8.59877802]
bas 10, expnt(s) = [0.49084957]
CPU time:        98.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549533e+04 3.98409777e+03 2.23216009e+03 8.20463053e+02
 4.57768824e+02 2.50034354e+02 1.21903921e+02 9.26890180e+01
 3.76227731e+01 3.83798371e+01 4.74106440e+00 8.11749286e+00
 3.91205907e-01 1.24973829e+00 8.59877802e+00 4.29566410e+01
 4.90849570e-01 1.19858796e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974151609628
cond(S) = 42.976569701174846
E1 = -688.6355948790987  E_coul = 184.91576005131893
init E= -503.71983482778
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.680900569132152  LUMO = 85.2019849950907
  mo_energy =
[-1.21646172e+02 -1.32807587e+01 -7.62158235e+00 -7.62158235e+00
 -7.62158235e+00 -1.65066946e+00 -6.80900569e-01 -6.80900569e-01
 -6.80900569e-01  8.52019850e+01  6.78651956e+02  3.94757955e+03
  3.15207224e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5753223742944  E_coul = 198.9452330403617
cycle= 1 E= -507.630089333933  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.377338
diis-c [-0.14238408  1.        ]
  HOMO = -0.236279556072456  LUMO = 86.5350734148844
  mo_energy =
[-1.20258440e+02 -1.22526853e+01 -6.65307494e+00 -6.65307494e+00
 -6.65307494e+00 -1.16344926e+00 -2.36279556e-01 -2.36279556e-01
 -2.36279556e-01  8.65350734e+01  6.80022088e+02  3.94882955e+03
  3.15218030e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5439594543448  E_coul = 198.9134431398351
cycle= 2 E= -507.63051631451  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503299
diis-c [-2.52459739e-05 -7.73285353e-04  1.00077329e+00]
  HOMO = -0.236454323200044  LUMO = 86.5315582173893
  mo_energy =
[-1.20267066e+02 -1.22538711e+01 -6.65491166e+00 -6.65491166e+00
 -6.65491166e+00 -1.16351385e+00 -2.36454323e-01 -2.36454323e-01
 -2.36454323e-01  8.65315582e+01  6.80011512e+02  3.94881367e+03
  3.15217836e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435205857896  E_coul = 198.9130041616158
cycle= 3 E= -507.630516424174  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.04 sec
diis-norm(errvec)=0.000125089
diis-c [-3.74460786e-10  3.85674299e-05 -2.52132033e-02  1.02517464e+00]
  HOMO = -0.23645647930663  LUMO = 86.5315146335498
  mo_energy =
[-1.20267177e+02 -1.22538865e+01 -6.65493803e+00 -6.65493803e+00
 -6.65493803e+00 -1.16351449e+00 -2.36456479e-01 -2.36456479e-01
 -2.36456479e-01  8.65315146e+01  6.80011398e+02  3.94881353e+03
  3.15217835e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435134984148  E_coul = 198.91299707420222
cycle= 4 E= -507.630516424213  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.04 sec
E1 = -706.5435134984148  E_coul = 198.91299707420222
  HOMO = -0.236456463888954  LUMO = 86.5315149545243
  mo_energy =
[-1.20267176e+02 -1.22538864e+01 -6.65493788e+00 -6.65493788e+00
 -6.65493788e+00 -1.16351448e+00 -2.36456464e-01 -2.36456464e-01
 -2.36456464e-01  8.65315150e+01  6.80011399e+02  3.94881353e+03
  3.15217835e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435135332795  E_coul = 198.91299710906728
Extra cycle  E= -507.630516424212  delta_E= 3.98e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.18 sec, wall time      0.22 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549533e+04 2.23216009e+03
 4.57768824e+02 1.21903921e+02 3.76227731e+01 4.74106440e+00
 3.91205907e-01 8.59877802e+00 4.90849570e-01]
E = -507.63051642421215
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999983        1
[INPUT] 0    0    [1    /1   ]  18354.9533174        1
[INPUT] 0    0    [1    /1   ]  2232.16009371        1
[INPUT] 0    0    [1    /1   ]  457.768823778        1
[INPUT] 0    0    [1    /1   ]  121.903921212        1
[INPUT] 0    0    [1    /1   ]  37.6227731123        1
[INPUT] 0    0    [1    /1   ]  4.74106440188        1
[INPUT] 0    0    [1    /1   ]  0.391205907284       1
[INPUT] 1    0    [1    /1   ]  8.59877801921        1
[INPUT] 1    0    [1    /1   ]  0.490849569889       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999996987, 1.0]], [0, [799999.9999826269, 1.0]], [0, [18354.95331737009, 1.0]], [0, [2232.160093709823, 1.0]], [0, [457.7688237780939, 1.0]], [0, [121.90392121196342, 1.0]], [0, [37.62277311229967, 1.0]], [0, [4.741064401876109, 1.0]], [0, [0.391205907283651, 1.0]], [1, [8.598778019210483, 1.0]], [1, [0.49084956988902356, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999997]
bas 1, expnt(s) = [799999.99998263]
bas 2, expnt(s) = [18354.95331737]
bas 3, expnt(s) = [2232.16009371]
bas 4, expnt(s) = [457.76882378]
bas 5, expnt(s) = [121.90392121]
bas 6, expnt(s) = [37.62277311]
bas 7, expnt(s) = [4.7410644]
bas 8, expnt(s) = [0.39120591]
bas 9, expnt(s) = [8.59877802]
bas 10, expnt(s) = [0.49084957]
CPU time:        99.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549533e+04 3.98409777e+03 2.23216009e+03 8.20463053e+02
 4.57768824e+02 2.50034354e+02 1.21903921e+02 9.26890180e+01
 3.76227731e+01 3.83798371e+01 4.74106440e+00 8.11749286e+00
 3.91205907e-01 1.24973829e+00 8.59877802e+00 4.29566410e+01
 4.90849570e-01 1.19858796e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974151609628
cond(S) = 42.976569701174846
E1 = -688.6355948790987  E_coul = 184.91576005131893
init E= -503.71983482778
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680900569132152  LUMO = 85.2019849950907
  mo_energy =
[-1.21646172e+02 -1.32807587e+01 -7.62158235e+00 -7.62158235e+00
 -7.62158235e+00 -1.65066946e+00 -6.80900569e-01 -6.80900569e-01
 -6.80900569e-01  8.52019850e+01  6.78651956e+02  3.94757955e+03
  3.15207224e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5753223742944  E_coul = 198.9452330403617
cycle= 1 E= -507.630089333933  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.377338
diis-c [-0.14238408  1.        ]
  HOMO = -0.236279556072456  LUMO = 86.5350734148844
  mo_energy =
[-1.20258440e+02 -1.22526853e+01 -6.65307494e+00 -6.65307494e+00
 -6.65307494e+00 -1.16344926e+00 -2.36279556e-01 -2.36279556e-01
 -2.36279556e-01  8.65350734e+01  6.80022088e+02  3.94882955e+03
  3.15218030e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5439594543448  E_coul = 198.9134431398351
cycle= 2 E= -507.63051631451  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503299
diis-c [-2.52459739e-05 -7.73285353e-04  1.00077329e+00]
  HOMO = -0.236454323200044  LUMO = 86.5315582173893
  mo_energy =
[-1.20267066e+02 -1.22538711e+01 -6.65491166e+00 -6.65491166e+00
 -6.65491166e+00 -1.16351385e+00 -2.36454323e-01 -2.36454323e-01
 -2.36454323e-01  8.65315582e+01  6.80011512e+02  3.94881367e+03
  3.15217836e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435205857896  E_coul = 198.9130041616158
cycle= 3 E= -507.630516424174  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125089
diis-c [-3.74460786e-10  3.85674299e-05 -2.52132033e-02  1.02517464e+00]
  HOMO = -0.23645647930663  LUMO = 86.5315146335498
  mo_energy =
[-1.20267177e+02 -1.22538865e+01 -6.65493803e+00 -6.65493803e+00
 -6.65493803e+00 -1.16351449e+00 -2.36456479e-01 -2.36456479e-01
 -2.36456479e-01  8.65315146e+01  6.80011398e+02  3.94881353e+03
  3.15217835e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435134984148  E_coul = 198.91299707420222
cycle= 4 E= -507.630516424213  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5435134984148  E_coul = 198.91299707420222
  HOMO = -0.236456463888954  LUMO = 86.5315149545243
  mo_energy =
[-1.20267176e+02 -1.22538864e+01 -6.65493788e+00 -6.65493788e+00
 -6.65493788e+00 -1.16351448e+00 -2.36456464e-01 -2.36456464e-01
 -2.36456464e-01  8.65315150e+01  6.80011399e+02  3.94881353e+03
  3.15217835e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435135332795  E_coul = 198.91299710906728
Extra cycle  E= -507.630516424212  delta_E= 3.98e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.976569701174846
E1 = -706.5435135332795  E_coul = 198.91299710906728
init E= -507.630516424212
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456463709442  LUMO = 86.5315149584343
  mo_energy =
[-1.20267176e+02 -1.22538864e+01 -6.65493787e+00 -6.65493787e+00
 -6.65493787e+00 -1.16351448e+00 -2.36456464e-01 -2.36456464e-01
 -2.36456464e-01  8.65315150e+01  6.80011399e+02  3.94881353e+03
  3.15217835e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435135338046  E_coul = 198.9129971095922
cycle= 1 E= -507.630516424212  delta_E= -2.27e-13  |g|= 1.45e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5435135338046  E_coul = 198.9129971095922
  HOMO = -0.236456463706918  LUMO = 86.5315149584899
  mo_energy =
[-1.20267176e+02 -1.22538864e+01 -6.65493787e+00 -6.65493787e+00
 -6.65493787e+00 -1.16351448e+00 -2.36456464e-01 -2.36456464e-01
 -2.36456464e-01  8.65315150e+01  6.80011399e+02  3.94881353e+03
  3.15217835e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5435135338138  E_coul = 198.91299710960115
Extra cycle  E= -507.630516424213  delta_E= -2.27e-13  |g|= 4.54e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.21 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549533e+04 2.23216009e+03
 4.57768824e+02 1.21903921e+02 3.76227731e+01 4.74106440e+00
 3.91205907e-01 8.59877802e+00 4.90849570e-01]
grad_E = [ 1.58644805e-10  9.14416245e-09  4.38709862e-06 -1.54084330e-06
  3.32627995e-06 -3.11185137e-06  1.16448012e-05 -1.72665394e-04
  1.44894923e-04  1.03906551e-04 -1.40336901e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999977        1
[INPUT] 0    0    [1    /1   ]  18354.9505788        1
[INPUT] 0    0    [1    /1   ]  2232.16113023        1
[INPUT] 0    0    [1    /1   ]  457.765669856        1
[INPUT] 0    0    [1    /1   ]  121.908050272        1
[INPUT] 0    0    [1    /1   ]  37.624129581         1
[INPUT] 0    0    [1    /1   ]  4.74110398715        1
[INPUT] 0    0    [1    /1   ]  0.391204714557       1
[INPUT] 1    0    [1    /1   ]  8.5987525038         1
[INPUT] 1    0    [1    /1   ]  0.490849507705       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995995, 1.0]], [0, [799999.999976921, 1.0]], [0, [18354.950578827087, 1.0]], [0, [2232.1611302342358, 1.0]], [0, [457.7656698556707, 1.0]], [0, [121.90805027219913, 1.0]], [0, [37.62412958100378, 1.0]], [0, [4.741103987149597, 1.0]], [0, [0.39120471455689426, 1.0]], [1, [8.598752503797098, 1.0]], [1, [0.49084950770523883, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999996]
bas 1, expnt(s) = [799999.99997692]
bas 2, expnt(s) = [18354.95057883]
bas 3, expnt(s) = [2232.16113023]
bas 4, expnt(s) = [457.76566986]
bas 5, expnt(s) = [121.90805027]
bas 6, expnt(s) = [37.62412958]
bas 7, expnt(s) = [4.74110399]
bas 8, expnt(s) = [0.39120471]
bas 9, expnt(s) = [8.5987525]
bas 10, expnt(s) = [0.49084951]
CPU time:       103.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549506e+04 3.98409732e+03 2.23216113e+03 8.20463339e+02
 4.57765670e+02 2.50033062e+02 1.21908050e+02 9.26913726e+01
 3.76241296e+01 3.83808749e+01 4.74110399e+00 8.11754369e+00
 3.91204715e-01 1.24973544e+00 8.59875250e+00 4.29564817e+01
 4.90849508e-01 1.19858777e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973785744413
cond(S) = 42.978571946363346
E1 = -688.6354941505592  E_coul = 184.91567475626778
init E= -503.719819394291
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680900774232449  LUMO = 85.2067756646474
  mo_energy =
[-1.21646189e+02 -1.32807679e+01 -7.62158728e+00 -7.62158728e+00
 -7.62158728e+00 -1.65067122e+00 -6.80900774e-01 -6.80900774e-01
 -6.80900774e-01  8.52067757e+01  6.78665759e+02  3.94759072e+03
  3.15207281e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5752734830356  E_coul = 198.9451840729995
cycle= 1 E= -507.630089410036  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377341
diis-c [-0.14238641  1.        ]
  HOMO = -0.236279514163935  LUMO = 86.5398734569746
  mo_energy =
[-1.20258448e+02 -1.22526923e+01 -6.65307791e+00 -6.65307791e+00
 -6.65307791e+00 -1.16345049e+00 -2.36279514e-01 -2.36279514e-01
 -2.36279514e-01  8.65398735e+01  6.80035905e+02  3.94884075e+03
  3.15218087e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5439137055234  E_coul = 198.91339736790638
cycle= 2 E= -507.630516337617  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503261
diis-c [-2.52420956e-05 -7.73395311e-04  1.00077340e+00]
  HOMO = -0.236454261214593  LUMO = 86.53635850647
  mo_energy =
[-1.20267073e+02 -1.22538780e+01 -6.65491443e+00 -6.65491443e+00
 -6.65491443e+00 -1.16351508e+00 -2.36454261e-01 -2.36454261e-01
 -2.36454261e-01  8.65363585e+01  6.80025329e+02  3.94882486e+03
  3.15217894e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434748966409  E_coul = 198.91295844938062
cycle= 3 E= -507.63051644726  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125076
diis-c [-3.74387199e-10  3.85684150e-05 -2.52124905e-02  1.02517392e+00]
  HOMO = -0.23645641697487  LUMO = 86.5363149281207
  mo_energy =
[-1.20267183e+02 -1.22538933e+01 -6.65494079e+00 -6.65494079e+00
 -6.65494079e+00 -1.16351571e+00 -2.36456417e-01 -2.36456417e-01
 -2.36456417e-01  8.65363149e+01  6.80025215e+02  3.94882472e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434678105352  E_coul = 198.91295136323603
cycle= 4 E= -507.630516447299  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5434678105352  E_coul = 198.91295136323603
  HOMO = -0.236456401560179  LUMO = 86.5363152490523
  mo_energy =
[-1.20267182e+02 -1.22538932e+01 -6.65494064e+00 -6.65494064e+00
 -6.65494064e+00 -1.16351571e+00 -2.36456402e-01 -2.36456402e-01
 -2.36456402e-01  8.65363152e+01  6.80025216e+02  3.94882472e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434678453929  E_coul = 198.9129513980941
Extra cycle  E= -507.630516447299  delta_E= 2.84e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549506e+04 2.23216113e+03
 4.57765670e+02 1.21908050e+02 3.76241296e+01 4.74110399e+00
 3.91204715e-01 8.59875250e+00 4.90849508e-01]
E = -507.6305164472988
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999977        1
[INPUT] 0    0    [1    /1   ]  18354.9505788        1
[INPUT] 0    0    [1    /1   ]  2232.16113023        1
[INPUT] 0    0    [1    /1   ]  457.765669856        1
[INPUT] 0    0    [1    /1   ]  121.908050272        1
[INPUT] 0    0    [1    /1   ]  37.624129581         1
[INPUT] 0    0    [1    /1   ]  4.74110398715        1
[INPUT] 0    0    [1    /1   ]  0.391204714557       1
[INPUT] 1    0    [1    /1   ]  8.5987525038         1
[INPUT] 1    0    [1    /1   ]  0.490849507705       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995995, 1.0]], [0, [799999.999976921, 1.0]], [0, [18354.950578827087, 1.0]], [0, [2232.1611302342358, 1.0]], [0, [457.7656698556707, 1.0]], [0, [121.90805027219913, 1.0]], [0, [37.62412958100378, 1.0]], [0, [4.741103987149597, 1.0]], [0, [0.39120471455689426, 1.0]], [1, [8.598752503797098, 1.0]], [1, [0.49084950770523883, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999996]
bas 1, expnt(s) = [799999.99997692]
bas 2, expnt(s) = [18354.95057883]
bas 3, expnt(s) = [2232.16113023]
bas 4, expnt(s) = [457.76566986]
bas 5, expnt(s) = [121.90805027]
bas 6, expnt(s) = [37.62412958]
bas 7, expnt(s) = [4.74110399]
bas 8, expnt(s) = [0.39120471]
bas 9, expnt(s) = [8.5987525]
bas 10, expnt(s) = [0.49084951]
CPU time:       104.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549506e+04 3.98409732e+03 2.23216113e+03 8.20463339e+02
 4.57765670e+02 2.50033062e+02 1.21908050e+02 9.26913726e+01
 3.76241296e+01 3.83808749e+01 4.74110399e+00 8.11754369e+00
 3.91204715e-01 1.24973544e+00 8.59875250e+00 4.29564817e+01
 4.90849508e-01 1.19858777e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973785744413
cond(S) = 42.978571946363346
E1 = -688.6354941505592  E_coul = 184.91567475626778
init E= -503.719819394291
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680900774232449  LUMO = 85.2067756646474
  mo_energy =
[-1.21646189e+02 -1.32807679e+01 -7.62158728e+00 -7.62158728e+00
 -7.62158728e+00 -1.65067122e+00 -6.80900774e-01 -6.80900774e-01
 -6.80900774e-01  8.52067757e+01  6.78665759e+02  3.94759072e+03
  3.15207281e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5752734830356  E_coul = 198.9451840729995
cycle= 1 E= -507.630089410036  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377341
diis-c [-0.14238641  1.        ]
  HOMO = -0.236279514163935  LUMO = 86.5398734569746
  mo_energy =
[-1.20258448e+02 -1.22526923e+01 -6.65307791e+00 -6.65307791e+00
 -6.65307791e+00 -1.16345049e+00 -2.36279514e-01 -2.36279514e-01
 -2.36279514e-01  8.65398735e+01  6.80035905e+02  3.94884075e+03
  3.15218087e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5439137055234  E_coul = 198.91339736790638
cycle= 2 E= -507.630516337617  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503261
diis-c [-2.52420956e-05 -7.73395311e-04  1.00077340e+00]
  HOMO = -0.236454261214593  LUMO = 86.53635850647
  mo_energy =
[-1.20267073e+02 -1.22538780e+01 -6.65491443e+00 -6.65491443e+00
 -6.65491443e+00 -1.16351508e+00 -2.36454261e-01 -2.36454261e-01
 -2.36454261e-01  8.65363585e+01  6.80025329e+02  3.94882486e+03
  3.15217894e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434748966409  E_coul = 198.91295844938062
cycle= 3 E= -507.63051644726  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125076
diis-c [-3.74387199e-10  3.85684150e-05 -2.52124905e-02  1.02517392e+00]
  HOMO = -0.23645641697487  LUMO = 86.5363149281207
  mo_energy =
[-1.20267183e+02 -1.22538933e+01 -6.65494079e+00 -6.65494079e+00
 -6.65494079e+00 -1.16351571e+00 -2.36456417e-01 -2.36456417e-01
 -2.36456417e-01  8.65363149e+01  6.80025215e+02  3.94882472e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434678105352  E_coul = 198.91295136323603
cycle= 4 E= -507.630516447299  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5434678105352  E_coul = 198.91295136323603
  HOMO = -0.236456401560179  LUMO = 86.5363152490523
  mo_energy =
[-1.20267182e+02 -1.22538932e+01 -6.65494064e+00 -6.65494064e+00
 -6.65494064e+00 -1.16351571e+00 -2.36456402e-01 -2.36456402e-01
 -2.36456402e-01  8.65363152e+01  6.80025216e+02  3.94882472e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434678453929  E_coul = 198.9129513980941
Extra cycle  E= -507.630516447299  delta_E= 2.84e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.978571946363346
E1 = -706.5434678453929  E_coul = 198.9129513980941
init E= -507.630516447299
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.23645640138071  LUMO = 86.5363152529615
  mo_energy =
[-1.20267182e+02 -1.22538932e+01 -6.65494064e+00 -6.65494064e+00
 -6.65494064e+00 -1.16351571e+00 -2.36456401e-01 -2.36456401e-01
 -2.36456401e-01  8.65363153e+01  6.80025216e+02  3.94882472e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434678459173  E_coul = 198.91295139861882
cycle= 1 E= -507.630516447299  delta_E= 2.84e-13  |g|= 1.43e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5434678459173  E_coul = 198.91295139861882
  HOMO = -0.236456401378193  LUMO = 86.5363152530173
  mo_energy =
[-1.20267182e+02 -1.22538932e+01 -6.65494064e+00 -6.65494064e+00
 -6.65494064e+00 -1.16351571e+00 -2.36456401e-01 -2.36456401e-01
 -2.36456401e-01  8.65363153e+01  6.80025216e+02  3.94882472e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5434678459264  E_coul = 198.91295139862785
Extra cycle  E= -507.630516447299  delta_E= -5.68e-14  |g|= 5.23e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549506e+04 2.23216113e+03
 4.57765670e+02 1.21908050e+02 3.76241296e+01 4.74110399e+00
 3.91204715e-01 8.59875250e+00 4.90849508e-01]
grad_E = [ 1.58647334e-10  9.14426186e-09  4.38647261e-06 -1.49156066e-06
  2.55265934e-06 -4.47261874e-07  1.17840837e-05 -1.41247831e-04
  1.18561487e-04  8.50402313e-05 -1.14841930e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:38 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999973        1
[INPUT] 0    0    [1    /1   ]  18354.9484992        1
[INPUT] 0    0    [1    /1   ]  2232.16191785        1
[INPUT] 0    0    [1    /1   ]  457.76326285         1
[INPUT] 0    0    [1    /1   ]  121.911302766        1
[INPUT] 0    0    [1    /1   ]  37.6247718396        1
[INPUT] 0    0    [1    /1   ]  4.74121130086        1
[INPUT] 0    0    [1    /1   ]  0.39120103356        1
[INPUT] 1    0    [1    /1   ]  8.59868669496        1
[INPUT] 1    0    [1    /1   ]  0.49084945721        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995246, 1.0]], [0, [799999.9999725881, 1.0]], [0, [18354.948499230173, 1.0]], [0, [2232.1619178496735, 1.0]], [0, [457.76326284976875, 1.0]], [0, [121.91130276638408, 1.0]], [0, [37.62477183960002, 1.0]], [0, [4.741211300860195, 1.0]], [0, [0.39120103356045166, 1.0]], [1, [8.598686694957662, 1.0]], [1, [0.4908494572099185, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999952]
bas 1, expnt(s) = [799999.99997259]
bas 2, expnt(s) = [18354.94849923]
bas 3, expnt(s) = [2232.16191785]
bas 4, expnt(s) = [457.76326285]
bas 5, expnt(s) = [121.91130277]
bas 6, expnt(s) = [37.62477184]
bas 7, expnt(s) = [4.7412113]
bas 8, expnt(s) = [0.39120103]
bas 9, expnt(s) = [8.59868669]
bas 10, expnt(s) = [0.49084946]
CPU time:       108.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549485e+04 3.98409699e+03 2.23216192e+03 8.20463556e+02
 4.57763263e+02 2.50032076e+02 1.21911303e+02 9.26932273e+01
 3.76247718e+01 3.83813663e+01 4.74121130e+00 8.11768150e+00
 3.91201034e-01 1.24972662e+00 8.59868669e+00 4.29560707e+01
 4.90849457e-01 1.19858762e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972869916135
cond(S) = 42.979757180539686
E1 = -688.6352751873811  E_coul = 184.91544144801904
init E= -503.719833739362
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901413176642  LUMO = 85.2099656982362
  mo_energy =
[-1.21646241e+02 -1.32807865e+01 -7.62160143e+00 -7.62160143e+00
 -7.62160143e+00 -1.65067510e+00 -6.80901413e-01 -6.80901413e-01
 -6.80901413e-01  8.52099657e+01  6.78675333e+02  3.94759842e+03
  3.15207318e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5751200938713  E_coul = 198.94503059865252
cycle= 1 E= -507.630089495219  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377342
diis-c [-0.1423873  1.       ]
  HOMO = -0.236279583826968  LUMO = 86.5430746549104
  mo_energy =
[-1.20258479e+02 -1.22527061e+01 -6.65308750e+00 -6.65308750e+00
 -6.65308750e+00 -1.16345331e+00 -2.36279584e-01 -2.36279584e-01
 -2.36279584e-01  8.65430747e+01  6.80045502e+02  3.94884847e+03
  3.15218124e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5437633846623  E_coul = 198.91324702696983
cycle= 2 E= -507.630516357692  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503209
diis-c [-2.52369552e-05 -7.73100399e-04  1.00077310e+00]
  HOMO = -0.236454311942943  LUMO = 86.5395599695004
  mo_energy =
[-1.20267103e+02 -1.22538916e+01 -6.65492381e+00 -6.65492381e+00
 -6.65492381e+00 -1.16351789e+00 -2.36454312e-01 -2.36454312e-01
 -2.36454312e-01  8.65395600e+01  6.80034927e+02  3.94883259e+03
  3.15217931e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433246323894  E_coul = 198.912808165077
cycle= 3 E= -507.630516467312  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125064
diis-c [-3.74328388e-10  3.85687374e-05 -2.52124687e-02  1.02517390e+00]
  HOMO = -0.236456467449222  LUMO = 86.5395163950241
  mo_energy =
[-1.20267214e+02 -1.22539070e+01 -6.65495016e+00 -6.65495016e+00
 -6.65495016e+00 -1.16351853e+00 -2.36456467e-01 -2.36456467e-01
 -2.36456467e-01  8.65395164e+01  6.80034813e+02  3.94883245e+03
  3.15217930e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433175472564  E_coul = 198.91280107990596
cycle= 4 E= -507.63051646735  delta_E= -3.8e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5433175472564  E_coul = 198.91280107990596
  HOMO = -0.236456452036769  LUMO = 86.539516715923
  mo_energy =
[-1.20267213e+02 -1.22539069e+01 -6.65495001e+00 -6.65495001e+00
 -6.65495001e+00 -1.16351852e+00 -2.36456452e-01 -2.36456452e-01
 -2.36456452e-01  8.65395167e+01  6.80034814e+02  3.94883245e+03
  3.15217930e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433175821099  E_coul = 198.91280111475893
Extra cycle  E= -507.630516467351  delta_E= -5.68e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549485e+04 2.23216192e+03
 4.57763263e+02 1.21911303e+02 3.76247718e+01 4.74121130e+00
 3.91201034e-01 8.59868669e+00 4.90849457e-01]
E = -507.63051646735096
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999973        1
[INPUT] 0    0    [1    /1   ]  18354.9484992        1
[INPUT] 0    0    [1    /1   ]  2232.16191785        1
[INPUT] 0    0    [1    /1   ]  457.76326285         1
[INPUT] 0    0    [1    /1   ]  121.911302766        1
[INPUT] 0    0    [1    /1   ]  37.6247718396        1
[INPUT] 0    0    [1    /1   ]  4.74121130086        1
[INPUT] 0    0    [1    /1   ]  0.39120103356        1
[INPUT] 1    0    [1    /1   ]  8.59868669496        1
[INPUT] 1    0    [1    /1   ]  0.49084945721        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995246, 1.0]], [0, [799999.9999725881, 1.0]], [0, [18354.948499230173, 1.0]], [0, [2232.1619178496735, 1.0]], [0, [457.76326284976875, 1.0]], [0, [121.91130276638408, 1.0]], [0, [37.62477183960002, 1.0]], [0, [4.741211300860195, 1.0]], [0, [0.39120103356045166, 1.0]], [1, [8.598686694957662, 1.0]], [1, [0.4908494572099185, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999952]
bas 1, expnt(s) = [799999.99997259]
bas 2, expnt(s) = [18354.94849923]
bas 3, expnt(s) = [2232.16191785]
bas 4, expnt(s) = [457.76326285]
bas 5, expnt(s) = [121.91130277]
bas 6, expnt(s) = [37.62477184]
bas 7, expnt(s) = [4.7412113]
bas 8, expnt(s) = [0.39120103]
bas 9, expnt(s) = [8.59868669]
bas 10, expnt(s) = [0.49084946]
CPU time:       109.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549485e+04 3.98409699e+03 2.23216192e+03 8.20463556e+02
 4.57763263e+02 2.50032076e+02 1.21911303e+02 9.26932273e+01
 3.76247718e+01 3.83813663e+01 4.74121130e+00 8.11768150e+00
 3.91201034e-01 1.24972662e+00 8.59868669e+00 4.29560707e+01
 4.90849457e-01 1.19858762e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972869916135
cond(S) = 42.979757180539686
E1 = -688.6352751873811  E_coul = 184.91544144801904
init E= -503.719833739362
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901413176642  LUMO = 85.2099656982362
  mo_energy =
[-1.21646241e+02 -1.32807865e+01 -7.62160143e+00 -7.62160143e+00
 -7.62160143e+00 -1.65067510e+00 -6.80901413e-01 -6.80901413e-01
 -6.80901413e-01  8.52099657e+01  6.78675333e+02  3.94759842e+03
  3.15207318e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5751200938713  E_coul = 198.94503059865252
cycle= 1 E= -507.630089495219  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377342
diis-c [-0.1423873  1.       ]
  HOMO = -0.236279583826968  LUMO = 86.5430746549104
  mo_energy =
[-1.20258479e+02 -1.22527061e+01 -6.65308750e+00 -6.65308750e+00
 -6.65308750e+00 -1.16345331e+00 -2.36279584e-01 -2.36279584e-01
 -2.36279584e-01  8.65430747e+01  6.80045502e+02  3.94884847e+03
  3.15218124e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5437633846623  E_coul = 198.91324702696983
cycle= 2 E= -507.630516357692  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503209
diis-c [-2.52369552e-05 -7.73100399e-04  1.00077310e+00]
  HOMO = -0.236454311942943  LUMO = 86.5395599695004
  mo_energy =
[-1.20267103e+02 -1.22538916e+01 -6.65492381e+00 -6.65492381e+00
 -6.65492381e+00 -1.16351789e+00 -2.36454312e-01 -2.36454312e-01
 -2.36454312e-01  8.65395600e+01  6.80034927e+02  3.94883259e+03
  3.15217931e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433246323894  E_coul = 198.912808165077
cycle= 3 E= -507.630516467312  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125064
diis-c [-3.74328388e-10  3.85687374e-05 -2.52124687e-02  1.02517390e+00]
  HOMO = -0.236456467449222  LUMO = 86.5395163950241
  mo_energy =
[-1.20267214e+02 -1.22539070e+01 -6.65495016e+00 -6.65495016e+00
 -6.65495016e+00 -1.16351853e+00 -2.36456467e-01 -2.36456467e-01
 -2.36456467e-01  8.65395164e+01  6.80034813e+02  3.94883245e+03
  3.15217930e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433175472564  E_coul = 198.91280107990596
cycle= 4 E= -507.63051646735  delta_E= -3.8e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5433175472564  E_coul = 198.91280107990596
  HOMO = -0.236456452036769  LUMO = 86.539516715923
  mo_energy =
[-1.20267213e+02 -1.22539069e+01 -6.65495001e+00 -6.65495001e+00
 -6.65495001e+00 -1.16351852e+00 -2.36456452e-01 -2.36456452e-01
 -2.36456452e-01  8.65395167e+01  6.80034814e+02  3.94883245e+03
  3.15217930e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433175821099  E_coul = 198.91280111475893
Extra cycle  E= -507.630516467351  delta_E= -5.68e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.979757180539686
E1 = -706.5433175821099  E_coul = 198.91280111475893
init E= -507.630516467351
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456451857329  LUMO = 86.5395167198323
  mo_energy =
[-1.20267213e+02 -1.22539069e+01 -6.65495001e+00 -6.65495001e+00
 -6.65495001e+00 -1.16351852e+00 -2.36456452e-01 -2.36456452e-01
 -2.36456452e-01  8.65395167e+01  6.80034814e+02  3.94883245e+03
  3.15217930e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433175826345  E_coul = 198.91280111528354
cycle= 1 E= -507.630516467351  delta_E=    0  |g|= 1.53e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5433175826345  E_coul = 198.91280111528354
  HOMO = -0.236456451854808  LUMO = 86.5395167198889
  mo_energy =
[-1.20267213e+02 -1.22539069e+01 -6.65495001e+00 -6.65495001e+00
 -6.65495001e+00 -1.16351852e+00 -2.36456452e-01 -2.36456452e-01
 -2.36456452e-01  8.65395167e+01  6.80034814e+02  3.94883245e+03
  3.15217930e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5433175826432  E_coul = 198.91280111529252
Extra cycle  E= -507.630516467351  delta_E= 2.27e-13  |g|= 7.15e-11  |ddm|= 4.17e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549485e+04 2.23216192e+03
 4.57763263e+02 1.21911303e+02 3.76247718e+01 4.74121130e+00
 3.91201034e-01 8.59868669e+00 4.90849457e-01]
grad_E = [ 1.58649710e-10  9.14435695e-09  4.38590613e-06 -1.44600338e-06
  1.78127587e-06  3.13671605e-06  6.94349507e-06 -5.80397037e-05
  4.87346169e-05  3.49686448e-05 -4.72147537e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999973        1
[INPUT] 0    0    [1    /1   ]  18354.9486874        1
[INPUT] 0    0    [1    /1   ]  2232.16184691        1
[INPUT] 0    0    [1    /1   ]  457.763471435        1
[INPUT] 0    0    [1    /1   ]  121.911112477        1
[INPUT] 0    0    [1    /1   ]  37.6243431483        1
[INPUT] 0    0    [1    /1   ]  4.74127492454        1
[INPUT] 0    0    [1    /1   ]  0.391198732083       1
[INPUT] 1    0    [1    /1   ]  8.59864857493        1
[INPUT] 1    0    [1    /1   ]  0.490849458735       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995315, 1.0]], [0, [799999.9999729802, 1.0]], [0, [18354.948687434517, 1.0]], [0, [2232.161846907321, 1.0]], [0, [457.7634714345274, 1.0]], [0, [121.91111247664367, 1.0]], [0, [37.62434314827161, 1.0]], [0, [4.741274924539951, 1.0]], [0, [0.3911987320825737, 1.0]], [1, [8.59864857493388, 1.0]], [1, [0.490849458735417, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999953]
bas 1, expnt(s) = [799999.99997298]
bas 2, expnt(s) = [18354.94868743]
bas 3, expnt(s) = [2232.16184691]
bas 4, expnt(s) = [457.76347143]
bas 5, expnt(s) = [121.91111248]
bas 6, expnt(s) = [37.62434315]
bas 7, expnt(s) = [4.74127492]
bas 8, expnt(s) = [0.39119873]
bas 9, expnt(s) = [8.59864857]
bas 10, expnt(s) = [0.49084946]
CPU time:       112.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549487e+04 3.98409702e+03 2.23216185e+03 8.20463537e+02
 4.57763471e+02 2.50032161e+02 1.21911112e+02 9.26931188e+01
 3.76243431e+01 3.83810383e+01 4.74127492e+00 8.11776320e+00
 3.91198732e-01 1.24972110e+00 8.59864857e+00 4.29558327e+01
 4.90849459e-01 1.19858762e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972347059554
cond(S) = 42.9793284061516
E1 = -688.6351597885067  E_coul = 184.91530256419125
init E= -503.719857224315
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.6809018141733  LUMO = 85.2092436899698
  mo_energy =
[-1.21646272e+02 -1.32807959e+01 -7.62161002e+00 -7.62161002e+00
 -7.62161002e+00 -1.65067716e+00 -6.80901814e-01 -6.80901814e-01
 -6.80901814e-01  8.52092437e+01  6.78673578e+02  3.94759694e+03
  3.15207309e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5750235960087  E_coul = 198.94493407867665
cycle= 1 E= -507.630089517332  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377341
diis-c [-0.14238638  1.        ]
  HOMO = -0.236279673960003  LUMO = 86.5423554672164
  mo_energy =
[-1.20258500e+02 -1.22527129e+01 -6.65309359e+00 -6.65309359e+00
 -6.65309359e+00 -1.16345484e+00 -2.36279674e-01 -2.36279674e-01
 -2.36279674e-01  8.65423555e+01  6.80043758e+02  3.94884701e+03
  3.15218115e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.543667252311  E_coul = 198.91315089015367
cycle= 2 E= -507.630516362157  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503192
diis-c [-2.52353405e-05 -7.72767444e-04  1.00077277e+00]
  HOMO = -0.236454400315377  LUMO = 86.5388408311084
  mo_energy =
[-1.20267124e+02 -1.22538985e+01 -6.65492987e+00 -6.65492987e+00
 -6.65492987e+00 -1.16351943e+00 -2.36454400e-01 -2.36454400e-01
 -2.36454400e-01  8.65388408e+01  6.80033183e+02  3.94883113e+03
  3.15217922e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432285055555  E_coul = 198.9127120337842
cycle= 3 E= -507.630516471771  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125062
diis-c [-3.74330884e-10  3.85683260e-05 -2.52129654e-02  1.02517440e+00]
  HOMO = -0.2364565558537  LUMO = 86.5387972559915
  mo_energy =
[-1.20267235e+02 -1.22539139e+01 -6.65495622e+00 -6.65495622e+00
 -6.65495622e+00 -1.16352006e+00 -2.36456556e-01 -2.36456556e-01
 -2.36456556e-01  8.65387973e+01  6.80033069e+02  3.94883099e+03
  3.15217920e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432214203419  E_coul = 198.91270494853254
cycle= 4 E= -507.630516471809  delta_E= -3.8e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432214203419  E_coul = 198.91270494853254
  HOMO = -0.236456540441009  LUMO = 86.5387975768906
  mo_energy =
[-1.20267234e+02 -1.22539138e+01 -6.65495607e+00 -6.65495607e+00
 -6.65495607e+00 -1.16352006e+00 -2.36456540e-01 -2.36456540e-01
 -2.36456540e-01  8.65387976e+01  6.80033070e+02  3.94883099e+03
  3.15217920e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.543221455196  E_coul = 198.91270498338608
Extra cycle  E= -507.63051647181  delta_E= -5.68e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549487e+04 2.23216185e+03
 4.57763471e+02 1.21911112e+02 3.76243431e+01 4.74127492e+00
 3.91198732e-01 8.59864857e+00 4.90849459e-01]
E = -507.63051647180987
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999973        1
[INPUT] 0    0    [1    /1   ]  18354.9486874        1
[INPUT] 0    0    [1    /1   ]  2232.16184691        1
[INPUT] 0    0    [1    /1   ]  457.763471435        1
[INPUT] 0    0    [1    /1   ]  121.911112477        1
[INPUT] 0    0    [1    /1   ]  37.6243431483        1
[INPUT] 0    0    [1    /1   ]  4.74127492454        1
[INPUT] 0    0    [1    /1   ]  0.391198732083       1
[INPUT] 1    0    [1    /1   ]  8.59864857493        1
[INPUT] 1    0    [1    /1   ]  0.490849458735       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995315, 1.0]], [0, [799999.9999729802, 1.0]], [0, [18354.948687434517, 1.0]], [0, [2232.161846907321, 1.0]], [0, [457.7634714345274, 1.0]], [0, [121.91111247664367, 1.0]], [0, [37.62434314827161, 1.0]], [0, [4.741274924539951, 1.0]], [0, [0.3911987320825737, 1.0]], [1, [8.59864857493388, 1.0]], [1, [0.490849458735417, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999953]
bas 1, expnt(s) = [799999.99997298]
bas 2, expnt(s) = [18354.94868743]
bas 3, expnt(s) = [2232.16184691]
bas 4, expnt(s) = [457.76347143]
bas 5, expnt(s) = [121.91111248]
bas 6, expnt(s) = [37.62434315]
bas 7, expnt(s) = [4.74127492]
bas 8, expnt(s) = [0.39119873]
bas 9, expnt(s) = [8.59864857]
bas 10, expnt(s) = [0.49084946]
CPU time:       113.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549487e+04 3.98409702e+03 2.23216185e+03 8.20463537e+02
 4.57763471e+02 2.50032161e+02 1.21911112e+02 9.26931188e+01
 3.76243431e+01 3.83810383e+01 4.74127492e+00 8.11776320e+00
 3.91198732e-01 1.24972110e+00 8.59864857e+00 4.29558327e+01
 4.90849459e-01 1.19858762e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972347059554
cond(S) = 42.9793284061516
E1 = -688.6351597885067  E_coul = 184.91530256419125
init E= -503.719857224315
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.6809018141733  LUMO = 85.2092436899698
  mo_energy =
[-1.21646272e+02 -1.32807959e+01 -7.62161002e+00 -7.62161002e+00
 -7.62161002e+00 -1.65067716e+00 -6.80901814e-01 -6.80901814e-01
 -6.80901814e-01  8.52092437e+01  6.78673578e+02  3.94759694e+03
  3.15207309e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5750235960087  E_coul = 198.94493407867665
cycle= 1 E= -507.630089517332  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377341
diis-c [-0.14238638  1.        ]
  HOMO = -0.236279673960003  LUMO = 86.5423554672164
  mo_energy =
[-1.20258500e+02 -1.22527129e+01 -6.65309359e+00 -6.65309359e+00
 -6.65309359e+00 -1.16345484e+00 -2.36279674e-01 -2.36279674e-01
 -2.36279674e-01  8.65423555e+01  6.80043758e+02  3.94884701e+03
  3.15218115e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.543667252311  E_coul = 198.91315089015367
cycle= 2 E= -507.630516362157  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503192
diis-c [-2.52353405e-05 -7.72767444e-04  1.00077277e+00]
  HOMO = -0.236454400315377  LUMO = 86.5388408311084
  mo_energy =
[-1.20267124e+02 -1.22538985e+01 -6.65492987e+00 -6.65492987e+00
 -6.65492987e+00 -1.16351943e+00 -2.36454400e-01 -2.36454400e-01
 -2.36454400e-01  8.65388408e+01  6.80033183e+02  3.94883113e+03
  3.15217922e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432285055555  E_coul = 198.9127120337842
cycle= 3 E= -507.630516471771  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125062
diis-c [-3.74330884e-10  3.85683260e-05 -2.52129654e-02  1.02517440e+00]
  HOMO = -0.2364565558537  LUMO = 86.5387972559915
  mo_energy =
[-1.20267235e+02 -1.22539139e+01 -6.65495622e+00 -6.65495622e+00
 -6.65495622e+00 -1.16352006e+00 -2.36456556e-01 -2.36456556e-01
 -2.36456556e-01  8.65387973e+01  6.80033069e+02  3.94883099e+03
  3.15217920e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432214203419  E_coul = 198.91270494853254
cycle= 4 E= -507.630516471809  delta_E= -3.8e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5432214203419  E_coul = 198.91270494853254
  HOMO = -0.236456540441009  LUMO = 86.5387975768906
  mo_energy =
[-1.20267234e+02 -1.22539138e+01 -6.65495607e+00 -6.65495607e+00
 -6.65495607e+00 -1.16352006e+00 -2.36456540e-01 -2.36456540e-01
 -2.36456540e-01  8.65387976e+01  6.80033070e+02  3.94883099e+03
  3.15217920e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.543221455196  E_coul = 198.91270498338608
Extra cycle  E= -507.63051647181  delta_E= -5.68e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.9793284061516
E1 = -706.543221455196  E_coul = 198.91270498338608
init E= -507.63051647181
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.23645654026156  LUMO = 86.5387975808008
  mo_energy =
[-1.20267234e+02 -1.22539138e+01 -6.65495607e+00 -6.65495607e+00
 -6.65495607e+00 -1.16352006e+00 -2.36456540e-01 -2.36456540e-01
 -2.36456540e-01  8.65387976e+01  6.80033070e+02  3.94883099e+03
  3.15217920e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432214557205  E_coul = 198.91270498391071
cycle= 1 E= -507.63051647181  delta_E= 5.68e-14  |g|= 1.42e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5432214557205  E_coul = 198.91270498391071
  HOMO = -0.236456540259039  LUMO = 86.5387975808561
  mo_energy =
[-1.20267234e+02 -1.22539138e+01 -6.65495607e+00 -6.65495607e+00
 -6.65495607e+00 -1.16352006e+00 -2.36456540e-01 -2.36456540e-01
 -2.36456540e-01  8.65387976e+01  6.80033070e+02  3.94883099e+03
  3.15217920e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432214557294  E_coul = 198.91270498391967
Extra cycle  E= -507.63051647181  delta_E= 5.68e-14  |g|= 2.52e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549487e+04 2.23216185e+03
 4.57763471e+02 1.21911112e+02 3.76243431e+01 4.74127492e+00
 3.91198732e-01 8.59864857e+00 4.90849459e-01]
grad_E = [ 1.58649926e-10  9.14436685e-09  4.38587163e-06 -1.44246546e-06
  1.67743425e-06  4.29120148e-06  2.68245987e-06 -9.23313283e-06
  7.75503550e-06  5.56847979e-06 -7.51748246e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999974        1
[INPUT] 0    0    [1    /1   ]  18354.9491208        1
[INPUT] 0    0    [1    /1   ]  2232.16168277        1
[INPUT] 0    0    [1    /1   ]  457.763971137        1
[INPUT] 0    0    [1    /1   ]  121.910477217        1
[INPUT] 0    0    [1    /1   ]  37.6240235938        1
[INPUT] 0    0    [1    /1   ]  4.74128871439        1
[INPUT] 0    0    [1    /1   ]  0.391198200149       1
[INPUT] 1    0    [1    /1   ]  8.59864056522        1
[INPUT] 1    0    [1    /1   ]  0.490849467854       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995474, 1.0]], [0, [799999.9999738832, 1.0]], [0, [18354.949120800586, 1.0]], [0, [2232.1616827712805, 1.0]], [0, [457.7639711372317, 1.0]], [0, [121.91047721682557, 1.0]], [0, [37.624023593757784, 1.0]], [0, [4.741288714394642, 1.0]], [0, [0.3911982001486769, 1.0]], [1, [8.59864056521918, 1.0]], [1, [0.4908494678537182, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999955]
bas 1, expnt(s) = [799999.99997388]
bas 2, expnt(s) = [18354.9491208]
bas 3, expnt(s) = [2232.16168277]
bas 4, expnt(s) = [457.76397114]
bas 5, expnt(s) = [121.91047722]
bas 6, expnt(s) = [37.62402359]
bas 7, expnt(s) = [4.74128871]
bas 8, expnt(s) = [0.3911982]
bas 9, expnt(s) = [8.59864057]
bas 10, expnt(s) = [0.49084947]
CPU time:       117.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549491e+04 3.98409709e+03 2.23216168e+03 8.20463491e+02
 4.57763971e+02 2.50032366e+02 1.21910477e+02 9.26927566e+01
 3.76240236e+01 3.83807938e+01 4.74128871e+00 8.11778090e+00
 3.91198200e-01 1.24971983e+00 8.59864057e+00 4.29557827e+01
 4.90849468e-01 1.19858765e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972239422754
cond(S) = 42.978918925682926
E1 = -688.6351388305616  E_coul = 184.91527231768032
init E= -503.719866512881
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901907173158  LUMO = 85.2083551687953
  mo_energy =
[-1.21646280e+02 -1.32807975e+01 -7.62161195e+00 -7.62161195e+00
 -7.62161195e+00 -1.65067754e+00 -6.80901907e-01 -6.80901907e-01
 -6.80901907e-01  8.52083552e+01  6.78671112e+02  3.94759492e+03
  3.15207298e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5750011455046  E_coul = 198.94491162976755
cycle= 1 E= -507.630089515737  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238578  1.        ]
  HOMO = -0.236279707038281  LUMO = 86.5414664943571
  mo_energy =
[-1.20258506e+02 -1.22527140e+01 -6.65309502e+00 -6.65309502e+00
 -6.65309502e+00 -1.16345514e+00 -2.36279707e-01 -2.36279707e-01
 -2.36279707e-01  8.65414665e+01  6.80041293e+02  3.94884499e+03
  3.15218104e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436444739389  E_coul = 198.91312811133466
cycle= 2 E= -507.630516362604  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503192
diis-c [-2.52353916e-05 -7.72650995e-04  1.00077265e+00]
  HOMO = -0.236454435663148  LUMO = 86.5379518387343
  mo_energy =
[-1.20267130e+02 -1.22538996e+01 -6.65493132e+00 -6.65493132e+00
 -6.65493132e+00 -1.16351972e+00 -2.36454436e-01 -2.36454436e-01
 -2.36454436e-01  8.65379518e+01  6.80030718e+02  3.94882911e+03
  3.15217911e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432057205251  E_coul = 198.91268924830558
cycle= 3 E= -507.630516472219  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125064
diis-c [-3.74341181e-10  3.85681624e-05 -2.52132172e-02  1.02517465e+00]
  HOMO = -0.23645659125954  LUMO = 86.5379082626568
  mo_energy =
[-1.20267240e+02 -1.22539150e+01 -6.65495768e+00 -6.65495768e+00
 -6.65495768e+00 -1.16352036e+00 -2.36456591e-01 -2.36456591e-01
 -2.36456591e-01  8.65379083e+01  6.80030604e+02  3.94882897e+03
  3.15217909e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431986351106  E_coul = 198.91268216285235
cycle= 4 E= -507.630516472258  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431986351106  E_coul = 198.91268216285235
  HOMO = -0.236456575846379  LUMO = 86.5379085835623
  mo_energy =
[-1.20267240e+02 -1.22539149e+01 -6.65495752e+00 -6.65495752e+00
 -6.65495752e+00 -1.16352035e+00 -2.36456576e-01 -2.36456576e-01
 -2.36456576e-01  8.65379086e+01  6.80030605e+02  3.94882897e+03
  3.15217909e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431986699645  E_coul = 198.91268219770652
Extra cycle  E= -507.630516472258  delta_E= 3.41e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549491e+04 2.23216168e+03
 4.57763971e+02 1.21910477e+02 3.76240236e+01 4.74128871e+00
 3.91198200e-01 8.59864057e+00 4.90849468e-01]
E = -507.6305164722579
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:48 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999974        1
[INPUT] 0    0    [1    /1   ]  18354.9491208        1
[INPUT] 0    0    [1    /1   ]  2232.16168277        1
[INPUT] 0    0    [1    /1   ]  457.763971137        1
[INPUT] 0    0    [1    /1   ]  121.910477217        1
[INPUT] 0    0    [1    /1   ]  37.6240235938        1
[INPUT] 0    0    [1    /1   ]  4.74128871439        1
[INPUT] 0    0    [1    /1   ]  0.391198200149       1
[INPUT] 1    0    [1    /1   ]  8.59864056522        1
[INPUT] 1    0    [1    /1   ]  0.490849467854       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995474, 1.0]], [0, [799999.9999738832, 1.0]], [0, [18354.949120800586, 1.0]], [0, [2232.1616827712805, 1.0]], [0, [457.7639711372317, 1.0]], [0, [121.91047721682557, 1.0]], [0, [37.624023593757784, 1.0]], [0, [4.741288714394642, 1.0]], [0, [0.3911982001486769, 1.0]], [1, [8.59864056521918, 1.0]], [1, [0.4908494678537182, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999955]
bas 1, expnt(s) = [799999.99997388]
bas 2, expnt(s) = [18354.9491208]
bas 3, expnt(s) = [2232.16168277]
bas 4, expnt(s) = [457.76397114]
bas 5, expnt(s) = [121.91047722]
bas 6, expnt(s) = [37.62402359]
bas 7, expnt(s) = [4.74128871]
bas 8, expnt(s) = [0.3911982]
bas 9, expnt(s) = [8.59864057]
bas 10, expnt(s) = [0.49084947]
CPU time:       118.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549491e+04 3.98409709e+03 2.23216168e+03 8.20463491e+02
 4.57763971e+02 2.50032366e+02 1.21910477e+02 9.26927566e+01
 3.76240236e+01 3.83807938e+01 4.74128871e+00 8.11778090e+00
 3.91198200e-01 1.24971983e+00 8.59864057e+00 4.29557827e+01
 4.90849468e-01 1.19858765e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972239422754
cond(S) = 42.978918925682926
E1 = -688.6351388305616  E_coul = 184.91527231768032
init E= -503.719866512881
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901907173158  LUMO = 85.2083551687953
  mo_energy =
[-1.21646280e+02 -1.32807975e+01 -7.62161195e+00 -7.62161195e+00
 -7.62161195e+00 -1.65067754e+00 -6.80901907e-01 -6.80901907e-01
 -6.80901907e-01  8.52083552e+01  6.78671112e+02  3.94759492e+03
  3.15207298e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5750011455046  E_coul = 198.94491162976755
cycle= 1 E= -507.630089515737  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238578  1.        ]
  HOMO = -0.236279707038281  LUMO = 86.5414664943571
  mo_energy =
[-1.20258506e+02 -1.22527140e+01 -6.65309502e+00 -6.65309502e+00
 -6.65309502e+00 -1.16345514e+00 -2.36279707e-01 -2.36279707e-01
 -2.36279707e-01  8.65414665e+01  6.80041293e+02  3.94884499e+03
  3.15218104e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436444739389  E_coul = 198.91312811133466
cycle= 2 E= -507.630516362604  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503192
diis-c [-2.52353916e-05 -7.72650995e-04  1.00077265e+00]
  HOMO = -0.236454435663148  LUMO = 86.5379518387343
  mo_energy =
[-1.20267130e+02 -1.22538996e+01 -6.65493132e+00 -6.65493132e+00
 -6.65493132e+00 -1.16351972e+00 -2.36454436e-01 -2.36454436e-01
 -2.36454436e-01  8.65379518e+01  6.80030718e+02  3.94882911e+03
  3.15217911e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432057205251  E_coul = 198.91268924830558
cycle= 3 E= -507.630516472219  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125064
diis-c [-3.74341181e-10  3.85681624e-05 -2.52132172e-02  1.02517465e+00]
  HOMO = -0.23645659125954  LUMO = 86.5379082626568
  mo_energy =
[-1.20267240e+02 -1.22539150e+01 -6.65495768e+00 -6.65495768e+00
 -6.65495768e+00 -1.16352036e+00 -2.36456591e-01 -2.36456591e-01
 -2.36456591e-01  8.65379083e+01  6.80030604e+02  3.94882897e+03
  3.15217909e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431986351106  E_coul = 198.91268216285235
cycle= 4 E= -507.630516472258  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431986351106  E_coul = 198.91268216285235
  HOMO = -0.236456575846379  LUMO = 86.5379085835623
  mo_energy =
[-1.20267240e+02 -1.22539149e+01 -6.65495752e+00 -6.65495752e+00
 -6.65495752e+00 -1.16352035e+00 -2.36456576e-01 -2.36456576e-01
 -2.36456576e-01  8.65379086e+01  6.80030605e+02  3.94882897e+03
  3.15217909e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431986699645  E_coul = 198.91268219770652
Extra cycle  E= -507.630516472258  delta_E= 3.41e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.978918925682926
E1 = -706.5431986699645  E_coul = 198.91268219770652
init E= -507.630516472258
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.23645657566693  LUMO = 86.5379085874735
  mo_energy =
[-1.20267240e+02 -1.22539149e+01 -6.65495752e+00 -6.65495752e+00
 -6.65495752e+00 -1.16352035e+00 -2.36456576e-01 -2.36456576e-01
 -2.36456576e-01  8.65379086e+01  6.80030605e+02  3.94882897e+03
  3.15217909e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431986704892  E_coul = 198.91268219823107
cycle= 1 E= -507.630516472258  delta_E= -2.27e-13  |g|= 1.22e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431986704892  E_coul = 198.91268219823107
  HOMO = -0.236456575664412  LUMO = 86.5379085875286
  mo_energy =
[-1.20267240e+02 -1.22539149e+01 -6.65495752e+00 -6.65495752e+00
 -6.65495752e+00 -1.16352035e+00 -2.36456576e-01 -2.36456576e-01
 -2.36456576e-01  8.65379086e+01  6.80030605e+02  3.94882897e+03
  3.15217909e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431986704986  E_coul = 198.9126821982401
Extra cycle  E= -507.630516472258  delta_E= -3.41e-13  |g|= 2.1e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549491e+04 2.23216168e+03
 4.57763971e+02 1.21910477e+02 3.76240236e+01 4.74128871e+00
 3.91198200e-01 8.59864057e+00 4.90849468e-01]
grad_E = [ 1.58649639e-10  9.14435601e-09  4.38594835e-06 -1.44826083e-06
  1.75387290e-06  4.26930050e-06  1.37118668e-06  1.19960664e-06
 -1.00602622e-06 -7.22014178e-07  9.73981457e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999974        1
[INPUT] 0    0    [1    /1   ]  18354.9492324        1
[INPUT] 0    0    [1    /1   ]  2232.16164029        1
[INPUT] 0    0    [1    /1   ]  457.764103416        1
[INPUT] 0    0    [1    /1   ]  121.910298679        1
[INPUT] 0    0    [1    /1   ]  37.623953246         1
[INPUT] 0    0    [1    /1   ]  4.74128915505        1
[INPUT] 0    0    [1    /1   ]  0.391198174321       1
[INPUT] 1    0    [1    /1   ]  8.59864037589        1
[INPUT] 1    0    [1    /1   ]  0.490849470484       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995516, 1.0]], [0, [799999.9999741156, 1.0]], [0, [18354.94923239094, 1.0]], [0, [2232.161640285773, 1.0]], [0, [457.764103415987, 1.0]], [0, [121.91029867884406, 1.0]], [0, [37.623953246011396, 1.0]], [0, [4.741289155052952, 1.0]], [0, [0.3911981743207506, 1.0]], [1, [8.59864037589005, 1.0]], [1, [0.4908494704843085, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999955]
bas 1, expnt(s) = [799999.99997412]
bas 2, expnt(s) = [18354.94923239]
bas 3, expnt(s) = [2232.16164029]
bas 4, expnt(s) = [457.76410342]
bas 5, expnt(s) = [121.91029868]
bas 6, expnt(s) = [37.62395325]
bas 7, expnt(s) = [4.74128916]
bas 8, expnt(s) = [0.39119817]
bas 9, expnt(s) = [8.59864038]
bas 10, expnt(s) = [0.49084947]
CPU time:       122.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549492e+04 3.98409710e+03 2.23216164e+03 8.20463480e+02
 4.57764103e+02 2.50032420e+02 1.21910299e+02 9.26926548e+01
 3.76239532e+01 3.83807400e+01 4.74128916e+00 8.11778147e+00
 3.91198174e-01 1.24971977e+00 8.59864038e+00 4.29557815e+01
 4.90849470e-01 1.19858766e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972237497637
cond(S) = 42.978822156027455
E1 = -688.6351392311733  E_coul = 184.9152713122812
init E= -503.719867918892
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901911750498  LUMO = 85.2081322855563
  mo_energy =
[-1.21646280e+02 -1.32807974e+01 -7.62161202e+00 -7.62161202e+00
 -7.62161202e+00 -1.65067754e+00 -6.80901912e-01 -6.80901912e-01
 -6.80901912e-01  8.52081323e+01  6.78670474e+02  3.94759439e+03
  3.15207295e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5750000229558  E_coul = 198.94491050878156
cycle= 1 E= -507.630089514174  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238565  1.        ]
  HOMO = -0.236279711673351  LUMO = 86.541243314667
  mo_energy =
[-1.20258506e+02 -1.22527140e+01 -6.65309510e+00 -6.65309510e+00
 -6.65309510e+00 -1.16345514e+00 -2.36279712e-01 -2.36279712e-01
 -2.36279712e-01  8.65412433e+01  6.80040656e+02  3.94884447e+03
  3.15218101e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.543643232799  E_coul = 198.91312687013368
cycle= 2 E= -507.630516362665  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503193
diis-c [-2.52354996e-05 -7.72635567e-04  1.00077264e+00]
  HOMO = -0.236454441074977  LUMO = 86.5377286504083
  mo_energy =
[-1.20267130e+02 -1.22538995e+01 -6.65493140e+00 -6.65493140e+00
 -6.65493140e+00 -1.16351972e+00 -2.36454441e-01 -2.36454441e-01
 -2.36454441e-01  8.65377287e+01  6.80030080e+02  3.94882858e+03
  3.15217908e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432044770848  E_coul = 198.91268800480407
cycle= 3 E= -507.630516472281  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125064
diis-c [-3.74344914e-10  3.85680215e-05 -2.52132618e-02  1.02517469e+00]
  HOMO = -0.236456596686828  LUMO = 86.5376850740814
  mo_energy =
[-1.20267241e+02 -1.22539149e+01 -6.65495776e+00 -6.65495776e+00
 -6.65495776e+00 -1.16352036e+00 -2.36456597e-01 -2.36456597e-01
 -2.36456597e-01  8.65376851e+01  6.80029967e+02  3.94882844e+03
  3.15217906e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431973916149  E_coul = 198.9126809192955
cycle= 4 E= -507.630516472319  delta_E= -3.86e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431973916149  E_coul = 198.9126809192955
  HOMO = -0.236456581273519  LUMO = 86.5376853949891
  mo_energy =
[-1.20267240e+02 -1.22539148e+01 -6.65495761e+00 -6.65495761e+00
 -6.65495761e+00 -1.16352035e+00 -2.36456581e-01 -2.36456581e-01
 -2.36456581e-01  8.65376854e+01  6.80029968e+02  3.94882844e+03
  3.15217906e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431974264698  E_coul = 198.91268095415003
Extra cycle  E= -507.63051647232  delta_E= -3.98e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549492e+04 2.23216164e+03
 4.57764103e+02 1.21910299e+02 3.76239532e+01 4.74128916e+00
 3.91198174e-01 8.59864038e+00 4.90849470e-01]
E = -507.63051647231975
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999974        1
[INPUT] 0    0    [1    /1   ]  18354.9492324        1
[INPUT] 0    0    [1    /1   ]  2232.16164029        1
[INPUT] 0    0    [1    /1   ]  457.764103416        1
[INPUT] 0    0    [1    /1   ]  121.910298679        1
[INPUT] 0    0    [1    /1   ]  37.623953246         1
[INPUT] 0    0    [1    /1   ]  4.74128915505        1
[INPUT] 0    0    [1    /1   ]  0.391198174321       1
[INPUT] 1    0    [1    /1   ]  8.59864037589        1
[INPUT] 1    0    [1    /1   ]  0.490849470484       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995516, 1.0]], [0, [799999.9999741156, 1.0]], [0, [18354.94923239094, 1.0]], [0, [2232.161640285773, 1.0]], [0, [457.764103415987, 1.0]], [0, [121.91029867884406, 1.0]], [0, [37.623953246011396, 1.0]], [0, [4.741289155052952, 1.0]], [0, [0.3911981743207506, 1.0]], [1, [8.59864037589005, 1.0]], [1, [0.4908494704843085, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999955]
bas 1, expnt(s) = [799999.99997412]
bas 2, expnt(s) = [18354.94923239]
bas 3, expnt(s) = [2232.16164029]
bas 4, expnt(s) = [457.76410342]
bas 5, expnt(s) = [121.91029868]
bas 6, expnt(s) = [37.62395325]
bas 7, expnt(s) = [4.74128916]
bas 8, expnt(s) = [0.39119817]
bas 9, expnt(s) = [8.59864038]
bas 10, expnt(s) = [0.49084947]
CPU time:       122.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549492e+04 3.98409710e+03 2.23216164e+03 8.20463480e+02
 4.57764103e+02 2.50032420e+02 1.21910299e+02 9.26926548e+01
 3.76239532e+01 3.83807400e+01 4.74128916e+00 8.11778147e+00
 3.91198174e-01 1.24971977e+00 8.59864038e+00 4.29557815e+01
 4.90849470e-01 1.19858766e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972237497637
cond(S) = 42.978822156027455
E1 = -688.6351392311733  E_coul = 184.9152713122812
init E= -503.719867918892
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901911750498  LUMO = 85.2081322855563
  mo_energy =
[-1.21646280e+02 -1.32807974e+01 -7.62161202e+00 -7.62161202e+00
 -7.62161202e+00 -1.65067754e+00 -6.80901912e-01 -6.80901912e-01
 -6.80901912e-01  8.52081323e+01  6.78670474e+02  3.94759439e+03
  3.15207295e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5750000229558  E_coul = 198.94491050878156
cycle= 1 E= -507.630089514174  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238565  1.        ]
  HOMO = -0.236279711673351  LUMO = 86.541243314667
  mo_energy =
[-1.20258506e+02 -1.22527140e+01 -6.65309510e+00 -6.65309510e+00
 -6.65309510e+00 -1.16345514e+00 -2.36279712e-01 -2.36279712e-01
 -2.36279712e-01  8.65412433e+01  6.80040656e+02  3.94884447e+03
  3.15218101e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.543643232799  E_coul = 198.91312687013368
cycle= 2 E= -507.630516362665  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503193
diis-c [-2.52354996e-05 -7.72635567e-04  1.00077264e+00]
  HOMO = -0.236454441074977  LUMO = 86.5377286504083
  mo_energy =
[-1.20267130e+02 -1.22538995e+01 -6.65493140e+00 -6.65493140e+00
 -6.65493140e+00 -1.16351972e+00 -2.36454441e-01 -2.36454441e-01
 -2.36454441e-01  8.65377287e+01  6.80030080e+02  3.94882858e+03
  3.15217908e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432044770848  E_coul = 198.91268800480407
cycle= 3 E= -507.630516472281  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125064
diis-c [-3.74344914e-10  3.85680215e-05 -2.52132618e-02  1.02517469e+00]
  HOMO = -0.236456596686828  LUMO = 86.5376850740814
  mo_energy =
[-1.20267241e+02 -1.22539149e+01 -6.65495776e+00 -6.65495776e+00
 -6.65495776e+00 -1.16352036e+00 -2.36456597e-01 -2.36456597e-01
 -2.36456597e-01  8.65376851e+01  6.80029967e+02  3.94882844e+03
  3.15217906e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431973916149  E_coul = 198.9126809192955
cycle= 4 E= -507.630516472319  delta_E= -3.86e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431973916149  E_coul = 198.9126809192955
  HOMO = -0.236456581273519  LUMO = 86.5376853949891
  mo_energy =
[-1.20267240e+02 -1.22539148e+01 -6.65495761e+00 -6.65495761e+00
 -6.65495761e+00 -1.16352035e+00 -2.36456581e-01 -2.36456581e-01
 -2.36456581e-01  8.65376854e+01  6.80029968e+02  3.94882844e+03
  3.15217906e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431974264698  E_coul = 198.91268095415003
Extra cycle  E= -507.63051647232  delta_E= -3.98e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.978822156027455
E1 = -706.5431974264698  E_coul = 198.91268095415003
init E= -507.63051647232
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456581094067  LUMO = 86.5376853988987
  mo_energy =
[-1.20267240e+02 -1.22539148e+01 -6.65495761e+00 -6.65495761e+00
 -6.65495761e+00 -1.16352035e+00 -2.36456581e-01 -2.36456581e-01
 -2.36456581e-01  8.65376854e+01  6.80029968e+02  3.94882844e+03
  3.15217906e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431974269945  E_coul = 198.91268095467476
cycle= 1 E= -507.63051647232  delta_E=    0  |g|= 1.44e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431974269945  E_coul = 198.91268095467476
  HOMO = -0.236456581091544  LUMO = 86.5376853989543
  mo_energy =
[-1.20267240e+02 -1.22539148e+01 -6.65495761e+00 -6.65495761e+00
 -6.65495761e+00 -1.16352035e+00 -2.36456581e-01 -2.36456581e-01
 -2.36456581e-01  8.65376854e+01  6.80029968e+02  3.94882844e+03
  3.15217906e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431974270032  E_coul = 198.9126809546836
Extra cycle  E= -507.63051647232  delta_E= 1.71e-13  |g|= 3.88e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549492e+04 2.23216164e+03
 4.57764103e+02 1.21910299e+02 3.76239532e+01 4.74128916e+00
 3.91198174e-01 8.59864038e+00 4.90849470e-01]
grad_E = [ 1.58649542e-10  9.14435226e-09  4.38597287e-06 -1.45016985e-06
  1.78243230e-06  4.19649566e-06  1.22703618e-06  1.49529825e-06
 -1.25495335e-06 -9.01497579e-07  1.21607002e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999974        1
[INPUT] 0    0    [1    /1   ]  18354.9493405        1
[INPUT] 0    0    [1    /1   ]  2232.16159876        1
[INPUT] 0    0    [1    /1   ]  457.764237429        1
[INPUT] 0    0    [1    /1   ]  121.910106099        1
[INPUT] 0    0    [1    /1   ]  37.6238798525        1
[INPUT] 0    0    [1    /1   ]  4.74128925279        1
[INPUT] 0    0    [1    /1   ]  0.391198160068       1
[INPUT] 1    0    [1    /1   ]  8.59864039688        1
[INPUT] 1    0    [1    /1   ]  0.490849473316       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995553, 1.0]], [0, [799999.9999743408, 1.0]], [0, [18354.9493404737, 1.0]], [0, [2232.1615987579457, 1.0]], [0, [457.764237428813, 1.0]], [0, [121.91010609874652, 1.0]], [0, [37.62387985249353, 1.0]], [0, [4.741289252788747, 1.0]], [0, [0.3911981600681249, 1.0]], [1, [8.598640396879558, 1.0]], [1, [0.49084947331551615, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.99997434]
bas 2, expnt(s) = [18354.94934047]
bas 3, expnt(s) = [2232.16159876]
bas 4, expnt(s) = [457.76423743]
bas 5, expnt(s) = [121.9101061]
bas 6, expnt(s) = [37.62387985]
bas 7, expnt(s) = [4.74128925]
bas 8, expnt(s) = [0.39119816]
bas 9, expnt(s) = [8.5986404]
bas 10, expnt(s) = [0.49084947]
CPU time:       126.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549493e+04 3.98409712e+03 2.23216160e+03 8.20463468e+02
 4.57764237e+02 2.50032475e+02 1.21910106e+02 9.26925449e+01
 3.76238799e+01 3.83806838e+01 4.74128925e+00 8.11778159e+00
 3.91198160e-01 1.24971973e+00 8.59864040e+00 4.29557816e+01
 4.90849473e-01 1.19858767e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972238535794
cond(S) = 42.978720782271765
E1 = -688.6351403351092  E_coul = 184.91527104855376
init E= -503.719869286555
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901914299092  LUMO = 85.2078955768036
  mo_energy =
[-1.21646280e+02 -1.32807973e+01 -7.62161205e+00 -7.62161205e+00
 -7.62161205e+00 -1.65067752e+00 -6.80901914e-01 -6.80901914e-01
 -6.80901914e-01  8.52078956e+01  6.78669788e+02  3.94759381e+03
  3.15207292e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749993842614  E_coul = 198.94490987183747
cycle= 1 E= -507.630089512424  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238553  1.        ]
  HOMO = -0.236279716134166  LUMO = 86.5410062690671
  mo_energy =
[-1.20258507e+02 -1.22527138e+01 -6.65309514e+00 -6.65309514e+00
 -6.65309514e+00 -1.16345513e+00 -2.36279716e-01 -2.36279716e-01
 -2.36279716e-01  8.65410063e+01  6.80039969e+02  3.94884388e+03
  3.15218098e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436424637559  E_coul = 198.91312610098188
cycle= 2 E= -507.630516362774  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503195
diis-c [-2.52356257e-05 -7.72620795e-04  1.00077262e+00]
  HOMO = -0.236454446386013  LUMO = 86.5374915951869
  mo_energy =
[-1.20267131e+02 -1.22538994e+01 -6.65493146e+00 -6.65493146e+00
 -6.65493146e+00 -1.16351971e+00 -2.36454446e-01 -2.36454446e-01
 -2.36454446e-01  8.65374916e+01  6.80029394e+02  3.94882800e+03
  3.15217904e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432037055236  E_coul = 198.91268723313325
cycle= 3 E= -507.63051647239  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125065
diis-c [-3.74349182e-10  3.85678503e-05 -2.52133074e-02  1.02517474e+00]
  HOMO = -0.236456602014385  LUMO = 86.5374480185938
  mo_energy =
[-1.20267241e+02 -1.22539148e+01 -6.65495781e+00 -6.65495781e+00
 -6.65495781e+00 -1.16352035e+00 -2.36456602e-01 -2.36456602e-01
 -2.36456602e-01  8.65374480e+01  6.80029280e+02  3.94882786e+03
  3.15217903e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431966199942  E_coul = 198.912680147565
cycle= 4 E= -507.630516472429  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5431966199942  E_coul = 198.912680147565
  HOMO = -0.236456586600916  LUMO = 86.5374483395059
  mo_energy =
[-1.20267240e+02 -1.22539147e+01 -6.65495766e+00 -6.65495766e+00
 -6.65495766e+00 -1.16352034e+00 -2.36456587e-01 -2.36456587e-01
 -2.36456587e-01  8.65374483e+01  6.80029281e+02  3.94882786e+03
  3.15217903e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431966548491  E_coul = 198.91268018241985
Extra cycle  E= -507.630516472429  delta_E=    0  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549493e+04 2.23216160e+03
 4.57764237e+02 1.21910106e+02 3.76238799e+01 4.74128925e+00
 3.91198160e-01 8.59864040e+00 4.90849473e-01]
E = -507.63051647242924
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:36:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999974        1
[INPUT] 0    0    [1    /1   ]  18354.9493405        1
[INPUT] 0    0    [1    /1   ]  2232.16159876        1
[INPUT] 0    0    [1    /1   ]  457.764237429        1
[INPUT] 0    0    [1    /1   ]  121.910106099        1
[INPUT] 0    0    [1    /1   ]  37.6238798525        1
[INPUT] 0    0    [1    /1   ]  4.74128925279        1
[INPUT] 0    0    [1    /1   ]  0.391198160068       1
[INPUT] 1    0    [1    /1   ]  8.59864039688        1
[INPUT] 1    0    [1    /1   ]  0.490849473316       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995553, 1.0]], [0, [799999.9999743408, 1.0]], [0, [18354.9493404737, 1.0]], [0, [2232.1615987579457, 1.0]], [0, [457.764237428813, 1.0]], [0, [121.91010609874652, 1.0]], [0, [37.62387985249353, 1.0]], [0, [4.741289252788747, 1.0]], [0, [0.3911981600681249, 1.0]], [1, [8.598640396879558, 1.0]], [1, [0.49084947331551615, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.99997434]
bas 2, expnt(s) = [18354.94934047]
bas 3, expnt(s) = [2232.16159876]
bas 4, expnt(s) = [457.76423743]
bas 5, expnt(s) = [121.9101061]
bas 6, expnt(s) = [37.62387985]
bas 7, expnt(s) = [4.74128925]
bas 8, expnt(s) = [0.39119816]
bas 9, expnt(s) = [8.5986404]
bas 10, expnt(s) = [0.49084947]
CPU time:       127.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549493e+04 3.98409712e+03 2.23216160e+03 8.20463468e+02
 4.57764237e+02 2.50032475e+02 1.21910106e+02 9.26925449e+01
 3.76238799e+01 3.83806838e+01 4.74128925e+00 8.11778159e+00
 3.91198160e-01 1.24971973e+00 8.59864040e+00 4.29557816e+01
 4.90849473e-01 1.19858767e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972238535794
cond(S) = 42.978720782271765
E1 = -688.6351403351092  E_coul = 184.91527104855376
init E= -503.719869286555
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901914299092  LUMO = 85.2078955768036
  mo_energy =
[-1.21646280e+02 -1.32807973e+01 -7.62161205e+00 -7.62161205e+00
 -7.62161205e+00 -1.65067752e+00 -6.80901914e-01 -6.80901914e-01
 -6.80901914e-01  8.52078956e+01  6.78669788e+02  3.94759381e+03
  3.15207292e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749993842614  E_coul = 198.94490987183747
cycle= 1 E= -507.630089512424  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238553  1.        ]
  HOMO = -0.236279716134166  LUMO = 86.5410062690671
  mo_energy =
[-1.20258507e+02 -1.22527138e+01 -6.65309514e+00 -6.65309514e+00
 -6.65309514e+00 -1.16345513e+00 -2.36279716e-01 -2.36279716e-01
 -2.36279716e-01  8.65410063e+01  6.80039969e+02  3.94884388e+03
  3.15218098e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436424637559  E_coul = 198.91312610098188
cycle= 2 E= -507.630516362774  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503195
diis-c [-2.52356257e-05 -7.72620795e-04  1.00077262e+00]
  HOMO = -0.236454446386013  LUMO = 86.5374915951869
  mo_energy =
[-1.20267131e+02 -1.22538994e+01 -6.65493146e+00 -6.65493146e+00
 -6.65493146e+00 -1.16351971e+00 -2.36454446e-01 -2.36454446e-01
 -2.36454446e-01  8.65374916e+01  6.80029394e+02  3.94882800e+03
  3.15217904e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432037055236  E_coul = 198.91268723313325
cycle= 3 E= -507.63051647239  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125065
diis-c [-3.74349182e-10  3.85678503e-05 -2.52133074e-02  1.02517474e+00]
  HOMO = -0.236456602014385  LUMO = 86.5374480185938
  mo_energy =
[-1.20267241e+02 -1.22539148e+01 -6.65495781e+00 -6.65495781e+00
 -6.65495781e+00 -1.16352035e+00 -2.36456602e-01 -2.36456602e-01
 -2.36456602e-01  8.65374480e+01  6.80029280e+02  3.94882786e+03
  3.15217903e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431966199942  E_coul = 198.912680147565
cycle= 4 E= -507.630516472429  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431966199942  E_coul = 198.912680147565
  HOMO = -0.236456586600916  LUMO = 86.5374483395059
  mo_energy =
[-1.20267240e+02 -1.22539147e+01 -6.65495766e+00 -6.65495766e+00
 -6.65495766e+00 -1.16352034e+00 -2.36456587e-01 -2.36456587e-01
 -2.36456587e-01  8.65374483e+01  6.80029281e+02  3.94882786e+03
  3.15217903e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431966548491  E_coul = 198.91268018241985
Extra cycle  E= -507.630516472429  delta_E=    0  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.978720782271765
E1 = -706.5431966548491  E_coul = 198.91268018241985
init E= -507.630516472429
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456586421464  LUMO = 86.5374483434156
  mo_energy =
[-1.20267240e+02 -1.22539147e+01 -6.65495766e+00 -6.65495766e+00
 -6.65495766e+00 -1.16352034e+00 -2.36456586e-01 -2.36456586e-01
 -2.36456586e-01  8.65374483e+01  6.80029281e+02  3.94882786e+03
  3.15217903e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431966553739  E_coul = 198.91268018294457
cycle= 1 E= -507.630516472429  delta_E= -1.14e-13  |g|= 1.19e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431966553739  E_coul = 198.91268018294457
  HOMO = -0.236456586418946  LUMO = 86.5374483434715
  mo_energy =
[-1.20267240e+02 -1.22539147e+01 -6.65495766e+00 -6.65495766e+00
 -6.65495766e+00 -1.16352034e+00 -2.36456586e-01 -2.36456586e-01
 -2.36456586e-01  8.65374483e+01  6.80029281e+02  3.94882786e+03
  3.15217903e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431966553826  E_coul = 198.91268018295335
Extra cycle  E= -507.630516472429  delta_E= 5.68e-14  |g|= 2.89e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.20 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549493e+04 2.23216160e+03
 4.57764237e+02 1.21910106e+02 3.76238799e+01 4.74128925e+00
 3.91198160e-01 8.59864040e+00 4.90849473e-01]
grad_E = [ 1.58649439e-10  9.14434824e-09  4.38599903e-06 -1.45221951e-06
  1.81360543e-06  4.11142862e-06  1.09739354e-06  1.52587426e-06
 -1.28151284e-06 -9.21307262e-07  1.24266609e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:01 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9494483        1
[INPUT] 0    0    [1    /1   ]  2232.16155671        1
[INPUT] 0    0    [1    /1   ]  457.764380901        1
[INPUT] 0    0    [1    /1   ]  121.909881775        1
[INPUT] 0    0    [1    /1   ]  37.6237951751        1
[INPUT] 0    0    [1    /1   ]  4.74128932074        1
[INPUT] 0    0    [1    /1   ]  0.391198145154       1
[INPUT] 1    0    [1    /1   ]  8.59864044657        1
[INPUT] 1    0    [1    /1   ]  0.490849476588       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999559, 1.0]], [0, [799999.9999745653, 1.0]], [0, [18354.949448253297, 1.0]], [0, [2232.161556714151, 1.0]], [0, [457.76438090122923, 1.0]], [0, [121.90988177537794, 1.0]], [0, [37.62379517506991, 1.0]], [0, [4.741289320743744, 1.0]], [0, [0.39119814515373835, 1.0]], [1, [8.59864044656868, 1.0]], [1, [0.4908494765883488, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.99997457]
bas 2, expnt(s) = [18354.94944825]
bas 3, expnt(s) = [2232.16155671]
bas 4, expnt(s) = [457.7643809]
bas 5, expnt(s) = [121.90988178]
bas 6, expnt(s) = [37.62379518]
bas 7, expnt(s) = [4.74128932]
bas 8, expnt(s) = [0.39119815]
bas 9, expnt(s) = [8.59864045]
bas 10, expnt(s) = [0.49084948]
CPU time:       131.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549494e+04 3.98409714e+03 2.23216156e+03 8.20463457e+02
 4.57764381e+02 2.50032534e+02 1.21909882e+02 9.26924170e+01
 3.76237952e+01 3.83806191e+01 4.74128932e+00 8.11778168e+00
 3.91198145e-01 1.24971970e+00 8.59864045e+00 4.29557819e+01
 4.90849477e-01 1.19858768e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972240128454
cond(S) = 42.978604536337144
E1 = -688.6351416732334  E_coul = 184.91527083640432
init E= -503.719870836829
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901916947442  LUMO = 85.2076214117987
  mo_energy =
[-1.21646280e+02 -1.32807971e+01 -7.62161208e+00 -7.62161208e+00
 -7.62161208e+00 -1.65067750e+00 -6.80901917e-01 -6.80901917e-01
 -6.80901917e-01  8.52076214e+01  6.78668981e+02  3.94759310e+03
  3.15207287e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749987125128  E_coul = 198.9449092020562
cycle= 1 E= -507.630089510457  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238538  1.        ]
  HOMO = -0.23627972122735  LUMO = 86.5407317118738
  mo_energy =
[-1.20258507e+02 -1.22527137e+01 -6.65309519e+00 -6.65309519e+00
 -6.65309519e+00 -1.16345512e+00 -2.36279721e-01 -2.36279721e-01
 -2.36279721e-01  8.65407317e+01  6.80039162e+02  3.94884317e+03
  3.15218093e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436416405801  E_coul = 198.91312527760567
cycle= 2 E= -507.630516362974  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503196
diis-c [-2.52357728e-05 -7.72604031e-04  1.00077260e+00]
  HOMO = -0.236454452466806  LUMO = 86.5372170268143
  mo_energy =
[-1.20267131e+02 -1.22538993e+01 -6.65493151e+00 -6.65493151e+00
 -6.65493151e+00 -1.16351970e+00 -2.36454452e-01 -2.36454452e-01
 -2.36454452e-01  8.65372170e+01  6.80028586e+02  3.94882729e+03
  3.15217900e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432028794218  E_coul = 198.91268640682975
cycle= 3 E= -507.630516472592  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125066
diis-c [-3.74352219e-10  3.85678862e-05 -2.52133616e-02  1.02517479e+00]
  HOMO = -0.236456608114273  LUMO = 86.5371734499148
  mo_energy =
[-1.20267241e+02 -1.22539147e+01 -6.65495787e+00 -6.65495787e+00
 -6.65495787e+00 -1.16352034e+00 -2.36456608e-01 -2.36456608e-01
 -2.36456608e-01  8.65371734e+01  6.80028472e+02  3.94882715e+03
  3.15217899e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431957938234  E_coul = 198.91267932119285
cycle= 4 E= -507.630516472631  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.04 sec
E1 = -706.5431957938234  E_coul = 198.91267932119285
  HOMO = -0.236456592700657  LUMO = 86.5371737708268
  mo_energy =
[-1.20267241e+02 -1.22539146e+01 -6.65495772e+00 -6.65495772e+00
 -6.65495772e+00 -1.16352033e+00 -2.36456593e-01 -2.36456593e-01
 -2.36456593e-01  8.65371738e+01  6.80028473e+02  3.94882715e+03
  3.15217899e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431958286788  E_coul = 198.91267935604844
Extra cycle  E= -507.63051647263  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.16 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549494e+04 2.23216156e+03
 4.57764381e+02 1.21909882e+02 3.76237952e+01 4.74128932e+00
 3.91198145e-01 8.59864045e+00 4.90849477e-01]
E = -507.63051647263035
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9494483        1
[INPUT] 0    0    [1    /1   ]  2232.16155671        1
[INPUT] 0    0    [1    /1   ]  457.764380901        1
[INPUT] 0    0    [1    /1   ]  121.909881775        1
[INPUT] 0    0    [1    /1   ]  37.6237951751        1
[INPUT] 0    0    [1    /1   ]  4.74128932074        1
[INPUT] 0    0    [1    /1   ]  0.391198145154       1
[INPUT] 1    0    [1    /1   ]  8.59864044657        1
[INPUT] 1    0    [1    /1   ]  0.490849476588       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999559, 1.0]], [0, [799999.9999745653, 1.0]], [0, [18354.949448253297, 1.0]], [0, [2232.161556714151, 1.0]], [0, [457.76438090122923, 1.0]], [0, [121.90988177537794, 1.0]], [0, [37.62379517506991, 1.0]], [0, [4.741289320743744, 1.0]], [0, [0.39119814515373835, 1.0]], [1, [8.59864044656868, 1.0]], [1, [0.4908494765883488, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.99997457]
bas 2, expnt(s) = [18354.94944825]
bas 3, expnt(s) = [2232.16155671]
bas 4, expnt(s) = [457.7643809]
bas 5, expnt(s) = [121.90988178]
bas 6, expnt(s) = [37.62379518]
bas 7, expnt(s) = [4.74128932]
bas 8, expnt(s) = [0.39119815]
bas 9, expnt(s) = [8.59864045]
bas 10, expnt(s) = [0.49084948]
CPU time:       132.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549494e+04 3.98409714e+03 2.23216156e+03 8.20463457e+02
 4.57764381e+02 2.50032534e+02 1.21909882e+02 9.26924170e+01
 3.76237952e+01 3.83806191e+01 4.74128932e+00 8.11778168e+00
 3.91198145e-01 1.24971970e+00 8.59864045e+00 4.29557819e+01
 4.90849477e-01 1.19858768e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972240128454
cond(S) = 42.978604536337144
E1 = -688.6351416732334  E_coul = 184.91527083640432
init E= -503.719870836829
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901916947442  LUMO = 85.2076214117987
  mo_energy =
[-1.21646280e+02 -1.32807971e+01 -7.62161208e+00 -7.62161208e+00
 -7.62161208e+00 -1.65067750e+00 -6.80901917e-01 -6.80901917e-01
 -6.80901917e-01  8.52076214e+01  6.78668981e+02  3.94759310e+03
  3.15207287e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749987125128  E_coul = 198.9449092020562
cycle= 1 E= -507.630089510457  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238538  1.        ]
  HOMO = -0.23627972122735  LUMO = 86.5407317118738
  mo_energy =
[-1.20258507e+02 -1.22527137e+01 -6.65309519e+00 -6.65309519e+00
 -6.65309519e+00 -1.16345512e+00 -2.36279721e-01 -2.36279721e-01
 -2.36279721e-01  8.65407317e+01  6.80039162e+02  3.94884317e+03
  3.15218093e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436416405801  E_coul = 198.91312527760567
cycle= 2 E= -507.630516362974  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503196
diis-c [-2.52357728e-05 -7.72604031e-04  1.00077260e+00]
  HOMO = -0.236454452466806  LUMO = 86.5372170268143
  mo_energy =
[-1.20267131e+02 -1.22538993e+01 -6.65493151e+00 -6.65493151e+00
 -6.65493151e+00 -1.16351970e+00 -2.36454452e-01 -2.36454452e-01
 -2.36454452e-01  8.65372170e+01  6.80028586e+02  3.94882729e+03
  3.15217900e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432028794218  E_coul = 198.91268640682975
cycle= 3 E= -507.630516472592  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125066
diis-c [-3.74352219e-10  3.85678862e-05 -2.52133616e-02  1.02517479e+00]
  HOMO = -0.236456608114273  LUMO = 86.5371734499148
  mo_energy =
[-1.20267241e+02 -1.22539147e+01 -6.65495787e+00 -6.65495787e+00
 -6.65495787e+00 -1.16352034e+00 -2.36456608e-01 -2.36456608e-01
 -2.36456608e-01  8.65371734e+01  6.80028472e+02  3.94882715e+03
  3.15217899e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431957938234  E_coul = 198.91267932119285
cycle= 4 E= -507.630516472631  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431957938234  E_coul = 198.91267932119285
  HOMO = -0.236456592700657  LUMO = 86.5371737708268
  mo_energy =
[-1.20267241e+02 -1.22539146e+01 -6.65495772e+00 -6.65495772e+00
 -6.65495772e+00 -1.16352033e+00 -2.36456593e-01 -2.36456593e-01
 -2.36456593e-01  8.65371738e+01  6.80028473e+02  3.94882715e+03
  3.15217899e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431958286788  E_coul = 198.91267935604844
Extra cycle  E= -507.63051647263  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.978604536337144
E1 = -706.5431958286788  E_coul = 198.91267935604844
init E= -507.63051647263
    CPU time for initialize scf      0.10 sec, wall time      0.11 sec
  HOMO = -0.236456592521195  LUMO = 86.5371737747369
  mo_energy =
[-1.20267241e+02 -1.22539146e+01 -6.65495772e+00 -6.65495772e+00
 -6.65495772e+00 -1.16352033e+00 -2.36456593e-01 -2.36456593e-01
 -2.36456593e-01  8.65371738e+01  6.80028473e+02  3.94882715e+03
  3.15217899e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431958292032  E_coul = 198.9126793565727
cycle= 1 E= -507.630516472631  delta_E= -1.71e-13  |g|= 1.31e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431958292032  E_coul = 198.9126793565727
  HOMO = -0.236456592518687  LUMO = 86.5371737747928
  mo_energy =
[-1.20267241e+02 -1.22539146e+01 -6.65495772e+00 -6.65495772e+00
 -6.65495772e+00 -1.16352033e+00 -2.36456593e-01 -2.36456593e-01
 -2.36456593e-01  8.65371738e+01  6.80028473e+02  3.94882715e+03
  3.15217899e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431958292123  E_coul = 198.91267935658186
Extra cycle  E= -507.63051647263  delta_E= 5.68e-14  |g|= 4.47e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.20 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549494e+04 2.23216156e+03
 4.57764381e+02 1.21909882e+02 3.76237952e+01 4.74128932e+00
 3.91198145e-01 8.59864045e+00 4.90849477e-01]
grad_E = [ 1.58649323e-10  9.14434370e-09  4.38602858e-06 -1.45454571e-06
  1.84934773e-06  4.01274806e-06  9.51198403e-07  1.52852569e-06
 -1.28478246e-06 -9.24488759e-07  1.24680997e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:06 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9495603        1
[INPUT] 0    0    [1    /1   ]  2232.16151187        1
[INPUT] 0    0    [1    /1   ]  457.76454768         1
[INPUT] 0    0    [1    /1   ]  121.909590761        1
[INPUT] 0    0    [1    /1   ]  37.6236862302        1
[INPUT] 0    0    [1    /1   ]  4.74128939926        1
[INPUT] 0    0    [1    /1   ]  0.391198126209       1
[INPUT] 1    0    [1    /1   ]  8.59864051326        1
[INPUT] 1    0    [1    /1   ]  0.490849480794       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999563, 1.0]], [0, [799999.9999747988, 1.0]], [0, [18354.949560292283, 1.0]], [0, [2232.1615118744944, 1.0]], [0, [457.76454767992806, 1.0]], [0, [121.90959076097974, 1.0]], [0, [37.62368623016614, 1.0]], [0, [4.741289399258338, 1.0]], [0, [0.3911981262089206, 1.0]], [1, [8.598640513259221, 1.0]], [1, [0.4908494807937208, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.9999748]
bas 2, expnt(s) = [18354.94956029]
bas 3, expnt(s) = [2232.16151187]
bas 4, expnt(s) = [457.76454768]
bas 5, expnt(s) = [121.90959076]
bas 6, expnt(s) = [37.62368623]
bas 7, expnt(s) = [4.7412894]
bas 8, expnt(s) = [0.39119813]
bas 9, expnt(s) = [8.59864051]
bas 10, expnt(s) = [0.49084948]
CPU time:       136.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549496e+04 3.98409716e+03 2.23216151e+03 8.20463444e+02
 4.57764548e+02 2.50032602e+02 1.21909591e+02 9.26922511e+01
 3.76236862e+01 3.83805357e+01 4.74128940e+00 8.11778178e+00
 3.91198126e-01 1.24971965e+00 8.59864051e+00 4.29557824e+01
 4.90849481e-01 1.19858769e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972242282436
cond(S) = 42.97845623765814
E1 = -688.6351433776772  E_coul = 184.91527057435255
init E= -503.719872803325
    CPU time for initialize scf      0.04 sec, wall time      0.05 sec
  HOMO = -0.680901920272708  LUMO = 85.2072676645159
  mo_energy =
[-1.21646281e+02 -1.32807969e+01 -7.62161212e+00 -7.62161212e+00
 -7.62161212e+00 -1.65067747e+00 -6.80901920e-01 -6.80901920e-01
 -6.80901920e-01  8.52072677e+01  6.78667921e+02  3.94759213e+03
  3.15207281e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749978600292  E_coul = 198.9449083519982
cycle= 1 E= -507.630089508031  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238519  1.        ]
  HOMO = -0.236279727759773  LUMO = 86.5403774590866
  mo_energy =
[-1.20258507e+02 -1.22527135e+01 -6.65309525e+00 -6.65309525e+00
 -6.65309525e+00 -1.16345510e+00 -2.36279728e-01 -2.36279728e-01
 -2.36279728e-01  8.65403775e+01  6.80038102e+02  3.94884221e+03
  3.15218087e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436405927472  E_coul = 198.9131242293999
cycle= 2 E= -507.630516363347  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503198
diis-c [-2.52359623e-05 -7.72582242e-04  1.00077258e+00]
  HOMO = -0.236454460273653  LUMO = 86.5368627596207
  mo_energy =
[-1.20267131e+02 -1.22538991e+01 -6.65493159e+00 -6.65493159e+00
 -6.65493159e+00 -1.16351969e+00 -2.36454460e-01 -2.36454460e-01
 -2.36454460e-01  8.65368628e+01  6.80027526e+02  3.94882632e+03
  3.15217894e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432018278124  E_coul = 198.91268535484645
cycle= 3 E= -507.630516472966  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125066
diis-c [-3.74358306e-10  3.85676546e-05 -2.52134291e-02  1.02517486e+00]
  HOMO = -0.236456615945839  LUMO = 86.5368191823237
  mo_energy =
[-1.20267242e+02 -1.22539145e+01 -6.65495795e+00 -6.65495795e+00
 -6.65495795e+00 -1.16352032e+00 -2.36456616e-01 -2.36456616e-01
 -2.36456616e-01  8.65368192e+01  6.80027412e+02  3.94882618e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431947421249  E_coul = 198.91267826912048
cycle= 4 E= -507.630516473004  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431947421249  E_coul = 198.91267826912048
  HOMO = -0.236456600531998  LUMO = 86.5368195032395
  mo_energy =
[-1.20267241e+02 -1.22539144e+01 -6.65495780e+00 -6.65495780e+00
 -6.65495780e+00 -1.16352032e+00 -2.36456601e-01 -2.36456601e-01
 -2.36456601e-01  8.65368195e+01  6.80027413e+02  3.94882618e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431947769806  E_coul = 198.9126783039764
Extra cycle  E= -507.630516473004  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.17 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549496e+04 2.23216151e+03
 4.57764548e+02 1.21909591e+02 3.76236862e+01 4.74128940e+00
 3.91198126e-01 8.59864051e+00 4.90849481e-01]
E = -507.6305164730042
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:07 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9495603        1
[INPUT] 0    0    [1    /1   ]  2232.16151187        1
[INPUT] 0    0    [1    /1   ]  457.76454768         1
[INPUT] 0    0    [1    /1   ]  121.909590761        1
[INPUT] 0    0    [1    /1   ]  37.6236862302        1
[INPUT] 0    0    [1    /1   ]  4.74128939926        1
[INPUT] 0    0    [1    /1   ]  0.391198126209       1
[INPUT] 1    0    [1    /1   ]  8.59864051326        1
[INPUT] 1    0    [1    /1   ]  0.490849480794       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999563, 1.0]], [0, [799999.9999747988, 1.0]], [0, [18354.949560292283, 1.0]], [0, [2232.1615118744944, 1.0]], [0, [457.76454767992806, 1.0]], [0, [121.90959076097974, 1.0]], [0, [37.62368623016614, 1.0]], [0, [4.741289399258338, 1.0]], [0, [0.3911981262089206, 1.0]], [1, [8.598640513259221, 1.0]], [1, [0.4908494807937208, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.9999748]
bas 2, expnt(s) = [18354.94956029]
bas 3, expnt(s) = [2232.16151187]
bas 4, expnt(s) = [457.76454768]
bas 5, expnt(s) = [121.90959076]
bas 6, expnt(s) = [37.62368623]
bas 7, expnt(s) = [4.7412894]
bas 8, expnt(s) = [0.39119813]
bas 9, expnt(s) = [8.59864051]
bas 10, expnt(s) = [0.49084948]
CPU time:       137.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549496e+04 3.98409716e+03 2.23216151e+03 8.20463444e+02
 4.57764548e+02 2.50032602e+02 1.21909591e+02 9.26922511e+01
 3.76236862e+01 3.83805357e+01 4.74128940e+00 8.11778178e+00
 3.91198126e-01 1.24971965e+00 8.59864051e+00 4.29557824e+01
 4.90849481e-01 1.19858769e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972242282436
cond(S) = 42.97845623765814
E1 = -688.6351433776772  E_coul = 184.91527057435255
init E= -503.719872803325
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680901920272708  LUMO = 85.2072676645159
  mo_energy =
[-1.21646281e+02 -1.32807969e+01 -7.62161212e+00 -7.62161212e+00
 -7.62161212e+00 -1.65067747e+00 -6.80901920e-01 -6.80901920e-01
 -6.80901920e-01  8.52072677e+01  6.78667921e+02  3.94759213e+03
  3.15207281e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749978600292  E_coul = 198.9449083519982
cycle= 1 E= -507.630089508031  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37734
diis-c [-0.14238519  1.        ]
  HOMO = -0.236279727759773  LUMO = 86.5403774590866
  mo_energy =
[-1.20258507e+02 -1.22527135e+01 -6.65309525e+00 -6.65309525e+00
 -6.65309525e+00 -1.16345510e+00 -2.36279728e-01 -2.36279728e-01
 -2.36279728e-01  8.65403775e+01  6.80038102e+02  3.94884221e+03
  3.15218087e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436405927472  E_coul = 198.9131242293999
cycle= 2 E= -507.630516363347  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503198
diis-c [-2.52359623e-05 -7.72582242e-04  1.00077258e+00]
  HOMO = -0.236454460273653  LUMO = 86.5368627596207
  mo_energy =
[-1.20267131e+02 -1.22538991e+01 -6.65493159e+00 -6.65493159e+00
 -6.65493159e+00 -1.16351969e+00 -2.36454460e-01 -2.36454460e-01
 -2.36454460e-01  8.65368628e+01  6.80027526e+02  3.94882632e+03
  3.15217894e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432018278124  E_coul = 198.91268535484645
cycle= 3 E= -507.630516472966  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125066
diis-c [-3.74358306e-10  3.85676546e-05 -2.52134291e-02  1.02517486e+00]
  HOMO = -0.236456615945839  LUMO = 86.5368191823237
  mo_energy =
[-1.20267242e+02 -1.22539145e+01 -6.65495795e+00 -6.65495795e+00
 -6.65495795e+00 -1.16352032e+00 -2.36456616e-01 -2.36456616e-01
 -2.36456616e-01  8.65368192e+01  6.80027412e+02  3.94882618e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431947421249  E_coul = 198.91267826912048
cycle= 4 E= -507.630516473004  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431947421249  E_coul = 198.91267826912048
  HOMO = -0.236456600531998  LUMO = 86.5368195032395
  mo_energy =
[-1.20267241e+02 -1.22539144e+01 -6.65495780e+00 -6.65495780e+00
 -6.65495780e+00 -1.16352032e+00 -2.36456601e-01 -2.36456601e-01
 -2.36456601e-01  8.65368195e+01  6.80027413e+02  3.94882618e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431947769806  E_coul = 198.9126783039764
Extra cycle  E= -507.630516473004  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97845623765814
E1 = -706.5431947769806  E_coul = 198.9126783039764
init E= -507.630516473004
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456600352539  LUMO = 86.5368195071489
  mo_energy =
[-1.20267241e+02 -1.22539144e+01 -6.65495779e+00 -6.65495779e+00
 -6.65495779e+00 -1.16352032e+00 -2.36456600e-01 -2.36456600e-01
 -2.36456600e-01  8.65368195e+01  6.80027413e+02  3.94882618e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431947775057  E_coul = 198.9126783045011
cycle= 1 E= -507.630516473005  delta_E= -3.98e-13  |g|= 1.2e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431947775057  E_coul = 198.9126783045011
  HOMO = -0.236456600350018  LUMO = 86.5368195072048
  mo_energy =
[-1.20267241e+02 -1.22539144e+01 -6.65495779e+00 -6.65495779e+00
 -6.65495779e+00 -1.16352032e+00 -2.36456600e-01 -2.36456600e-01
 -2.36456600e-01  8.65368195e+01  6.80027413e+02  3.94882618e+03
  3.15217892e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431947775146  E_coul = 198.91267830451028
Extra cycle  E= -507.630516473004  delta_E= 2.84e-13  |g|= 4.04e-11  |ddm|= 4.23e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549496e+04 2.23216151e+03
 4.57764548e+02 1.21909591e+02 3.76236862e+01 4.74128940e+00
 3.91198126e-01 8.59864051e+00 4.90849481e-01]
grad_E = [ 1.58649178e-10  9.14433805e-09  4.38606541e-06 -1.45746382e-06
  1.89471084e-06  3.88655529e-06  7.64950209e-07  1.52803485e-06
 -1.28570319e-06 -9.26211079e-07  1.24894370e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:11 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9496726        1
[INPUT] 0    0    [1    /1   ]  2232.16146465        1
[INPUT] 0    0    [1    /1   ]  457.764750271        1
[INPUT] 0    0    [1    /1   ]  121.909182966        1
[INPUT] 0    0    [1    /1   ]  37.6235349832        1
[INPUT] 0    0    [1    /1   ]  4.74128950131        1
[INPUT] 0    0    [1    /1   ]  0.39119810004        1
[INPUT] 1    0    [1    /1   ]  8.59864060577        1
[INPUT] 1    0    [1    /1   ]  0.490849486621       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995674, 1.0]], [0, [799999.9999750326, 1.0]], [0, [18354.949672607425, 1.0]], [0, [2232.161464647355, 1.0]], [0, [457.7647502706338, 1.0]], [0, [121.90918296629054, 1.0]], [0, [37.62353498315083, 1.0]], [0, [4.741289501306113, 1.0]], [0, [0.3911981000397006, 1.0]], [1, [8.598640605770193, 1.0]], [1, [0.4908494866214111, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999957]
bas 1, expnt(s) = [799999.99997503]
bas 2, expnt(s) = [18354.94967261]
bas 3, expnt(s) = [2232.16146465]
bas 4, expnt(s) = [457.76475027]
bas 5, expnt(s) = [121.90918297]
bas 6, expnt(s) = [37.62353498]
bas 7, expnt(s) = [4.7412895]
bas 8, expnt(s) = [0.3911981]
bas 9, expnt(s) = [8.59864061]
bas 10, expnt(s) = [0.49084949]
CPU time:       140.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549497e+04 3.98409718e+03 2.23216146e+03 8.20463431e+02
 4.57764750e+02 2.50032685e+02 1.21909183e+02 9.26920185e+01
 3.76235350e+01 3.83804200e+01 4.74128950e+00 8.11778191e+00
 3.91198100e-01 1.24971959e+00 8.59864061e+00 4.29557829e+01
 4.90849487e-01 1.19858771e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972245379894
cond(S) = 42.97825242174012
E1 = -688.6351457015628  E_coul = 184.91527021186806
init E= -503.719875489695
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901924801943  LUMO = 85.2067750029503
  mo_energy =
[-1.21646281e+02 -1.32807966e+01 -7.62161218e+00 -7.62161218e+00
 -7.62161218e+00 -1.65067743e+00 -6.80901925e-01 -6.80901925e-01
 -6.80901925e-01  8.52067750e+01  6.78666416e+02  3.94759071e+03
  3.15207271e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749966845659  E_coul = 198.9449071797382
cycle= 1 E= -507.630089504828  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377339
diis-c [-0.14238494  1.        ]
  HOMO = -0.236279736803177  LUMO = 86.539884094809
  mo_energy =
[-1.20258508e+02 -1.22527133e+01 -6.65309534e+00 -6.65309534e+00
 -6.65309534e+00 -1.16345508e+00 -2.36279737e-01 -2.36279737e-01
 -2.36279737e-01  8.65398841e+01  6.80036596e+02  3.94884078e+03
  3.15218077e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436391453635  E_coul = 198.91312278132386
cycle= 2 E= -507.63051636404  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.005032
diis-c [-2.52362253e-05 -7.72552174e-04  1.00077255e+00]
  HOMO = -0.23645447109181  LUMO = 86.53636937532
  mo_energy =
[-1.20267132e+02 -1.22538989e+01 -6.65493169e+00 -6.65493169e+00
 -6.65493169e+00 -1.16351967e+00 -2.36454471e-01 -2.36454471e-01
 -2.36454471e-01  8.65363694e+01  6.80026021e+02  3.94882490e+03
  3.15217884e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432003751699  E_coul = 198.91268390150972
cycle= 3 E= -507.63051647366  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125067
diis-c [-3.74364444e-10  3.85676871e-05 -2.52135287e-02  1.02517496e+00]
  HOMO = -0.23645662679831  LUMO = 86.5363257974712
  mo_energy =
[-1.20267243e+02 -1.22539143e+01 -6.65495805e+00 -6.65495805e+00
 -6.65495805e+00 -1.16352030e+00 -2.36456627e-01 -2.36456627e-01
 -2.36456627e-01  8.65363258e+01  6.80025907e+02  3.94882476e+03
  3.15217882e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431932893583  E_coul = 198.91267681565998
cycle= 4 E= -507.630516473698  delta_E= -3.81e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431932893583  E_coul = 198.91267681565998
  HOMO = -0.236456611384194  LUMO = 86.5363261183905
  mo_energy =
[-1.20267242e+02 -1.22539142e+01 -6.65495790e+00 -6.65495790e+00
 -6.65495790e+00 -1.16352029e+00 -2.36456611e-01 -2.36456611e-01
 -2.36456611e-01  8.65363261e+01  6.80025908e+02  3.94882476e+03
  3.15217882e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431933242153  E_coul = 198.91267685051668
Extra cycle  E= -507.630516473699  delta_E= -2.84e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549497e+04 2.23216146e+03
 4.57764750e+02 1.21909183e+02 3.76235350e+01 4.74128950e+00
 3.91198100e-01 8.59864061e+00 4.90849487e-01]
E = -507.6305164736986
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9496726        1
[INPUT] 0    0    [1    /1   ]  2232.16146465        1
[INPUT] 0    0    [1    /1   ]  457.764750271        1
[INPUT] 0    0    [1    /1   ]  121.909182966        1
[INPUT] 0    0    [1    /1   ]  37.6235349832        1
[INPUT] 0    0    [1    /1   ]  4.74128950131        1
[INPUT] 0    0    [1    /1   ]  0.39119810004        1
[INPUT] 1    0    [1    /1   ]  8.59864060577        1
[INPUT] 1    0    [1    /1   ]  0.490849486621       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995674, 1.0]], [0, [799999.9999750326, 1.0]], [0, [18354.949672607425, 1.0]], [0, [2232.161464647355, 1.0]], [0, [457.7647502706338, 1.0]], [0, [121.90918296629054, 1.0]], [0, [37.62353498315083, 1.0]], [0, [4.741289501306113, 1.0]], [0, [0.3911981000397006, 1.0]], [1, [8.598640605770193, 1.0]], [1, [0.4908494866214111, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999957]
bas 1, expnt(s) = [799999.99997503]
bas 2, expnt(s) = [18354.94967261]
bas 3, expnt(s) = [2232.16146465]
bas 4, expnt(s) = [457.76475027]
bas 5, expnt(s) = [121.90918297]
bas 6, expnt(s) = [37.62353498]
bas 7, expnt(s) = [4.7412895]
bas 8, expnt(s) = [0.3911981]
bas 9, expnt(s) = [8.59864061]
bas 10, expnt(s) = [0.49084949]
CPU time:       141.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549497e+04 3.98409718e+03 2.23216146e+03 8.20463431e+02
 4.57764750e+02 2.50032685e+02 1.21909183e+02 9.26920185e+01
 3.76235350e+01 3.83804200e+01 4.74128950e+00 8.11778191e+00
 3.91198100e-01 1.24971959e+00 8.59864061e+00 4.29557829e+01
 4.90849487e-01 1.19858771e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972245379894
cond(S) = 42.97825242174012
E1 = -688.6351457015628  E_coul = 184.91527021186806
init E= -503.719875489695
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901924801943  LUMO = 85.2067750029503
  mo_energy =
[-1.21646281e+02 -1.32807966e+01 -7.62161218e+00 -7.62161218e+00
 -7.62161218e+00 -1.65067743e+00 -6.80901925e-01 -6.80901925e-01
 -6.80901925e-01  8.52067750e+01  6.78666416e+02  3.94759071e+03
  3.15207271e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749966845659  E_coul = 198.9449071797382
cycle= 1 E= -507.630089504828  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377339
diis-c [-0.14238494  1.        ]
  HOMO = -0.236279736803177  LUMO = 86.539884094809
  mo_energy =
[-1.20258508e+02 -1.22527133e+01 -6.65309534e+00 -6.65309534e+00
 -6.65309534e+00 -1.16345508e+00 -2.36279737e-01 -2.36279737e-01
 -2.36279737e-01  8.65398841e+01  6.80036596e+02  3.94884078e+03
  3.15218077e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436391453635  E_coul = 198.91312278132386
cycle= 2 E= -507.63051636404  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.005032
diis-c [-2.52362253e-05 -7.72552174e-04  1.00077255e+00]
  HOMO = -0.23645447109181  LUMO = 86.53636937532
  mo_energy =
[-1.20267132e+02 -1.22538989e+01 -6.65493169e+00 -6.65493169e+00
 -6.65493169e+00 -1.16351967e+00 -2.36454471e-01 -2.36454471e-01
 -2.36454471e-01  8.65363694e+01  6.80026021e+02  3.94882490e+03
  3.15217884e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5432003751699  E_coul = 198.91268390150972
cycle= 3 E= -507.63051647366  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125067
diis-c [-3.74364444e-10  3.85676871e-05 -2.52135287e-02  1.02517496e+00]
  HOMO = -0.23645662679831  LUMO = 86.5363257974712
  mo_energy =
[-1.20267243e+02 -1.22539143e+01 -6.65495805e+00 -6.65495805e+00
 -6.65495805e+00 -1.16352030e+00 -2.36456627e-01 -2.36456627e-01
 -2.36456627e-01  8.65363258e+01  6.80025907e+02  3.94882476e+03
  3.15217882e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431932893583  E_coul = 198.91267681565998
cycle= 4 E= -507.630516473698  delta_E= -3.81e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431932893583  E_coul = 198.91267681565998
  HOMO = -0.236456611384194  LUMO = 86.5363261183905
  mo_energy =
[-1.20267242e+02 -1.22539142e+01 -6.65495790e+00 -6.65495790e+00
 -6.65495790e+00 -1.16352029e+00 -2.36456611e-01 -2.36456611e-01
 -2.36456611e-01  8.65363261e+01  6.80025908e+02  3.94882476e+03
  3.15217882e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431933242153  E_coul = 198.91267685051668
Extra cycle  E= -507.630516473699  delta_E= -2.84e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97825242174012
E1 = -706.5431933242153  E_coul = 198.91267685051668
init E= -507.630516473699
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456611204729  LUMO = 86.5363261223003
  mo_energy =
[-1.20267242e+02 -1.22539142e+01 -6.65495790e+00 -6.65495790e+00
 -6.65495790e+00 -1.16352029e+00 -2.36456611e-01 -2.36456611e-01
 -2.36456611e-01  8.65363261e+01  6.80025908e+02  3.94882476e+03
  3.15217882e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.54319332474  E_coul = 198.91267685104114
cycle= 1 E= -507.630516473699  delta_E= -1.71e-13  |g|= 1.19e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.54319332474  E_coul = 198.91267685104114
  HOMO = -0.236456611202216  LUMO = 86.5363261223565
  mo_energy =
[-1.20267242e+02 -1.22539142e+01 -6.65495790e+00 -6.65495790e+00
 -6.65495790e+00 -1.16352029e+00 -2.36456611e-01 -2.36456611e-01
 -2.36456611e-01  8.65363261e+01  6.80025908e+02  3.94882476e+03
  3.15217882e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5431933247489  E_coul = 198.91267685105035
Extra cycle  E= -507.630516473699  delta_E= 2.27e-13  |g|= 2.66e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.19 sec, wall time      0.19 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549497e+04 2.23216146e+03
 4.57764750e+02 1.21909183e+02 3.76235350e+01 4.74128950e+00
 3.91198100e-01 8.59864061e+00 4.90849487e-01]
grad_E = [ 1.58648985e-10  9.14433052e-09  4.38611461e-06 -1.46139195e-06
  1.95664431e-06  3.71280800e-06  5.08951674e-07  1.52680920e-06
 -1.28650613e-06 -9.28244233e-07  1.25142907e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9497627        1
[INPUT] 0    0    [1    /1   ]  2232.16142139        1
[INPUT] 0    0    [1    /1   ]  457.764996245        1
[INPUT] 0    0    [1    /1   ]  121.908582243        1
[INPUT] 0    0    [1    /1   ]  37.6233145627        1
[INPUT] 0    0    [1    /1   ]  4.74128963917        1
[INPUT] 0    0    [1    /1   ]  0.391198062092       1
[INPUT] 1    0    [1    /1   ]  8.59864073987        1
[INPUT] 1    0    [1    /1   ]  0.490849495096       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995707, 1.0]], [0, [799999.9999752201, 1.0]], [0, [18354.949762714827, 1.0]], [0, [2232.161421391325, 1.0]], [0, [457.7649962448557, 1.0]], [0, [121.90858224315608, 1.0]], [0, [37.623314562693956, 1.0]], [0, [4.741289639170051, 1.0]], [0, [0.39119806209164937, 1.0]], [1, [8.598640739870323, 1.0]], [1, [0.49084949509604614, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999957]
bas 1, expnt(s) = [799999.99997522]
bas 2, expnt(s) = [18354.94976271]
bas 3, expnt(s) = [2232.16142139]
bas 4, expnt(s) = [457.76499624]
bas 5, expnt(s) = [121.90858224]
bas 6, expnt(s) = [37.62331456]
bas 7, expnt(s) = [4.74128964]
bas 8, expnt(s) = [0.39119806]
bas 9, expnt(s) = [8.59864074]
bas 10, expnt(s) = [0.4908495]
CPU time:       145.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549498e+04 3.98409719e+03 2.23216142e+03 8.20463419e+02
 4.57764996e+02 2.50032786e+02 1.21908582e+02 9.26916760e+01
 3.76233146e+01 3.83802513e+01 4.74128964e+00 8.11778209e+00
 3.91198062e-01 1.24971950e+00 8.59864074e+00 4.29557838e+01
 4.90849495e-01 1.19858773e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997225006813
cond(S) = 42.97795890797406
E1 = -688.6351490142259  E_coul = 184.91526968370823
init E= -503.719879330518
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901931260437  LUMO = 85.2060543799168
  mo_energy =
[-1.21646281e+02 -1.32807962e+01 -7.62161226e+00 -7.62161226e+00
 -7.62161226e+00 -1.65067737e+00 -6.80901931e-01 -6.80901931e-01
 -6.80901931e-01  8.52060544e+01  6.78664166e+02  3.94758849e+03
  3.15207255e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749949836934  E_coul = 198.9449054832873
cycle= 1 E= -507.630089500406  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377339
diis-c [-0.14238457  1.        ]
  HOMO = -0.236279749940489  LUMO = 86.5391624461797
  mo_energy =
[-1.20258509e+02 -1.22527130e+01 -6.65309546e+00 -6.65309546e+00
 -6.65309546e+00 -1.16345505e+00 -2.36279750e-01 -2.36279750e-01
 -2.36279750e-01  8.65391624e+01  6.80034345e+02  3.94883856e+03
  3.15218061e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436370470009  E_coul = 198.91312068168747
cycle= 2 E= -507.630516365313  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503204
diis-c [-2.52366086e-05 -7.72508354e-04  1.00077251e+00]
  HOMO = -0.236454486824692  LUMO = 86.535647697467
  mo_energy =
[-1.20267133e+02 -1.22538986e+01 -6.65493184e+00 -6.65493184e+00
 -6.65493184e+00 -1.16351963e+00 -2.36454487e-01 -2.36454487e-01
 -2.36454487e-01  8.65356477e+01  6.80023769e+02  3.94882267e+03
  3.15217868e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431982691149  E_coul = 198.91268179417835
cycle= 3 E= -507.630516474937  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125069
diis-c [-3.74375058e-10  3.85674621e-05 -2.52136688e-02  1.02517510e+00]
  HOMO = -0.23645664258141  LUMO = 86.5356041188141
  mo_energy =
[-1.20267243e+02 -1.22539140e+01 -6.65495820e+00 -6.65495820e+00
 -6.65495820e+00 -1.16352027e+00 -2.36456643e-01 -2.36456643e-01
 -2.36456643e-01  8.65356041e+01  6.80023655e+02  3.94882253e+03
  3.15217866e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431911831229  E_coul = 198.91267470814788
cycle= 4 E= -507.630516474975  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431911831229  E_coul = 198.91267470814788
  HOMO = -0.23645662716685  LUMO = 86.5356044397392
  mo_energy =
[-1.20267243e+02 -1.22539139e+01 -6.65495805e+00 -6.65495805e+00
 -6.65495805e+00 -1.16352026e+00 -2.36456627e-01 -2.36456627e-01
 -2.36456627e-01  8.65356044e+01  6.80023656e+02  3.94882253e+03
  3.15217866e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431912179804  E_coul = 198.9126747430053
Extra cycle  E= -507.630516474975  delta_E= -5.68e-14  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549498e+04 2.23216142e+03
 4.57764996e+02 1.21908582e+02 3.76233146e+01 4.74128964e+00
 3.91198062e-01 8.59864074e+00 4.90849495e-01]
E = -507.6305164749751
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9497627        1
[INPUT] 0    0    [1    /1   ]  2232.16142139        1
[INPUT] 0    0    [1    /1   ]  457.764996245        1
[INPUT] 0    0    [1    /1   ]  121.908582243        1
[INPUT] 0    0    [1    /1   ]  37.6233145627        1
[INPUT] 0    0    [1    /1   ]  4.74128963917        1
[INPUT] 0    0    [1    /1   ]  0.391198062092       1
[INPUT] 1    0    [1    /1   ]  8.59864073987        1
[INPUT] 1    0    [1    /1   ]  0.490849495096       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995707, 1.0]], [0, [799999.9999752201, 1.0]], [0, [18354.949762714827, 1.0]], [0, [2232.161421391325, 1.0]], [0, [457.7649962448557, 1.0]], [0, [121.90858224315608, 1.0]], [0, [37.623314562693956, 1.0]], [0, [4.741289639170051, 1.0]], [0, [0.39119806209164937, 1.0]], [1, [8.598640739870323, 1.0]], [1, [0.49084949509604614, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999957]
bas 1, expnt(s) = [799999.99997522]
bas 2, expnt(s) = [18354.94976271]
bas 3, expnt(s) = [2232.16142139]
bas 4, expnt(s) = [457.76499624]
bas 5, expnt(s) = [121.90858224]
bas 6, expnt(s) = [37.62331456]
bas 7, expnt(s) = [4.74128964]
bas 8, expnt(s) = [0.39119806]
bas 9, expnt(s) = [8.59864074]
bas 10, expnt(s) = [0.4908495]
CPU time:       146.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549498e+04 3.98409719e+03 2.23216142e+03 8.20463419e+02
 4.57764996e+02 2.50032786e+02 1.21908582e+02 9.26916760e+01
 3.76233146e+01 3.83802513e+01 4.74128964e+00 8.11778209e+00
 3.91198062e-01 1.24971950e+00 8.59864074e+00 4.29557838e+01
 4.90849495e-01 1.19858773e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997225006813
cond(S) = 42.97795890797406
E1 = -688.6351490142259  E_coul = 184.91526968370823
init E= -503.719879330518
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.680901931260437  LUMO = 85.2060543799168
  mo_energy =
[-1.21646281e+02 -1.32807962e+01 -7.62161226e+00 -7.62161226e+00
 -7.62161226e+00 -1.65067737e+00 -6.80901931e-01 -6.80901931e-01
 -6.80901931e-01  8.52060544e+01  6.78664166e+02  3.94758849e+03
  3.15207255e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749949836934  E_coul = 198.9449054832873
cycle= 1 E= -507.630089500406  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.377339
diis-c [-0.14238457  1.        ]
  HOMO = -0.236279749940489  LUMO = 86.5391624461797
  mo_energy =
[-1.20258509e+02 -1.22527130e+01 -6.65309546e+00 -6.65309546e+00
 -6.65309546e+00 -1.16345505e+00 -2.36279750e-01 -2.36279750e-01
 -2.36279750e-01  8.65391624e+01  6.80034345e+02  3.94883856e+03
  3.15218061e+04  1.12121516e+06  7.13808435e+06]
E1 = -706.5436370470009  E_coul = 198.91312068168747
cycle= 2 E= -507.630516365313  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00503204
diis-c [-2.52366086e-05 -7.72508354e-04  1.00077251e+00]
  HOMO = -0.236454486824692  LUMO = 86.535647697467
  mo_energy =
[-1.20267133e+02 -1.22538986e+01 -6.65493184e+00 -6.65493184e+00
 -6.65493184e+00 -1.16351963e+00 -2.36454487e-01 -2.36454487e-01
 -2.36454487e-01  8.65356477e+01  6.80023769e+02  3.94882267e+03
  3.15217868e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431982691149  E_coul = 198.91268179417835
cycle= 3 E= -507.630516474937  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000125069
diis-c [-3.74375058e-10  3.85674621e-05 -2.52136688e-02  1.02517510e+00]
  HOMO = -0.23645664258141  LUMO = 86.5356041188141
  mo_energy =
[-1.20267243e+02 -1.22539140e+01 -6.65495820e+00 -6.65495820e+00
 -6.65495820e+00 -1.16352027e+00 -2.36456643e-01 -2.36456643e-01
 -2.36456643e-01  8.65356041e+01  6.80023655e+02  3.94882253e+03
  3.15217866e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431911831229  E_coul = 198.91267470814788
cycle= 4 E= -507.630516474975  delta_E= -3.85e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5431911831229  E_coul = 198.91267470814788
  HOMO = -0.23645662716685  LUMO = 86.5356044397392
  mo_energy =
[-1.20267243e+02 -1.22539139e+01 -6.65495805e+00 -6.65495805e+00
 -6.65495805e+00 -1.16352026e+00 -2.36456627e-01 -2.36456627e-01
 -2.36456627e-01  8.65356044e+01  6.80023656e+02  3.94882253e+03
  3.15217866e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431912179804  E_coul = 198.9126747430053
Extra cycle  E= -507.630516474975  delta_E= -5.68e-14  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.17 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97795890797406
E1 = -706.5431912179804  E_coul = 198.9126747430053
init E= -507.630516474975
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236456626987388  LUMO = 86.5356044436482
  mo_energy =
[-1.20267243e+02 -1.22539139e+01 -6.65495805e+00 -6.65495805e+00
 -6.65495805e+00 -1.16352026e+00 -2.36456627e-01 -2.36456627e-01
 -2.36456627e-01  8.65356044e+01  6.80023656e+02  3.94882253e+03
  3.15217866e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431912185052  E_coul = 198.91267474353012
cycle= 1 E= -507.630516474975  delta_E= 5.68e-14  |g|= 1.19e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431912185052  E_coul = 198.91267474353012
  HOMO = -0.236456626984869  LUMO = 86.5356044437042
  mo_energy =
[-1.20267243e+02 -1.22539139e+01 -6.65495805e+00 -6.65495805e+00
 -6.65495805e+00 -1.16352026e+00 -2.36456627e-01 -2.36456627e-01
 -2.36456627e-01  8.65356044e+01  6.80023656e+02  3.94882253e+03
  3.15217866e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431912185139  E_coul = 198.91267474353904
Extra cycle  E= -507.630516474975  delta_E= 1.14e-13  |g|= 1.3e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549498e+04 2.23216142e+03
 4.57764996e+02 1.21908582e+02 3.76233146e+01 4.74128964e+00
 3.91198062e-01 8.59864074e+00 4.90849495e-01]
grad_E = [ 1.58648717e-10  9.14432007e-09  4.38618302e-06 -1.46690696e-06
  2.04512291e-06  3.46208044e-06  1.40186632e-07  1.52485140e-06
 -1.28750122e-06 -9.31052178e-07  1.25484667e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:20 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9497665        1
[INPUT] 0    0    [1    /1   ]  2232.16140222        1
[INPUT] 0    0    [1    /1   ]  457.765276417        1
[INPUT] 0    0    [1    /1   ]  121.907672341        1
[INPUT] 0    0    [1    /1   ]  37.6229848901        1
[INPUT] 0    0    [1    /1   ]  4.74128982617        1
[INPUT] 0    0    [1    /1   ]  0.391198005668       1
[INPUT] 1    0    [1    /1   ]  8.59864093907        1
[INPUT] 1    0    [1    /1   ]  0.490849507738       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995707, 1.0]], [0, [799999.9999752274, 1.0]], [0, [18354.949766496844, 1.0]], [0, [2232.161402218825, 1.0]], [0, [457.76527641744065, 1.0]], [0, [121.90767234113835, 1.0]], [0, [37.622984890117756, 1.0]], [0, [4.741289826173582, 1.0]], [0, [0.3911980056678232, 1.0]], [1, [8.598640939071386, 1.0]], [1, [0.4908495077384912, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999957]
bas 1, expnt(s) = [799999.99997523]
bas 2, expnt(s) = [18354.9497665]
bas 3, expnt(s) = [2232.16140222]
bas 4, expnt(s) = [457.76527642]
bas 5, expnt(s) = [121.90767234]
bas 6, expnt(s) = [37.62298489]
bas 7, expnt(s) = [4.74128983]
bas 8, expnt(s) = [0.39119801]
bas 9, expnt(s) = [8.59864094]
bas 10, expnt(s) = [0.49084951]
CPU time:       150.30
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549498e+04 3.98409719e+03 2.23216140e+03 8.20463414e+02
 4.57765276e+02 2.50032901e+02 1.21907672e+02 9.26911571e+01
 3.76229849e+01 3.83799991e+01 4.74128983e+00 8.11778233e+00
 3.91198006e-01 1.24971936e+00 8.59864094e+00 4.29557850e+01
 4.90849508e-01 1.19858777e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972257388713
cond(S) = 42.97752617780042
E1 = -688.6351538366195  E_coul = 184.91526889366614
init E= -503.719884942953
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68090194066763  LUMO = 85.2049718795904
  mo_energy =
[-1.21646282e+02 -1.32807956e+01 -7.62161238e+00 -7.62161238e+00
 -7.62161238e+00 -1.65067729e+00 -6.80901941e-01 -6.80901941e-01
 -6.80901941e-01  8.52049719e+01  6.78660696e+02  3.94758491e+03
  3.15207227e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749924612378  E_coul = 198.94490296708375
cycle= 1 E= -507.630089494154  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377338
diis-c [-0.14238404  1.        ]
  HOMO = -0.236279769514053  LUMO = 86.5380784092637
  mo_energy =
[-1.20258510e+02 -1.22527125e+01 -6.65309565e+00 -6.65309565e+00
 -6.65309565e+00 -1.16345500e+00 -2.36279770e-01 -2.36279770e-01
 -2.36279770e-01  8.65380784e+01  6.80030874e+02  3.94883498e+03
  3.15218033e+04  1.12121515e+06  7.13808435e+06]
E1 = -706.5436339278907  E_coul = 198.91311756027952
cycle= 2 E= -507.630516367611  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050321
diis-c [-2.52371821e-05 -7.72442458e-04  1.00077244e+00]
  HOMO = -0.236454510296545  LUMO = 86.5345636167727
  mo_energy =
[-1.20267134e+02 -1.22538981e+01 -6.65493207e+00 -6.65493207e+00
 -6.65493207e+00 -1.16351959e+00 -2.36454510e-01 -2.36454510e-01
 -2.36454510e-01  8.65345636e+01  6.80020298e+02  3.94881909e+03
  3.15217840e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431951384492  E_coul = 198.91267866121197
cycle= 3 E= -507.630516477237  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125072
diis-c [-3.74391025e-10  3.85671545e-05 -2.52138811e-02  1.02517531e+00]
  HOMO = -0.236456666128722  LUMO = 86.5345200369067
  mo_energy =
[-1.20267245e+02 -1.22539135e+01 -6.65495843e+00 -6.65495843e+00
 -6.65495843e+00 -1.16352023e+00 -2.36456666e-01 -2.36456666e-01
 -2.36456666e-01  8.65345200e+01  6.80020184e+02  3.94881895e+03
  3.15217838e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.543188052186  E_coul = 198.9126715749102
cycle= 4 E= -507.630516477276  delta_E= -3.87e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543188052186  E_coul = 198.9126715749102
  HOMO = -0.236456650713503  LUMO = 86.5345203578418
  mo_energy =
[-1.20267244e+02 -1.22539134e+01 -6.65495827e+00 -6.65495827e+00
 -6.65495827e+00 -1.16352022e+00 -2.36456651e-01 -2.36456651e-01
 -2.36456651e-01  8.65345204e+01  6.80020185e+02  3.94881895e+03
  3.15217838e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431880870452  E_coul = 198.91267160976915
Extra cycle  E= -507.630516477276  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549498e+04 2.23216140e+03
 4.57765276e+02 1.21907672e+02 3.76229849e+01 4.74128983e+00
 3.91198006e-01 8.59864094e+00 4.90849508e-01]
E = -507.63051647727605
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:21 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9497665        1
[INPUT] 0    0    [1    /1   ]  2232.16140222        1
[INPUT] 0    0    [1    /1   ]  457.765276417        1
[INPUT] 0    0    [1    /1   ]  121.907672341        1
[INPUT] 0    0    [1    /1   ]  37.6229848901        1
[INPUT] 0    0    [1    /1   ]  4.74128982617        1
[INPUT] 0    0    [1    /1   ]  0.391198005668       1
[INPUT] 1    0    [1    /1   ]  8.59864093907        1
[INPUT] 1    0    [1    /1   ]  0.490849507738       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995707, 1.0]], [0, [799999.9999752274, 1.0]], [0, [18354.949766496844, 1.0]], [0, [2232.161402218825, 1.0]], [0, [457.76527641744065, 1.0]], [0, [121.90767234113835, 1.0]], [0, [37.622984890117756, 1.0]], [0, [4.741289826173582, 1.0]], [0, [0.3911980056678232, 1.0]], [1, [8.598640939071386, 1.0]], [1, [0.4908495077384912, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999957]
bas 1, expnt(s) = [799999.99997523]
bas 2, expnt(s) = [18354.9497665]
bas 3, expnt(s) = [2232.16140222]
bas 4, expnt(s) = [457.76527642]
bas 5, expnt(s) = [121.90767234]
bas 6, expnt(s) = [37.62298489]
bas 7, expnt(s) = [4.74128983]
bas 8, expnt(s) = [0.39119801]
bas 9, expnt(s) = [8.59864094]
bas 10, expnt(s) = [0.49084951]
CPU time:       151.05
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549498e+04 3.98409719e+03 2.23216140e+03 8.20463414e+02
 4.57765276e+02 2.50032901e+02 1.21907672e+02 9.26911571e+01
 3.76229849e+01 3.83799991e+01 4.74128983e+00 8.11778233e+00
 3.91198006e-01 1.24971936e+00 8.59864094e+00 4.29557850e+01
 4.90849508e-01 1.19858777e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972257388713
cond(S) = 42.97752617780042
E1 = -688.6351538366195  E_coul = 184.91526889366614
init E= -503.719884942953
    CPU time for initialize scf      0.04 sec, wall time      0.04 sec
  HOMO = -0.68090194066763  LUMO = 85.2049718795904
  mo_energy =
[-1.21646282e+02 -1.32807956e+01 -7.62161238e+00 -7.62161238e+00
 -7.62161238e+00 -1.65067729e+00 -6.80901941e-01 -6.80901941e-01
 -6.80901941e-01  8.52049719e+01  6.78660696e+02  3.94758491e+03
  3.15207227e+04  1.12121418e+06  7.13808338e+06]
E1 = -706.5749924612378  E_coul = 198.94490296708375
cycle= 1 E= -507.630089494154  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377338
diis-c [-0.14238404  1.        ]
  HOMO = -0.236279769514053  LUMO = 86.5380784092637
  mo_energy =
[-1.20258510e+02 -1.22527125e+01 -6.65309565e+00 -6.65309565e+00
 -6.65309565e+00 -1.16345500e+00 -2.36279770e-01 -2.36279770e-01
 -2.36279770e-01  8.65380784e+01  6.80030874e+02  3.94883498e+03
  3.15218033e+04  1.12121515e+06  7.13808435e+06]
E1 = -706.5436339278907  E_coul = 198.91311756027952
cycle= 2 E= -507.630516367611  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050321
diis-c [-2.52371821e-05 -7.72442458e-04  1.00077244e+00]
  HOMO = -0.236454510296545  LUMO = 86.5345636167727
  mo_energy =
[-1.20267134e+02 -1.22538981e+01 -6.65493207e+00 -6.65493207e+00
 -6.65493207e+00 -1.16351959e+00 -2.36454510e-01 -2.36454510e-01
 -2.36454510e-01  8.65345636e+01  6.80020298e+02  3.94881909e+03
  3.15217840e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431951384492  E_coul = 198.91267866121197
cycle= 3 E= -507.630516477237  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125072
diis-c [-3.74391025e-10  3.85671545e-05 -2.52138811e-02  1.02517531e+00]
  HOMO = -0.236456666128722  LUMO = 86.5345200369067
  mo_energy =
[-1.20267245e+02 -1.22539135e+01 -6.65495843e+00 -6.65495843e+00
 -6.65495843e+00 -1.16352023e+00 -2.36456666e-01 -2.36456666e-01
 -2.36456666e-01  8.65345200e+01  6.80020184e+02  3.94881895e+03
  3.15217838e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.543188052186  E_coul = 198.9126715749102
cycle= 4 E= -507.630516477276  delta_E= -3.87e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.04 sec
E1 = -706.543188052186  E_coul = 198.9126715749102
  HOMO = -0.236456650713503  LUMO = 86.5345203578418
  mo_energy =
[-1.20267244e+02 -1.22539134e+01 -6.65495827e+00 -6.65495827e+00
 -6.65495827e+00 -1.16352022e+00 -2.36456651e-01 -2.36456651e-01
 -2.36456651e-01  8.65345204e+01  6.80020185e+02  3.94881895e+03
  3.15217838e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431880870452  E_coul = 198.91267160976915
Extra cycle  E= -507.630516477276  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.15 sec, wall time      0.16 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97752617780042
E1 = -706.5431880870452  E_coul = 198.91267160976915
init E= -507.630516477276
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236456650534022  LUMO = 86.5345203617515
  mo_energy =
[-1.20267244e+02 -1.22539134e+01 -6.65495827e+00 -6.65495827e+00
 -6.65495827e+00 -1.16352022e+00 -2.36456651e-01 -2.36456651e-01
 -2.36456651e-01  8.65345204e+01  6.80020185e+02  3.94881895e+03
  3.15217838e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431880875702  E_coul = 198.91267161029387
cycle= 1 E= -507.630516477276  delta_E= -3.41e-13  |g|= 1.32e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431880875702  E_coul = 198.91267161029387
  HOMO = -0.236456650531507  LUMO = 86.5345203618063
  mo_energy =
[-1.20267244e+02 -1.22539134e+01 -6.65495827e+00 -6.65495827e+00
 -6.65495827e+00 -1.16352022e+00 -2.36456651e-01 -2.36456651e-01
 -2.36456651e-01  8.65345204e+01  6.80020185e+02  3.94881895e+03
  3.15217838e+04  1.12121513e+06  7.13808433e+06]
E1 = -706.5431880875792  E_coul = 198.91267161030274
Extra cycle  E= -507.630516477277  delta_E= -1.14e-13  |g|= 2.45e-11  |ddm|= 4.2e-12
    CPU time for scf_cycle      0.22 sec, wall time      0.23 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549498e+04 2.23216140e+03
 4.57765276e+02 1.21907672e+02 3.76229849e+01 4.74128983e+00
 3.91198006e-01 8.59864094e+00 4.90849508e-01]
grad_E = [ 1.58648341e-10  9.14430539e-09  4.38627948e-06 -1.47478222e-06
  2.17428652e-06  3.09150181e-06 -4.03681223e-07  1.52172351e-06
 -1.28876547e-06 -9.35038706e-07  1.25968626e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9495295        1
[INPUT] 0    0    [1    /1   ]  2232.16145777        1
[INPUT] 0    0    [1    /1   ]  457.76553446         1
[INPUT] 0    0    [1    /1   ]  121.906285426        1
[INPUT] 0    0    [1    /1   ]  37.622490056         1
[INPUT] 0    0    [1    /1   ]  4.74129007133        1
[INPUT] 0    0    [1    /1   ]  0.391197921593       1
[INPUT] 1    0    [1    /1   ]  8.59864123553        1
[INPUT] 1    0    [1    /1   ]  0.490849526654       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995623, 1.0]], [0, [799999.9999747326, 1.0]], [0, [18354.949529528636, 1.0]], [0, [2232.161457769882, 1.0]], [0, [457.76553445959695, 1.0]], [0, [121.90628542601172, 1.0]], [0, [37.622490056032866, 1.0]], [0, [4.741290071327218, 1.0]], [0, [0.39119792159345534, 1.0]], [1, [8.598641235525907, 1.0]], [1, [0.490849526653908, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.99997473]
bas 2, expnt(s) = [18354.94952953]
bas 3, expnt(s) = [2232.16145777]
bas 4, expnt(s) = [457.76553446]
bas 5, expnt(s) = [121.90628543]
bas 6, expnt(s) = [37.62249006]
bas 7, expnt(s) = [4.74129007]
bas 8, expnt(s) = [0.39119792]
bas 9, expnt(s) = [8.59864124]
bas 10, expnt(s) = [0.49084953]
CPU time:       155.13
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549495e+04 3.98409715e+03 2.23216146e+03 8.20463429e+02
 4.57765534e+02 2.50033006e+02 1.21906285e+02 9.26903662e+01
 3.76224901e+01 3.83796205e+01 4.74129007e+00 8.11778265e+00
 3.91197922e-01 1.24971916e+00 8.59864124e+00 4.29557869e+01
 4.90849527e-01 1.19858783e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972268948167
cond(S) = 42.97688826208002
E1 = -688.6351608298546  E_coul = 184.9152677075941
init E= -503.71989312226
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901954320505  LUMO = 85.2033383623043
  mo_energy =
[-1.21646283e+02 -1.32807947e+01 -7.62161255e+00 -7.62161255e+00
 -7.62161255e+00 -1.65067716e+00 -6.80901954e-01 -6.80901954e-01
 -6.80901954e-01  8.52033384e+01  6.78655298e+02  3.94757906e+03
  3.15207179e+04  1.12121417e+06  7.13808338e+06]
E1 = -706.5749887146922  E_coul = 198.94489922939
cycle= 1 E= -507.630089485302  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377337
diis-c [-0.14238326  1.        ]
  HOMO = -0.236279798754355  LUMO = 86.5364425806665
  mo_energy =
[-1.20258512e+02 -1.22527118e+01 -6.65309592e+00 -6.65309592e+00
 -6.65309592e+00 -1.16345493e+00 -2.36279799e-01 -2.36279799e-01
 -2.36279799e-01  8.65364426e+01  6.80025474e+02  3.94882912e+03
  3.15217985e+04  1.12121515e+06  7.13808434e+06]
E1 = -706.543629281794  E_coul = 198.91311291014227
cycle= 2 E= -507.630516371652  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503218
diis-c [-2.52380426e-05 -7.72343756e-04  1.00077234e+00]
  HOMO = -0.236454545418339  LUMO = 86.5329277223304
  mo_energy =
[-1.20267136e+02 -1.22538975e+01 -6.65493240e+00 -6.65493240e+00
 -6.65493240e+00 -1.16351952e+00 -2.36454545e-01 -2.36454545e-01
 -2.36454545e-01  8.65329277e+01  6.80014898e+02  3.94881324e+03
  3.15217792e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431904749173  E_coul = 198.91267399363412
cycle= 3 E= -507.630516481283  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125075
diis-c [-3.74413169e-10  3.85669117e-05 -2.52142027e-02  1.02517564e+00]
  HOMO = -0.236456701364207  LUMO = 86.5328841406409
  mo_energy =
[-1.20267247e+02 -1.22539129e+01 -6.65495876e+00 -6.65495876e+00
 -6.65495876e+00 -1.16352016e+00 -2.36456701e-01 -2.36456701e-01
 -2.36456701e-01  8.65328841e+01  6.80014784e+02  3.94881310e+03
  3.15217790e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431833882441  E_coul = 198.9126669069221
cycle= 4 E= -507.630516481322  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431833882441  E_coul = 198.9126669069221
  HOMO = -0.236456685948046  LUMO = 86.5328844615888
  mo_energy =
[-1.20267246e+02 -1.22539128e+01 -6.65495861e+00 -6.65495861e+00
 -6.65495861e+00 -1.16352015e+00 -2.36456686e-01 -2.36456686e-01
 -2.36456686e-01  8.65328845e+01  6.80014785e+02  3.94881310e+03
  3.15217790e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431834231052  E_coul = 198.91266694178356
Extra cycle  E= -507.630516481322  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549495e+04 2.23216146e+03
 4.57765534e+02 1.21906285e+02 3.76224901e+01 4.74129007e+00
 3.91197922e-01 8.59864124e+00 4.90849527e-01]
E = -507.6305164813217
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999975        1
[INPUT] 0    0    [1    /1   ]  18354.9495295        1
[INPUT] 0    0    [1    /1   ]  2232.16145777        1
[INPUT] 0    0    [1    /1   ]  457.76553446         1
[INPUT] 0    0    [1    /1   ]  121.906285426        1
[INPUT] 0    0    [1    /1   ]  37.622490056         1
[INPUT] 0    0    [1    /1   ]  4.74129007133        1
[INPUT] 0    0    [1    /1   ]  0.391197921593       1
[INPUT] 1    0    [1    /1   ]  8.59864123553        1
[INPUT] 1    0    [1    /1   ]  0.490849526654       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999995623, 1.0]], [0, [799999.9999747326, 1.0]], [0, [18354.949529528636, 1.0]], [0, [2232.161457769882, 1.0]], [0, [457.76553445959695, 1.0]], [0, [121.90628542601172, 1.0]], [0, [37.622490056032866, 1.0]], [0, [4.741290071327218, 1.0]], [0, [0.39119792159345534, 1.0]], [1, [8.598641235525907, 1.0]], [1, [0.490849526653908, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999956]
bas 1, expnt(s) = [799999.99997473]
bas 2, expnt(s) = [18354.94952953]
bas 3, expnt(s) = [2232.16145777]
bas 4, expnt(s) = [457.76553446]
bas 5, expnt(s) = [121.90628543]
bas 6, expnt(s) = [37.62249006]
bas 7, expnt(s) = [4.74129007]
bas 8, expnt(s) = [0.39119792]
bas 9, expnt(s) = [8.59864124]
bas 10, expnt(s) = [0.49084953]
CPU time:       155.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549495e+04 3.98409715e+03 2.23216146e+03 8.20463429e+02
 4.57765534e+02 2.50033006e+02 1.21906285e+02 9.26903662e+01
 3.76224901e+01 3.83796205e+01 4.74129007e+00 8.11778265e+00
 3.91197922e-01 1.24971916e+00 8.59864124e+00 4.29557869e+01
 4.90849527e-01 1.19858783e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972268948167
cond(S) = 42.97688826208002
E1 = -688.6351608298546  E_coul = 184.9152677075941
init E= -503.71989312226
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901954320505  LUMO = 85.2033383623043
  mo_energy =
[-1.21646283e+02 -1.32807947e+01 -7.62161255e+00 -7.62161255e+00
 -7.62161255e+00 -1.65067716e+00 -6.80901954e-01 -6.80901954e-01
 -6.80901954e-01  8.52033384e+01  6.78655298e+02  3.94757906e+03
  3.15207179e+04  1.12121417e+06  7.13808338e+06]
E1 = -706.5749887146922  E_coul = 198.94489922939
cycle= 1 E= -507.630089485302  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377337
diis-c [-0.14238326  1.        ]
  HOMO = -0.236279798754355  LUMO = 86.5364425806665
  mo_energy =
[-1.20258512e+02 -1.22527118e+01 -6.65309592e+00 -6.65309592e+00
 -6.65309592e+00 -1.16345493e+00 -2.36279799e-01 -2.36279799e-01
 -2.36279799e-01  8.65364426e+01  6.80025474e+02  3.94882912e+03
  3.15217985e+04  1.12121515e+06  7.13808434e+06]
E1 = -706.543629281794  E_coul = 198.91311291014227
cycle= 2 E= -507.630516371652  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503218
diis-c [-2.52380426e-05 -7.72343756e-04  1.00077234e+00]
  HOMO = -0.236454545418339  LUMO = 86.5329277223304
  mo_energy =
[-1.20267136e+02 -1.22538975e+01 -6.65493240e+00 -6.65493240e+00
 -6.65493240e+00 -1.16351952e+00 -2.36454545e-01 -2.36454545e-01
 -2.36454545e-01  8.65329277e+01  6.80014898e+02  3.94881324e+03
  3.15217792e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431904749173  E_coul = 198.91267399363412
cycle= 3 E= -507.630516481283  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125075
diis-c [-3.74413169e-10  3.85669117e-05 -2.52142027e-02  1.02517564e+00]
  HOMO = -0.236456701364207  LUMO = 86.5328841406409
  mo_energy =
[-1.20267247e+02 -1.22539129e+01 -6.65495876e+00 -6.65495876e+00
 -6.65495876e+00 -1.16352016e+00 -2.36456701e-01 -2.36456701e-01
 -2.36456701e-01  8.65328841e+01  6.80014784e+02  3.94881310e+03
  3.15217790e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431833882441  E_coul = 198.9126669069221
cycle= 4 E= -507.630516481322  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431833882441  E_coul = 198.9126669069221
  HOMO = -0.236456685948046  LUMO = 86.5328844615888
  mo_energy =
[-1.20267246e+02 -1.22539128e+01 -6.65495861e+00 -6.65495861e+00
 -6.65495861e+00 -1.16352015e+00 -2.36456686e-01 -2.36456686e-01
 -2.36456686e-01  8.65328845e+01  6.80014785e+02  3.94881310e+03
  3.15217790e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431834231052  E_coul = 198.91266694178356
Extra cycle  E= -507.630516481322  delta_E= 2.27e-13  |g|= 6.03e-09  |ddm|= 1.54e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97688826208002
E1 = -706.5431834231052  E_coul = 198.91266694178356
init E= -507.630516481322
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236456685768548  LUMO = 86.5328844654995
  mo_energy =
[-1.20267246e+02 -1.22539127e+01 -6.65495861e+00 -6.65495861e+00
 -6.65495861e+00 -1.16352015e+00 -2.36456686e-01 -2.36456686e-01
 -2.36456686e-01  8.65328845e+01  6.80014785e+02  3.94881310e+03
  3.15217790e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431834236299  E_coul = 198.91266694230794
cycle= 1 E= -507.630516481322  delta_E= -2.27e-13  |g|= 1.25e-10  |ddm|= 2.37e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431834236299  E_coul = 198.91266694230794
  HOMO = -0.23645668576603  LUMO = 86.5328844655557
  mo_energy =
[-1.20267246e+02 -1.22539127e+01 -6.65495861e+00 -6.65495861e+00
 -6.65495861e+00 -1.16352015e+00 -2.36456686e-01 -2.36456686e-01
 -2.36456686e-01  8.65328845e+01  6.80014785e+02  3.94881310e+03
  3.15217790e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431834236391  E_coul = 198.9126669423171
Extra cycle  E= -507.630516481322  delta_E= -1.14e-13  |g|= 2.94e-11  |ddm|= 4.23e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549495e+04 2.23216146e+03
 4.57765534e+02 1.21906285e+02 3.76224901e+01 4.74129007e+00
 3.91197922e-01 8.59864124e+00 4.90849527e-01]
grad_E = [ 1.58647823e-10  9.14428510e-09  4.38641339e-06 -1.48591139e-06
  2.36228859e-06  2.54345840e-06 -1.20579948e-06  1.51667807e-06
 -1.29026400e-06 -9.40634493e-07  1.26645136e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999973        1
[INPUT] 0    0    [1    /1   ]  18354.9487176        1
[INPUT] 0    0    [1    /1   ]  2232.16170051        1
[INPUT] 0    0    [1    /1   ]  457.765603776        1
[INPUT] 0    0    [1    /1   ]  121.904204841        1
[INPUT] 0    0    [1    /1   ]  37.6217621432        1
[INPUT] 0    0    [1    /1   ]  4.7412903641         1
[INPUT] 0    0    [1    /1   ]  0.391197799097       1
[INPUT] 1    0    [1    /1   ]  8.59864166675        1
[INPUT] 1    0    [1    /1   ]  0.490849554363       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999533, 1.0]], [0, [799999.9999730391, 1.0]], [0, [18354.948717625415, 1.0]], [0, [2232.161700507135, 1.0]], [0, [457.7656037762133, 1.0]], [0, [121.90420484059996, 1.0]], [0, [37.62176214319361, 1.0]], [0, [4.74129036409552, 1.0]], [0, [0.3911977990968345, 1.0]], [1, [8.59864166675391, 1.0]], [1, [0.4908495543629774, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999953]
bas 1, expnt(s) = [799999.99997304]
bas 2, expnt(s) = [18354.94871763]
bas 3, expnt(s) = [2232.16170051]
bas 4, expnt(s) = [457.76560378]
bas 5, expnt(s) = [121.90420484]
bas 6, expnt(s) = [37.62176214]
bas 7, expnt(s) = [4.74129036]
bas 8, expnt(s) = [0.3911978]
bas 9, expnt(s) = [8.59864167]
bas 10, expnt(s) = [0.49084955]
CPU time:       159.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549487e+04 3.98409702e+03 2.23216170e+03 8.20463496e+02
 4.57765604e+02 2.50033035e+02 1.21904205e+02 9.26891797e+01
 3.76217621e+01 3.83790636e+01 4.74129036e+00 8.11778302e+00
 3.91197799e-01 1.24971887e+00 8.59864167e+00 4.29557896e+01
 4.90849554e-01 1.19858791e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972287042873
cond(S) = 42.97597203612496
E1 = -688.6351706488272  E_coul = 184.91526596239433
init E= -503.719904686433
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901973512058  LUMO = 85.200918816897
  mo_energy =
[-1.21646285e+02 -1.32807935e+01 -7.62161281e+00 -7.62161281e+00
 -7.62161281e+00 -1.65067697e+00 -6.80901974e-01 -6.80901974e-01
 -6.80901974e-01  8.52009188e+01  6.78646993e+02  3.94756954e+03
  3.15207096e+04  1.12121417e+06  7.13808337e+06]
E1 = -706.5749832789633  E_coul = 198.94489380582215
cycle= 1 E= -507.630089473141  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377336
diis-c [-0.14238216  1.        ]
  HOMO = -0.236279841500933  LUMO = 86.5340196258764
  mo_energy =
[-1.20258514e+02 -1.22527107e+01 -6.65309633e+00 -6.65309633e+00
 -6.65309633e+00 -1.16345483e+00 -2.36279842e-01 -2.36279842e-01
 -2.36279842e-01  8.65340196e+01  6.80017167e+02  3.94881960e+03
  3.15217902e+04  1.12121515e+06  7.13808434e+06]
E1 = -706.5436225151974  E_coul = 198.91310613662992
cycle= 2 E= -507.630516378567  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050323
diis-c [-2.52393087e-05 -7.72198157e-04  1.00077220e+00]
  HOMO = -0.236454596874316  LUMO = 86.5305046704335
  mo_energy =
[-1.20267139e+02 -1.22538965e+01 -6.65493289e+00 -6.65493289e+00
 -6.65493289e+00 -1.16351943e+00 -2.36454597e-01 -2.36454597e-01
 -2.36454597e-01  8.65305047e+01  6.80006590e+02  3.94880372e+03
  3.15217709e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431836824964  E_coul = 198.91266719428958
cycle= 3 E= -507.630516488207  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125081
diis-c [-3.74447386e-10  3.85663826e-05 -2.52146777e-02  1.02517611e+00]
  HOMO = -0.236456752988551  LUMO = 86.5304610860447
  mo_energy =
[-1.20267250e+02 -1.22539119e+01 -6.65495925e+00 -6.65495925e+00
 -6.65495925e+00 -1.16352006e+00 -2.36456753e-01 -2.36456753e-01
 -2.36456753e-01  8.65304611e+01  6.80006477e+02  3.94880358e+03
  3.15217707e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431765952162  E_coul = 198.91266010697117
cycle= 4 E= -507.630516488245  delta_E= -3.82e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431765952162  E_coul = 198.91266010697117
  HOMO = -0.236456737570943  LUMO = 86.5304614070119
  mo_energy =
[-1.20267249e+02 -1.22539118e+01 -6.65495910e+00 -6.65495910e+00
 -6.65495910e+00 -1.16352006e+00 -2.36456738e-01 -2.36456738e-01
 -2.36456738e-01  8.65304614e+01  6.80006478e+02  3.94880358e+03
  3.15217707e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431766300808  E_coul = 198.91266014183557
Extra cycle  E= -507.630516488245  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549487e+04 2.23216170e+03
 4.57765604e+02 1.21904205e+02 3.76217621e+01 4.74129036e+00
 3.91197799e-01 8.59864167e+00 4.90849554e-01]
E = -507.63051648824523
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999973        1
[INPUT] 0    0    [1    /1   ]  18354.9487176        1
[INPUT] 0    0    [1    /1   ]  2232.16170051        1
[INPUT] 0    0    [1    /1   ]  457.765603776        1
[INPUT] 0    0    [1    /1   ]  121.904204841        1
[INPUT] 0    0    [1    /1   ]  37.6217621432        1
[INPUT] 0    0    [1    /1   ]  4.7412903641         1
[INPUT] 0    0    [1    /1   ]  0.391197799097       1
[INPUT] 1    0    [1    /1   ]  8.59864166675        1
[INPUT] 1    0    [1    /1   ]  0.490849554363       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999533, 1.0]], [0, [799999.9999730391, 1.0]], [0, [18354.948717625415, 1.0]], [0, [2232.161700507135, 1.0]], [0, [457.7656037762133, 1.0]], [0, [121.90420484059996, 1.0]], [0, [37.62176214319361, 1.0]], [0, [4.74129036409552, 1.0]], [0, [0.3911977990968345, 1.0]], [1, [8.59864166675391, 1.0]], [1, [0.4908495543629774, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999953]
bas 1, expnt(s) = [799999.99997304]
bas 2, expnt(s) = [18354.94871763]
bas 3, expnt(s) = [2232.16170051]
bas 4, expnt(s) = [457.76560378]
bas 5, expnt(s) = [121.90420484]
bas 6, expnt(s) = [37.62176214]
bas 7, expnt(s) = [4.74129036]
bas 8, expnt(s) = [0.3911978]
bas 9, expnt(s) = [8.59864167]
bas 10, expnt(s) = [0.49084955]
CPU time:       160.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549487e+04 3.98409702e+03 2.23216170e+03 8.20463496e+02
 4.57765604e+02 2.50033035e+02 1.21904205e+02 9.26891797e+01
 3.76217621e+01 3.83790636e+01 4.74129036e+00 8.11778302e+00
 3.91197799e-01 1.24971887e+00 8.59864167e+00 4.29557896e+01
 4.90849554e-01 1.19858791e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972287042873
cond(S) = 42.97597203612496
E1 = -688.6351706488272  E_coul = 184.91526596239433
init E= -503.719904686433
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901973512058  LUMO = 85.200918816897
  mo_energy =
[-1.21646285e+02 -1.32807935e+01 -7.62161281e+00 -7.62161281e+00
 -7.62161281e+00 -1.65067697e+00 -6.80901974e-01 -6.80901974e-01
 -6.80901974e-01  8.52009188e+01  6.78646993e+02  3.94756954e+03
  3.15207096e+04  1.12121417e+06  7.13808337e+06]
E1 = -706.5749832789633  E_coul = 198.94489380582215
cycle= 1 E= -507.630089473141  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377336
diis-c [-0.14238216  1.        ]
  HOMO = -0.236279841500933  LUMO = 86.5340196258764
  mo_energy =
[-1.20258514e+02 -1.22527107e+01 -6.65309633e+00 -6.65309633e+00
 -6.65309633e+00 -1.16345483e+00 -2.36279842e-01 -2.36279842e-01
 -2.36279842e-01  8.65340196e+01  6.80017167e+02  3.94881960e+03
  3.15217902e+04  1.12121515e+06  7.13808434e+06]
E1 = -706.5436225151974  E_coul = 198.91310613662992
cycle= 2 E= -507.630516378567  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050323
diis-c [-2.52393087e-05 -7.72198157e-04  1.00077220e+00]
  HOMO = -0.236454596874316  LUMO = 86.5305046704335
  mo_energy =
[-1.20267139e+02 -1.22538965e+01 -6.65493289e+00 -6.65493289e+00
 -6.65493289e+00 -1.16351943e+00 -2.36454597e-01 -2.36454597e-01
 -2.36454597e-01  8.65305047e+01  6.80006590e+02  3.94880372e+03
  3.15217709e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431836824964  E_coul = 198.91266719428958
cycle= 3 E= -507.630516488207  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125081
diis-c [-3.74447386e-10  3.85663826e-05 -2.52146777e-02  1.02517611e+00]
  HOMO = -0.236456752988551  LUMO = 86.5304610860447
  mo_energy =
[-1.20267250e+02 -1.22539119e+01 -6.65495925e+00 -6.65495925e+00
 -6.65495925e+00 -1.16352006e+00 -2.36456753e-01 -2.36456753e-01
 -2.36456753e-01  8.65304611e+01  6.80006477e+02  3.94880358e+03
  3.15217707e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431765952162  E_coul = 198.91266010697117
cycle= 4 E= -507.630516488245  delta_E= -3.82e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431765952162  E_coul = 198.91266010697117
  HOMO = -0.236456737570943  LUMO = 86.5304614070119
  mo_energy =
[-1.20267249e+02 -1.22539118e+01 -6.65495910e+00 -6.65495910e+00
 -6.65495910e+00 -1.16352006e+00 -2.36456738e-01 -2.36456738e-01
 -2.36456738e-01  8.65304614e+01  6.80006478e+02  3.94880358e+03
  3.15217707e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431766300808  E_coul = 198.91266014183557
Extra cycle  E= -507.630516488245  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97597203612496
E1 = -706.5431766300808  E_coul = 198.91266014183557
init E= -507.630516488245
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456737391432  LUMO = 86.5304614109234
  mo_energy =
[-1.20267249e+02 -1.22539118e+01 -6.65495910e+00 -6.65495910e+00
 -6.65495910e+00 -1.16352006e+00 -2.36456737e-01 -2.36456737e-01
 -2.36456737e-01  8.65304614e+01  6.80006478e+02  3.94880358e+03
  3.15217707e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431766306057  E_coul = 198.91266014236018
cycle= 1 E= -507.630516488245  delta_E= -2.27e-13  |g|= 1.21e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431766306057  E_coul = 198.91266014236018
  HOMO = -0.236456737388917  LUMO = 86.530461410979
  mo_energy =
[-1.20267249e+02 -1.22539118e+01 -6.65495910e+00 -6.65495910e+00
 -6.65495910e+00 -1.16352006e+00 -2.36456737e-01 -2.36456737e-01
 -2.36456737e-01  8.65304614e+01  6.80006478e+02  3.94880358e+03
  3.15217707e+04  1.12121513e+06  7.13808432e+06]
E1 = -706.5431766306144  E_coul = 198.91266014236902
Extra cycle  E= -507.630516488245  delta_E= 5.68e-14  |g|= 2.17e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.16 sec, wall time      0.16 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549487e+04 2.23216170e+03
 4.57765604e+02 1.21904205e+02 3.76217621e+01 4.74129036e+00
 3.91197799e-01 8.59864167e+00 4.90849554e-01]
grad_E = [ 1.58647148e-10  9.14425861e-09  4.38658965e-06 -1.50096229e-06
  2.62763479e-06  1.75291310e-06 -2.35859130e-06  1.50858848e-06
 -1.29170427e-06 -9.48129724e-07  1.27545633e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999969        1
[INPUT] 0    0    [1    /1   ]  18354.9466951        1
[INPUT] 0    0    [1    /1   ]  2232.16234824        1
[INPUT] 0    0    [1    /1   ]  457.765107191        1
[INPUT] 0    0    [1    /1   ]  121.901216092        1
[INPUT] 0    0    [1    /1   ]  37.620743534         1
[INPUT] 0    0    [1    /1   ]  4.74129064394        1
[INPUT] 0    0    [1    /1   ]  0.391197629937       1
[INPUT] 1    0    [1    /1   ]  8.59864226089        1
[INPUT] 1    0    [1    /1   ]  0.490849592916       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.99999946, 1.0]], [0, [799999.9999688218, 1.0]], [0, [18354.94669509301, 1.0]], [0, [2232.1623482357977, 1.0]], [0, [457.765107190542, 1.0]], [0, [121.9012160921821, 1.0]], [0, [37.620743534045175, 1.0]], [0, [4.741290643936966, 1.0]], [0, [0.3911976299368566, 1.0]], [1, [8.598642260886798, 1.0]], [1, [0.4908495929158638, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999946]
bas 1, expnt(s) = [799999.99996882]
bas 2, expnt(s) = [18354.94669509]
bas 3, expnt(s) = [2232.16234824]
bas 4, expnt(s) = [457.76510719]
bas 5, expnt(s) = [121.90121609]
bas 6, expnt(s) = [37.62074353]
bas 7, expnt(s) = [4.74129064]
bas 8, expnt(s) = [0.39119763]
bas 9, expnt(s) = [8.59864226]
bas 10, expnt(s) = [0.49084959]
CPU time:       164.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549467e+04 3.98409669e+03 2.23216235e+03 8.20463675e+02
 4.57765107e+02 2.50032831e+02 1.21901216e+02 9.26874754e+01
 3.76207435e+01 3.83782843e+01 4.74129064e+00 8.11778338e+00
 3.91197630e-01 1.24971846e+00 8.59864226e+00 4.29557933e+01
 4.90849593e-01 1.19858803e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972314450258
cond(S) = 42.9747323092778
E1 = -688.6351834933791  E_coul = 184.91526351934039
init E= -503.719919974039
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901998660708  LUMO = 85.1975012618245
  mo_energy =
[-1.21646286e+02 -1.32807918e+01 -7.62161318e+00 -7.62161318e+00
 -7.62161318e+00 -1.65067671e+00 -6.80901999e-01 -6.80901999e-01
 -6.80901999e-01  8.51975013e+01  6.78634676e+02  3.94755448e+03
  3.15206957e+04  1.12121416e+06  7.13808336e+06]
E1 = -706.574975816994  E_coul = 198.94488635909994
cycle= 1 E= -507.630089457894  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377334
diis-c [-0.14238071  1.        ]
  HOMO = -0.236279900808737  LUMO = 86.5305972819037
  mo_energy =
[-1.20258518e+02 -1.22527094e+01 -6.65309688e+00 -6.65309688e+00
 -6.65309688e+00 -1.16345470e+00 -2.36279901e-01 -2.36279901e-01
 -2.36279901e-01  8.65305973e+01  6.80004846e+02  3.94880454e+03
  3.15217763e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5436131763138  E_coul = 198.91309678608314
cycle= 2 E= -507.630516390231  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503247
diis-c [-2.52410803e-05 -7.71994154e-04  1.00077199e+00]
  HOMO = -0.236454668479982  LUMO = 86.527082190089
  mo_energy =
[-1.20267143e+02 -1.22538952e+01 -6.65493357e+00 -6.65493357e+00
 -6.65493357e+00 -1.16351930e+00 -2.36454668e-01 -2.36454668e-01
 -2.36454668e-01  8.65270822e+01  6.79994269e+02  3.94878865e+03
  3.15217569e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.5431743071388  E_coul = 198.9126578072576
cycle= 3 E= -507.630516499881  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125088
diis-c [-3.74495625e-10  3.85656325e-05 -2.52153470e-02  1.02517678e+00]
  HOMO = -0.23645682483179  LUMO = 86.5270386018996
  mo_energy =
[-1.20267253e+02 -1.22539106e+01 -6.65495994e+00 -6.65495994e+00
 -6.65495994e+00 -1.16351993e+00 -2.36456825e-01 -2.36456825e-01
 -2.36456825e-01  8.65270386e+01  6.79994155e+02  3.94878851e+03
  3.15217568e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.543167219002  E_coul = 198.91265071908265
cycle= 4 E= -507.630516499919  delta_E= -3.82e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543167219002  E_coul = 198.91265071908265
  HOMO = -0.23645680941214  LUMO = 86.5270389228934
  mo_energy =
[-1.20267253e+02 -1.22539105e+01 -6.65495979e+00 -6.65495979e+00
 -6.65495979e+00 -1.16351993e+00 -2.36456809e-01 -2.36456809e-01
 -2.36456809e-01  8.65270389e+01  6.79994156e+02  3.94878851e+03
  3.15217568e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.5431672538714  E_coul = 198.9126507539518
Extra cycle  E= -507.63051649992  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549467e+04 2.23216235e+03
 4.57765107e+02 1.21901216e+02 3.76207435e+01 4.74129064e+00
 3.91197630e-01 8.59864226e+00 4.90849593e-01]
E = -507.6305164999196
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999969        1
[INPUT] 0    0    [1    /1   ]  18354.9466951        1
[INPUT] 0    0    [1    /1   ]  2232.16234824        1
[INPUT] 0    0    [1    /1   ]  457.765107191        1
[INPUT] 0    0    [1    /1   ]  121.901216092        1
[INPUT] 0    0    [1    /1   ]  37.620743534         1
[INPUT] 0    0    [1    /1   ]  4.74129064394        1
[INPUT] 0    0    [1    /1   ]  0.391197629937       1
[INPUT] 1    0    [1    /1   ]  8.59864226089        1
[INPUT] 1    0    [1    /1   ]  0.490849592916       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.99999946, 1.0]], [0, [799999.9999688218, 1.0]], [0, [18354.94669509301, 1.0]], [0, [2232.1623482357977, 1.0]], [0, [457.765107190542, 1.0]], [0, [121.9012160921821, 1.0]], [0, [37.620743534045175, 1.0]], [0, [4.741290643936966, 1.0]], [0, [0.3911976299368566, 1.0]], [1, [8.598642260886798, 1.0]], [1, [0.4908495929158638, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999946]
bas 1, expnt(s) = [799999.99996882]
bas 2, expnt(s) = [18354.94669509]
bas 3, expnt(s) = [2232.16234824]
bas 4, expnt(s) = [457.76510719]
bas 5, expnt(s) = [121.90121609]
bas 6, expnt(s) = [37.62074353]
bas 7, expnt(s) = [4.74129064]
bas 8, expnt(s) = [0.39119763]
bas 9, expnt(s) = [8.59864226]
bas 10, expnt(s) = [0.49084959]
CPU time:       165.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549467e+04 3.98409669e+03 2.23216235e+03 8.20463675e+02
 4.57765107e+02 2.50032831e+02 1.21901216e+02 9.26874754e+01
 3.76207435e+01 3.83782843e+01 4.74129064e+00 8.11778338e+00
 3.91197630e-01 1.24971846e+00 8.59864226e+00 4.29557933e+01
 4.90849593e-01 1.19858803e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972314450258
cond(S) = 42.9747323092778
E1 = -688.6351834933791  E_coul = 184.91526351934039
init E= -503.719919974039
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901998660708  LUMO = 85.1975012618245
  mo_energy =
[-1.21646286e+02 -1.32807918e+01 -7.62161318e+00 -7.62161318e+00
 -7.62161318e+00 -1.65067671e+00 -6.80901999e-01 -6.80901999e-01
 -6.80901999e-01  8.51975013e+01  6.78634676e+02  3.94755448e+03
  3.15206957e+04  1.12121416e+06  7.13808336e+06]
E1 = -706.574975816994  E_coul = 198.94488635909994
cycle= 1 E= -507.630089457894  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377334
diis-c [-0.14238071  1.        ]
  HOMO = -0.236279900808737  LUMO = 86.5305972819037
  mo_energy =
[-1.20258518e+02 -1.22527094e+01 -6.65309688e+00 -6.65309688e+00
 -6.65309688e+00 -1.16345470e+00 -2.36279901e-01 -2.36279901e-01
 -2.36279901e-01  8.65305973e+01  6.80004846e+02  3.94880454e+03
  3.15217763e+04  1.12121514e+06  7.13808433e+06]
E1 = -706.5436131763138  E_coul = 198.91309678608314
cycle= 2 E= -507.630516390231  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503247
diis-c [-2.52410803e-05 -7.71994154e-04  1.00077199e+00]
  HOMO = -0.236454668479982  LUMO = 86.527082190089
  mo_energy =
[-1.20267143e+02 -1.22538952e+01 -6.65493357e+00 -6.65493357e+00
 -6.65493357e+00 -1.16351930e+00 -2.36454668e-01 -2.36454668e-01
 -2.36454668e-01  8.65270822e+01  6.79994269e+02  3.94878865e+03
  3.15217569e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.5431743071388  E_coul = 198.9126578072576
cycle= 3 E= -507.630516499881  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125088
diis-c [-3.74495625e-10  3.85656325e-05 -2.52153470e-02  1.02517678e+00]
  HOMO = -0.23645682483179  LUMO = 86.5270386018996
  mo_energy =
[-1.20267253e+02 -1.22539106e+01 -6.65495994e+00 -6.65495994e+00
 -6.65495994e+00 -1.16351993e+00 -2.36456825e-01 -2.36456825e-01
 -2.36456825e-01  8.65270386e+01  6.79994155e+02  3.94878851e+03
  3.15217568e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.543167219002  E_coul = 198.91265071908265
cycle= 4 E= -507.630516499919  delta_E= -3.82e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543167219002  E_coul = 198.91265071908265
  HOMO = -0.23645680941214  LUMO = 86.5270389228934
  mo_energy =
[-1.20267253e+02 -1.22539105e+01 -6.65495979e+00 -6.65495979e+00
 -6.65495979e+00 -1.16351993e+00 -2.36456809e-01 -2.36456809e-01
 -2.36456809e-01  8.65270389e+01  6.79994156e+02  3.94878851e+03
  3.15217568e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.5431672538714  E_coul = 198.9126507539518
Extra cycle  E= -507.63051649992  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.9747323092778
E1 = -706.5431672538714  E_coul = 198.9126507539518
init E= -507.63051649992
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236456809232596  LUMO = 86.5270389268038
  mo_energy =
[-1.20267253e+02 -1.22539105e+01 -6.65495979e+00 -6.65495979e+00
 -6.65495979e+00 -1.16351993e+00 -2.36456809e-01 -2.36456809e-01
 -2.36456809e-01  8.65270389e+01  6.79994156e+02  3.94878851e+03
  3.15217568e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.5431672543966  E_coul = 198.91265075447683
cycle= 1 E= -507.63051649992  delta_E= -1.71e-13  |g|= 1.25e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431672543966  E_coul = 198.91265075447683
  HOMO = -0.236456809230076  LUMO = 86.5270389268589
  mo_energy =
[-1.20267253e+02 -1.22539105e+01 -6.65495979e+00 -6.65495979e+00
 -6.65495979e+00 -1.16351993e+00 -2.36456809e-01 -2.36456809e-01
 -2.36456809e-01  8.65270389e+01  6.79994156e+02  3.94878851e+03
  3.15217568e+04  1.12121512e+06  7.13808431e+06]
E1 = -706.5431672544056  E_coul = 198.91265075448584
Extra cycle  E= -507.63051649992  delta_E= 5.68e-14  |g|= 4.71e-11  |ddm|= 4.23e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549467e+04 2.23216235e+03
 4.57765107e+02 1.21901216e+02 3.76207435e+01 4.74129064e+00
 3.91197630e-01 8.59864226e+00 4.90849593e-01]
grad_E = [ 1.58646369e-10  9.14422792e-09  4.38679660e-06 -1.51949760e-06
  2.97750077e-06  6.76602649e-07 -3.91986555e-06  1.49596878e-06
 -1.29223785e-06 -9.57215498e-07  1.28624868e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.99996         1
[INPUT] 0    0    [1    /1   ]  18354.9424194        1
[INPUT] 0    0    [1    /1   ]  2232.16376171        1
[INPUT] 0    0    [1    /1   ]  457.763370658        1
[INPUT] 0    0    [1    /1   ]  121.8971494          1
[INPUT] 0    0    [1    /1   ]  37.6194056432        1
[INPUT] 0    0    [1    /1   ]  4.74129077424        1
[INPUT] 0    0    [1    /1   ]  0.391197411878       1
[INPUT] 1    0    [1    /1   ]  8.59864302425        1
[INPUT] 1    0    [1    /1   ]  0.490849643147       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999993052, 1.0]], [0, [799999.9999599074, 1.0]], [0, [18354.94241942061, 1.0]], [0, [2232.1637617144634, 1.0]], [0, [457.7633706579148, 1.0]], [0, [121.89714940037207, 1.0]], [0, [37.61940564324218, 1.0]], [0, [4.741290774241771, 1.0]], [0, [0.39119741187797147, 1.0]], [1, [8.598643024250809, 1.0]], [1, [0.4908496431471625, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999931]
bas 1, expnt(s) = [799999.99995991]
bas 2, expnt(s) = [18354.94241942]
bas 3, expnt(s) = [2232.16376171]
bas 4, expnt(s) = [457.76337066]
bas 5, expnt(s) = [121.8971494]
bas 6, expnt(s) = [37.61940564]
bas 7, expnt(s) = [4.74129077]
bas 8, expnt(s) = [0.39119741]
bas 9, expnt(s) = [8.59864302]
bas 10, expnt(s) = [0.49084964]
CPU time:       169.41
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549424e+04 3.98409600e+03 2.23216376e+03 8.20464065e+02
 4.57763371e+02 2.50032120e+02 1.21897149e+02 9.26851563e+01
 3.76194056e+01 3.83772606e+01 4.74129077e+00 8.11778355e+00
 3.91197412e-01 1.24971794e+00 8.59864302e+00 4.29557980e+01
 4.90849643e-01 1.19858818e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972354262376
cond(S) = 42.97318143029912
E1 = -688.635198729123  E_coul = 184.91526030888068
init E= -503.719938420242
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902028572488  LUMO = 85.1929544937358
  mo_energy =
[-1.21646289e+02 -1.32807896e+01 -7.62161365e+00 -7.62161365e+00
 -7.62161365e+00 -1.65067637e+00 -6.80902029e-01 -6.80902029e-01
 -6.80902029e-01  8.51929545e+01  6.78617226e+02  3.94753152e+03
  3.15206732e+04  1.12121414e+06  7.13808335e+06]
E1 = -706.5749662808387  E_coul = 198.94487683880737
cycle= 1 E= -507.630089442031  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377331
diis-c [-0.14237896  1.        ]
  HOMO = -0.236279977776927  LUMO = 86.5260441909944
  mo_energy =
[-1.20258522e+02 -1.22527076e+01 -6.65309761e+00 -6.65309761e+00
 -6.65309761e+00 -1.16345453e+00 -2.36279978e-01 -2.36279978e-01
 -2.36279978e-01  8.65260442e+01  6.79987392e+02  3.94878157e+03
  3.15217537e+04  1.12121512e+06  7.13808432e+06]
E1 = -706.5436011483438  E_coul = 198.91308473823756
cycle= 2 E= -507.630516410106  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050327
diis-c [-2.52434074e-05 -7.71725407e-04  1.00077173e+00]
  HOMO = -0.236454761802173  LUMO = 86.5225289191818
  mo_energy =
[-1.20267148e+02 -1.22538936e+01 -6.65493446e+00 -6.65493446e+00
 -6.65493446e+00 -1.16351914e+00 -2.36454762e-01 -2.36454762e-01
 -2.36454762e-01  8.65225289e+01  6.79976815e+02  3.94876568e+03
  3.15217344e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.5431622306476  E_coul = 198.912645710876
cycle= 3 E= -507.630516519772  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125099
diis-c [-3.74557850e-10  3.85648474e-05 -2.52162379e-02  1.02517767e+00]
  HOMO = -0.236456918469635  LUMO = 86.5224853259472
  mo_energy =
[-1.20267258e+02 -1.22539089e+01 -6.65496083e+00 -6.65496083e+00
 -6.65496083e+00 -1.16351977e+00 -2.36456918e-01 -2.36456918e-01
 -2.36456918e-01  8.65224853e+01  6.79976701e+02  3.94876554e+03
  3.15217343e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.543155141373  E_coul = 198.9126386215626
cycle= 4 E= -507.63051651981  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543155141373  E_coul = 198.9126386215626
  HOMO = -0.236456903047297  LUMO = 86.5224856469766
  mo_energy =
[-1.20267258e+02 -1.22539088e+01 -6.65496068e+00 -6.65496068e+00
 -6.65496068e+00 -1.16351977e+00 -2.36456903e-01 -2.36456903e-01
 -2.36456903e-01  8.65224856e+01  6.79976702e+02  3.94876554e+03
  3.15217343e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.5431551762487  E_coul = 198.91263865643808
Extra cycle  E= -507.630516519811  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549424e+04 2.23216376e+03
 4.57763371e+02 1.21897149e+02 3.76194056e+01 4.74129077e+00
 3.91197412e-01 8.59864302e+00 4.90849643e-01]
E = -507.6305165198106
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.99996         1
[INPUT] 0    0    [1    /1   ]  18354.9424194        1
[INPUT] 0    0    [1    /1   ]  2232.16376171        1
[INPUT] 0    0    [1    /1   ]  457.763370658        1
[INPUT] 0    0    [1    /1   ]  121.8971494          1
[INPUT] 0    0    [1    /1   ]  37.6194056432        1
[INPUT] 0    0    [1    /1   ]  4.74129077424        1
[INPUT] 0    0    [1    /1   ]  0.391197411878       1
[INPUT] 1    0    [1    /1   ]  8.59864302425        1
[INPUT] 1    0    [1    /1   ]  0.490849643147       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999993052, 1.0]], [0, [799999.9999599074, 1.0]], [0, [18354.94241942061, 1.0]], [0, [2232.1637617144634, 1.0]], [0, [457.7633706579148, 1.0]], [0, [121.89714940037207, 1.0]], [0, [37.61940564324218, 1.0]], [0, [4.741290774241771, 1.0]], [0, [0.39119741187797147, 1.0]], [1, [8.598643024250809, 1.0]], [1, [0.4908496431471625, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999931]
bas 1, expnt(s) = [799999.99995991]
bas 2, expnt(s) = [18354.94241942]
bas 3, expnt(s) = [2232.16376171]
bas 4, expnt(s) = [457.76337066]
bas 5, expnt(s) = [121.8971494]
bas 6, expnt(s) = [37.61940564]
bas 7, expnt(s) = [4.74129077]
bas 8, expnt(s) = [0.39119741]
bas 9, expnt(s) = [8.59864302]
bas 10, expnt(s) = [0.49084964]
CPU time:       170.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549424e+04 3.98409600e+03 2.23216376e+03 8.20464065e+02
 4.57763371e+02 2.50032120e+02 1.21897149e+02 9.26851563e+01
 3.76194056e+01 3.83772606e+01 4.74129077e+00 8.11778355e+00
 3.91197412e-01 1.24971794e+00 8.59864302e+00 4.29557980e+01
 4.90849643e-01 1.19858818e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972354262376
cond(S) = 42.97318143029912
E1 = -688.635198729123  E_coul = 184.91526030888068
init E= -503.719938420242
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902028572488  LUMO = 85.1929544937358
  mo_energy =
[-1.21646289e+02 -1.32807896e+01 -7.62161365e+00 -7.62161365e+00
 -7.62161365e+00 -1.65067637e+00 -6.80902029e-01 -6.80902029e-01
 -6.80902029e-01  8.51929545e+01  6.78617226e+02  3.94753152e+03
  3.15206732e+04  1.12121414e+06  7.13808335e+06]
E1 = -706.5749662808387  E_coul = 198.94487683880737
cycle= 1 E= -507.630089442031  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377331
diis-c [-0.14237896  1.        ]
  HOMO = -0.236279977776927  LUMO = 86.5260441909944
  mo_energy =
[-1.20258522e+02 -1.22527076e+01 -6.65309761e+00 -6.65309761e+00
 -6.65309761e+00 -1.16345453e+00 -2.36279978e-01 -2.36279978e-01
 -2.36279978e-01  8.65260442e+01  6.79987392e+02  3.94878157e+03
  3.15217537e+04  1.12121512e+06  7.13808432e+06]
E1 = -706.5436011483438  E_coul = 198.91308473823756
cycle= 2 E= -507.630516410106  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050327
diis-c [-2.52434074e-05 -7.71725407e-04  1.00077173e+00]
  HOMO = -0.236454761802173  LUMO = 86.5225289191818
  mo_energy =
[-1.20267148e+02 -1.22538936e+01 -6.65493446e+00 -6.65493446e+00
 -6.65493446e+00 -1.16351914e+00 -2.36454762e-01 -2.36454762e-01
 -2.36454762e-01  8.65225289e+01  6.79976815e+02  3.94876568e+03
  3.15217344e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.5431622306476  E_coul = 198.912645710876
cycle= 3 E= -507.630516519772  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125099
diis-c [-3.74557850e-10  3.85648474e-05 -2.52162379e-02  1.02517767e+00]
  HOMO = -0.236456918469635  LUMO = 86.5224853259472
  mo_energy =
[-1.20267258e+02 -1.22539089e+01 -6.65496083e+00 -6.65496083e+00
 -6.65496083e+00 -1.16351977e+00 -2.36456918e-01 -2.36456918e-01
 -2.36456918e-01  8.65224853e+01  6.79976701e+02  3.94876554e+03
  3.15217343e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.543155141373  E_coul = 198.9126386215626
cycle= 4 E= -507.63051651981  delta_E= -3.88e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.543155141373  E_coul = 198.9126386215626
  HOMO = -0.236456903047297  LUMO = 86.5224856469766
  mo_energy =
[-1.20267258e+02 -1.22539088e+01 -6.65496068e+00 -6.65496068e+00
 -6.65496068e+00 -1.16351977e+00 -2.36456903e-01 -2.36456903e-01
 -2.36456903e-01  8.65224856e+01  6.79976702e+02  3.94876554e+03
  3.15217343e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.5431551762487  E_coul = 198.91263865643808
Extra cycle  E= -507.630516519811  delta_E= -2.27e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97318143029912
E1 = -706.5431551762487  E_coul = 198.91263865643808
init E= -507.630516519811
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236456902867718  LUMO = 86.5224856508877
  mo_energy =
[-1.20267258e+02 -1.22539088e+01 -6.65496068e+00 -6.65496068e+00
 -6.65496068e+00 -1.16351977e+00 -2.36456903e-01 -2.36456903e-01
 -2.36456903e-01  8.65224857e+01  6.79976702e+02  3.94876554e+03
  3.15217343e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.5431551767731  E_coul = 198.91263865696288
cycle= 1 E= -507.63051651981  delta_E= 3.98e-13  |g|= 1.24e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431551767731  E_coul = 198.91263865696288
  HOMO = -0.236456902865204  LUMO = 86.5224856509435
  mo_energy =
[-1.20267258e+02 -1.22539088e+01 -6.65496068e+00 -6.65496068e+00
 -6.65496068e+00 -1.16351977e+00 -2.36456903e-01 -2.36456903e-01
 -2.36456903e-01  8.65224857e+01  6.79976702e+02  3.94876554e+03
  3.15217343e+04  1.12121510e+06  7.13808429e+06]
E1 = -706.5431551767826  E_coul = 198.91263865697195
Extra cycle  E= -507.630516519811  delta_E= -5.12e-13  |g|= 5.47e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549424e+04 2.23216376e+03
 4.57763371e+02 1.21897149e+02 3.76194056e+01 4.74129077e+00
 3.91197412e-01 8.59864302e+00 4.90849643e-01]
grad_E = [ 1.58645651e-10  9.14419929e-09  4.38699592e-06 -1.53922772e-06
  3.39784433e-06 -6.82320883e-07 -5.87578498e-06  1.47696320e-06
 -1.29017378e-06 -9.66592950e-07  1.29709065e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999943        1
[INPUT] 0    0    [1    /1   ]  18354.9342323        1
[INPUT] 0    0    [1    /1   ]  2232.16651463        1
[INPUT] 0    0    [1    /1   ]  457.759324635        1
[INPUT] 0    0    [1    /1   ]  121.891726024        1
[INPUT] 0    0    [1    /1   ]  37.6176998616        1
[INPUT] 0    0    [1    /1   ]  4.7412905394         1
[INPUT] 0    0    [1    /1   ]  0.391197140828       1
[INPUT] 1    0    [1    /1   ]  8.59864396882        1
[INPUT] 1    0    [1    /1   ]  0.490849706505       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999009, 1.0]], [0, [799999.9999428393, 1.0]], [0, [18354.934232273226, 1.0]], [0, [2232.1665146321056, 1.0]], [0, [457.75932463505507, 1.0]], [0, [121.89172602389523, 1.0]], [0, [37.61769986161978, 1.0]], [0, [4.74129053939666, 1.0]], [0, [0.39119714082767915, 1.0]], [1, [8.598643968821529, 1.0]], [1, [0.49084970650509246, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999901]
bas 1, expnt(s) = [799999.99994284]
bas 2, expnt(s) = [18354.93423227]
bas 3, expnt(s) = [2232.16651463]
bas 4, expnt(s) = [457.75932464]
bas 5, expnt(s) = [121.89172602]
bas 6, expnt(s) = [37.61769986]
bas 7, expnt(s) = [4.74129054]
bas 8, expnt(s) = [0.39119714]
bas 9, expnt(s) = [8.59864397]
bas 10, expnt(s) = [0.49084971]
CPU time:       174.10
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549342e+04 3.98409466e+03 2.23216651e+03 8.20464823e+02
 4.57759325e+02 2.50030462e+02 1.21891726e+02 9.26820635e+01
 3.76176999e+01 3.83759555e+01 4.74129054e+00 8.11778325e+00
 3.91197141e-01 1.24971729e+00 8.59864397e+00 4.29558039e+01
 4.90849707e-01 1.19858838e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972411469642
cond(S) = 42.971334911176505
E1 = -688.6352153947267  E_coul = 184.9152562130162
init E= -503.719959181711
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902061435327  LUMO = 85.1870595034345
  mo_energy =
[-1.21646292e+02 -1.32807871e+01 -7.62161426e+00 -7.62161426e+00
 -7.62161426e+00 -1.65067595e+00 -6.80902061e-01 -6.80902061e-01
 -6.80902061e-01  8.51870595e+01  6.78592830e+02  3.94749687e+03
  3.15206373e+04  1.12121411e+06  7.13808332e+06]
E1 = -706.5749545716415  E_coul = 198.94486514114266
cycle= 1 E= -507.630089430499  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377329
diis-c [-0.142377  1.      ]
  HOMO = -0.236280074338526  LUMO = 86.5201410837366
  mo_energy =
[-1.20258527e+02 -1.22527056e+01 -6.65309852e+00 -6.65309852e+00
 -6.65309852e+00 -1.16345433e+00 -2.36280074e-01 -2.36280074e-01
 -2.36280074e-01  8.65201411e+01  6.79962992e+02  3.94874691e+03
  3.15217178e+04  1.12121509e+06  7.13808429e+06]
E1 = -706.5435862172196  E_coul = 198.9130697724157
cycle= 2 E= -507.630516444804  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503299
diis-c [-2.52463745e-05 -7.71381487e-04  1.00077138e+00]
  HOMO = -0.236454879555076  LUMO = 86.516625580943
  mo_energy =
[-1.20267154e+02 -1.22538916e+01 -6.65493559e+00 -6.65493559e+00
 -6.65493559e+00 -1.16351894e+00 -2.36454880e-01 -2.36454880e-01
 -2.36454880e-01  8.65166256e+01  6.79952413e+02  3.94873102e+03
  3.15216985e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431472366209  E_coul = 198.91263068213277
cycle= 3 E= -507.630516554488  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125112
diis-c [-3.74638630e-10  3.85638396e-05 -2.52173927e-02  1.02517883e+00]
  HOMO = -0.236457036631156  LUMO = 86.5165819811898
  mo_energy =
[-1.20267264e+02 -1.22539070e+01 -6.65496196e+00 -6.65496196e+00
 -6.65496196e+00 -1.16351958e+00 -2.36457037e-01 -2.36457037e-01
 -2.36457037e-01  8.65165820e+01  6.79952299e+02  3.94873088e+03
  3.15216984e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431401458718  E_coul = 198.91262359134478
cycle= 4 E= -507.630516554527  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431401458718  E_coul = 198.91262359134478
  HOMO = -0.236457021205328  LUMO = 86.516582302266
  mo_energy =
[-1.20267263e+02 -1.22539069e+01 -6.65496181e+00 -6.65496181e+00
 -6.65496181e+00 -1.16351957e+00 -2.36457021e-01 -2.36457021e-01
 -2.36457021e-01  8.65165823e+01  6.79952300e+02  3.94873088e+03
  3.15216984e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431401807547  E_coul = 198.91262362622803
Extra cycle  E= -507.630516554527  delta_E= 3.98e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549342e+04 2.23216651e+03
 4.57759325e+02 1.21891726e+02 3.76176999e+01 4.74129054e+00
 3.91197141e-01 8.59864397e+00 4.90849707e-01]
E = -507.63051655452665
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:45 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999943        1
[INPUT] 0    0    [1    /1   ]  18354.9342323        1
[INPUT] 0    0    [1    /1   ]  2232.16651463        1
[INPUT] 0    0    [1    /1   ]  457.759324635        1
[INPUT] 0    0    [1    /1   ]  121.891726024        1
[INPUT] 0    0    [1    /1   ]  37.6176998616        1
[INPUT] 0    0    [1    /1   ]  4.7412905394         1
[INPUT] 0    0    [1    /1   ]  0.391197140828       1
[INPUT] 1    0    [1    /1   ]  8.59864396882        1
[INPUT] 1    0    [1    /1   ]  0.490849706505       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999999009, 1.0]], [0, [799999.9999428393, 1.0]], [0, [18354.934232273226, 1.0]], [0, [2232.1665146321056, 1.0]], [0, [457.75932463505507, 1.0]], [0, [121.89172602389523, 1.0]], [0, [37.61769986161978, 1.0]], [0, [4.74129053939666, 1.0]], [0, [0.39119714082767915, 1.0]], [1, [8.598643968821529, 1.0]], [1, [0.49084970650509246, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999901]
bas 1, expnt(s) = [799999.99994284]
bas 2, expnt(s) = [18354.93423227]
bas 3, expnt(s) = [2232.16651463]
bas 4, expnt(s) = [457.75932464]
bas 5, expnt(s) = [121.89172602]
bas 6, expnt(s) = [37.61769986]
bas 7, expnt(s) = [4.74129054]
bas 8, expnt(s) = [0.39119714]
bas 9, expnt(s) = [8.59864397]
bas 10, expnt(s) = [0.49084971]
CPU time:       174.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549342e+04 3.98409466e+03 2.23216651e+03 8.20464823e+02
 4.57759325e+02 2.50030462e+02 1.21891726e+02 9.26820635e+01
 3.76176999e+01 3.83759555e+01 4.74129054e+00 8.11778325e+00
 3.91197141e-01 1.24971729e+00 8.59864397e+00 4.29558039e+01
 4.90849707e-01 1.19858838e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972411469642
cond(S) = 42.971334911176505
E1 = -688.6352153947267  E_coul = 184.9152562130162
init E= -503.719959181711
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902061435327  LUMO = 85.1870595034345
  mo_energy =
[-1.21646292e+02 -1.32807871e+01 -7.62161426e+00 -7.62161426e+00
 -7.62161426e+00 -1.65067595e+00 -6.80902061e-01 -6.80902061e-01
 -6.80902061e-01  8.51870595e+01  6.78592830e+02  3.94749687e+03
  3.15206373e+04  1.12121411e+06  7.13808332e+06]
E1 = -706.5749545716415  E_coul = 198.94486514114266
cycle= 1 E= -507.630089430499  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377329
diis-c [-0.142377  1.      ]
  HOMO = -0.236280074338526  LUMO = 86.5201410837366
  mo_energy =
[-1.20258527e+02 -1.22527056e+01 -6.65309852e+00 -6.65309852e+00
 -6.65309852e+00 -1.16345433e+00 -2.36280074e-01 -2.36280074e-01
 -2.36280074e-01  8.65201411e+01  6.79962992e+02  3.94874691e+03
  3.15217178e+04  1.12121509e+06  7.13808429e+06]
E1 = -706.5435862172196  E_coul = 198.9130697724157
cycle= 2 E= -507.630516444804  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503299
diis-c [-2.52463745e-05 -7.71381487e-04  1.00077138e+00]
  HOMO = -0.236454879555076  LUMO = 86.516625580943
  mo_energy =
[-1.20267154e+02 -1.22538916e+01 -6.65493559e+00 -6.65493559e+00
 -6.65493559e+00 -1.16351894e+00 -2.36454880e-01 -2.36454880e-01
 -2.36454880e-01  8.65166256e+01  6.79952413e+02  3.94873102e+03
  3.15216985e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431472366209  E_coul = 198.91263068213277
cycle= 3 E= -507.630516554488  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125112
diis-c [-3.74638630e-10  3.85638396e-05 -2.52173927e-02  1.02517883e+00]
  HOMO = -0.236457036631156  LUMO = 86.5165819811898
  mo_energy =
[-1.20267264e+02 -1.22539070e+01 -6.65496196e+00 -6.65496196e+00
 -6.65496196e+00 -1.16351958e+00 -2.36457037e-01 -2.36457037e-01
 -2.36457037e-01  8.65165820e+01  6.79952299e+02  3.94873088e+03
  3.15216984e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431401458718  E_coul = 198.91262359134478
cycle= 4 E= -507.630516554527  delta_E= -3.89e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431401458718  E_coul = 198.91262359134478
  HOMO = -0.236457021205328  LUMO = 86.516582302266
  mo_energy =
[-1.20267263e+02 -1.22539069e+01 -6.65496181e+00 -6.65496181e+00
 -6.65496181e+00 -1.16351957e+00 -2.36457021e-01 -2.36457021e-01
 -2.36457021e-01  8.65165823e+01  6.79952300e+02  3.94873088e+03
  3.15216984e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431401807547  E_coul = 198.91262362622803
Extra cycle  E= -507.630516554527  delta_E= 3.98e-13  |g|= 6.03e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.971334911176505
E1 = -706.5431401807547  E_coul = 198.91262362622803
init E= -507.630516554527
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236457021025707  LUMO = 86.5165823061772
  mo_energy =
[-1.20267263e+02 -1.22539069e+01 -6.65496181e+00 -6.65496181e+00
 -6.65496181e+00 -1.16351957e+00 -2.36457021e-01 -2.36457021e-01
 -2.36457021e-01  8.65165823e+01  6.79952300e+02  3.94873088e+03
  3.15216984e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431401812805  E_coul = 198.91262362675346
cycle= 1 E= -507.630516554527  delta_E= -3.98e-13  |g|= 1.21e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5431401812805  E_coul = 198.91262362675346
  HOMO = -0.236457021023178  LUMO = 86.5165823062321
  mo_energy =
[-1.20267263e+02 -1.22539069e+01 -6.65496181e+00 -6.65496181e+00
 -6.65496181e+00 -1.16351957e+00 -2.36457021e-01 -2.36457021e-01
 -2.36457021e-01  8.65165823e+01  6.79952300e+02  3.94873088e+03
  3.15216984e+04  1.12121507e+06  7.13808427e+06]
E1 = -706.5431401812889  E_coul = 198.91262362676218
Extra cycle  E= -507.630516554527  delta_E= 3.41e-13  |g|= 6.08e-11  |ddm|= 4.21e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549342e+04 2.23216651e+03
 4.57759325e+02 1.21891726e+02 3.76176999e+01 4.74129054e+00
 3.91197141e-01 8.59864397e+00 4.90849707e-01]
grad_E = [ 1.58645249e-10  9.14418253e-09  4.38712754e-06 -1.55658525e-06
  3.86755458e-06 -2.32236337e-06 -8.20943053e-06  1.44862019e-06
 -1.28285382e-06 -9.74210010e-07  1.30525916e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999911        1
[INPUT] 0    0    [1    /1   ]  18354.9191864        1
[INPUT] 0    0    [1    /1   ]  2232.1716231         1
[INPUT] 0    0    [1    /1   ]  457.75112196         1
[INPUT] 0    0    [1    /1   ]  121.884274812        1
[INPUT] 0    0    [1    /1   ]  37.615476139         1
[INPUT] 0    0    [1    /1   ]  4.74128959213        1
[INPUT] 0    0    [1    /1   ]  0.391196798619       1
[INPUT] 1    0    [1    /1   ]  8.59864515432        1
[INPUT] 1    0    [1    /1   ]  0.490849788005       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999984647, 1.0]], [0, [799999.999911474, 1.0]], [0, [18354.919186441333, 1.0]], [0, [2232.1716231012624, 1.0]], [0, [457.7511219595341, 1.0]], [0, [121.88427481185508, 1.0]], [0, [37.615476139005935, 1.0]], [0, [4.741289592131328, 1.0]], [0, [0.39119679861893153, 1.0]], [1, [8.598645154322357, 1.0]], [1, [0.49084978800475276, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999846]
bas 1, expnt(s) = [799999.99991147]
bas 2, expnt(s) = [18354.91918644]
bas 3, expnt(s) = [2232.1716231]
bas 4, expnt(s) = [457.75112196]
bas 5, expnt(s) = [121.88427481]
bas 6, expnt(s) = [37.61547614]
bas 7, expnt(s) = [4.74128959]
bas 8, expnt(s) = [0.3911968]
bas 9, expnt(s) = [8.59864515]
bas 10, expnt(s) = [0.49084979]
CPU time:       178.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549192e+04 3.98409221e+03 2.23217162e+03 8.20466232e+02
 4.57751122e+02 2.50027102e+02 1.21884275e+02 9.26778142e+01
 3.76154761e+01 3.83742541e+01 4.74128959e+00 8.11778203e+00
 3.91196799e-01 1.24971647e+00 8.59864515e+00 4.29558113e+01
 4.90849788e-01 1.19858863e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997249635584
cond(S) = 42.969136797209984
E1 = -688.6352327129222  E_coul = 184.9152508696802
init E= -503.719981843242
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902095841931  LUMO = 85.1792180258555
  mo_energy =
[-1.21646296e+02 -1.32807840e+01 -7.62161504e+00 -7.62161504e+00
 -7.62161504e+00 -1.65067541e+00 -6.80902096e-01 -6.80902096e-01
 -6.80902096e-01  8.51792180e+01  6.78557592e+02  3.94744310e+03
  3.15205790e+04  1.12121406e+06  7.13808327e+06]
E1 = -706.5749400280317  E_coul = 198.94485059716868
cycle= 1 E= -507.630089430863  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377326
diis-c [-0.14237486  1.        ]
  HOMO = -0.236280197701037  LUMO = 86.5122889359339
  mo_energy =
[-1.20258533e+02 -1.22527032e+01 -6.65309968e+00 -6.65309968e+00
 -6.65309968e+00 -1.16345408e+00 -2.36280198e-01 -2.36280198e-01
 -2.36280198e-01  8.65122889e+01  6.79927749e+02  3.94869313e+03
  3.15216596e+04  1.12121503e+06  7.13808424e+06]
E1 = -706.5435674015395  E_coul = 198.91305089504345
cycle= 2 E= -507.630516506496  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00503336
diis-c [-2.52502429e-05 -7.70931009e-04  1.00077093e+00]
  HOMO = -0.236455031087772  LUMO = 86.5087731296482
  mo_energy =
[-1.20267161e+02 -1.22538894e+01 -6.65493703e+00 -6.65493703e+00
 -6.65493703e+00 -1.16351870e+00 -2.36455031e-01 -2.36455031e-01
 -2.36455031e-01  8.65087731e+01  6.79917169e+02  3.94867724e+03
  3.15216403e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431283372785  E_coul = 198.91261172107204
cycle= 3 E= -507.630516616206  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125129
diis-c [-3.74743896e-10  3.85627521e-05 -2.52189291e-02  1.02518037e+00]
  HOMO = -0.236457188706367  LUMO = 86.5087295212593
  mo_energy =
[-1.20267271e+02 -1.22539048e+01 -6.65496341e+00 -6.65496341e+00
 -6.65496341e+00 -1.16351934e+00 -2.36457189e-01 -2.36457189e-01
 -2.36457189e-01  8.65087295e+01  6.79917055e+02  3.94867710e+03
  3.15216401e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431212445698  E_coul = 198.91260462832483
cycle= 4 E= -507.630516616245  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431212445698  E_coul = 198.91260462832483
  HOMO = -0.236457173275916  LUMO = 86.5087298423955
  mo_energy =
[-1.20267271e+02 -1.22539047e+01 -6.65496326e+00 -6.65496326e+00
 -6.65496326e+00 -1.16351933e+00 -2.36457173e-01 -2.36457173e-01
 -2.36457173e-01  8.65087298e+01  6.79917056e+02  3.94867710e+03
  3.15216401e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431212794638  E_coul = 198.9126046632187
Extra cycle  E= -507.630516616245  delta_E= -1.71e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549192e+04 2.23217162e+03
 4.57751122e+02 1.21884275e+02 3.76154761e+01 4.74128959e+00
 3.91196799e-01 8.59864515e+00 4.90849788e-01]
E = -507.6305166162451
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999911        1
[INPUT] 0    0    [1    /1   ]  18354.9191864        1
[INPUT] 0    0    [1    /1   ]  2232.1716231         1
[INPUT] 0    0    [1    /1   ]  457.75112196         1
[INPUT] 0    0    [1    /1   ]  121.884274812        1
[INPUT] 0    0    [1    /1   ]  37.615476139         1
[INPUT] 0    0    [1    /1   ]  4.74128959213        1
[INPUT] 0    0    [1    /1   ]  0.391196798619       1
[INPUT] 1    0    [1    /1   ]  8.59864515432        1
[INPUT] 1    0    [1    /1   ]  0.490849788005       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999984647, 1.0]], [0, [799999.999911474, 1.0]], [0, [18354.919186441333, 1.0]], [0, [2232.1716231012624, 1.0]], [0, [457.7511219595341, 1.0]], [0, [121.88427481185508, 1.0]], [0, [37.615476139005935, 1.0]], [0, [4.741289592131328, 1.0]], [0, [0.39119679861893153, 1.0]], [1, [8.598645154322357, 1.0]], [1, [0.49084978800475276, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999846]
bas 1, expnt(s) = [799999.99991147]
bas 2, expnt(s) = [18354.91918644]
bas 3, expnt(s) = [2232.1716231]
bas 4, expnt(s) = [457.75112196]
bas 5, expnt(s) = [121.88427481]
bas 6, expnt(s) = [37.61547614]
bas 7, expnt(s) = [4.74128959]
bas 8, expnt(s) = [0.3911968]
bas 9, expnt(s) = [8.59864515]
bas 10, expnt(s) = [0.49084979]
CPU time:       179.46
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83549192e+04 3.98409221e+03 2.23217162e+03 8.20466232e+02
 4.57751122e+02 2.50027102e+02 1.21884275e+02 9.26778142e+01
 3.76154761e+01 3.83742541e+01 4.74128959e+00 8.11778203e+00
 3.91196799e-01 1.24971647e+00 8.59864515e+00 4.29558113e+01
 4.90849788e-01 1.19858863e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997249635584
cond(S) = 42.969136797209984
E1 = -688.6352327129222  E_coul = 184.9152508696802
init E= -503.719981843242
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902095841931  LUMO = 85.1792180258555
  mo_energy =
[-1.21646296e+02 -1.32807840e+01 -7.62161504e+00 -7.62161504e+00
 -7.62161504e+00 -1.65067541e+00 -6.80902096e-01 -6.80902096e-01
 -6.80902096e-01  8.51792180e+01  6.78557592e+02  3.94744310e+03
  3.15205790e+04  1.12121406e+06  7.13808327e+06]
E1 = -706.5749400280317  E_coul = 198.94485059716868
cycle= 1 E= -507.630089430863  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377326
diis-c [-0.14237486  1.        ]
  HOMO = -0.236280197701037  LUMO = 86.5122889359339
  mo_energy =
[-1.20258533e+02 -1.22527032e+01 -6.65309968e+00 -6.65309968e+00
 -6.65309968e+00 -1.16345408e+00 -2.36280198e-01 -2.36280198e-01
 -2.36280198e-01  8.65122889e+01  6.79927749e+02  3.94869313e+03
  3.15216596e+04  1.12121503e+06  7.13808424e+06]
E1 = -706.5435674015395  E_coul = 198.91305089504345
cycle= 2 E= -507.630516506496  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503336
diis-c [-2.52502429e-05 -7.70931009e-04  1.00077093e+00]
  HOMO = -0.236455031087772  LUMO = 86.5087731296482
  mo_energy =
[-1.20267161e+02 -1.22538894e+01 -6.65493703e+00 -6.65493703e+00
 -6.65493703e+00 -1.16351870e+00 -2.36455031e-01 -2.36455031e-01
 -2.36455031e-01  8.65087731e+01  6.79917169e+02  3.94867724e+03
  3.15216403e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431283372785  E_coul = 198.91261172107204
cycle= 3 E= -507.630516616206  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125129
diis-c [-3.74743896e-10  3.85627521e-05 -2.52189291e-02  1.02518037e+00]
  HOMO = -0.236457188706367  LUMO = 86.5087295212593
  mo_energy =
[-1.20267271e+02 -1.22539048e+01 -6.65496341e+00 -6.65496341e+00
 -6.65496341e+00 -1.16351934e+00 -2.36457189e-01 -2.36457189e-01
 -2.36457189e-01  8.65087295e+01  6.79917055e+02  3.94867710e+03
  3.15216401e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431212445698  E_coul = 198.91260462832483
cycle= 4 E= -507.630516616245  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5431212445698  E_coul = 198.91260462832483
  HOMO = -0.236457173275916  LUMO = 86.5087298423955
  mo_energy =
[-1.20267271e+02 -1.22539047e+01 -6.65496326e+00 -6.65496326e+00
 -6.65496326e+00 -1.16351933e+00 -2.36457173e-01 -2.36457173e-01
 -2.36457173e-01  8.65087298e+01  6.79917056e+02  3.94867710e+03
  3.15216401e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431212794638  E_coul = 198.9126046632187
Extra cycle  E= -507.630516616245  delta_E= -1.71e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.969136797209984
E1 = -706.5431212794638  E_coul = 198.9126046632187
init E= -507.630516616245
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236457173096229  LUMO = 86.5087298463072
  mo_energy =
[-1.20267271e+02 -1.22539047e+01 -6.65496326e+00 -6.65496326e+00
 -6.65496326e+00 -1.16351933e+00 -2.36457173e-01 -2.36457173e-01
 -2.36457173e-01  8.65087298e+01  6.79917056e+02  3.94867710e+03
  3.15216401e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431212799892  E_coul = 198.9126046637441
cycle= 1 E= -507.630516616245  delta_E= -5.68e-14  |g|= 1.29e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5431212799892  E_coul = 198.9126046637441
  HOMO = -0.236457173093714  LUMO = 86.5087298463638
  mo_energy =
[-1.20267271e+02 -1.22539047e+01 -6.65496326e+00 -6.65496326e+00
 -6.65496326e+00 -1.16351933e+00 -2.36457173e-01 -2.36457173e-01
 -2.36457173e-01  8.65087298e+01  6.79917056e+02  3.94867710e+03
  3.15216401e+04  1.12121501e+06  7.13808422e+06]
E1 = -706.5431212799981  E_coul = 198.91260466375294
Extra cycle  E= -507.630516616245  delta_E=    0  |g|= 3.23e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.15 sec, wall time      0.15 sec
exp = [3.20000000e+06 8.00000000e+05 1.83549192e+04 2.23217162e+03
 4.57751122e+02 1.21884275e+02 3.76154761e+01 4.74128959e+00
 3.91196799e-01 8.59864515e+00 4.90849788e-01]
grad_E = [ 1.58645547e-10  9.14419222e-09  4.38710329e-06 -1.56674855e-06
  4.37404413e-06 -4.31248061e-06 -1.09954498e-05  1.40532142e-06
 -1.26595893e-06 -9.77147891e-07  1.30689818e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:54 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999854        1
[INPUT] 0    0    [1    /1   ]  18354.8917219        1
[INPUT] 0    0    [1    /1   ]  2232.18100359        1
[INPUT] 0    0    [1    /1   ]  457.735285076        1
[INPUT] 0    0    [1    /1   ]  121.873506225        1
[INPUT] 0    0    [1    /1   ]  37.612442897         1
[INPUT] 0    0    [1    /1   ]  4.74128728186        1
[INPUT] 0    0    [1    /1   ]  0.391196349529       1
[INPUT] 1    0    [1    /1   ]  8.59864669847        1
[INPUT] 1    0    [1    /1   ]  0.490849897433       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999974715, 1.0]], [0, [799999.9998542215, 1.0]], [0, [18354.89172190819, 1.0]], [0, [2232.18100358751, 1.0]], [0, [457.73528507618835, 1.0]], [0, [121.87350622457927, 1.0]], [0, [37.61244289697999, 1.0]], [0, [4.741287281863162, 1.0]], [0, [0.3911963495285137, 1.0]], [1, [8.598646698474985, 1.0]], [1, [0.49084989743298263, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999747]
bas 1, expnt(s) = [799999.99985422]
bas 2, expnt(s) = [18354.89172191]
bas 3, expnt(s) = [2232.18100359]
bas 4, expnt(s) = [457.73528508]
bas 5, expnt(s) = [121.87350622]
bas 6, expnt(s) = [37.6124429]
bas 7, expnt(s) = [4.74128728]
bas 8, expnt(s) = [0.39119635]
bas 9, expnt(s) = [8.5986467]
bas 10, expnt(s) = [0.4908499]
CPU time:       183.50
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83548917e+04 3.98408774e+03 2.23218100e+03 8.20468818e+02
 4.57735285e+02 2.50020614e+02 1.21873506e+02 9.26716730e+01
 3.76124429e+01 3.83719332e+01 4.74128728e+00 8.11777906e+00
 3.91196350e-01 1.24971539e+00 8.59864670e+00 4.29558210e+01
 4.90849897e-01 1.19858896e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972628508967
cond(S) = 42.96647041085125
E1 = -688.6352493396034  E_coul = 184.91524357560803
init E= -503.720005763995
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902129375345  LUMO = 85.1682735876055
  mo_energy =
[-1.21646300e+02 -1.32807803e+01 -7.62161611e+00 -7.62161611e+00
 -7.62161611e+00 -1.65067468e+00 -6.80902129e-01 -6.80902129e-01
 -6.80902129e-01  8.51682736e+01  6.78504078e+02  3.94735612e+03
  3.15204814e+04  1.12121396e+06  7.13808319e+06]
E1 = -706.5749213380484  E_coul = 198.944831882283
cycle= 1 E= -507.630089455765  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=0.377323
diis-c [-0.14237261  1.        ]
  HOMO = -0.236280361952508  LUMO = 86.5013298024927
  mo_energy =
[-1.20258540e+02 -1.22527003e+01 -6.65310123e+00 -6.65310123e+00
 -6.65310123e+00 -1.16345378e+00 -2.36280362e-01 -2.36280362e-01
 -2.36280362e-01  8.65013298e+01  6.79874228e+02  3.94860613e+03
  3.15215619e+04  1.12121494e+06  7.13808416e+06]
E1 = -706.5435427700838  E_coul = 198.9130261533425
cycle= 2 E= -507.630516616741  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503387
diis-c [-2.52555201e-05 -7.70313433e-04  1.00077031e+00]
  HOMO = -0.236455234630115  LUMO = 86.4978135784532
  mo_energy =
[-1.20267170e+02 -1.22538868e+01 -6.65493897e+00 -6.65493897e+00
 -6.65493897e+00 -1.16351841e+00 -2.36455235e-01 -2.36455235e-01
 -2.36455235e-01  8.64978136e+01  6.79863647e+02  3.94859024e+03
  3.15215426e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5431035890607  E_coul = 198.91258686257356
cycle= 3 E= -507.630516726487  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125153
diis-c [-3.74888951e-10  3.85613606e-05 -2.52210678e-02  1.02518251e+00]
  HOMO = -0.236457393004367  LUMO = 86.4977699580684
  mo_energy =
[-1.20267280e+02 -1.22539022e+01 -6.65496536e+00 -6.65496536e+00
 -6.65496536e+00 -1.16351905e+00 -2.36457393e-01 -2.36457393e-01
 -2.36457393e-01  8.64977700e+01  6.79863533e+02  3.94859009e+03
  3.15215425e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5430964936205  E_coul = 198.91257976709497
cycle= 4 E= -507.630516726526  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430964936205  E_coul = 198.91257976709497
  HOMO = -0.236457377567477  LUMO = 86.4977702792888
  mo_energy =
[-1.20267280e+02 -1.22539021e+01 -6.65496521e+00 -6.65496521e+00
 -6.65496521e+00 -1.16351904e+00 -2.36457378e-01 -2.36457378e-01
 -2.36457378e-01  8.64977703e+01  6.79863534e+02  3.94859010e+03
  3.15215425e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5430965285294  E_coul = 198.91257980200365
Extra cycle  E= -507.630516726526  delta_E= -2.27e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83548917e+04 2.23218100e+03
 4.57735285e+02 1.21873506e+02 3.76124429e+01 4.74128728e+00
 3.91196350e-01 8.59864670e+00 4.90849897e-01]
E = -507.6305167265258
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999854        1
[INPUT] 0    0    [1    /1   ]  18354.8917219        1
[INPUT] 0    0    [1    /1   ]  2232.18100359        1
[INPUT] 0    0    [1    /1   ]  457.735285076        1
[INPUT] 0    0    [1    /1   ]  121.873506225        1
[INPUT] 0    0    [1    /1   ]  37.612442897         1
[INPUT] 0    0    [1    /1   ]  4.74128728186        1
[INPUT] 0    0    [1    /1   ]  0.391196349529       1
[INPUT] 1    0    [1    /1   ]  8.59864669847        1
[INPUT] 1    0    [1    /1   ]  0.490849897433       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999974715, 1.0]], [0, [799999.9998542215, 1.0]], [0, [18354.89172190819, 1.0]], [0, [2232.18100358751, 1.0]], [0, [457.73528507618835, 1.0]], [0, [121.87350622457927, 1.0]], [0, [37.61244289697999, 1.0]], [0, [4.741287281863162, 1.0]], [0, [0.3911963495285137, 1.0]], [1, [8.598646698474985, 1.0]], [1, [0.49084989743298263, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999747]
bas 1, expnt(s) = [799999.99985422]
bas 2, expnt(s) = [18354.89172191]
bas 3, expnt(s) = [2232.18100359]
bas 4, expnt(s) = [457.73528508]
bas 5, expnt(s) = [121.87350622]
bas 6, expnt(s) = [37.6124429]
bas 7, expnt(s) = [4.74128728]
bas 8, expnt(s) = [0.39119635]
bas 9, expnt(s) = [8.5986467]
bas 10, expnt(s) = [0.4908499]
CPU time:       184.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83548917e+04 3.98408774e+03 2.23218100e+03 8.20468818e+02
 4.57735285e+02 2.50020614e+02 1.21873506e+02 9.26716730e+01
 3.76124429e+01 3.83719332e+01 4.74128728e+00 8.11777906e+00
 3.91196350e-01 1.24971539e+00 8.59864670e+00 4.29558210e+01
 4.90849897e-01 1.19858896e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972628508967
cond(S) = 42.96647041085125
E1 = -688.6352493396034  E_coul = 184.91524357560803
init E= -503.720005763995
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902129375345  LUMO = 85.1682735876055
  mo_energy =
[-1.21646300e+02 -1.32807803e+01 -7.62161611e+00 -7.62161611e+00
 -7.62161611e+00 -1.65067468e+00 -6.80902129e-01 -6.80902129e-01
 -6.80902129e-01  8.51682736e+01  6.78504078e+02  3.94735612e+03
  3.15204814e+04  1.12121396e+06  7.13808319e+06]
E1 = -706.5749213380484  E_coul = 198.944831882283
cycle= 1 E= -507.630089455765  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377323
diis-c [-0.14237261  1.        ]
  HOMO = -0.236280361952508  LUMO = 86.5013298024927
  mo_energy =
[-1.20258540e+02 -1.22527003e+01 -6.65310123e+00 -6.65310123e+00
 -6.65310123e+00 -1.16345378e+00 -2.36280362e-01 -2.36280362e-01
 -2.36280362e-01  8.65013298e+01  6.79874228e+02  3.94860613e+03
  3.15215619e+04  1.12121494e+06  7.13808416e+06]
E1 = -706.5435427700838  E_coul = 198.9130261533425
cycle= 2 E= -507.630516616741  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503387
diis-c [-2.52555201e-05 -7.70313433e-04  1.00077031e+00]
  HOMO = -0.236455234630115  LUMO = 86.4978135784532
  mo_energy =
[-1.20267170e+02 -1.22538868e+01 -6.65493897e+00 -6.65493897e+00
 -6.65493897e+00 -1.16351841e+00 -2.36455235e-01 -2.36455235e-01
 -2.36455235e-01  8.64978136e+01  6.79863647e+02  3.94859024e+03
  3.15215426e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5431035890607  E_coul = 198.91258686257356
cycle= 3 E= -507.630516726487  delta_E= -1.1e-07  |g|= 9.34e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125153
diis-c [-3.74888951e-10  3.85613606e-05 -2.52210678e-02  1.02518251e+00]
  HOMO = -0.236457393004367  LUMO = 86.4977699580684
  mo_energy =
[-1.20267280e+02 -1.22539022e+01 -6.65496536e+00 -6.65496536e+00
 -6.65496536e+00 -1.16351905e+00 -2.36457393e-01 -2.36457393e-01
 -2.36457393e-01  8.64977700e+01  6.79863533e+02  3.94859009e+03
  3.15215425e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5430964936205  E_coul = 198.91257976709497
cycle= 4 E= -507.630516726526  delta_E= -3.84e-11  |g|= 3.54e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430964936205  E_coul = 198.91257976709497
  HOMO = -0.236457377567477  LUMO = 86.4977702792888
  mo_energy =
[-1.20267280e+02 -1.22539021e+01 -6.65496521e+00 -6.65496521e+00
 -6.65496521e+00 -1.16351904e+00 -2.36457378e-01 -2.36457378e-01
 -2.36457378e-01  8.64977703e+01  6.79863534e+02  3.94859010e+03
  3.15215425e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5430965285294  E_coul = 198.91257980200365
Extra cycle  E= -507.630516726526  delta_E= -2.27e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96647041085125
E1 = -706.5430965285294  E_coul = 198.91257980200365
init E= -507.630516726526
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236457377387701  LUMO = 86.4977702832035
  mo_energy =
[-1.20267280e+02 -1.22539021e+01 -6.65496521e+00 -6.65496521e+00
 -6.65496521e+00 -1.16351904e+00 -2.36457377e-01 -2.36457377e-01
 -2.36457377e-01  8.64977703e+01  6.79863534e+02  3.94859010e+03
  3.15215425e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5430965290551  E_coul = 198.91257980252928
cycle= 1 E= -507.630516726526  delta_E=    0  |g|= 1.33e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5430965290551  E_coul = 198.91257980252928
  HOMO = -0.236457377385183  LUMO = 86.4977702832595
  mo_energy =
[-1.20267280e+02 -1.22539021e+01 -6.65496521e+00 -6.65496521e+00
 -6.65496521e+00 -1.16351904e+00 -2.36457377e-01 -2.36457377e-01
 -2.36457377e-01  8.64977703e+01  6.79863534e+02  3.94859010e+03
  3.15215425e+04  1.12121492e+06  7.13808414e+06]
E1 = -706.5430965290642  E_coul = 198.91257980253823
Extra cycle  E= -507.630516726526  delta_E= -1.71e-13  |g|= 3.21e-11  |ddm|= 4.19e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 8.00000000e+05 1.83548917e+04 2.23218100e+03
 4.57735285e+02 1.21873506e+02 3.76124429e+01 4.74128728e+00
 3.91196350e-01 8.59864670e+00 4.90849897e-01]
grad_E = [ 1.58647258e-10  9.14425553e-09  4.38675930e-06 -1.56082138e-06
  4.89688321e-06 -6.79237340e-06 -1.43883489e-05  1.33681761e-06
 -1.23162820e-06 -9.69969889e-07  1.29497209e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999749        1
[INPUT] 0    0    [1    /1   ]  18354.8413746        1
[INPUT] 0    0    [1    /1   ]  2232.19826771        1
[INPUT] 0    0    [1    /1   ]  457.705194332        1
[INPUT] 0    0    [1    /1   ]  121.857239074        1
[INPUT] 0    0    [1    /1   ]  37.6081402848        1
[INPUT] 0    0    [1    /1   ]  4.74128233288        1
[INPUT] 0    0    [1    /1   ]  0.391195741559       1
[INPUT] 1    0    [1    /1   ]  8.59864876895        1
[INPUT] 1    0    [1    /1   ]  0.490850049798       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999956507, 1.0]], [0, [799999.9997492697, 1.0]], [0, [18354.841374630247, 1.0]], [0, [2232.198267711553, 1.0]], [0, [457.7051943315277, 1.0]], [0, [121.85723907437844, 1.0]], [0, [37.608140284837816, 1.0]], [0, [4.741282332880989, 1.0]], [0, [0.39119574155920617, 1.0]], [1, [8.598648768952948, 1.0]], [1, [0.49085004979830615, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999565]
bas 1, expnt(s) = [799999.99974927]
bas 2, expnt(s) = [18354.84137463]
bas 3, expnt(s) = [2232.19826771]
bas 4, expnt(s) = [457.70519433]
bas 5, expnt(s) = [121.85723907]
bas 6, expnt(s) = [37.60814028]
bas 7, expnt(s) = [4.74128233]
bas 8, expnt(s) = [0.39119574]
bas 9, expnt(s) = [8.59864877]
bas 10, expnt(s) = [0.49085005]
CPU time:       188.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83548414e+04 3.98407955e+03 2.23219827e+03 8.20473577e+02
 4.57705194e+02 2.50008287e+02 1.21857239e+02 9.26623958e+01
 3.76081403e+01 3.83686411e+01 4.74128233e+00 8.11777271e+00
 3.91195742e-01 1.24971394e+00 8.59864877e+00 4.29558339e+01
 4.90850050e-01 1.19858943e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972842821095
cond(S) = 42.96323294292829
E1 = -688.6352614366267  E_coul = 184.9152332205958
init E= -503.720028216031
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902154936871  LUMO = 85.1523419290512
  mo_energy =
[-1.21646307e+02 -1.32807758e+01 -7.62161760e+00 -7.62161760e+00
 -7.62161760e+00 -1.65067369e+00 -6.80902155e-01 -6.80902155e-01
 -6.80902155e-01  8.51523419e+01  6.78419227e+02  3.94721034e+03
  3.15203131e+04  1.12121380e+06  7.13808304e+06]
E1 = -706.5748967128646  E_coul = 198.94480718597825
cycle= 1 E= -507.630089526886  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37732
diis-c [-0.14237053  1.        ]
  HOMO = -0.236280588302823  LUMO = 86.4853770683551
  mo_energy =
[-1.20258550e+02 -1.22526968e+01 -6.65310337e+00 -6.65310337e+00
 -6.65310337e+00 -1.16345339e+00 -2.36280588e-01 -2.36280588e-01
 -2.36280588e-01  8.64853771e+01  6.79789370e+02  3.94846034e+03
  3.15213936e+04  1.12121478e+06  7.13808401e+06]
E1 = -706.5435095291858  E_coul = 198.9129927174909
cycle= 2 E= -507.630516811695  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050346
diis-c [-2.52630070e-05 -7.69431777e-04  1.00076943e+00]
  HOMO = -0.236455518138077  LUMO = 86.4818602455355
  mo_energy =
[-1.20267181e+02 -1.22538837e+01 -6.65494168e+00 -6.65494168e+00
 -6.65494168e+00 -1.16351805e+00 -2.36455518e-01 -2.36455518e-01
 -2.36455518e-01  8.64818602e+01  6.79778787e+02  3.94844444e+03
  3.15213743e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430701781887  E_coul = 198.91255325669644
cycle= 3 E= -507.630516921492  delta_E= -1.1e-07  |g|= 9.35e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125186
diis-c [-3.75095685e-10  3.85598826e-05 -2.52241806e-02  1.02518562e+00]
  HOMO = -0.236457677610032  LUMO = 86.4818166077742
  mo_energy =
[-1.20267292e+02 -1.22538991e+01 -6.65496808e+00 -6.65496808e+00
 -6.65496808e+00 -1.16351869e+00 -2.36457678e-01 -2.36457678e-01
 -2.36457678e-01  8.64818166e+01  6.79778673e+02  3.94844430e+03
  3.15213741e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430630787783  E_coul = 198.91254615724705
cycle= 4 E= -507.630516921531  delta_E= -3.91e-11  |g|= 3.55e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430630787783  E_coul = 198.91254615724705
  HOMO = -0.236457662163807  LUMO = 86.4818169291169
  mo_energy =
[-1.20267291e+02 -1.22538990e+01 -6.65496793e+00 -6.65496793e+00
 -6.65496793e+00 -1.16351868e+00 -2.36457662e-01 -2.36457662e-01
 -2.36457662e-01  8.64818169e+01  6.79778674e+02  3.94844430e+03
  3.15213741e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430631137077  E_coul = 198.91254619217668
Extra cycle  E= -507.630516921531  delta_E= 2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [3.20000000e+06 8.00000000e+05 1.83548414e+04 2.23219827e+03
 4.57705194e+02 1.21857239e+02 3.76081403e+01 4.74128233e+00
 3.91195742e-01 8.59864877e+00 4.90850050e-01]
E = -507.630516921531
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:37:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3200000              1
[INPUT] 0    0    [1    /1   ]  799999.999749        1
[INPUT] 0    0    [1    /1   ]  18354.8413746        1
[INPUT] 0    0    [1    /1   ]  2232.19826771        1
[INPUT] 0    0    [1    /1   ]  457.705194332        1
[INPUT] 0    0    [1    /1   ]  121.857239074        1
[INPUT] 0    0    [1    /1   ]  37.6081402848        1
[INPUT] 0    0    [1    /1   ]  4.74128233288        1
[INPUT] 0    0    [1    /1   ]  0.391195741559       1
[INPUT] 1    0    [1    /1   ]  8.59864876895        1
[INPUT] 1    0    [1    /1   ]  0.490850049798       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999956507, 1.0]], [0, [799999.9997492697, 1.0]], [0, [18354.841374630247, 1.0]], [0, [2232.198267711553, 1.0]], [0, [457.7051943315277, 1.0]], [0, [121.85723907437844, 1.0]], [0, [37.608140284837816, 1.0]], [0, [4.741282332880989, 1.0]], [0, [0.39119574155920617, 1.0]], [1, [8.598648768952948, 1.0]], [1, [0.49085004979830615, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99999565]
bas 1, expnt(s) = [799999.99974927]
bas 2, expnt(s) = [18354.84137463]
bas 3, expnt(s) = [2232.19826771]
bas 4, expnt(s) = [457.70519433]
bas 5, expnt(s) = [121.85723907]
bas 6, expnt(s) = [37.60814028]
bas 7, expnt(s) = [4.74128233]
bas 8, expnt(s) = [0.39119574]
bas 9, expnt(s) = [8.59864877]
bas 10, expnt(s) = [0.49085005]
CPU time:       188.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83548414e+04 3.98407955e+03 2.23219827e+03 8.20473577e+02
 4.57705194e+02 2.50008287e+02 1.21857239e+02 9.26623958e+01
 3.76081403e+01 3.83686411e+01 4.74128233e+00 8.11777271e+00
 3.91195742e-01 1.24971394e+00 8.59864877e+00 4.29558339e+01
 4.90850050e-01 1.19858943e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319972842821095
cond(S) = 42.96323294292829
E1 = -688.6352614366267  E_coul = 184.9152332205958
init E= -503.720028216031
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680902154936871  LUMO = 85.1523419290512
  mo_energy =
[-1.21646307e+02 -1.32807758e+01 -7.62161760e+00 -7.62161760e+00
 -7.62161760e+00 -1.65067369e+00 -6.80902155e-01 -6.80902155e-01
 -6.80902155e-01  8.51523419e+01  6.78419227e+02  3.94721034e+03
  3.15203131e+04  1.12121380e+06  7.13808304e+06]
E1 = -706.5748967128646  E_coul = 198.94480718597825
cycle= 1 E= -507.630089526886  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.37732
diis-c [-0.14237053  1.        ]
  HOMO = -0.236280588302823  LUMO = 86.4853770683551
  mo_energy =
[-1.20258550e+02 -1.22526968e+01 -6.65310337e+00 -6.65310337e+00
 -6.65310337e+00 -1.16345339e+00 -2.36280588e-01 -2.36280588e-01
 -2.36280588e-01  8.64853771e+01  6.79789370e+02  3.94846034e+03
  3.15213936e+04  1.12121478e+06  7.13808401e+06]
E1 = -706.5435095291858  E_coul = 198.9129927174909
cycle= 2 E= -507.630516811695  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0142
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0050346
diis-c [-2.52630070e-05 -7.69431777e-04  1.00076943e+00]
  HOMO = -0.236455518138077  LUMO = 86.4818602455355
  mo_energy =
[-1.20267181e+02 -1.22538837e+01 -6.65494168e+00 -6.65494168e+00
 -6.65494168e+00 -1.16351805e+00 -2.36455518e-01 -2.36455518e-01
 -2.36455518e-01  8.64818602e+01  6.79778787e+02  3.94844444e+03
  3.15213743e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430701781887  E_coul = 198.91255325669644
cycle= 3 E= -507.630516921492  delta_E= -1.1e-07  |g|= 9.35e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125186
diis-c [-3.75095685e-10  3.85598826e-05 -2.52241806e-02  1.02518562e+00]
  HOMO = -0.236457677610032  LUMO = 86.4818166077742
  mo_energy =
[-1.20267292e+02 -1.22538991e+01 -6.65496808e+00 -6.65496808e+00
 -6.65496808e+00 -1.16351869e+00 -2.36457678e-01 -2.36457678e-01
 -2.36457678e-01  8.64818166e+01  6.79778673e+02  3.94844430e+03
  3.15213741e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430630787783  E_coul = 198.91254615724705
cycle= 4 E= -507.630516921531  delta_E= -3.91e-11  |g|= 3.55e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430630787783  E_coul = 198.91254615724705
  HOMO = -0.236457662163807  LUMO = 86.4818169291169
  mo_energy =
[-1.20267291e+02 -1.22538990e+01 -6.65496793e+00 -6.65496793e+00
 -6.65496793e+00 -1.16351868e+00 -2.36457662e-01 -2.36457662e-01
 -2.36457662e-01  8.64818169e+01  6.79778674e+02  3.94844430e+03
  3.15213741e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430631137077  E_coul = 198.91254619217668
Extra cycle  E= -507.630516921531  delta_E= 2.84e-13  |g|= 6.04e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96323294292829
E1 = -706.5430631137077  E_coul = 198.91254619217668
init E= -507.630516921531
    CPU time for initialize scf      0.09 sec, wall time      0.10 sec
  HOMO = -0.236457661983917  LUMO = 86.4818169330321
  mo_energy =
[-1.20267291e+02 -1.22538990e+01 -6.65496792e+00 -6.65496792e+00
 -6.65496792e+00 -1.16351868e+00 -2.36457662e-01 -2.36457662e-01
 -2.36457662e-01  8.64818169e+01  6.79778674e+02  3.94844430e+03
  3.15213741e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430631142342  E_coul = 198.912546192703
cycle= 1 E= -507.630516921531  delta_E= -2.27e-13  |g|= 1.33e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5430631142342  E_coul = 198.912546192703
  HOMO = -0.236457661981388  LUMO = 86.4818169330878
  mo_energy =
[-1.20267291e+02 -1.22538990e+01 -6.65496792e+00 -6.65496792e+00
 -6.65496792e+00 -1.16351868e+00 -2.36457662e-01 -2.36457662e-01
 -2.36457662e-01  8.64818169e+01  6.79778674e+02  3.94844430e+03
  3.15213741e+04  1.12121476e+06  7.13808399e+06]
E1 = -706.5430631142432  E_coul = 198.9125461927119
Extra cycle  E= -507.630516921531  delta_E= -5.68e-14  |g|= 2.7e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83548414e+04 2.23219827e+03
 4.57705194e+02 1.21857239e+02 3.76081403e+01 4.74128233e+00
 3.91195742e-01 8.59864877e+00 4.90850050e-01]
grad_E = [ 1.58651825e-10  9.14442754e-09  4.38576106e-06 -1.51992769e-06
  5.36270352e-06 -9.92492791e-06 -1.85318557e-05  1.22540666e-06
 -1.16502760e-06 -9.41325794e-07  1.25512105e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:03 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99999        1
[INPUT] 0    0    [1    /1   ]  799999.999556        1
[INPUT] 0    0    [1    /1   ]  18354.7487582        1
[INPUT] 0    0    [1    /1   ]  2232.23011825        1
[INPUT] 0    0    [1    /1   ]  457.64840409         1
[INPUT] 0    0    [1    /1   ]  121.832028847        1
[INPUT] 0    0    [1    /1   ]  37.6019321447        1
[INPUT] 0    0    [1    /1   ]  4.74127225598        1
[INPUT] 0    0    [1    /1   ]  0.39119491537        1
[INPUT] 1    0    [1    /1   ]  8.5986515457         1
[INPUT] 1    0    [1    /1   ]  0.490850264629       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999992301, 1.0]], [0, [799999.9995562081, 1.0]], [0, [18354.74875824204, 1.0]], [0, [2232.230118246476, 1.0]], [0, [457.6484040900057, 1.0]], [0, [121.83202884656986, 1.0]], [0, [37.601932144668375, 1.0]], [0, [4.741272255980009, 1.0]], [0, [0.39119491537046835, 1.0]], [1, [8.598651545702273, 1.0]], [1, [0.4908502646286954, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999923]
bas 1, expnt(s) = [799999.99955621]
bas 2, expnt(s) = [18354.74875824]
bas 3, expnt(s) = [2232.23011825]
bas 4, expnt(s) = [457.64840409]
bas 5, expnt(s) = [121.83202885]
bas 6, expnt(s) = [37.60193214]
bas 7, expnt(s) = [4.74127226]
bas 8, expnt(s) = [0.39119492]
bas 9, expnt(s) = [8.59865155]
bas 10, expnt(s) = [0.49085026]
CPU time:       192.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83547488e+04 3.98406447e+03 2.23223012e+03 8.20482357e+02
 4.57648404e+02 2.49985022e+02 1.21832029e+02 9.26480177e+01
 3.76019321e+01 3.83638907e+01 4.74127226e+00 8.11775977e+00
 3.91194915e-01 1.24971196e+00 8.59865155e+00 4.29558513e+01
 4.90850265e-01 1.19859008e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973199175806
cond(S) = 42.95951751422064
E1 = -688.6352587003892  E_coul = 184.9152182649483
init E= -503.720040435441
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902153175142  LUMO = 85.1286414921123
  mo_energy =
[-1.21646314e+02 -1.32807705e+01 -7.62161974e+00 -7.62161974e+00
 -7.62161974e+00 -1.65067230e+00 -6.80902153e-01 -6.80902153e-01
 -6.80902153e-01  8.51286415e+01  6.78281123e+02  3.94696076e+03
  3.15200179e+04  1.12121350e+06  7.13808278e+06]
E1 = -706.5748644820599  E_coul = 198.94477480487615
cycle= 1 E= -507.630089677184  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377319
diis-c [-0.14236947  1.        ]
  HOMO = -0.236280903203547  LUMO = 86.4616458166204
  mo_energy =
[-1.20258560e+02 -1.22526931e+01 -6.65310633e+00 -6.65310633e+00
 -6.65310633e+00 -1.16345293e+00 -2.36280903e-01 -2.36280903e-01
 -2.36280903e-01  8.64616458e+01  6.79651258e+02  3.94821073e+03
  3.15210984e+04  1.12121448e+06  7.13808375e+06]
E1 = -706.5434645367238  E_coul = 198.91294739117436
cycle= 2 E= -507.630517145549  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503564
diis-c [-2.52738116e-05 -7.68150463e-04  1.00076815e+00]
  HOMO = -0.236455918015409  LUMO = 86.4581281189328
  mo_energy =
[-1.20267195e+02 -1.22538805e+01 -6.65494549e+00 -6.65494549e+00
 -6.65494549e+00 -1.16351762e+00 -2.36455918e-01 -2.36455918e-01
 -2.36455918e-01  8.64581281e+01  6.79640672e+02  3.94819483e+03
  3.15210791e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.543024932825  E_coul = 198.91250767740127
cycle= 3 E= -507.630517255424  delta_E= -1.1e-07  |g|= 9.35e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125236
diis-c [-3.75398448e-10  3.85581337e-05 -2.52288034e-02  1.02519025e+00]
  HOMO = -0.236458079116644  LUMO = 86.4580844554709
  mo_energy =
[-1.20267306e+02 -1.22538959e+01 -6.65497191e+00 -6.65497191e+00
 -6.65497191e+00 -1.16351826e+00 -2.36458079e-01 -2.36458079e-01
 -2.36458079e-01  8.64580845e+01  6.79640558e+02  3.94819469e+03
  3.15210789e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.5430178275136  E_coul = 198.91250057205136
cycle= 4 E= -507.630517255462  delta_E= -3.85e-11  |g|= 3.55e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430178275136  E_coul = 198.91250057205136
  HOMO = -0.236458063656553  LUMO = 86.4580847769889
  mo_energy =
[-1.20267305e+02 -1.22538958e+01 -6.65497176e+00 -6.65497176e+00
 -6.65497176e+00 -1.16351825e+00 -2.36458064e-01 -2.36458064e-01
 -2.36458064e-01  8.64580848e+01  6.79640559e+02  3.94819469e+03
  3.15210789e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.5430178624756  E_coul = 198.91250060701333
Extra cycle  E= -507.630517255462  delta_E= -5.68e-14  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.20000000e+06 8.00000000e+05 1.83547488e+04 2.23223012e+03
 4.57648404e+02 1.21832029e+02 3.76019321e+01 4.74127226e+00
 3.91194915e-01 8.59865155e+00 4.90850265e-01]
E = -507.6305172554623
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:04 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99999        1
[INPUT] 0    0    [1    /1   ]  799999.999556        1
[INPUT] 0    0    [1    /1   ]  18354.7487582        1
[INPUT] 0    0    [1    /1   ]  2232.23011825        1
[INPUT] 0    0    [1    /1   ]  457.64840409         1
[INPUT] 0    0    [1    /1   ]  121.832028847        1
[INPUT] 0    0    [1    /1   ]  37.6019321447        1
[INPUT] 0    0    [1    /1   ]  4.74127225598        1
[INPUT] 0    0    [1    /1   ]  0.39119491537        1
[INPUT] 1    0    [1    /1   ]  8.5986515457         1
[INPUT] 1    0    [1    /1   ]  0.490850264629       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999992301, 1.0]], [0, [799999.9995562081, 1.0]], [0, [18354.74875824204, 1.0]], [0, [2232.230118246476, 1.0]], [0, [457.6484040900057, 1.0]], [0, [121.83202884656986, 1.0]], [0, [37.601932144668375, 1.0]], [0, [4.741272255980009, 1.0]], [0, [0.39119491537046835, 1.0]], [1, [8.598651545702273, 1.0]], [1, [0.4908502646286954, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.9999923]
bas 1, expnt(s) = [799999.99955621]
bas 2, expnt(s) = [18354.74875824]
bas 3, expnt(s) = [2232.23011825]
bas 4, expnt(s) = [457.64840409]
bas 5, expnt(s) = [121.83202885]
bas 6, expnt(s) = [37.60193214]
bas 7, expnt(s) = [4.74127226]
bas 8, expnt(s) = [0.39119492]
bas 9, expnt(s) = [8.59865155]
bas 10, expnt(s) = [0.49085026]
CPU time:       193.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 8.00000000e+05 6.75822294e+04
 1.83547488e+04 3.98406447e+03 2.23223012e+03 8.20482357e+02
 4.57648404e+02 2.49985022e+02 1.21832029e+02 9.26480177e+01
 3.76019321e+01 3.83638907e+01 4.74127226e+00 8.11775977e+00
 3.91194915e-01 1.24971196e+00 8.59865155e+00 4.29558513e+01
 4.90850265e-01 1.19859008e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319973199175806
cond(S) = 42.95951751422064
E1 = -688.6352587003892  E_coul = 184.9152182649483
init E= -503.720040435441
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902153175142  LUMO = 85.1286414921123
  mo_energy =
[-1.21646314e+02 -1.32807705e+01 -7.62161974e+00 -7.62161974e+00
 -7.62161974e+00 -1.65067230e+00 -6.80902153e-01 -6.80902153e-01
 -6.80902153e-01  8.51286415e+01  6.78281123e+02  3.94696076e+03
  3.15200179e+04  1.12121350e+06  7.13808278e+06]
E1 = -706.5748644820599  E_coul = 198.94477480487615
cycle= 1 E= -507.630089677184  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377319
diis-c [-0.14236947  1.        ]
  HOMO = -0.236280903203547  LUMO = 86.4616458166204
  mo_energy =
[-1.20258560e+02 -1.22526931e+01 -6.65310633e+00 -6.65310633e+00
 -6.65310633e+00 -1.16345293e+00 -2.36280903e-01 -2.36280903e-01
 -2.36280903e-01  8.64616458e+01  6.79651258e+02  3.94821073e+03
  3.15210984e+04  1.12121448e+06  7.13808375e+06]
E1 = -706.5434645367238  E_coul = 198.91294739117436
cycle= 2 E= -507.630517145549  delta_E= -0.000427  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503564
diis-c [-2.52738116e-05 -7.68150463e-04  1.00076815e+00]
  HOMO = -0.236455918015409  LUMO = 86.4581281189328
  mo_energy =
[-1.20267195e+02 -1.22538805e+01 -6.65494549e+00 -6.65494549e+00
 -6.65494549e+00 -1.16351762e+00 -2.36455918e-01 -2.36455918e-01
 -2.36455918e-01  8.64581281e+01  6.79640672e+02  3.94819483e+03
  3.15210791e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.543024932825  E_coul = 198.91250767740127
cycle= 3 E= -507.630517255424  delta_E= -1.1e-07  |g|= 9.35e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125236
diis-c [-3.75398448e-10  3.85581337e-05 -2.52288034e-02  1.02519025e+00]
  HOMO = -0.236458079116644  LUMO = 86.4580844554709
  mo_energy =
[-1.20267306e+02 -1.22538959e+01 -6.65497191e+00 -6.65497191e+00
 -6.65497191e+00 -1.16351826e+00 -2.36458079e-01 -2.36458079e-01
 -2.36458079e-01  8.64580845e+01  6.79640558e+02  3.94819469e+03
  3.15210789e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.5430178275136  E_coul = 198.91250057205136
cycle= 4 E= -507.630517255462  delta_E= -3.85e-11  |g|= 3.55e-07  |ddm|= 3.38e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430178275136  E_coul = 198.91250057205136
  HOMO = -0.236458063656553  LUMO = 86.4580847769889
  mo_energy =
[-1.20267305e+02 -1.22538958e+01 -6.65497176e+00 -6.65497176e+00
 -6.65497176e+00 -1.16351825e+00 -2.36458064e-01 -2.36458064e-01
 -2.36458064e-01  8.64580848e+01  6.79640559e+02  3.94819469e+03
  3.15210789e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.5430178624756  E_coul = 198.91250060701333
Extra cycle  E= -507.630517255462  delta_E= -5.68e-14  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.95951751422064
E1 = -706.5430178624756  E_coul = 198.91250060701333
init E= -507.630517255462
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236458063476463  LUMO = 86.4580847809091
  mo_energy =
[-1.20267305e+02 -1.22538958e+01 -6.65497176e+00 -6.65497176e+00
 -6.65497176e+00 -1.16351825e+00 -2.36458063e-01 -2.36458063e-01
 -2.36458063e-01  8.64580848e+01  6.79640559e+02  3.94819469e+03
  3.15210789e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.543017863002  E_coul = 198.9125006075398
cycle= 1 E= -507.630517255462  delta_E= 1.14e-13  |g|= 1.37e-10  |ddm|= 2.38e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.543017863002  E_coul = 198.9125006075398
  HOMO = -0.236458063473938  LUMO = 86.4580847809647
  mo_energy =
[-1.20267305e+02 -1.22538958e+01 -6.65497176e+00 -6.65497176e+00
 -6.65497176e+00 -1.16351825e+00 -2.36458063e-01 -2.36458063e-01
 -2.36458063e-01  8.64580848e+01  6.79640559e+02  3.94819469e+03
  3.15210789e+04  1.12121446e+06  7.13808373e+06]
E1 = -706.543017863011  E_coul = 198.9125006075488
Extra cycle  E= -507.630517255462  delta_E=    0  |g|= 6.98e-11  |ddm|= 4.22e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.18 sec
exp = [3.20000000e+06 8.00000000e+05 1.83547488e+04 2.23223012e+03
 4.57648404e+02 1.21832029e+02 3.76019321e+01 4.74127226e+00
 3.91194915e-01 8.59865155e+00 4.90850265e-01]
grad_E = [ 1.58662171e-10  9.14481995e-09  4.38342540e-06 -1.40390122e-06
  5.55055209e-06 -1.37683430e-05 -2.33363849e-05  1.04121121e-06
 -1.03772280e-06 -8.67623292e-07  1.15775646e-06]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99999        1
[INPUT] 0    0    [1    /1   ]  799999.999203        1
[INPUT] 0    0    [1    /1   ]  18354.5794013        1
[INPUT] 0    0    [1    /1   ]  2232.28850154        1
[INPUT] 0    0    [1    /1   ]  457.542348282        1
[INPUT] 0    0    [1    /1   ]  121.793183427        1
[INPUT] 0    0    [1    /1   ]  37.5932057049        1
[INPUT] 0    0    [1    /1   ]  4.74125231816        1
[INPUT] 0    0    [1    /1   ]  0.391193854361       1
[INPUT] 1    0    [1    /1   ]  8.5986550351         1
[INPUT] 1    0    [1    /1   ]  0.490850556766       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999861764, 1.0]], [0, [799999.9992031829, 1.0]], [0, [18354.579401295665, 1.0]], [0, [2232.28850154318, 1.0]], [0, [457.5423482822029, 1.0]], [0, [121.7931834265944, 1.0]], [0, [37.593205704923946, 1.0]], [0, [4.741252318162298, 1.0]], [0, [0.3911938543610406, 1.0]], [1, [8.598655035104802, 1.0]], [1, [0.4908505567660645, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99998618]
bas 1, expnt(s) = [799999.99920318]
bas 2, expnt(s) = [18354.5794013]
bas 3, expnt(s) = [2232.28850154]
bas 4, expnt(s) = [457.54234828]
bas 5, expnt(s) = [121.79318343]
bas 6, expnt(s) = [37.5932057]
bas 7, expnt(s) = [4.74125232]
bas 8, expnt(s) = [0.39119385]
bas 9, expnt(s) = [8.59865504]
bas 10, expnt(s) = [0.49085056]
CPU time:       197.83
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999999e+05 6.75822294e+04
 1.83545794e+04 3.98403690e+03 2.23228850e+03 8.20498452e+02
 4.57542348e+02 2.49941572e+02 1.21793183e+02 9.26258616e+01
 3.75932057e+01 3.83572131e+01 4.74125232e+00 8.11773417e+00
 3.91193854e-01 1.24970942e+00 8.59865504e+00 4.29558730e+01
 4.90850557e-01 1.19859097e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997379275013
cond(S) = 42.95617148477198
E1 = -688.6352150671432  E_coul = 184.9151972077454
init E= -503.720017859398
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902074757914  LUMO = 85.09393003205
  mo_energy =
[-1.21646323e+02 -1.32807655e+01 -7.62162271e+00 -7.62162271e+00
 -7.62162271e+00 -1.65067044e+00 -6.80902075e-01 -6.80902075e-01
 -6.80902075e-01  8.50939300e+01  6.78056259e+02  3.94653294e+03
  3.15195005e+04  1.12121298e+06  7.13808231e+06]
E1 = -706.5748255829383  E_coul = 198.944735642358
cycle= 1 E= -507.63008994058  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377322
diis-c [-0.14237179  1.        ]
  HOMO = -0.236281323022441  LUMO = 86.4268902411582
  mo_energy =
[-1.20258571e+02 -1.22526901e+01 -6.65311028e+00 -6.65311028e+00
 -6.65311028e+00 -1.16345245e+00 -2.36281323e-01 -2.36281323e-01
 -2.36281323e-01  8.64268902e+01  6.79426390e+02  3.94778288e+03
  3.15205809e+04  1.12121395e+06  7.13808328e+06]
E1 = -706.5434070505089  E_coul = 198.91288937395638
cycle= 2 E= -507.630517676553  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503711
diis-c [-2.52890032e-05 -7.66330661e-04  1.00076633e+00]
  HOMO = -0.236456462203175  LUMO = 86.4233712922878
  mo_energy =
[-1.20267209e+02 -1.22538783e+01 -6.65495068e+00 -6.65495068e+00
 -6.65495068e+00 -1.16351719e+00 -2.36456462e-01 -2.36456462e-01
 -2.36456462e-01  8.64233713e+01  6.79415799e+02  3.94776698e+03
  3.15205616e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429670760855  E_coul = 198.9124492895461
cycle= 3 E= -507.630517786539  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125307
diis-c [-3.75828005e-10  3.85571401e-05 -2.52355681e-02  1.02519701e+00]
  HOMO = -0.236458625683922  LUMO = 86.4233275914587
  mo_energy =
[-1.20267320e+02 -1.22538937e+01 -6.65497713e+00 -6.65497713e+00
 -6.65497713e+00 -1.16351782e+00 -2.36458626e-01 -2.36458626e-01
 -2.36458626e-01  8.64233276e+01  6.79415685e+02  3.94776684e+03
  3.15205614e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429599621461  E_coul = 198.91244217556758
cycle= 4 E= -507.630517786579  delta_E= -3.92e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429599621461  E_coul = 198.91244217556758
  HOMO = -0.236458610203634  LUMO = 86.4233279132312
  mo_energy =
[-1.20267320e+02 -1.22538936e+01 -6.65497698e+00 -6.65497698e+00
 -6.65497698e+00 -1.16351782e+00 -2.36458610e-01 -2.36458610e-01
 -2.36458610e-01  8.64233279e+01  6.79415686e+02  3.94776684e+03
  3.15205614e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429599971543  E_coul = 198.91244221057602
Extra cycle  E= -507.630517786578  delta_E= 3.41e-13  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
exp = [3.20000000e+06 7.99999999e+05 1.83545794e+04 2.23228850e+03
 4.57542348e+02 1.21793183e+02 3.75932057e+01 4.74125232e+00
 3.91193854e-01 8.59865504e+00 4.90850557e-01]
E = -507.63051778657825
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:09 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99999        1
[INPUT] 0    0    [1    /1   ]  799999.999203        1
[INPUT] 0    0    [1    /1   ]  18354.5794013        1
[INPUT] 0    0    [1    /1   ]  2232.28850154        1
[INPUT] 0    0    [1    /1   ]  457.542348282        1
[INPUT] 0    0    [1    /1   ]  121.793183427        1
[INPUT] 0    0    [1    /1   ]  37.5932057049        1
[INPUT] 0    0    [1    /1   ]  4.74125231816        1
[INPUT] 0    0    [1    /1   ]  0.391193854361       1
[INPUT] 1    0    [1    /1   ]  8.5986550351         1
[INPUT] 1    0    [1    /1   ]  0.490850556766       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999861764, 1.0]], [0, [799999.9992031829, 1.0]], [0, [18354.579401295665, 1.0]], [0, [2232.28850154318, 1.0]], [0, [457.5423482822029, 1.0]], [0, [121.7931834265944, 1.0]], [0, [37.593205704923946, 1.0]], [0, [4.741252318162298, 1.0]], [0, [0.3911938543610406, 1.0]], [1, [8.598655035104802, 1.0]], [1, [0.4908505567660645, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99998618]
bas 1, expnt(s) = [799999.99920318]
bas 2, expnt(s) = [18354.5794013]
bas 3, expnt(s) = [2232.28850154]
bas 4, expnt(s) = [457.54234828]
bas 5, expnt(s) = [121.79318343]
bas 6, expnt(s) = [37.5932057]
bas 7, expnt(s) = [4.74125232]
bas 8, expnt(s) = [0.39119385]
bas 9, expnt(s) = [8.59865504]
bas 10, expnt(s) = [0.49085056]
CPU time:       198.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999999e+05 6.75822294e+04
 1.83545794e+04 3.98403690e+03 2.23228850e+03 8.20498452e+02
 4.57542348e+02 2.49941572e+02 1.21793183e+02 9.26258616e+01
 3.75932057e+01 3.83572131e+01 4.74125232e+00 8.11773417e+00
 3.91193854e-01 1.24970942e+00 8.59865504e+00 4.29558730e+01
 4.90850557e-01 1.19859097e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31997379275013
cond(S) = 42.95617148477198
E1 = -688.6352150671432  E_coul = 184.9151972077454
init E= -503.720017859398
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680902074757914  LUMO = 85.09393003205
  mo_energy =
[-1.21646323e+02 -1.32807655e+01 -7.62162271e+00 -7.62162271e+00
 -7.62162271e+00 -1.65067044e+00 -6.80902075e-01 -6.80902075e-01
 -6.80902075e-01  8.50939300e+01  6.78056259e+02  3.94653294e+03
  3.15195005e+04  1.12121298e+06  7.13808231e+06]
E1 = -706.5748255829383  E_coul = 198.944735642358
cycle= 1 E= -507.63008994058  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377322
diis-c [-0.14237179  1.        ]
  HOMO = -0.236281323022441  LUMO = 86.4268902411582
  mo_energy =
[-1.20258571e+02 -1.22526901e+01 -6.65311028e+00 -6.65311028e+00
 -6.65311028e+00 -1.16345245e+00 -2.36281323e-01 -2.36281323e-01
 -2.36281323e-01  8.64268902e+01  6.79426390e+02  3.94778288e+03
  3.15205809e+04  1.12121395e+06  7.13808328e+06]
E1 = -706.5434070505089  E_coul = 198.91288937395638
cycle= 2 E= -507.630517676553  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503711
diis-c [-2.52890032e-05 -7.66330661e-04  1.00076633e+00]
  HOMO = -0.236456462203175  LUMO = 86.4233712922878
  mo_energy =
[-1.20267209e+02 -1.22538783e+01 -6.65495068e+00 -6.65495068e+00
 -6.65495068e+00 -1.16351719e+00 -2.36456462e-01 -2.36456462e-01
 -2.36456462e-01  8.64233713e+01  6.79415799e+02  3.94776698e+03
  3.15205616e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429670760855  E_coul = 198.9124492895461
cycle= 3 E= -507.630517786539  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000201
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125307
diis-c [-3.75828005e-10  3.85571401e-05 -2.52355681e-02  1.02519701e+00]
  HOMO = -0.236458625683922  LUMO = 86.4233275914587
  mo_energy =
[-1.20267320e+02 -1.22538937e+01 -6.65497713e+00 -6.65497713e+00
 -6.65497713e+00 -1.16351782e+00 -2.36458626e-01 -2.36458626e-01
 -2.36458626e-01  8.64233276e+01  6.79415685e+02  3.94776684e+03
  3.15205614e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429599621461  E_coul = 198.91244217556758
cycle= 4 E= -507.630517786579  delta_E= -3.92e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429599621461  E_coul = 198.91244217556758
  HOMO = -0.236458610203634  LUMO = 86.4233279132312
  mo_energy =
[-1.20267320e+02 -1.22538936e+01 -6.65497698e+00 -6.65497698e+00
 -6.65497698e+00 -1.16351782e+00 -2.36458610e-01 -2.36458610e-01
 -2.36458610e-01  8.64233279e+01  6.79415686e+02  3.94776684e+03
  3.15205614e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429599971543  E_coul = 198.91244221057602
Extra cycle  E= -507.630517786578  delta_E= 3.41e-13  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.14 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.95617148477198
E1 = -706.5429599971543  E_coul = 198.91244221057602
init E= -507.630517786578
    CPU time for initialize scf      0.12 sec, wall time      0.12 sec
  HOMO = -0.236458610023273  LUMO = 86.423327917156
  mo_energy =
[-1.20267320e+02 -1.22538936e+01 -6.65497698e+00 -6.65497698e+00
 -6.65497698e+00 -1.16351782e+00 -2.36458610e-01 -2.36458610e-01
 -2.36458610e-01  8.64233279e+01  6.79415686e+02  3.94776684e+03
  3.15205614e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429599976819  E_coul = 198.91244221110315
cycle= 1 E= -507.630517786579  delta_E= -5.12e-13  |g|= 1.38e-10  |ddm|= 2.39e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5429599976819  E_coul = 198.91244221110315
  HOMO = -0.236458610020743  LUMO = 86.4233279172116
  mo_energy =
[-1.20267320e+02 -1.22538936e+01 -6.65497698e+00 -6.65497698e+00
 -6.65497698e+00 -1.16351782e+00 -2.36458610e-01 -2.36458610e-01
 -2.36458610e-01  8.64233279e+01  6.79415686e+02  3.94776684e+03
  3.15205614e+04  1.12121393e+06  7.13808326e+06]
E1 = -706.5429599976903  E_coul = 198.91244221111205
Extra cycle  E= -507.630517786578  delta_E= 5.12e-13  |g|= 3.41e-11  |ddm|= 4.23e-12
    CPU time for scf_cycle      0.22 sec, wall time      0.22 sec
exp = [3.20000000e+06 7.99999999e+05 1.83545794e+04 2.23228850e+03
 4.57542348e+02 1.21793183e+02 3.75932057e+01 4.74125232e+00
 3.91193854e-01 8.59865504e+00 4.90850557e-01]
grad_E = [ 1.58684089e-10  9.14565470e-09  4.37838472e-06 -1.12877626e-06
  4.86219062e-06 -1.78376013e-05 -2.77934009e-05  7.32210617e-07
 -7.92406851e-07 -7.01761699e-07  9.41811209e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:13 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99998        1
[INPUT] 0    0    [1    /1   ]  799999.998644        1
[INPUT] 0    0    [1    /1   ]  18354.3112181        1
[INPUT] 0    0    [1    /1   ]  2232.38119188        1
[INPUT] 0    0    [1    /1   ]  457.370692232        1
[INPUT] 0    0    [1    /1   ]  121.743861457        1
[INPUT] 0    0    [1    /1   ]  37.5838006503        1
[INPUT] 0    0    [1    /1   ]  4.74121816209        1
[INPUT] 0    0    [1    /1   ]  0.391192930653       1
[INPUT] 1    0    [1    /1   ]  8.59865789398        1
[INPUT] 1    0    [1    /1   ]  0.490850850138       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999764776, 1.0]], [0, [799999.9986441606, 1.0]], [0, [18354.31121807754, 1.0]], [0, [2232.3811918810893, 1.0]], [0, [457.3706922316244, 1.0]], [0, [121.74386145743225, 1.0]], [0, [37.58380065030178, 1.0]], [0, [4.741218162089301, 1.0]], [0, [0.3911929306530607, 1.0]], [1, [8.59865789397991, 1.0]], [1, [0.4908508501377629, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997648]
bas 1, expnt(s) = [799999.99864416]
bas 2, expnt(s) = [18354.31121808]
bas 3, expnt(s) = [2232.38119188]
bas 4, expnt(s) = [457.37069223]
bas 5, expnt(s) = [121.74386146]
bas 6, expnt(s) = [37.58380065]
bas 7, expnt(s) = [4.74121816]
bas 8, expnt(s) = [0.39119293]
bas 9, expnt(s) = [8.59865789]
bas 10, expnt(s) = [0.49085085]
CPU time:       202.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999999e+05 6.75822294e+04
 1.83543112e+04 3.98399324e+03 2.23238119e+03 8.20524004e+02
 4.57370692e+02 2.49871241e+02 1.21743861e+02 9.25977275e+01
 3.75838007e+01 3.83500157e+01 4.74121816e+00 8.11769031e+00
 3.91192931e-01 1.24970720e+00 8.59865789e+00 4.29558909e+01
 4.90850850e-01 1.19859187e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974636206933
cond(S) = 42.956671825112075
E1 = -688.635080521444  E_coul = 184.91517438317103
init E= -503.719906138273
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901823985787  LUMO = 85.0534615573545
  mo_energy =
[-1.21646327e+02 -1.32807656e+01 -7.62162584e+00 -7.62162584e+00
 -7.62162584e+00 -1.65066863e+00 -6.80901824e-01 -6.80901824e-01
 -6.80901824e-01  8.50534616e+01  6.77746693e+02  3.94590350e+03
  3.15187185e+04  1.12121215e+06  7.13808157e+06]
E1 = -706.574797338318  E_coul = 198.94470703904662
cycle= 1 E= -507.630090299271  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377336
diis-c [-0.14238264  1.        ]
  HOMO = -0.236281727211691  LUMO = 86.3863724434372
  mo_energy =
[-1.20258571e+02 -1.22526918e+01 -6.65311409e+00 -6.65311409e+00
 -6.65311409e+00 -1.16345231e+00 -2.36281727e-01 -2.36281727e-01
 -2.36281727e-01  8.63863724e+01  6.79116832e+02  3.94715342e+03
  3.15197988e+04  1.12121313e+06  7.13808254e+06]
E1 = -706.5433573601645  E_coul = 198.912839015609
cycle= 2 E= -507.630518344555  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503869
diis-c [-2.53053800e-05 -7.64327778e-04  1.00076433e+00]
  HOMO = -0.236457011145884  LUMO = 86.3828520992031
  mo_energy =
[-1.20267215e+02 -1.22538810e+01 -6.65495593e+00 -6.65495593e+00
 -6.65495593e+00 -1.16351710e+00 -2.36457011e-01 -2.36457011e-01
 -2.36457011e-01  8.63828521e+01  6.79106237e+02  3.94713751e+03
  3.15197795e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429169536898  E_coul = 198.91239849901535
cycle= 3 E= -507.630518454674  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125387
diis-c [-3.76304036e-10  3.85586219e-05 -2.52434339e-02  1.02520488e+00]
  HOMO = -0.236459177385338  LUMO = 86.3828083553986
  mo_energy =
[-1.20267326e+02 -1.22538965e+01 -6.65498241e+00 -6.65498241e+00
 -6.65498241e+00 -1.16351774e+00 -2.36459177e-01 -2.36459177e-01
 -2.36459177e-01  8.63828084e+01  6.79106122e+02  3.94713736e+03
  3.15197793e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429098297221  E_coul = 198.9123913750088
cycle= 4 E= -507.630518454713  delta_E= -3.89e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5429098297221  E_coul = 198.9123913750088
  HOMO = -0.236459161881678  LUMO = 86.382808677459
  mo_energy =
[-1.20267325e+02 -1.22538964e+01 -6.65498226e+00 -6.65498226e+00
 -6.65498226e+00 -1.16351773e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.63828087e+01  6.79106123e+02  3.94713737e+03
  3.15197793e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429098647841  E_coul = 198.91239141007094
Extra cycle  E= -507.630518454713  delta_E= 1.71e-13  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [3.20000000e+06 7.99999999e+05 1.83543112e+04 2.23238119e+03
 4.57370692e+02 1.21743861e+02 3.75838007e+01 4.74121816e+00
 3.91192931e-01 8.59865789e+00 4.90850850e-01]
E = -507.6305184547131
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:14 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99998        1
[INPUT] 0    0    [1    /1   ]  799999.998644        1
[INPUT] 0    0    [1    /1   ]  18354.3112181        1
[INPUT] 0    0    [1    /1   ]  2232.38119188        1
[INPUT] 0    0    [1    /1   ]  457.370692232        1
[INPUT] 0    0    [1    /1   ]  121.743861457        1
[INPUT] 0    0    [1    /1   ]  37.5838006503        1
[INPUT] 0    0    [1    /1   ]  4.74121816209        1
[INPUT] 0    0    [1    /1   ]  0.391192930653       1
[INPUT] 1    0    [1    /1   ]  8.59865789398        1
[INPUT] 1    0    [1    /1   ]  0.490850850138       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999764776, 1.0]], [0, [799999.9986441606, 1.0]], [0, [18354.31121807754, 1.0]], [0, [2232.3811918810893, 1.0]], [0, [457.3706922316244, 1.0]], [0, [121.74386145743225, 1.0]], [0, [37.58380065030178, 1.0]], [0, [4.741218162089301, 1.0]], [0, [0.3911929306530607, 1.0]], [1, [8.59865789397991, 1.0]], [1, [0.4908508501377629, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997648]
bas 1, expnt(s) = [799999.99864416]
bas 2, expnt(s) = [18354.31121808]
bas 3, expnt(s) = [2232.38119188]
bas 4, expnt(s) = [457.37069223]
bas 5, expnt(s) = [121.74386146]
bas 6, expnt(s) = [37.58380065]
bas 7, expnt(s) = [4.74121816]
bas 8, expnt(s) = [0.39119293]
bas 9, expnt(s) = [8.59865789]
bas 10, expnt(s) = [0.49085085]
CPU time:       203.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999999e+05 6.75822294e+04
 1.83543112e+04 3.98399324e+03 2.23238119e+03 8.20524004e+02
 4.57370692e+02 2.49871241e+02 1.21743861e+02 9.25977275e+01
 3.75838007e+01 3.83500157e+01 4.74121816e+00 8.11769031e+00
 3.91192931e-01 1.24970720e+00 8.59865789e+00 4.29558909e+01
 4.90850850e-01 1.19859187e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974636206933
cond(S) = 42.956671825112075
E1 = -688.635080521444  E_coul = 184.91517438317103
init E= -503.719906138273
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901823985787  LUMO = 85.0534615573545
  mo_energy =
[-1.21646327e+02 -1.32807656e+01 -7.62162584e+00 -7.62162584e+00
 -7.62162584e+00 -1.65066863e+00 -6.80901824e-01 -6.80901824e-01
 -6.80901824e-01  8.50534616e+01  6.77746693e+02  3.94590350e+03
  3.15187185e+04  1.12121215e+06  7.13808157e+06]
E1 = -706.574797338318  E_coul = 198.94470703904662
cycle= 1 E= -507.630090299271  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377336
diis-c [-0.14238264  1.        ]
  HOMO = -0.236281727211691  LUMO = 86.3863724434372
  mo_energy =
[-1.20258571e+02 -1.22526918e+01 -6.65311409e+00 -6.65311409e+00
 -6.65311409e+00 -1.16345231e+00 -2.36281727e-01 -2.36281727e-01
 -2.36281727e-01  8.63863724e+01  6.79116832e+02  3.94715342e+03
  3.15197988e+04  1.12121313e+06  7.13808254e+06]
E1 = -706.5433573601645  E_coul = 198.912839015609
cycle= 2 E= -507.630518344555  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503869
diis-c [-2.53053800e-05 -7.64327778e-04  1.00076433e+00]
  HOMO = -0.236457011145884  LUMO = 86.3828520992031
  mo_energy =
[-1.20267215e+02 -1.22538810e+01 -6.65495593e+00 -6.65495593e+00
 -6.65495593e+00 -1.16351710e+00 -2.36457011e-01 -2.36457011e-01
 -2.36457011e-01  8.63828521e+01  6.79106237e+02  3.94713751e+03
  3.15197795e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429169536898  E_coul = 198.91239849901535
cycle= 3 E= -507.630518454674  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125387
diis-c [-3.76304036e-10  3.85586219e-05 -2.52434339e-02  1.02520488e+00]
  HOMO = -0.236459177385338  LUMO = 86.3828083553986
  mo_energy =
[-1.20267326e+02 -1.22538965e+01 -6.65498241e+00 -6.65498241e+00
 -6.65498241e+00 -1.16351774e+00 -2.36459177e-01 -2.36459177e-01
 -2.36459177e-01  8.63828084e+01  6.79106122e+02  3.94713736e+03
  3.15197793e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429098297221  E_coul = 198.9123913750088
cycle= 4 E= -507.630518454713  delta_E= -3.89e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429098297221  E_coul = 198.9123913750088
  HOMO = -0.236459161881678  LUMO = 86.382808677459
  mo_energy =
[-1.20267325e+02 -1.22538964e+01 -6.65498226e+00 -6.65498226e+00
 -6.65498226e+00 -1.16351773e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.63828087e+01  6.79106123e+02  3.94713737e+03
  3.15197793e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429098647841  E_coul = 198.91239141007094
Extra cycle  E= -507.630518454713  delta_E= 1.71e-13  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.956671825112075
E1 = -706.5429098647841  E_coul = 198.91239141007094
init E= -507.630518454713
    CPU time for initialize scf      0.12 sec, wall time      0.13 sec
  HOMO = -0.236459161701002  LUMO = 86.3828086813877
  mo_energy =
[-1.20267325e+02 -1.22538964e+01 -6.65498226e+00 -6.65498226e+00
 -6.65498226e+00 -1.16351773e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.63828087e+01  6.79106123e+02  3.94713737e+03
  3.15197793e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429098653125  E_coul = 198.91239141059935
cycle= 1 E= -507.630518454713  delta_E=    0  |g|= 1.21e-10  |ddm|= 2.39e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5429098653125  E_coul = 198.91239141059935
  HOMO = -0.236459161698464  LUMO = 86.3828086814427
  mo_energy =
[-1.20267325e+02 -1.22538964e+01 -6.65498226e+00 -6.65498226e+00
 -6.65498226e+00 -1.16351773e+00 -2.36459162e-01 -2.36459162e-01
 -2.36459162e-01  8.63828087e+01  6.79106123e+02  3.94713737e+03
  3.15197793e+04  1.12121311e+06  7.13808252e+06]
E1 = -706.5429098653213  E_coul = 198.9123914106084
Extra cycle  E= -507.630518454713  delta_E= 1.71e-13  |g|= 2.9e-11  |ddm|= 4.25e-12
    CPU time for scf_cycle      0.20 sec, wall time      0.21 sec
exp = [3.20000000e+06 7.99999999e+05 1.83543112e+04 2.23238119e+03
 4.57370692e+02 1.21743861e+02 3.75838007e+01 4.74121816e+00
 3.91192931e-01 8.59865789e+00 4.90850850e-01]
grad_E = [ 1.58723852e-10  9.14717401e-09  4.36910615e-06 -5.86834681e-07
  2.02988098e-06 -1.92826104e-05 -2.76204555e-05  2.34115451e-07
 -3.45915851e-07 -3.95615736e-07  5.25085341e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:18 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998304        1
[INPUT] 0    0    [1    /1   ]  18354.1478862        1
[INPUT] 0    0    [1    /1   ]  2232.43790692        1
[INPUT] 0    0    [1    /1   ]  457.262031813        1
[INPUT] 0    0    [1    /1   ]  121.727348768        1
[INPUT] 0    0    [1    /1   ]  37.5829768779        1
[INPUT] 0    0    [1    /1   ]  4.74119444747        1
[INPUT] 0    0    [1    /1   ]  0.391193208453       1
[INPUT] 1    0    [1    /1   ]  8.59865668766        1
[INPUT] 1    0    [1    /1   ]  0.490850840858       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999970571, 1.0]], [0, [799999.9983037062, 1.0]], [0, [18354.147886165425, 1.0]], [0, [2232.437906918691, 1.0]], [0, [457.2620318127945, 1.0]], [0, [121.72734876824892, 1.0]], [0, [37.582976877883425, 1.0]], [0, [4.741194447469852, 1.0]], [0, [0.3911932084525192, 1.0]], [1, [8.598656687659497, 1.0]], [1, [0.49085084085841674, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997057]
bas 1, expnt(s) = [799999.99830371]
bas 2, expnt(s) = [18354.14788617]
bas 3, expnt(s) = [2232.43790692]
bas 4, expnt(s) = [457.26203181]
bas 5, expnt(s) = [121.72734877]
bas 6, expnt(s) = [37.58297688]
bas 7, expnt(s) = [4.74119445]
bas 8, expnt(s) = [0.39119321]
bas 9, expnt(s) = [8.59865669]
bas 10, expnt(s) = [0.49085084]
CPU time:       207.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541479e+04 3.98396665e+03 2.23243791e+03 8.20539638e+02
 4.57262032e+02 2.49826717e+02 1.21727349e+02 9.25883078e+01
 3.75829769e+01 3.83493853e+01 4.74119445e+00 8.11765985e+00
 3.91193208e-01 1.24970787e+00 8.59865669e+00 4.29558834e+01
 4.90850841e-01 1.19859184e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975044155612
cond(S) = 42.96341395785509
E1 = -688.6349261128755  E_coul = 184.91517210762868
init E= -503.719754005247
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901530947809  LUMO = 85.044906927454
  mo_energy =
[-1.21646320e+02 -1.32807744e+01 -7.62162599e+00 -7.62162599e+00
 -7.62162599e+00 -1.65066880e+00 -6.80901531e-01 -6.80901531e-01
 -6.80901531e-01  8.50449069e+01  6.77609791e+02  3.94557346e+03
  3.15182837e+04  1.12121168e+06  7.13808115e+06]
E1 = -706.5748170213668  E_coul = 198.94472632686583
cycle= 1 E= -507.630090694501  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377356
diis-c [-0.14239722  1.        ]
  HOMO = -0.236281686643945  LUMO = 86.3778105774277
  mo_energy =
[-1.20258554e+02 -1.22527001e+01 -6.65311371e+00 -6.65311371e+00
 -6.65311371e+00 -1.16345291e+00 -2.36281687e-01 -2.36281687e-01
 -2.36281687e-01  8.63778106e+01  6.78979953e+02  3.94682340e+03
  3.15193641e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5433728746808  E_coul = 198.91285407393175
cycle= 2 E= -507.630518800749  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503883
diis-c [-2.53068121e-05 -7.64085541e-04  1.00076409e+00]
  HOMO = -0.236457000595084  LUMO = 86.3742900347142
  mo_energy =
[-1.20267199e+02 -1.22538895e+01 -6.65495585e+00 -6.65495585e+00
 -6.65495585e+00 -1.16351771e+00 -2.36457001e-01 -2.36457001e-01
 -2.36457001e-01  8.63742900e+01  6.78969357e+02  3.94680749e+03
  3.15193447e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429323774528  E_coul = 198.9124134665573
cycle= 3 E= -507.630518910895  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125398
diis-c [-3.76364418e-10  3.85630788e-05 -2.52450588e-02  1.02520650e+00]
  HOMO = -0.236459167388778  LUMO = 86.374246282774
  mo_energy =
[-1.20267310e+02 -1.22539050e+01 -6.65498233e+00 -6.65498233e+00
 -6.65498233e+00 -1.16351835e+00 -2.36459167e-01 -2.36459167e-01
 -2.36459167e-01  8.63742463e+01  6.78969243e+02  3.94680735e+03
  3.15193446e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429252514335  E_coul = 198.91240634049947
cycle= 4 E= -507.630518910934  delta_E= -3.85e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429252514335  E_coul = 198.91240634049947
  HOMO = -0.236459151880527  LUMO = 86.3742466048808
  mo_energy =
[-1.20267309e+02 -1.22539049e+01 -6.65498218e+00 -6.65498218e+00
 -6.65498218e+00 -1.16351834e+00 -2.36459152e-01 -2.36459152e-01
 -2.36459152e-01  8.63742466e+01  6.78969244e+02  3.94680735e+03
  3.15193446e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429252865066  E_coul = 198.91240637557246
Extra cycle  E= -507.630518910934  delta_E= -1.14e-13  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 7.99999998e+05 1.83541479e+04 2.23243791e+03
 4.57262032e+02 1.21727349e+02 3.75829769e+01 4.74119445e+00
 3.91193208e-01 8.59865669e+00 4.90850841e-01]
E = -507.63051891093414
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998304        1
[INPUT] 0    0    [1    /1   ]  18354.1478862        1
[INPUT] 0    0    [1    /1   ]  2232.43790692        1
[INPUT] 0    0    [1    /1   ]  457.262031813        1
[INPUT] 0    0    [1    /1   ]  121.727348768        1
[INPUT] 0    0    [1    /1   ]  37.5829768779        1
[INPUT] 0    0    [1    /1   ]  4.74119444747        1
[INPUT] 0    0    [1    /1   ]  0.391193208453       1
[INPUT] 1    0    [1    /1   ]  8.59865668766        1
[INPUT] 1    0    [1    /1   ]  0.490850840858       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999970571, 1.0]], [0, [799999.9983037062, 1.0]], [0, [18354.147886165425, 1.0]], [0, [2232.437906918691, 1.0]], [0, [457.2620318127945, 1.0]], [0, [121.72734876824892, 1.0]], [0, [37.582976877883425, 1.0]], [0, [4.741194447469852, 1.0]], [0, [0.3911932084525192, 1.0]], [1, [8.598656687659497, 1.0]], [1, [0.49085084085841674, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997057]
bas 1, expnt(s) = [799999.99830371]
bas 2, expnt(s) = [18354.14788617]
bas 3, expnt(s) = [2232.43790692]
bas 4, expnt(s) = [457.26203181]
bas 5, expnt(s) = [121.72734877]
bas 6, expnt(s) = [37.58297688]
bas 7, expnt(s) = [4.74119445]
bas 8, expnt(s) = [0.39119321]
bas 9, expnt(s) = [8.59865669]
bas 10, expnt(s) = [0.49085084]
CPU time:       208.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541479e+04 3.98396665e+03 2.23243791e+03 8.20539638e+02
 4.57262032e+02 2.49826717e+02 1.21727349e+02 9.25883078e+01
 3.75829769e+01 3.83493853e+01 4.74119445e+00 8.11765985e+00
 3.91193208e-01 1.24970787e+00 8.59865669e+00 4.29558834e+01
 4.90850841e-01 1.19859184e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975044155612
cond(S) = 42.96341395785509
E1 = -688.6349261128755  E_coul = 184.91517210762868
init E= -503.719754005247
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901530947809  LUMO = 85.044906927454
  mo_energy =
[-1.21646320e+02 -1.32807744e+01 -7.62162599e+00 -7.62162599e+00
 -7.62162599e+00 -1.65066880e+00 -6.80901531e-01 -6.80901531e-01
 -6.80901531e-01  8.50449069e+01  6.77609791e+02  3.94557346e+03
  3.15182837e+04  1.12121168e+06  7.13808115e+06]
E1 = -706.5748170213668  E_coul = 198.94472632686583
cycle= 1 E= -507.630090694501  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377356
diis-c [-0.14239722  1.        ]
  HOMO = -0.236281686643945  LUMO = 86.3778105774277
  mo_energy =
[-1.20258554e+02 -1.22527001e+01 -6.65311371e+00 -6.65311371e+00
 -6.65311371e+00 -1.16345291e+00 -2.36281687e-01 -2.36281687e-01
 -2.36281687e-01  8.63778106e+01  6.78979953e+02  3.94682340e+03
  3.15193641e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5433728746808  E_coul = 198.91285407393175
cycle= 2 E= -507.630518800749  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503883
diis-c [-2.53068121e-05 -7.64085541e-04  1.00076409e+00]
  HOMO = -0.236457000595084  LUMO = 86.3742900347142
  mo_energy =
[-1.20267199e+02 -1.22538895e+01 -6.65495585e+00 -6.65495585e+00
 -6.65495585e+00 -1.16351771e+00 -2.36457001e-01 -2.36457001e-01
 -2.36457001e-01  8.63742900e+01  6.78969357e+02  3.94680749e+03
  3.15193447e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429323774528  E_coul = 198.9124134665573
cycle= 3 E= -507.630518910895  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125398
diis-c [-3.76364418e-10  3.85630788e-05 -2.52450588e-02  1.02520650e+00]
  HOMO = -0.236459167388778  LUMO = 86.374246282774
  mo_energy =
[-1.20267310e+02 -1.22539050e+01 -6.65498233e+00 -6.65498233e+00
 -6.65498233e+00 -1.16351835e+00 -2.36459167e-01 -2.36459167e-01
 -2.36459167e-01  8.63742463e+01  6.78969243e+02  3.94680735e+03
  3.15193446e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429252514335  E_coul = 198.91240634049947
cycle= 4 E= -507.630518910934  delta_E= -3.85e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429252514335  E_coul = 198.91240634049947
  HOMO = -0.236459151880527  LUMO = 86.3742466048808
  mo_energy =
[-1.20267309e+02 -1.22539049e+01 -6.65498218e+00 -6.65498218e+00
 -6.65498218e+00 -1.16351834e+00 -2.36459152e-01 -2.36459152e-01
 -2.36459152e-01  8.63742466e+01  6.78969244e+02  3.94680735e+03
  3.15193446e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429252865066  E_coul = 198.91240637557246
Extra cycle  E= -507.630518910934  delta_E= -1.14e-13  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.96341395785509
E1 = -706.5429252865066  E_coul = 198.91240637557246
init E= -507.630518910934
    CPU time for initialize scf      0.08 sec, wall time      0.08 sec
  HOMO = -0.236459151699784  LUMO = 86.3742466088089
  mo_energy =
[-1.20267309e+02 -1.22539049e+01 -6.65498218e+00 -6.65498218e+00
 -6.65498218e+00 -1.16351834e+00 -2.36459152e-01 -2.36459152e-01
 -2.36459152e-01  8.63742466e+01  6.78969244e+02  3.94680735e+03
  3.15193446e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.5429252870359  E_coul = 198.9124063761011
cycle= 1 E= -507.630518910935  delta_E= -6.82e-13  |g|= 1.22e-10  |ddm|= 2.39e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -706.5429252870359  E_coul = 198.9124063761011
  HOMO = -0.236459151697242  LUMO = 86.3742466088643
  mo_energy =
[-1.20267309e+02 -1.22539049e+01 -6.65498218e+00 -6.65498218e+00
 -6.65498218e+00 -1.16351834e+00 -2.36459152e-01 -2.36459152e-01
 -2.36459152e-01  8.63742466e+01  6.78969244e+02  3.94680735e+03
  3.15193446e+04  1.12121263e+06  7.13808209e+06]
E1 = -706.542925287045  E_coul = 198.91240637611034
Extra cycle  E= -507.630518910935  delta_E= 1.14e-13  |g|= 3.01e-11  |ddm|= 4.26e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 7.99999998e+05 1.83541479e+04 2.23243791e+03
 4.57262032e+02 1.21727349e+02 3.75829769e+01 4.74119445e+00
 3.91193208e-01 8.59865669e+00 4.90850841e-01]
grad_E = [ 1.58753664e-10  9.14831785e-09  4.36202000e-06 -1.39103966e-07
 -1.62913297e-06 -1.46073480e-05 -1.95058402e-05 -1.88263362e-07
  3.35925137e-08 -1.64254566e-07  1.61266428e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998168        1
[INPUT] 0    0    [1    /1   ]  18354.082648         1
[INPUT] 0    0    [1    /1   ]  2232.46089394        1
[INPUT] 0    0    [1    /1   ]  457.213410702        1
[INPUT] 0    0    [1    /1   ]  121.737919182        1
[INPUT] 0    0    [1    /1   ]  37.5888876226        1
[INPUT] 0    0    [1    /1   ]  4.74118138691        1
[INPUT] 0    0    [1    /1   ]  0.39119438582        1
[INPUT] 1    0    [1    /1   ]  8.59865247154        1
[INPUT] 1    0    [1    /1   ]  0.490850598031       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999968212, 1.0]], [0, [799999.9981677311, 1.0]], [0, [18354.08264797042, 1.0]], [0, [2232.460893940437, 1.0]], [0, [457.2134107018623, 1.0]], [0, [121.73791918161504, 1.0]], [0, [37.58888762255659, 1.0]], [0, [4.741181386905988, 1.0]], [0, [0.3911943858198639, 1.0]], [1, [8.59865247153949, 1.0]], [1, [0.490850598031118, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99996821]
bas 1, expnt(s) = [799999.99816773]
bas 2, expnt(s) = [18354.08264797]
bas 3, expnt(s) = [2232.46089394]
bas 4, expnt(s) = [457.2134107]
bas 5, expnt(s) = [121.73791918]
bas 6, expnt(s) = [37.58888762]
bas 7, expnt(s) = [4.74118139]
bas 8, expnt(s) = [0.39119439]
bas 9, expnt(s) = [8.59865247]
bas 10, expnt(s) = [0.4908506]
CPU time:       212.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83540826e+04 3.98395603e+03 2.23246089e+03 8.20545975e+02
 4.57213411e+02 2.49806793e+02 1.21737919e+02 9.25943378e+01
 3.75888876e+01 3.83539086e+01 4.74118139e+00 8.11764308e+00
 3.91194386e-01 1.24971069e+00 8.59865247e+00 4.29558570e+01
 4.90850598e-01 1.19859110e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975070939705
cond(S) = 42.974291926083794
E1 = -688.6347732653074  E_coul = 184.91518618070901
init E= -503.719587084598
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901236258256  LUMO = 85.0619416485326
  mo_energy =
[-1.21646305e+02 -1.32807891e+01 -7.62162381e+00 -7.62162381e+00
 -7.62162381e+00 -1.65067048e+00 -6.80901236e-01 -6.80901236e-01
 -6.80901236e-01  8.50619416e+01  6.77620697e+02  3.94550939e+03
  3.15181628e+04  1.12121151e+06  7.13808100e+06]
E1 = -706.574872521249  E_coul = 198.94478139638113
cycle= 1 E= -507.630091124868  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377377
diis-c [-0.14241316  1.        ]
  HOMO = -0.236281302857769  LUMO = 86.3948714913212
  mo_energy =
[-1.20258525e+02 -1.22527127e+01 -6.65311008e+00 -6.65311008e+00
 -6.65311008e+00 -1.16345402e+00 -2.36281303e-01 -2.36281303e-01
 -2.36281303e-01  8.63948715e+01  6.78990888e+02  3.94675938e+03
  3.15192432e+04  1.12121249e+06  7.13808197e+06]
E1 = -706.5434380265579  E_coul = 198.91291893326047
cycle= 2 E= -507.630519093297  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503783
diis-c [-2.52965108e-05 -7.65234456e-04  1.00076523e+00]
  HOMO = -0.23645655481101  LUMO = 86.3913516986513
  mo_energy =
[-1.20267167e+02 -1.22539017e+01 -6.65495159e+00 -6.65495159e+00
 -6.65495159e+00 -1.16351880e+00 -2.36456555e-01 -2.36456555e-01
 -2.36456555e-01  8.63913517e+01  6.78980296e+02  3.94674347e+03
  3.15192238e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429977124497  E_coul = 198.91247850906294
cycle= 3 E= -507.630519203387  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125356
diis-c [-3.76098149e-10  3.85692316e-05 -2.52416818e-02  1.02520311e+00]
  HOMO = -0.236458720392798  LUMO = 86.3913079664229
  mo_energy =
[-1.20267278e+02 -1.22539171e+01 -6.65497807e+00 -6.65497807e+00
 -6.65497807e+00 -1.16351944e+00 -2.36458720e-01 -2.36458720e-01
 -2.36458720e-01  8.63913080e+01  6.78980182e+02  3.94674333e+03
  3.15192237e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429905907768  E_coul = 198.91247138735028
cycle= 4 E= -507.630519203427  delta_E= -3.97e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429905907768  E_coul = 198.91247138735028
  HOMO = -0.236458704894944  LUMO = 86.3913082883813
  mo_energy =
[-1.20267278e+02 -1.22539170e+01 -6.65497791e+00 -6.65497791e+00
 -6.65497791e+00 -1.16351943e+00 -2.36458705e-01 -2.36458705e-01
 -2.36458705e-01  8.63913083e+01  6.78980183e+02  3.94674333e+03
  3.15192237e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429906258257  E_coul = 198.91247142239985
Extra cycle  E= -507.630519203426  delta_E= 6.25e-13  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
exp = [3.20000000e+06 7.99999998e+05 1.83540826e+04 2.23246089e+03
 4.57213411e+02 1.21737919e+02 3.75888876e+01 4.74118139e+00
 3.91194386e-01 8.59865247e+00 4.90850598e-01]
E = -507.6305192034259
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:24 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998168        1
[INPUT] 0    0    [1    /1   ]  18354.082648         1
[INPUT] 0    0    [1    /1   ]  2232.46089394        1
[INPUT] 0    0    [1    /1   ]  457.213410702        1
[INPUT] 0    0    [1    /1   ]  121.737919182        1
[INPUT] 0    0    [1    /1   ]  37.5888876226        1
[INPUT] 0    0    [1    /1   ]  4.74118138691        1
[INPUT] 0    0    [1    /1   ]  0.39119438582        1
[INPUT] 1    0    [1    /1   ]  8.59865247154        1
[INPUT] 1    0    [1    /1   ]  0.490850598031       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.999968212, 1.0]], [0, [799999.9981677311, 1.0]], [0, [18354.08264797042, 1.0]], [0, [2232.460893940437, 1.0]], [0, [457.2134107018623, 1.0]], [0, [121.73791918161504, 1.0]], [0, [37.58888762255659, 1.0]], [0, [4.741181386905988, 1.0]], [0, [0.3911943858198639, 1.0]], [1, [8.59865247153949, 1.0]], [1, [0.490850598031118, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99996821]
bas 1, expnt(s) = [799999.99816773]
bas 2, expnt(s) = [18354.08264797]
bas 3, expnt(s) = [2232.46089394]
bas 4, expnt(s) = [457.2134107]
bas 5, expnt(s) = [121.73791918]
bas 6, expnt(s) = [37.58888762]
bas 7, expnt(s) = [4.74118139]
bas 8, expnt(s) = [0.39119439]
bas 9, expnt(s) = [8.59865247]
bas 10, expnt(s) = [0.4908506]
CPU time:       213.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83540826e+04 3.98395603e+03 2.23246089e+03 8.20545975e+02
 4.57213411e+02 2.49806793e+02 1.21737919e+02 9.25943378e+01
 3.75888876e+01 3.83539086e+01 4.74118139e+00 8.11764308e+00
 3.91194386e-01 1.24971069e+00 8.59865247e+00 4.29558570e+01
 4.90850598e-01 1.19859110e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319975070939705
cond(S) = 42.974291926083794
E1 = -688.6347732653074  E_coul = 184.91518618070901
init E= -503.719587084598
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.680901236258256  LUMO = 85.0619416485326
  mo_energy =
[-1.21646305e+02 -1.32807891e+01 -7.62162381e+00 -7.62162381e+00
 -7.62162381e+00 -1.65067048e+00 -6.80901236e-01 -6.80901236e-01
 -6.80901236e-01  8.50619416e+01  6.77620697e+02  3.94550939e+03
  3.15181628e+04  1.12121151e+06  7.13808100e+06]
E1 = -706.574872521249  E_coul = 198.94478139638113
cycle= 1 E= -507.630091124868  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377377
diis-c [-0.14241316  1.        ]
  HOMO = -0.236281302857769  LUMO = 86.3948714913212
  mo_energy =
[-1.20258525e+02 -1.22527127e+01 -6.65311008e+00 -6.65311008e+00
 -6.65311008e+00 -1.16345402e+00 -2.36281303e-01 -2.36281303e-01
 -2.36281303e-01  8.63948715e+01  6.78990888e+02  3.94675938e+03
  3.15192432e+04  1.12121249e+06  7.13808197e+06]
E1 = -706.5434380265579  E_coul = 198.91291893326047
cycle= 2 E= -507.630519093297  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503783
diis-c [-2.52965108e-05 -7.65234456e-04  1.00076523e+00]
  HOMO = -0.23645655481101  LUMO = 86.3913516986513
  mo_energy =
[-1.20267167e+02 -1.22539017e+01 -6.65495159e+00 -6.65495159e+00
 -6.65495159e+00 -1.16351880e+00 -2.36456555e-01 -2.36456555e-01
 -2.36456555e-01  8.63913517e+01  6.78980296e+02  3.94674347e+03
  3.15192238e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429977124497  E_coul = 198.91247850906294
cycle= 3 E= -507.630519203387  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125356
diis-c [-3.76098149e-10  3.85692316e-05 -2.52416818e-02  1.02520311e+00]
  HOMO = -0.236458720392798  LUMO = 86.3913079664229
  mo_energy =
[-1.20267278e+02 -1.22539171e+01 -6.65497807e+00 -6.65497807e+00
 -6.65497807e+00 -1.16351944e+00 -2.36458720e-01 -2.36458720e-01
 -2.36458720e-01  8.63913080e+01  6.78980182e+02  3.94674333e+03
  3.15192237e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429905907768  E_coul = 198.91247138735028
cycle= 4 E= -507.630519203427  delta_E= -3.97e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5429905907768  E_coul = 198.91247138735028
  HOMO = -0.236458704894944  LUMO = 86.3913082883813
  mo_energy =
[-1.20267278e+02 -1.22539170e+01 -6.65497791e+00 -6.65497791e+00
 -6.65497791e+00 -1.16351943e+00 -2.36458705e-01 -2.36458705e-01
 -2.36458705e-01  8.63913083e+01  6.78980183e+02  3.94674333e+03
  3.15192237e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429906258257  E_coul = 198.91247142239985
Extra cycle  E= -507.630519203426  delta_E= 6.25e-13  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.974291926083794
E1 = -706.5429906258257  E_coul = 198.91247142239985
init E= -507.630519203426
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236458704714338  LUMO = 86.3913082923087
  mo_energy =
[-1.20267278e+02 -1.22539170e+01 -6.65497791e+00 -6.65497791e+00
 -6.65497791e+00 -1.16351943e+00 -2.36458705e-01 -2.36458705e-01
 -2.36458705e-01  8.63913083e+01  6.78980183e+02  3.94674333e+03
  3.15192237e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429906263532  E_coul = 198.91247142292772
cycle= 1 E= -507.630519203425  delta_E= 3.98e-13  |g|= 1.29e-10  |ddm|= 2.39e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5429906263532  E_coul = 198.91247142292772
  HOMO = -0.236458704711809  LUMO = 86.3913082923642
  mo_energy =
[-1.20267278e+02 -1.22539170e+01 -6.65497791e+00 -6.65497791e+00
 -6.65497791e+00 -1.16351943e+00 -2.36458705e-01 -2.36458705e-01
 -2.36458705e-01  8.63913083e+01  6.78980183e+02  3.94674333e+03
  3.15192237e+04  1.12121247e+06  7.13808194e+06]
E1 = -706.5429906263627  E_coul = 198.91247142293682
Extra cycle  E= -507.630519203426  delta_E= -3.41e-13  |g|= 5.64e-11  |ddm|= 4.23e-12
    CPU time for scf_cycle      0.17 sec, wall time      0.17 sec
exp = [3.20000000e+06 7.99999998e+05 1.83540826e+04 2.23246089e+03
 4.57213411e+02 1.21737919e+02 3.75888876e+01 4.74118139e+00
 3.91194386e-01 8.59865247e+00 4.90850598e-01]
grad_E = [ 1.58772640e-10  9.14905096e-09  4.35737591e-06  1.88287672e-07
 -5.53319581e-06 -5.75716826e-06 -5.91949179e-06 -3.72636084e-07
  2.29944419e-07  2.21627587e-08 -1.21041523e-07]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998243        1
[INPUT] 0    0    [1    /1   ]  18354.1189556        1
[INPUT] 0    0    [1    /1   ]  2232.44850651        1
[INPUT] 0    0    [1    /1   ]  457.234114304        1
[INPUT] 0    0    [1    /1   ]  121.752960541        1
[INPUT] 0    0    [1    /1   ]  37.5932069477        1
[INPUT] 0    0    [1    /1   ]  4.74118442466        1
[INPUT] 0    0    [1    /1   ]  0.391195027729       1
[INPUT] 1    0    [1    /1   ]  8.59865023965        1
[INPUT] 1    0    [1    /1   ]  0.490850441957       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999695253, 1.0]], [0, [799999.998243418, 1.0]], [0, [18354.11895555891, 1.0]], [0, [2232.4485065117874, 1.0]], [0, [457.23411430418787, 1.0]], [0, [121.75296054074818, 1.0]], [0, [37.59320694774655, 1.0]], [0, [4.7411844246603465, 1.0]], [0, [0.3911950277285681, 1.0]], [1, [8.598650239648482, 1.0]], [1, [0.4908504419567782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99996953]
bas 1, expnt(s) = [799999.99824342]
bas 2, expnt(s) = [18354.11895556]
bas 3, expnt(s) = [2232.44850651]
bas 4, expnt(s) = [457.2341143]
bas 5, expnt(s) = [121.75296054]
bas 6, expnt(s) = [37.59320695]
bas 7, expnt(s) = [4.74118442]
bas 8, expnt(s) = [0.39119503]
bas 9, expnt(s) = [8.59865024]
bas 10, expnt(s) = [0.49085044]
CPU time:       218.14
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541190e+04 3.98396194e+03 2.23244851e+03 8.20542560e+02
 4.57234114e+02 2.49815277e+02 1.21752961e+02 9.26029180e+01
 3.75932069e+01 3.83572140e+01 4.74118442e+00 8.11764698e+00
 3.91195028e-01 1.24971223e+00 8.59865024e+00 4.29558431e+01
 4.90850442e-01 1.19859062e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974887628213
cond(S) = 42.97821621861552
E1 = -688.6347476798317  E_coul = 184.91519666575596
init E= -503.719551014076
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901183750816  LUMO = 85.0773980891825
  mo_energy =
[-1.21646298e+02 -1.32807946e+01 -7.62162228e+00 -7.62162228e+00
 -7.62162228e+00 -1.65067153e+00 -6.80901184e-01 -6.80901184e-01
 -6.80901184e-01  8.50773981e+01  6.77694590e+02  3.94562767e+03
  3.15182944e+04  1.12121163e+06  7.13808111e+06]
E1 = -706.5749002032223  E_coul = 198.94480891596874
cycle= 1 E= -507.630091287254  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377381
diis-c [-0.14241661  1.        ]
  HOMO = -0.236281065010957  LUMO = 86.4103488599245
  mo_energy =
[-1.20258514e+02 -1.22527170e+01 -6.65310783e+00 -6.65310783e+00
 -6.65310783e+00 -1.16345447e+00 -2.36281065e-01 -2.36281065e-01
 -2.36281065e-01  8.64103489e+01  6.79064791e+02  3.94687768e+03
  3.15193748e+04  1.12121261e+06  7.13808208e+06]
E1 = -706.5434741355839  E_coul = 198.91295500095606
cycle= 2 E= -507.630519134628  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503711
diis-c [-2.52889814e-05 -7.66114340e-04  1.00076611e+00]
  HOMO = -0.236456261270357  LUMO = 86.4068296614383
  mo_energy =
[-1.20267154e+02 -1.22539056e+01 -6.65494878e+00 -6.65494878e+00
 -6.65494878e+00 -1.16351923e+00 -2.36456261e-01 -2.36456261e-01
 -2.36456261e-01  8.64068297e+01  6.79054201e+02  3.94686178e+03
  3.15193555e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430339869923  E_coul = 198.91251474232516
cycle= 3 E= -507.630519244667  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125322
diis-c [-3.75891275e-10  3.85713379e-05 -2.52386577e-02  1.02520009e+00]
  HOMO = -0.236458425779442  LUMO = 86.4067859462358
  mo_energy =
[-1.20267265e+02 -1.22539211e+01 -6.65497524e+00 -6.65497524e+00
 -6.65497524e+00 -1.16351987e+00 -2.36458426e-01 -2.36458426e-01
 -2.36458426e-01  8.64067859e+01  6.79054087e+02  3.94686163e+03
  3.15193553e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430268691944  E_coul = 198.9125076244887
cycle= 4 E= -507.630519244706  delta_E= -3.84e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430268691944  E_coul = 198.9125076244887
  HOMO = -0.236458410290754  LUMO = 86.4067862680768
  mo_energy =
[-1.20267264e+02 -1.22539209e+01 -6.65497509e+00 -6.65497509e+00
 -6.65497509e+00 -1.16351986e+00 -2.36458410e-01 -2.36458410e-01
 -2.36458410e-01  8.64067863e+01  6.79054088e+02  3.94686164e+03
  3.15193553e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430269042228  E_coul = 198.91250765951716
Extra cycle  E= -507.630519244706  delta_E=    0  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [3.20000000e+06 7.99999998e+05 1.83541190e+04 2.23244851e+03
 4.57234114e+02 1.21752961e+02 3.75932069e+01 4.74118442e+00
 3.91195028e-01 8.59865024e+00 4.90850442e-01]
E = -507.6305192447056
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:30 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998243        1
[INPUT] 0    0    [1    /1   ]  18354.1189556        1
[INPUT] 0    0    [1    /1   ]  2232.44850651        1
[INPUT] 0    0    [1    /1   ]  457.234114304        1
[INPUT] 0    0    [1    /1   ]  121.752960541        1
[INPUT] 0    0    [1    /1   ]  37.5932069477        1
[INPUT] 0    0    [1    /1   ]  4.74118442466        1
[INPUT] 0    0    [1    /1   ]  0.391195027729       1
[INPUT] 1    0    [1    /1   ]  8.59865023965        1
[INPUT] 1    0    [1    /1   ]  0.490850441957       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999695253, 1.0]], [0, [799999.998243418, 1.0]], [0, [18354.11895555891, 1.0]], [0, [2232.4485065117874, 1.0]], [0, [457.23411430418787, 1.0]], [0, [121.75296054074818, 1.0]], [0, [37.59320694774655, 1.0]], [0, [4.7411844246603465, 1.0]], [0, [0.3911950277285681, 1.0]], [1, [8.598650239648482, 1.0]], [1, [0.4908504419567782, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99996953]
bas 1, expnt(s) = [799999.99824342]
bas 2, expnt(s) = [18354.11895556]
bas 3, expnt(s) = [2232.44850651]
bas 4, expnt(s) = [457.2341143]
bas 5, expnt(s) = [121.75296054]
bas 6, expnt(s) = [37.59320695]
bas 7, expnt(s) = [4.74118442]
bas 8, expnt(s) = [0.39119503]
bas 9, expnt(s) = [8.59865024]
bas 10, expnt(s) = [0.49085044]
CPU time:       219.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541190e+04 3.98396194e+03 2.23244851e+03 8.20542560e+02
 4.57234114e+02 2.49815277e+02 1.21752961e+02 9.26029180e+01
 3.75932069e+01 3.83572140e+01 4.74118442e+00 8.11764698e+00
 3.91195028e-01 1.24971223e+00 8.59865024e+00 4.29558431e+01
 4.90850442e-01 1.19859062e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974887628213
cond(S) = 42.97821621861552
E1 = -688.6347476798317  E_coul = 184.91519666575596
init E= -503.719551014076
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901183750816  LUMO = 85.0773980891825
  mo_energy =
[-1.21646298e+02 -1.32807946e+01 -7.62162228e+00 -7.62162228e+00
 -7.62162228e+00 -1.65067153e+00 -6.80901184e-01 -6.80901184e-01
 -6.80901184e-01  8.50773981e+01  6.77694590e+02  3.94562767e+03
  3.15182944e+04  1.12121163e+06  7.13808111e+06]
E1 = -706.5749002032223  E_coul = 198.94480891596874
cycle= 1 E= -507.630091287254  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.377381
diis-c [-0.14241661  1.        ]
  HOMO = -0.236281065010957  LUMO = 86.4103488599245
  mo_energy =
[-1.20258514e+02 -1.22527170e+01 -6.65310783e+00 -6.65310783e+00
 -6.65310783e+00 -1.16345447e+00 -2.36281065e-01 -2.36281065e-01
 -2.36281065e-01  8.64103489e+01  6.79064791e+02  3.94687768e+03
  3.15193748e+04  1.12121261e+06  7.13808208e+06]
E1 = -706.5434741355839  E_coul = 198.91295500095606
cycle= 2 E= -507.630519134628  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503711
diis-c [-2.52889814e-05 -7.66114340e-04  1.00076611e+00]
  HOMO = -0.236456261270357  LUMO = 86.4068296614383
  mo_energy =
[-1.20267154e+02 -1.22539056e+01 -6.65494878e+00 -6.65494878e+00
 -6.65494878e+00 -1.16351923e+00 -2.36456261e-01 -2.36456261e-01
 -2.36456261e-01  8.64068297e+01  6.79054201e+02  3.94686178e+03
  3.15193555e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430339869923  E_coul = 198.91251474232516
cycle= 3 E= -507.630519244667  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125322
diis-c [-3.75891275e-10  3.85713379e-05 -2.52386577e-02  1.02520009e+00]
  HOMO = -0.236458425779442  LUMO = 86.4067859462358
  mo_energy =
[-1.20267265e+02 -1.22539211e+01 -6.65497524e+00 -6.65497524e+00
 -6.65497524e+00 -1.16351987e+00 -2.36458426e-01 -2.36458426e-01
 -2.36458426e-01  8.64067859e+01  6.79054087e+02  3.94686163e+03
  3.15193553e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430268691944  E_coul = 198.9125076244887
cycle= 4 E= -507.630519244706  delta_E= -3.84e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430268691944  E_coul = 198.9125076244887
  HOMO = -0.236458410290754  LUMO = 86.4067862680768
  mo_energy =
[-1.20267264e+02 -1.22539209e+01 -6.65497509e+00 -6.65497509e+00
 -6.65497509e+00 -1.16351986e+00 -2.36458410e-01 -2.36458410e-01
 -2.36458410e-01  8.64067863e+01  6.79054088e+02  3.94686164e+03
  3.15193553e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430269042228  E_coul = 198.91250765951716
Extra cycle  E= -507.630519244706  delta_E=    0  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97821621861552
E1 = -706.5430269042228  E_coul = 198.91250765951716
init E= -507.630519244706
    CPU time for initialize scf      0.09 sec, wall time      0.09 sec
  HOMO = -0.236458410110269  LUMO = 86.4067862720012
  mo_energy =
[-1.20267264e+02 -1.22539209e+01 -6.65497509e+00 -6.65497509e+00
 -6.65497509e+00 -1.16351986e+00 -2.36458410e-01 -2.36458410e-01
 -2.36458410e-01  8.64067863e+01  6.79054088e+02  3.94686164e+03
  3.15193553e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.5430269047516  E_coul = 198.91250766004532
cycle= 1 E= -507.630519244706  delta_E= -6.82e-13  |g|= 1.26e-10  |ddm|= 2.39e-10
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -706.5430269047516  E_coul = 198.91250766004532
  HOMO = -0.236458410107729  LUMO = 86.406786272056
  mo_energy =
[-1.20267264e+02 -1.22539209e+01 -6.65497509e+00 -6.65497509e+00
 -6.65497509e+00 -1.16351986e+00 -2.36458410e-01 -2.36458410e-01
 -2.36458410e-01  8.64067863e+01  6.79054088e+02  3.94686164e+03
  3.15193553e+04  1.12121259e+06  7.13808205e+06]
E1 = -706.54302690476  E_coul = 198.91250766005402
Extra cycle  E= -507.630519244706  delta_E= 2.84e-13  |g|= 3.76e-11  |ddm|= 4.24e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.18 sec
exp = [3.20000000e+06 7.99999998e+05 1.83541190e+04 2.23244851e+03
 4.57234114e+02 1.21752961e+02 3.75932069e+01 4.74118442e+00
 3.91195028e-01 8.59865024e+00 4.90850442e-01]
grad_E = [ 1.58770686e-10  9.14897933e-09  4.35775199e-06  1.86859340e-07
 -6.33240236e-06 -2.19667722e-06 -8.04473895e-07 -1.39445447e-07
  8.96636863e-08  2.93232745e-08 -7.54338885e-08]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998286        1
[INPUT] 0    0    [1    /1   ]  18354.1391502        1
[INPUT] 0    0    [1    /1   ]  2232.4415426         1
[INPUT] 0    0    [1    /1   ]  457.24677312         1
[INPUT] 0    0    [1    /1   ]  121.757590706        1
[INPUT] 0    0    [1    /1   ]  37.5942484981        1
[INPUT] 0    0    [1    /1   ]  4.74118691281        1
[INPUT] 0    0    [1    /1   ]  0.391195151767       1
[INPUT] 1    0    [1    /1   ]  8.59864980524        1
[INPUT] 1    0    [1    /1   ]  0.490850407475       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999702554, 1.0]], [0, [799999.9982855138, 1.0]], [0, [18354.13915019996, 1.0]], [0, [2232.4415425982434, 1.0]], [0, [457.2467731202759, 1.0]], [0, [121.75759070640552, 1.0]], [0, [37.594248498133, 1.0]], [0, [4.741186912812812, 1.0]], [0, [0.39119515176741254, 1.0]], [1, [8.598649805239852, 1.0]], [1, [0.4908504074745793, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997026]
bas 1, expnt(s) = [799999.99828551]
bas 2, expnt(s) = [18354.1391502]
bas 3, expnt(s) = [2232.4415426]
bas 4, expnt(s) = [457.24677312]
bas 5, expnt(s) = [121.75759071]
bas 6, expnt(s) = [37.5942485]
bas 7, expnt(s) = [4.74118691]
bas 8, expnt(s) = [0.39119515]
bas 9, expnt(s) = [8.59864981]
bas 10, expnt(s) = [0.49085041]
CPU time:       223.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541392e+04 3.98396523e+03 2.23244154e+03 8.20540640e+02
 4.57246773e+02 2.49820464e+02 1.21757591e+02 9.26055592e+01
 3.75942485e+01 3.83580111e+01 4.74118691e+00 8.11765018e+00
 3.91195152e-01 1.24971252e+00 8.59864981e+00 4.29558404e+01
 4.90850407e-01 1.19859052e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974815045263
cond(S) = 42.97861368267431
E1 = -688.6347532050771  E_coul = 184.91519919515602
init E= -503.719554009921
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901193235084  LUMO = 85.0815380581839
  mo_energy =
[-1.21646297e+02 -1.32807952e+01 -7.62162193e+00 -7.62162193e+00
 -7.62162193e+00 -1.65067175e+00 -6.80901193e-01 -6.80901193e-01
 -6.80901193e-01  8.50815381e+01  6.77721412e+02  3.94567872e+03
  3.15183561e+04  1.12121170e+06  7.13808116e+06]
E1 = -706.5749051102415  E_coul = 198.9448137885648
cycle= 1 E= -507.630091321677  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.377381
diis-c [-0.14241633  1.        ]
  HOMO = -0.236281012962453  LUMO = 86.4144941179338
  mo_energy =
[-1.20258513e+02 -1.22527174e+01 -6.65310734e+00 -6.65310734e+00
 -6.65310734e+00 -1.16345453e+00 -2.36281013e-01 -2.36281013e-01
 -2.36281013e-01  8.64144941e+01  6.79091614e+02  3.94692874e+03
  3.15194365e+04  1.12121267e+06  7.13808213e+06]
E1 = -706.5434812631352  E_coul = 198.91296212607378
cycle= 2 E= -507.630519137061  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503693
diis-c [-2.52871645e-05 -7.66331465e-04  1.00076633e+00]
  HOMO = -0.236456194366809  LUMO = 86.410975069033
  mo_energy =
[-1.20267153e+02 -1.22539059e+01 -6.65494815e+00 -6.65494815e+00
 -6.65494815e+00 -1.16351928e+00 -2.36456194e-01 -2.36456194e-01
 -2.36456194e-01  8.64109751e+01  6.79081024e+02  3.94691283e+03
  3.15194172e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430411588054  E_coul = 198.9125219117184
cycle= 3 E= -507.630519247087  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125314
diis-c [-3.75839570e-10  3.85714776e-05 -2.52378498e-02  1.02519928e+00]
  HOMO = -0.236458358591662  LUMO = 86.4109313582966
  mo_energy =
[-1.20267263e+02 -1.22539213e+01 -6.65497461e+00 -6.65497461e+00
 -6.65497461e+00 -1.16351992e+00 -2.36458359e-01 -2.36458359e-01
 -2.36458359e-01  8.64109314e+01  6.79080910e+02  3.94691269e+03
  3.15194170e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430340420388  E_coul = 198.91251479491288
cycle= 4 E= -507.630519247126  delta_E= -3.89e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430340420388  E_coul = 198.91251479491288
  HOMO = -0.236458343105381  LUMO = 86.4109316801043
  mo_energy =
[-1.20267263e+02 -1.22539212e+01 -6.65497445e+00 -6.65497445e+00
 -6.65497445e+00 -1.16351992e+00 -2.36458343e-01 -2.36458343e-01
 -2.36458343e-01  8.64109317e+01  6.79080911e+02  3.94691269e+03
  3.15194170e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430340770621  E_coul = 198.91251482993616
Extra cycle  E= -507.630519247126  delta_E=    0  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [3.20000000e+06 7.99999998e+05 1.83541392e+04 2.23244154e+03
 4.57246773e+02 1.21757591e+02 3.75942485e+01 4.74118691e+00
 3.91195152e-01 8.59864981e+00 4.90850407e-01]
E = -507.6305192471259
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998286        1
[INPUT] 0    0    [1    /1   ]  18354.1391502        1
[INPUT] 0    0    [1    /1   ]  2232.4415426         1
[INPUT] 0    0    [1    /1   ]  457.24677312         1
[INPUT] 0    0    [1    /1   ]  121.757590706        1
[INPUT] 0    0    [1    /1   ]  37.5942484981        1
[INPUT] 0    0    [1    /1   ]  4.74118691281        1
[INPUT] 0    0    [1    /1   ]  0.391195151767       1
[INPUT] 1    0    [1    /1   ]  8.59864980524        1
[INPUT] 1    0    [1    /1   ]  0.490850407475       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999702554, 1.0]], [0, [799999.9982855138, 1.0]], [0, [18354.13915019996, 1.0]], [0, [2232.4415425982434, 1.0]], [0, [457.2467731202759, 1.0]], [0, [121.75759070640552, 1.0]], [0, [37.594248498133, 1.0]], [0, [4.741186912812812, 1.0]], [0, [0.39119515176741254, 1.0]], [1, [8.598649805239852, 1.0]], [1, [0.4908504074745793, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997026]
bas 1, expnt(s) = [799999.99828551]
bas 2, expnt(s) = [18354.1391502]
bas 3, expnt(s) = [2232.4415426]
bas 4, expnt(s) = [457.24677312]
bas 5, expnt(s) = [121.75759071]
bas 6, expnt(s) = [37.5942485]
bas 7, expnt(s) = [4.74118691]
bas 8, expnt(s) = [0.39119515]
bas 9, expnt(s) = [8.59864981]
bas 10, expnt(s) = [0.49085041]
CPU time:       224.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541392e+04 3.98396523e+03 2.23244154e+03 8.20540640e+02
 4.57246773e+02 2.49820464e+02 1.21757591e+02 9.26055592e+01
 3.75942485e+01 3.83580111e+01 4.74118691e+00 8.11765018e+00
 3.91195152e-01 1.24971252e+00 8.59864981e+00 4.29558404e+01
 4.90850407e-01 1.19859052e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974815045263
cond(S) = 42.97861368267431
E1 = -688.6347532050771  E_coul = 184.91519919515602
init E= -503.719554009921
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.680901193235084  LUMO = 85.0815380581839
  mo_energy =
[-1.21646297e+02 -1.32807952e+01 -7.62162193e+00 -7.62162193e+00
 -7.62162193e+00 -1.65067175e+00 -6.80901193e-01 -6.80901193e-01
 -6.80901193e-01  8.50815381e+01  6.77721412e+02  3.94567872e+03
  3.15183561e+04  1.12121170e+06  7.13808116e+06]
E1 = -706.5749051102415  E_coul = 198.9448137885648
cycle= 1 E= -507.630091321677  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377381
diis-c [-0.14241633  1.        ]
  HOMO = -0.236281012962453  LUMO = 86.4144941179338
  mo_energy =
[-1.20258513e+02 -1.22527174e+01 -6.65310734e+00 -6.65310734e+00
 -6.65310734e+00 -1.16345453e+00 -2.36281013e-01 -2.36281013e-01
 -2.36281013e-01  8.64144941e+01  6.79091614e+02  3.94692874e+03
  3.15194365e+04  1.12121267e+06  7.13808213e+06]
E1 = -706.5434812631352  E_coul = 198.91296212607378
cycle= 2 E= -507.630519137061  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503693
diis-c [-2.52871645e-05 -7.66331465e-04  1.00076633e+00]
  HOMO = -0.236456194366809  LUMO = 86.410975069033
  mo_energy =
[-1.20267153e+02 -1.22539059e+01 -6.65494815e+00 -6.65494815e+00
 -6.65494815e+00 -1.16351928e+00 -2.36456194e-01 -2.36456194e-01
 -2.36456194e-01  8.64109751e+01  6.79081024e+02  3.94691283e+03
  3.15194172e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430411588054  E_coul = 198.9125219117184
cycle= 3 E= -507.630519247087  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125314
diis-c [-3.75839570e-10  3.85714776e-05 -2.52378498e-02  1.02519928e+00]
  HOMO = -0.236458358591662  LUMO = 86.4109313582966
  mo_energy =
[-1.20267263e+02 -1.22539213e+01 -6.65497461e+00 -6.65497461e+00
 -6.65497461e+00 -1.16351992e+00 -2.36458359e-01 -2.36458359e-01
 -2.36458359e-01  8.64109314e+01  6.79080910e+02  3.94691269e+03
  3.15194170e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430340420388  E_coul = 198.91251479491288
cycle= 4 E= -507.630519247126  delta_E= -3.89e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430340420388  E_coul = 198.91251479491288
  HOMO = -0.236458343105381  LUMO = 86.4109316801043
  mo_energy =
[-1.20267263e+02 -1.22539212e+01 -6.65497445e+00 -6.65497445e+00
 -6.65497445e+00 -1.16351992e+00 -2.36458343e-01 -2.36458343e-01
 -2.36458343e-01  8.64109317e+01  6.79080911e+02  3.94691269e+03
  3.15194170e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430340770621  E_coul = 198.91251482993616
Extra cycle  E= -507.630519247126  delta_E=    0  |g|= 6.06e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.11 sec, wall time      0.12 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 42.97861368267431
E1 = -706.5430340770621  E_coul = 198.91251482993616
init E= -507.630519247126
    CPU time for initialize scf      0.10 sec, wall time      0.10 sec
  HOMO = -0.236458342924931  LUMO = 86.4109316840307
  mo_energy =
[-1.20267263e+02 -1.22539212e+01 -6.65497445e+00 -6.65497445e+00
 -6.65497445e+00 -1.16351992e+00 -2.36458343e-01 -2.36458343e-01
 -2.36458343e-01  8.64109317e+01  6.79080911e+02  3.94691269e+03
  3.15194170e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430340775896  E_coul = 198.91251483046355
cycle= 1 E= -507.630519247126  delta_E= -1.14e-13  |g|= 1.24e-10  |ddm|= 2.39e-10
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -706.5430340775896  E_coul = 198.91251483046355
  HOMO = -0.236458342922396  LUMO = 86.4109316840864
  mo_energy =
[-1.20267263e+02 -1.22539212e+01 -6.65497445e+00 -6.65497445e+00
 -6.65497445e+00 -1.16351992e+00 -2.36458343e-01 -2.36458343e-01
 -2.36458343e-01  8.64109317e+01  6.79080911e+02  3.94691269e+03
  3.15194170e+04  1.12121265e+06  7.13808211e+06]
E1 = -706.5430340775988  E_coul = 198.91251483047276
Extra cycle  E= -507.630519247126  delta_E=    0  |g|= 4.3e-11  |ddm|= 4.25e-12
    CPU time for scf_cycle      0.18 sec, wall time      0.19 sec
exp = [3.20000000e+06 7.99999998e+05 1.83541392e+04 2.23244154e+03
 4.57246773e+02 1.21757591e+02 3.75942485e+01 4.74118691e+00
 3.91195152e-01 8.59864981e+00 4.90850407e-01]
grad_E = [ 1.58768062e-10  9.14887940e-09  4.35835557e-06  1.53784808e-07
 -6.24671232e-06 -1.72456687e-06 -2.47584963e-07 -9.99361838e-09
  6.15173690e-09  2.60820343e-09 -7.60962848e-09]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="BFGS",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([8.0e+05,1.8354961655666553e+04,2.2321569373256953e+03,4.5777843088607506e+02,1.2189136988757589e+02,3.7618460714610308e+01,4.7411562274897623e+00,3.9118886400018660e-01,8.5986702324693809e+00,4.9085158086350911e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sun Mar 12 00:38:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  3199999.99997        1
[INPUT] 0    0    [1    /1   ]  799999.998291        1
[INPUT] 0    0    [1    /1   ]  18354.1416788        1
[INPUT] 0    0    [1    /1   ]  2232.44066479        1
[INPUT] 0    0    [1    /1   ]  457.248432903        1
[INPUT] 0    0    [1    /1   ]  121.757956038        1
[INPUT] 0    0    [1    /1   ]  37.5943000948        1
[INPUT] 0    0    [1    /1   ]  4.74118726949        1
[INPUT] 0    0    [1    /1   ]  0.391195153821       1
[INPUT] 1    0    [1    /1   ]  8.59864980063        1
[INPUT] 1    0    [1    /1   ]  0.490850406234       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [3199999.9999703467, 1.0]], [0, [799999.9982907847, 1.0]], [0, [18354.141678846616, 1.0]], [0, [2232.4406647925875, 1.0]], [0, [457.24843290252494, 1.0]], [0, [121.75795603798066, 1.0]], [0, [37.594300094808645, 1.0]], [0, [4.741187269485608, 1.0]], [0, [0.39119515382097403, 1.0]], [1, [8.59864980063246, 1.0]], [1, [0.490850406234166, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [3199999.99997035]
bas 1, expnt(s) = [799999.99829078]
bas 2, expnt(s) = [18354.14167885]
bas 3, expnt(s) = [2232.44066479]
bas 4, expnt(s) = [457.2484329]
bas 5, expnt(s) = [121.75795604]
bas 6, expnt(s) = [37.59430009]
bas 7, expnt(s) = [4.74118727]
bas 8, expnt(s) = [0.39119515]
bas 9, expnt(s) = [8.5986498]
bas 10, expnt(s) = [0.49085041]
CPU time:       228.82
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.20000000e+06 1.91151411e+05 7.99999998e+05 6.75822293e+04
 1.83541417e+04 3.98396564e+03 2.23244066e+03 8.20540398e+02
 4.57248433e+02 2.49821144e+02 1.21757956e+02 9.26057676e+01
 3.75943001e+01 3.83580505e+01 4.74118727e+00 8.11765064e+00
 3.91195154e-01 1.24971253e+00 8.59864980e+00 4.29558404e+01
 4.90850406e-01 1.19859051e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.319974807607107
cond(S) = 42.97855940498043
E1 = -688.634755051879  E_coul = 184.91519933030764
init E= -503.719555721571
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.680901196672403  LUMO = 85.0817990985857
  mo_energy =
[-1.21646297e+02 -1.32807952e+01 -7.62162191e+00 -7.62162191e+00
 -7.62162191e+00 -1.65067176e+00 -6.80901197e-01 -6.80901197e-01
 -6.80901197e-01  8.50817991e+01  6.77723956e+02  3.94568429e+03
  3.15183632e+04  1.12121170e+06  7.13808117e+06]
E1 = -706.5749051148647  E_coul = 198.94481379113017
cycle= 1 E= -507.630091323735  delta_E= -3.91  |g|= 0.317  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.377381
diis-c [-0.14241616  1.        ]
  HOMO = -0.236281011095626  LUMO = 86.4147554517348
  mo_energy =
[-1.20258513e+02 -1.22527173e+01 -6.65310733e+00 -6.65310733e+00
 -6.65310733e+00 -1.16345453e+00 -2.36281011e-01 -2.36281011e-01
 -2.36281011e-01  8.64147555e+01  6.79094157e+02  3.94693431e+03
  3.15194436e+04  1.12121268e+06  7.13808214e+06]
E1 = -706.5434814032286  E_coul = 198.91296226607187
cycle= 2 E= -507.630519137157  delta_E= -0.000428  |g|= 0.00474  |ddm|= 0.0143
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00503692
diis-c [-2.52870745e-05 -7.66342962e-04  1.00076634e+00]
  HOMO = -0.23645619157107  LUMO = 86.4112364110812
  mo_energy =
[-1.20267153e+02 -1.22539058e+01 -6.65494812e+00 -6.65494812e+00
 -6.65494812e+00 -1.16351928e+00 -2.36456192e-01 -2.36456192e-01
 -2.36456192e-01  8.64112364e+01  6.79083567e+02  3.94691840e+03
  3.15194243e+04  1.12121266e+06  7.13808212e+06]
E1 = -706.543041301681  E_coul = 198.91252205449933
cycle= 3 E= -507.630519247182  delta_E= -1.1e-07  |g|= 9.36e-05  |ddm|= 0.000202
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000125313
diis-c [-3.75836438e-10  3.85715068e-05 -2.52378010e-02  1.02519923e+00]
  HOMO = -0.236458355778346  LUMO = 86.411192700614
  mo_energy =
[-1.20267264e+02 -1.22539212e+01 -6.65497458e+00 -6.65497458e+00
 -6.65497458e+00 -1.16351992e+00 -2.36458356e-01 -2.36458356e-01
 -2.36458356e-01  8.64111927e+01  6.79083453e+02  3.94691826e+03
  3.15194241e+04  1.12121266e+06  7.13808212e+06]
E1 = -706.5430341849786  E_coul = 198.91251493775798
cycle= 4 E= -507.630519247221  delta_E= -3.9e-11  |g|= 3.55e-07  |ddm|= 3.39e-06
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -706.5430341849786  E_coul = 198.91251493775798
  HOMO = -0.236458340292227  LUMO = 86.4111930224216
  mo_energy =
[-1.20267263e+02 -1.22539211e+01 -6.65497443e+00 -6.65497443e+00
 -6.65497443e+00 -1.16351991e+00 -2.36458340e-01 -2.36458340e-01
 -2.36458340e-01  8.64111930e+01  6.79083454e+02  3.94691826e+03
  3.15194241e+04  1.12121266e+06  7.13808212e+06]
E1 = -706.5430342200011  E_coul = 198.91251497278057
Extra cycle  E= -507.630519247221  delta_E= 1.14e-13  |g|= 6.05e-09  |ddm|= 1.55e-08
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
