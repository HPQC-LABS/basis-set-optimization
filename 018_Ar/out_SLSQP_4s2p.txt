#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:33 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.183311824        1
[INPUT] 0    0    [1    /1   ]  95.0458279559        1
[INPUT] 0    0    [1    /1   ]  4.4881042475         1
[INPUT] 0    0    [1    /1   ]  0.397995280047       1
[INPUT] 1    0    [1    /1   ]  8.54696500387        1
[INPUT] 1    0    [1    /1   ]  0.489293287036       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.18331182355166, 1.0]], [0, [95.04582795588792, 1.0]], [0, [4.488104247504839, 1.0]], [0, [0.3979952800469263, 1.0]], [1, [8.546965003871826, 1.0]], [1, [0.4892932870355041, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.18331182]
bas 1, expnt(s) = [95.04582796]
bas 2, expnt(s) = [4.48810425]
bas 3, expnt(s) = [0.39799528]
bas 4, expnt(s) = [8.546965]
bas 5, expnt(s) = [0.48929329]
CPU time:         1.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.18331182
 217.52531759  95.04582796  76.90681357   4.48810425   7.79044429
   0.39799528   1.26597015   8.546965    42.63333431   0.48929329
   1.19383956]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.26564418663107
cond(S) = 7.086628467182967
E1 = -658.0344022153215  E_coul = 183.3863097680519
init E= -474.64809244727
    CPU time for initialize scf      0.17 sec, wall time      0.18 sec
  HOMO = -0.72448330829006  LUMO = 403.873102917247
  mo_energy =
[-111.82278705  -12.73963241   -7.76631061   -7.76631061   -7.76631061
   -1.63697363   -0.72448331   -0.72448331   -0.72448331  403.87310292]
E1 = -687.0713873941417  E_coul = 200.69180768769976
cycle= 1 E= -486.379579706442  delta_E= -11.7  |g|= 0.352  |ddm|= 0.397
    CPU time for cycle= 1      0.38 sec, wall time      0.38 sec
diis-norm(errvec)=0.344777
diis-c [-0.1188713  1.       ]
  HOMO = -0.233260101976596  LUMO = 406.446138742429
  mo_energy =
[-1.09695500e+02 -1.15104021e+01 -6.61577481e+00 -6.61577481e+00
 -6.61577481e+00 -1.09094281e+00 -2.33260102e-01 -2.33260102e-01
 -2.33260102e-01  4.06446139e+02]
E1 = -687.07197392135  E_coul = 200.6922666944944
cycle= 2 E= -486.379707226856  delta_E= -0.000128  |g|= 0.00319  |ddm|= 0.00188
    CPU time for cycle= 2      0.11 sec, wall time      0.11 sec
diis-norm(errvec)=0.00327694
diis-c [-1.85565394e-07 -9.51165726e-03  1.00951166e+00]
  HOMO = -0.233270471944811  LUMO = 406.447656363491
  mo_energy =
[-1.09694832e+02 -1.15104553e+01 -6.61589106e+00 -6.61589106e+00
 -6.61589106e+00 -1.09094605e+00 -2.33270472e-01 -2.33270472e-01
 -2.33270472e-01  4.06447656e+02]
E1 = -687.0719885651764  E_coul = 200.6922813281089
cycle= 3 E= -486.379707237068  delta_E= -1.02e-08  |g|= 2.81e-06  |ddm|= 1.5e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.93518e-06
diis-c [-1.56666307e-12  3.25450228e-05 -3.46873396e-03  1.00343619e+00]
  HOMO = -0.233270428856206  LUMO = 406.447659472713
  mo_energy =
[-1.09694829e+02 -1.15104549e+01 -6.61589068e+00 -6.61589068e+00
 -6.61589068e+00 -1.09094602e+00 -2.33270429e-01 -2.33270429e-01
 -2.33270429e-01  4.06447659e+02]
E1 = -687.0719886192493  E_coul = 200.69228138218168
cycle= 4 E= -486.379707237068  delta_E= -5.68e-14  |g|= 7.56e-09  |ddm|= 2.37e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -687.0719886192493  E_coul = 200.69228138218168
  HOMO = -0.233270428845304  LUMO = 406.447659480338
  mo_energy =
[-1.09694829e+02 -1.15104549e+01 -6.61589068e+00 -6.61589068e+00
 -6.61589068e+00 -1.09094602e+00 -2.33270429e-01 -2.33270429e-01
 -2.33270429e-01  4.06447659e+02]
E1 = -687.0719886193863  E_coul = 200.69228138231878
Extra cycle  E= -486.379707237067  delta_E= 1.14e-13  |g|= 5.04e-11  |ddm|= 5.07e-11
    CPU time for scf_cycle      0.70 sec, wall time      0.73 sec
exp = [380.18331182  95.04582796   4.48810425   0.39799528   8.546965
   0.48929329]
E = -486.37970723706746
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:34 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.183311824        1
[INPUT] 0    0    [1    /1   ]  95.0458279559        1
[INPUT] 0    0    [1    /1   ]  4.4881042475         1
[INPUT] 0    0    [1    /1   ]  0.397995280047       1
[INPUT] 1    0    [1    /1   ]  8.54696500387        1
[INPUT] 1    0    [1    /1   ]  0.489293287036       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.18331182355166, 1.0]], [0, [95.04582795588792, 1.0]], [0, [4.488104247504839, 1.0]], [0, [0.3979952800469263, 1.0]], [1, [8.546965003871826, 1.0]], [1, [0.4892932870355041, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.18331182]
bas 1, expnt(s) = [95.04582796]
bas 2, expnt(s) = [4.48810425]
bas 3, expnt(s) = [0.39799528]
bas 4, expnt(s) = [8.546965]
bas 5, expnt(s) = [0.48929329]
CPU time:         2.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.18331182
 217.52531759  95.04582796  76.90681357   4.48810425   7.79044429
   0.39799528   1.26597015   8.546965    42.63333431   0.48929329
   1.19383956]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.26564418663107
cond(S) = 7.086628467182967
E1 = -658.0344022153215  E_coul = 183.3863097680519
init E= -474.64809244727
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.72448330829006  LUMO = 403.873102917247
  mo_energy =
[-111.82278705  -12.73963241   -7.76631061   -7.76631061   -7.76631061
   -1.63697363   -0.72448331   -0.72448331   -0.72448331  403.87310292]
E1 = -687.0713873941417  E_coul = 200.69180768769976
cycle= 1 E= -486.379579706442  delta_E= -11.7  |g|= 0.352  |ddm|= 0.397
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.344777
diis-c [-0.1188713  1.       ]
  HOMO = -0.233260101976596  LUMO = 406.446138742429
  mo_energy =
[-1.09695500e+02 -1.15104021e+01 -6.61577481e+00 -6.61577481e+00
 -6.61577481e+00 -1.09094281e+00 -2.33260102e-01 -2.33260102e-01
 -2.33260102e-01  4.06446139e+02]
E1 = -687.07197392135  E_coul = 200.6922666944944
cycle= 2 E= -486.379707226856  delta_E= -0.000128  |g|= 0.00319  |ddm|= 0.00188
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00327694
diis-c [-1.85565394e-07 -9.51165726e-03  1.00951166e+00]
  HOMO = -0.233270471944811  LUMO = 406.447656363491
  mo_energy =
[-1.09694832e+02 -1.15104553e+01 -6.61589106e+00 -6.61589106e+00
 -6.61589106e+00 -1.09094605e+00 -2.33270472e-01 -2.33270472e-01
 -2.33270472e-01  4.06447656e+02]
E1 = -687.0719885651764  E_coul = 200.6922813281089
cycle= 3 E= -486.379707237068  delta_E= -1.02e-08  |g|= 2.81e-06  |ddm|= 1.5e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.93518e-06
diis-c [-1.56666307e-12  3.25450228e-05 -3.46873396e-03  1.00343619e+00]
  HOMO = -0.233270428856206  LUMO = 406.447659472713
  mo_energy =
[-1.09694829e+02 -1.15104549e+01 -6.61589068e+00 -6.61589068e+00
 -6.61589068e+00 -1.09094602e+00 -2.33270429e-01 -2.33270429e-01
 -2.33270429e-01  4.06447659e+02]
E1 = -687.0719886192493  E_coul = 200.69228138218168
cycle= 4 E= -486.379707237068  delta_E= -5.68e-14  |g|= 7.56e-09  |ddm|= 2.37e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -687.0719886192493  E_coul = 200.69228138218168
  HOMO = -0.233270428845304  LUMO = 406.447659480338
  mo_energy =
[-1.09694829e+02 -1.15104549e+01 -6.61589068e+00 -6.61589068e+00
 -6.61589068e+00 -1.09094602e+00 -2.33270429e-01 -2.33270429e-01
 -2.33270429e-01  4.06447659e+02]
E1 = -687.0719886193863  E_coul = 200.69228138231878
Extra cycle  E= -486.379707237067  delta_E= 1.14e-13  |g|= 5.04e-11  |ddm|= 5.07e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.086628467182967
E1 = -687.0719886193863  E_coul = 200.69228138231878
init E= -486.379707237067
    CPU time for initialize scf      0.36 sec, wall time      0.37 sec
  HOMO = -0.233270428845104  LUMO = 406.447659480394
  mo_energy =
[-1.09694829e+02 -1.15104549e+01 -6.61589068e+00 -6.61589068e+00
 -6.61589068e+00 -1.09094602e+00 -2.33270429e-01 -2.33270429e-01
 -2.33270429e-01  4.06447659e+02]
E1 = -687.0719886193875  E_coul = 200.69228138231986
cycle= 1 E= -486.379707237068  delta_E= -2.27e-13  |g|= 3.18e-13  |ddm|= 3.37e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -687.0719886193875  E_coul = 200.69228138231986
  HOMO = -0.2332704288451  LUMO = 406.447659480395
  mo_energy =
[-1.09694829e+02 -1.15104549e+01 -6.61589068e+00 -6.61589068e+00
 -6.61589068e+00 -1.09094602e+00 -2.33270429e-01 -2.33270429e-01
 -2.33270429e-01  4.06447659e+02]
E1 = -687.0719886193871  E_coul = 200.6922813823197
Extra cycle  E= -486.379707237067  delta_E= 3.41e-13  |g|= 1.16e-13  |ddm|= 7.21e-15
    CPU time for scf_cycle      1.36 sec, wall time      1.37 sec
exp = [380.18331182  95.04582796   4.48810425   0.39799528   8.546965
   0.48929329]
grad_E = [-0.06423836  0.63024004 -0.53868903 -0.44018877  0.026616    0.00834488]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.247550187        1
[INPUT] 0    0    [1    /1   ]  94.4155879168        1
[INPUT] 0    0    [1    /1   ]  5.02679327628        1
[INPUT] 0    0    [1    /1   ]  0.838184051871       1
[INPUT] 1    0    [1    /1   ]  8.52034900237        1
[INPUT] 1    0    [1    /1   ]  0.480948411511       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.2475501867261, 1.0]], [0, [94.41558791677926, 1.0]], [0, [5.026793276278997, 1.0]], [0, [0.8381840518714213, 1.0]], [1, [8.520349002365556, 1.0]], [1, [0.4809484115110324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.24755019]
bas 1, expnt(s) = [94.41558792]
bas 2, expnt(s) = [5.02679328]
bas 3, expnt(s) = [0.83818405]
bas 4, expnt(s) = [8.520349]
bas 5, expnt(s) = [0.48094841]
CPU time:         9.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.24755019
 217.55288293  94.41558792  76.52402424   5.02679328   8.48170754
   0.83818405   2.21319443   8.520349    42.46744401   0.48094841
   1.16844295]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 16.896877816809365
cond(S) = 7.7995465381789515
E1 = -658.7261114558411  E_coul = 184.08498207603913
init E= -474.641129379802
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.812409170710419  LUMO = 405.44822448096
  mo_energy =
[-112.28212329  -12.57673676   -7.64612999   -7.64612999   -7.64612999
   -1.11752305   -0.81240917   -0.81240917   -0.81240917  405.44822448]
E1 = -694.0208737169445  E_coul = 207.8893781803024
cycle= 1 E= -486.131495536642  delta_E= -11.5  |g|= 0.301  |ddm|= 1.01
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.290818
diis-c [-0.08457507  1.        ]
  HOMO = -0.0835620203335788  LUMO = 408.588701544374
  mo_energy =
[-1.09559959e+02 -1.09304662e+01 -6.05020433e+00 -6.05020433e+00
 -6.05020433e+00 -2.29380654e-01 -8.35620203e-02 -8.35620203e-02
 -8.35620203e-02  4.08588702e+02]
E1 = -694.0212569045909  E_coul = 207.88966872153154
cycle= 2 E= -486.131588183059  delta_E= -9.26e-05  |g|= 0.00276  |ddm|= 0.00182
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00284825
diis-c [-1.07642066e-07 -9.82432588e-03  1.00982433e+00]
  HOMO = -0.0835725009180014  LUMO = 408.589987676247
  mo_energy =
[-1.09559411e+02 -1.09305194e+01 -6.05030747e+00 -6.05030747e+00
 -6.05030747e+00 -2.29388466e-01 -8.35725009e-02 -8.35725009e-02
 -8.35725009e-02  4.08589988e+02]
E1 = -694.0212681652371  E_coul = 207.88967997457536
cycle= 3 E= -486.131588190662  delta_E= -7.6e-09  |g|= 2.23e-06  |ddm|= 1.38e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.22706e-06
diis-c [-6.56705387e-13  2.64371539e-05 -2.57985024e-03  1.00255341e+00]
  HOMO = -0.0835724583468797  LUMO = 408.589989787712
  mo_energy =
[-1.09559408e+02 -1.09305190e+01 -6.05030712e+00 -6.05030712e+00
 -6.05030712e+00 -2.29388394e-01 -8.35724583e-02 -8.35724583e-02
 -8.35724583e-02  4.08589990e+02]
E1 = -694.0212682044191  E_coul = 207.889680013757
cycle= 4 E= -486.131588190662  delta_E= -3.98e-13  |g|= 6.11e-09  |ddm|= 2.38e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -694.0212682044191  E_coul = 207.889680013757
  HOMO = -0.0835724583072199  LUMO = 408.589989794259
  mo_energy =
[-1.09559408e+02 -1.09305190e+01 -6.05030712e+00 -6.05030712e+00
 -6.05030712e+00 -2.29388394e-01 -8.35724583e-02 -8.35724583e-02
 -8.35724583e-02  4.08589990e+02]
E1 = -694.0212682045388  E_coul = 207.8896800138768
Extra cycle  E= -486.131588190662  delta_E= 1.14e-13  |g|= 3.98e-11  |ddm|= 4.77e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [380.24755019  94.41558792   5.02679328   0.83818405   8.520349
   0.48094841]
E = -486.131588190662
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.208404437        1
[INPUT] 0    0    [1    /1   ]  94.7996453213        1
[INPUT] 0    0    [1    /1   ]  4.69852547767        1
[INPUT] 0    0    [1    /1   ]  0.569940610143       1
[INPUT] 1    0    [1    /1   ]  8.5365683344         1
[INPUT] 1    0    [1    /1   ]  0.486033634658       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.2084044366937, 1.0]], [0, [94.79964532129904, 1.0]], [0, [4.698525477668666, 1.0]], [0, [0.5699406101428298, 1.0]], [1, [8.53656833440236, 1.0]], [1, [0.4860336346579178, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.20840444]
bas 1, expnt(s) = [94.79964532]
bas 2, expnt(s) = [4.69852548]
bas 3, expnt(s) = [0.56994061]
bas 4, expnt(s) = [8.53656833]
bas 5, expnt(s) = [0.48603363]
CPU time:         9.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.20840444
 217.53608523  94.79964532  76.75736521   4.69852548   8.06280607
   0.56994061   1.65724694   8.53656833  42.5685193    0.48603363
   1.18390621]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.164563375162388
cond(S) = 7.321387833717147
E1 = -659.8895333075351  E_coul = 184.95204265928166
init E= -474.937490648253
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.711476138850886  LUMO = 404.572414129298
  mo_energy =
[-111.89235098  -12.57857631   -7.62016229   -7.62016229   -7.62016229
   -1.52545898   -0.71147614   -0.71147614   -0.71147614  404.57241413]
E1 = -690.4833553752452  E_coul = 203.97127295356685
cycle= 1 E= -486.512082421678  delta_E= -11.6  |g|= 0.329  |ddm|= 0.465
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.322949
diis-c [-0.10429593  1.        ]
  HOMO = -0.158418850159067  LUMO = 407.290581480332
  mo_energy =
[-1.09608059e+02 -1.12460944e+01 -6.35918180e+00 -6.35918180e+00
 -6.35918180e+00 -8.63504470e-01 -1.58418850e-01 -1.58418850e-01
 -1.58418850e-01  4.07290581e+02]
E1 = -690.483933571887  E_coul = 203.97173991350124
cycle= 2 E= -486.512193658386  delta_E= -0.000111  |g|= 0.00302  |ddm|= 0.00182
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0031086
diis-c [-1.28586076e-07 -9.65372353e-03  1.00965372e+00]
  HOMO = -0.158429060603645  LUMO = 407.292029472822
  mo_energy =
[-1.09607413e+02 -1.12461451e+01 -6.35928997e+00 -6.35928997e+00
 -6.35928997e+00 -8.63509044e-01 -1.58429061e-01 -1.58429061e-01
 -1.58429061e-01  4.07292029e+02]
E1 = -690.4839472238529  E_coul = 203.9717535563606
cycle= 3 E= -486.512193667492  delta_E= -9.11e-09  |g|= 2.44e-06  |ddm|= 1.44e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.55019e-06
diis-c [-1.07172110e-12  3.13546976e-05 -3.22373282e-03  1.00319238e+00]
  HOMO = -0.158429019088535  LUMO = 407.292032046724
  mo_energy =
[-1.09607410e+02 -1.12461448e+01 -6.35928962e+00 -6.35928962e+00
 -6.35928962e+00 -8.63509001e-01 -1.58429019e-01 -1.58429019e-01
 -1.58429019e-01  4.07292032e+02]
E1 = -690.483947269876  E_coul = 203.971753602384
cycle= 4 E= -486.512193667492  delta_E= 2.84e-13  |g|= 6.65e-09  |ddm|= 2.27e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -690.483947269876  E_coul = 203.971753602384
  HOMO = -0.158429019070416  LUMO = 407.292032053536
  mo_energy =
[-1.09607410e+02 -1.12461448e+01 -6.35928962e+00 -6.35928962e+00
 -6.35928962e+00 -8.63509001e-01 -1.58429019e-01 -1.58429019e-01
 -1.58429019e-01  4.07292032e+02]
E1 = -690.4839472699994  E_coul = 203.97175360250716
Extra cycle  E= -486.512193667492  delta_E= -1.71e-13  |g|= 4.41e-11  |ddm|= 4.58e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [380.20840444  94.79964532   4.69852548   0.56994061   8.53656833
   0.48603363]
E = -486.51219366749217
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:40 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.208404437        1
[INPUT] 0    0    [1    /1   ]  94.7996453213        1
[INPUT] 0    0    [1    /1   ]  4.69852547767        1
[INPUT] 0    0    [1    /1   ]  0.569940610143       1
[INPUT] 1    0    [1    /1   ]  8.5365683344         1
[INPUT] 1    0    [1    /1   ]  0.486033634658       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.2084044366937, 1.0]], [0, [94.79964532129904, 1.0]], [0, [4.698525477668666, 1.0]], [0, [0.5699406101428298, 1.0]], [1, [8.53656833440236, 1.0]], [1, [0.4860336346579178, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.20840444]
bas 1, expnt(s) = [94.79964532]
bas 2, expnt(s) = [4.69852548]
bas 3, expnt(s) = [0.56994061]
bas 4, expnt(s) = [8.53656833]
bas 5, expnt(s) = [0.48603363]
CPU time:         9.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.20840444
 217.53608523  94.79964532  76.75736521   4.69852548   8.06280607
   0.56994061   1.65724694   8.53656833  42.5685193    0.48603363
   1.18390621]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.164563375162388
cond(S) = 7.321387833717147
E1 = -659.8895333075351  E_coul = 184.95204265928166
init E= -474.937490648253
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.711476138850886  LUMO = 404.572414129298
  mo_energy =
[-111.89235098  -12.57857631   -7.62016229   -7.62016229   -7.62016229
   -1.52545898   -0.71147614   -0.71147614   -0.71147614  404.57241413]
E1 = -690.4833553752452  E_coul = 203.97127295356685
cycle= 1 E= -486.512082421678  delta_E= -11.6  |g|= 0.329  |ddm|= 0.465
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.322949
diis-c [-0.10429593  1.        ]
  HOMO = -0.158418850159067  LUMO = 407.290581480332
  mo_energy =
[-1.09608059e+02 -1.12460944e+01 -6.35918180e+00 -6.35918180e+00
 -6.35918180e+00 -8.63504470e-01 -1.58418850e-01 -1.58418850e-01
 -1.58418850e-01  4.07290581e+02]
E1 = -690.483933571887  E_coul = 203.97173991350124
cycle= 2 E= -486.512193658386  delta_E= -0.000111  |g|= 0.00302  |ddm|= 0.00182
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0031086
diis-c [-1.28586076e-07 -9.65372353e-03  1.00965372e+00]
  HOMO = -0.158429060603645  LUMO = 407.292029472822
  mo_energy =
[-1.09607413e+02 -1.12461451e+01 -6.35928997e+00 -6.35928997e+00
 -6.35928997e+00 -8.63509044e-01 -1.58429061e-01 -1.58429061e-01
 -1.58429061e-01  4.07292029e+02]
E1 = -690.4839472238529  E_coul = 203.9717535563606
cycle= 3 E= -486.512193667492  delta_E= -9.11e-09  |g|= 2.44e-06  |ddm|= 1.44e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.55019e-06
diis-c [-1.07172110e-12  3.13546976e-05 -3.22373282e-03  1.00319238e+00]
  HOMO = -0.158429019088535  LUMO = 407.292032046724
  mo_energy =
[-1.09607410e+02 -1.12461448e+01 -6.35928962e+00 -6.35928962e+00
 -6.35928962e+00 -8.63509001e-01 -1.58429019e-01 -1.58429019e-01
 -1.58429019e-01  4.07292032e+02]
E1 = -690.483947269876  E_coul = 203.971753602384
cycle= 4 E= -486.512193667492  delta_E= 2.84e-13  |g|= 6.65e-09  |ddm|= 2.27e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -690.483947269876  E_coul = 203.971753602384
  HOMO = -0.158429019070416  LUMO = 407.292032053536
  mo_energy =
[-1.09607410e+02 -1.12461448e+01 -6.35928962e+00 -6.35928962e+00
 -6.35928962e+00 -8.63509001e-01 -1.58429019e-01 -1.58429019e-01
 -1.58429019e-01  4.07292032e+02]
E1 = -690.4839472699994  E_coul = 203.97175360250716
Extra cycle  E= -486.512193667492  delta_E= -1.71e-13  |g|= 4.41e-11  |ddm|= 4.58e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.321387833717147
E1 = -690.4839472699994  E_coul = 203.97175360250716
init E= -486.512193667492
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.158429019070212  LUMO = 407.292032053585
  mo_energy =
[-1.09607410e+02 -1.12461448e+01 -6.35928962e+00 -6.35928962e+00
 -6.35928962e+00 -8.63509001e-01 -1.58429019e-01 -1.58429019e-01
 -1.58429019e-01  4.07292032e+02]
E1 = -690.4839472700002  E_coul = 203.971753602508
cycle= 1 E= -486.512193667492  delta_E=    0  |g|= 2.05e-13  |ddm|= 3.05e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -690.4839472700002  E_coul = 203.971753602508
  HOMO = -0.158429019070209  LUMO = 407.292032053585
  mo_energy =
[-1.09607410e+02 -1.12461448e+01 -6.35928962e+00 -6.35928962e+00
 -6.35928962e+00 -8.63509001e-01 -1.58429019e-01 -1.58429019e-01
 -1.58429019e-01  4.07292032e+02]
E1 = -690.4839472699998  E_coul = 203.9717536025078
Extra cycle  E= -486.512193667492  delta_E= 1.14e-13  |g|= 1.5e-13  |ddm|= 5.44e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [380.20840444  94.79964532   4.69852548   0.56994061   8.53656833
   0.48603363]
grad_E = [-0.0641071   0.62262801 -0.25329626  1.49588061  0.05192723  0.37142493]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.427647721        1
[INPUT] 0    0    [1    /1   ]  92.6542224086        1
[INPUT] 0    0    [1    /1   ]  6.28692268757        1
[INPUT] 0    0    [1    /1   ]  0.369662677081       1
[INPUT] 1    0    [1    /1   ]  8.42341134549        1
[INPUT] 1    0    [1    /1   ]  0.138087971181       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.4276477206029, 1.0]], [0, [92.65422240861366, 1.0]], [0, [6.286922687566419, 1.0]], [0, [0.36966267708082995, 1.0]], [1, [8.423411345492346, 1.0]], [1, [0.138087971181435, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.42764772]
bas 1, expnt(s) = [92.65422241]
bas 2, expnt(s) = [6.28692269]
bas 3, expnt(s) = [0.36966268]
bas 4, expnt(s) = [8.42341135]
bas 5, expnt(s) = [0.13808797]
CPU time:        12.45
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.80427648e+02 2.17630158e+02 9.26542224e+01 7.54508151e+01
 6.28692269e+00 1.00309858e+01 3.69662677e-01 1.19775841e+00
 8.42341135e+00 4.18643550e+01 1.38087971e-01 2.45572202e-01]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 14.844079559963244
cond(S) = 7.329847435123201
E1 = -615.7670496064864  E_coul = 147.48926640968446
init E= -468.277783196802
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -1.42629177429328  LUMO = 401.03927538092
  mo_energy =
[-116.06279389  -14.3405129   -10.31637275  -10.31637275  -10.31637275
   -3.47377001   -1.42629177   -1.42629177   -1.42629177  401.03927538]
E1 = -661.978356702737  E_coul = 178.01666138882968
cycle= 1 E= -483.961695313907  delta_E= -15.7  |g|= 0.217  |ddm|= 1.58
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.216826
diis-c [-0.0470137  1.       ]
  HOMO = -0.555497515367573  LUMO = 404.735980282393
  mo_energy =
[-112.74086836  -12.14103402   -8.13056331   -8.13056331   -8.13056331
   -2.03245559   -0.55549752   -0.55549752   -0.55549752  404.73598028]
E1 = -661.9798978653515  E_coul = 178.01815517868235
cycle= 2 E= -483.961742686669  delta_E= -4.74e-05  |g|= 0.00198  |ddm|= 0.00106
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00207276
diis-c [-2.05827934e-07 -9.41558062e-03  1.00941558e+00]
  HOMO = -0.555498105683943  LUMO = 404.737319326731
  mo_energy =
[-112.7400141   -12.14102545   -8.13059945   -8.13059945   -8.13059945
   -2.03245451   -0.55549811   -0.55549811   -0.55549811  404.73731933]
E1 = -661.9799134992005  E_coul = 178.01817080868855
cycle= 3 E= -483.961742690512  delta_E= -3.84e-09  |g|= 1.3e-06  |ddm|= 8.81e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.27177e-06
diis-c [-4.57003707e-14  2.17015884e-05 -2.57022650e-03  1.00254852e+00]
  HOMO = -0.555498102171453  LUMO = 404.737319732182
  mo_energy =
[-112.74001375  -12.14102533   -8.13059935   -8.13059935   -8.13059935
   -2.03245449   -0.5554981    -0.5554981    -0.5554981   404.73731973]
E1 = -661.9799135003072  E_coul = 178.0181708097952
cycle= 4 E= -483.961742690512  delta_E= -5.68e-14  |g|= 1.92e-09  |ddm|= 7.38e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -661.9799135003072  E_coul = 178.0181708097952
  HOMO = -0.555498102173015  LUMO = 404.737319730241
  mo_energy =
[-112.74001375  -12.14102533   -8.13059935   -8.13059935   -8.13059935
   -2.03245449   -0.5554981    -0.5554981    -0.5554981   404.73731973]
E1 = -661.97991350027  E_coul = 178.01817080975766
Extra cycle  E= -483.961742690512  delta_E= -2.84e-13  |g|= 1.22e-11  |ddm|= 1.56e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.80427648e+02 9.26542224e+01 6.28692269e+00 3.69662677e-01
 8.42341135e+00 1.38087971e-01]
E = -483.9617426905123
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.259008924        1
[INPUT] 0    0    [1    /1   ]  94.3044510148        1
[INPUT] 0    0    [1    /1   ]  5.06515028165        1
[INPUT] 0    0    [1    /1   ]  0.52371359747        1
[INPUT] 1    0    [1    /1   ]  8.51045008223        1
[INPUT] 1    0    [1    /1   ]  0.405722796869       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.25900892371163, 1.0]], [0, [94.30445101478625, 1.0]], [0, [5.06515028165085, 1.0]], [0, [0.5237135974703891, 1.0]], [1, [8.51045008222977, 1.0]], [1, [0.40572279686896934, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.25900892]
bas 1, expnt(s) = [94.30445101]
bas 2, expnt(s) = [5.06515028]
bas 3, expnt(s) = [0.5237136]
bas 4, expnt(s) = [8.51045008]
bas 5, expnt(s) = [0.4057228]
CPU time:        12.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.25900892
 217.55779987  94.30445101  76.45645678   5.06515028   8.53020122
   0.5237136    1.55537607   8.51045008  42.40577976   0.4057228
   0.94465049]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.2138691372036
cond(S) = 7.301528037533612
E1 = -656.5325035974146  E_coul = 181.47258418326564
init E= -475.059919414149
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.821365686263338  LUMO = 404.122644295631
  mo_energy =
[-112.47400096  -12.71666606   -7.84020369   -7.84020369   -7.84020369
   -1.68882952   -0.82136569   -0.82136569   -0.82136569  404.1226443 ]
E1 = -686.4423815717261  E_coul = 199.63171292099784
cycle= 1 E= -486.810668650728  delta_E= -11.8  |g|= 0.299  |ddm|= 0.44
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.295967
diis-c [-0.08759654  1.        ]
  HOMO = -0.33979728324769  LUMO = 406.79681761787
  mo_energy =
[-1.10218625e+02 -1.14325363e+01 -6.61973019e+00 -6.61973019e+00
 -6.61973019e+00 -1.05977925e+00 -3.39797283e-01 -3.39797283e-01
 -3.39797283e-01  4.06796818e+02]
E1 = -686.4432362004286  E_coul = 199.63247709553997
cycle= 2 E= -486.810759104889  delta_E= -9.05e-05  |g|= 0.00277  |ddm|= 0.00156
    CPU time for cycle= 2      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.00286886
diis-c [-1.17654522e-07 -9.71715736e-03  1.00971716e+00]
  HOMO = -0.339803519173429  LUMO = 406.798254942737
  mo_energy =
[-1.10217913e+02 -1.14325725e+01 -6.61981971e+00 -6.61981971e+00
 -6.61981971e+00 -1.05978221e+00 -3.39803519e-01 -3.39803519e-01
 -3.39803519e-01  4.06798255e+02]
E1 = -686.4432504117651  E_coul = 199.63249129924853
cycle= 3 E= -486.810759112517  delta_E= -7.63e-09  |g|= 1.79e-06  |ddm|= 1.29e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.0874e-06
diis-c [-5.19960724e-13  2.32427753e-05 -2.36511355e-03  1.00234187e+00]
  HOMO = -0.33980349277229  LUMO = 406.798256741059
  mo_energy =
[-1.10217911e+02 -1.14325723e+01 -6.61981943e+00 -6.61981943e+00
 -6.61981943e+00 -1.05978217e+00 -3.39803493e-01 -3.39803493e-01
 -3.39803493e-01  4.06798257e+02]
E1 = -686.4432504436818  E_coul = 199.63249133116517
cycle= 4 E= -486.810759112517  delta_E=    0  |g|= 5.53e-09  |ddm|= 1.66e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -686.4432504436818  E_coul = 199.63249133116517
  HOMO = -0.339803492749194  LUMO = 406.798256746872
  mo_energy =
[-1.10217911e+02 -1.14325722e+01 -6.61981943e+00 -6.61981943e+00
 -6.61981943e+00 -1.05978217e+00 -3.39803493e-01 -3.39803493e-01
 -3.39803493e-01  4.06798257e+02]
E1 = -686.4432504437888  E_coul = 199.6324913312722
Extra cycle  E= -486.810759112517  delta_E= 5.68e-14  |g|= 3.55e-11  |ddm|= 4.18e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [380.25900892  94.30445101   5.06515028   0.5237136    8.51045008
   0.4057228 ]
E = -486.81075911251656
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:44 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.259008924        1
[INPUT] 0    0    [1    /1   ]  94.3044510148        1
[INPUT] 0    0    [1    /1   ]  5.06515028165        1
[INPUT] 0    0    [1    /1   ]  0.52371359747        1
[INPUT] 1    0    [1    /1   ]  8.51045008223        1
[INPUT] 1    0    [1    /1   ]  0.405722796869       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.25900892371163, 1.0]], [0, [94.30445101478625, 1.0]], [0, [5.06515028165085, 1.0]], [0, [0.5237135974703891, 1.0]], [1, [8.51045008222977, 1.0]], [1, [0.40572279686896934, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.25900892]
bas 1, expnt(s) = [94.30445101]
bas 2, expnt(s) = [5.06515028]
bas 3, expnt(s) = [0.5237136]
bas 4, expnt(s) = [8.51045008]
bas 5, expnt(s) = [0.4057228]
CPU time:        12.78
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.25900892
 217.55779987  94.30445101  76.45645678   5.06515028   8.53020122
   0.5237136    1.55537607   8.51045008  42.40577976   0.4057228
   0.94465049]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.2138691372036
cond(S) = 7.301528037533612
E1 = -656.5325035974146  E_coul = 181.47258418326564
init E= -475.059919414149
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.821365686263338  LUMO = 404.122644295631
  mo_energy =
[-112.47400096  -12.71666606   -7.84020369   -7.84020369   -7.84020369
   -1.68882952   -0.82136569   -0.82136569   -0.82136569  404.1226443 ]
E1 = -686.4423815717261  E_coul = 199.63171292099784
cycle= 1 E= -486.810668650728  delta_E= -11.8  |g|= 0.299  |ddm|= 0.44
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.295967
diis-c [-0.08759654  1.        ]
  HOMO = -0.33979728324769  LUMO = 406.79681761787
  mo_energy =
[-1.10218625e+02 -1.14325363e+01 -6.61973019e+00 -6.61973019e+00
 -6.61973019e+00 -1.05977925e+00 -3.39797283e-01 -3.39797283e-01
 -3.39797283e-01  4.06796818e+02]
E1 = -686.4432362004286  E_coul = 199.63247709553997
cycle= 2 E= -486.810759104889  delta_E= -9.05e-05  |g|= 0.00277  |ddm|= 0.00156
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00286886
diis-c [-1.17654522e-07 -9.71715736e-03  1.00971716e+00]
  HOMO = -0.339803519173429  LUMO = 406.798254942737
  mo_energy =
[-1.10217913e+02 -1.14325725e+01 -6.61981971e+00 -6.61981971e+00
 -6.61981971e+00 -1.05978221e+00 -3.39803519e-01 -3.39803519e-01
 -3.39803519e-01  4.06798255e+02]
E1 = -686.4432504117651  E_coul = 199.63249129924853
cycle= 3 E= -486.810759112517  delta_E= -7.63e-09  |g|= 1.79e-06  |ddm|= 1.29e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.0874e-06
diis-c [-5.19960724e-13  2.32427753e-05 -2.36511355e-03  1.00234187e+00]
  HOMO = -0.33980349277229  LUMO = 406.798256741059
  mo_energy =
[-1.10217911e+02 -1.14325723e+01 -6.61981943e+00 -6.61981943e+00
 -6.61981943e+00 -1.05978217e+00 -3.39803493e-01 -3.39803493e-01
 -3.39803493e-01  4.06798257e+02]
E1 = -686.4432504436818  E_coul = 199.63249133116517
cycle= 4 E= -486.810759112517  delta_E=    0  |g|= 5.53e-09  |ddm|= 1.66e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -686.4432504436818  E_coul = 199.63249133116517
  HOMO = -0.339803492749194  LUMO = 406.798256746872
  mo_energy =
[-1.10217911e+02 -1.14325722e+01 -6.61981943e+00 -6.61981943e+00
 -6.61981943e+00 -1.05978217e+00 -3.39803493e-01 -3.39803493e-01
 -3.39803493e-01  4.06798257e+02]
E1 = -686.4432504437888  E_coul = 199.6324913312722
Extra cycle  E= -486.810759112517  delta_E= 5.68e-14  |g|= 3.55e-11  |ddm|= 4.18e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.301528037533612
E1 = -686.4432504437888  E_coul = 199.6324913312722
init E= -486.810759112517
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.339803492749038  LUMO = 406.798256746911
  mo_energy =
[-1.10217911e+02 -1.14325722e+01 -6.61981943e+00 -6.61981943e+00
 -6.61981943e+00 -1.05978217e+00 -3.39803493e-01 -3.39803493e-01
 -3.39803493e-01  4.06798257e+02]
E1 = -686.4432504437898  E_coul = 199.63249133127303
cycle= 1 E= -486.810759112517  delta_E= -1.71e-13  |g|= 1.6e-13  |ddm|= 2.65e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -686.4432504437898  E_coul = 199.63249133127303
  HOMO = -0.339803492749037  LUMO = 406.798256746911
  mo_energy =
[-1.10217911e+02 -1.14325722e+01 -6.61981943e+00 -6.61981943e+00
 -6.61981943e+00 -1.05978217e+00 -3.39803493e-01 -3.39803493e-01
 -3.39803493e-01  4.06798257e+02]
E1 = -686.4432504437898  E_coul = 199.63249133127306
Extra cycle  E= -486.810759112517  delta_E=    0  |g|= 1.57e-13  |ddm|= 2.07e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [380.25900892  94.30445101   5.06515028   0.5237136    8.51045008
   0.4057228 ]
grad_E = [-0.06380275  0.6137307   0.11035952  0.95345579  0.12559978 -2.87432452]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.97826756         1
[INPUT] 0    0    [1    /1   ]  87.2841436374        1
[INPUT] 0    0    [1    /1   ]  9.39027665124        1
[INPUT] 0    0    [1    /1   ]  1.00000030478e-09      1
[INPUT] 1    0    [1    /1   ]  8.0278555177         1
[INPUT] 1    0    [1    /1   ]  1.01508738041        1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.9782675598289, 1.0]], [0, [87.28414363742057, 1.0]], [0, [9.390276651242464, 1.0]], [0, [1.000000304784976e-09, 1.0]], [1, [8.02785551770155, 1.0]], [1, [1.015087380407603, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.97826756]
bas 1, expnt(s) = [87.28414364]
bas 2, expnt(s) = [9.39027665]
bas 3, expnt(s) = [1.0000003e-09]
bas 4, expnt(s) = [8.02785552]
bas 5, expnt(s) = [1.01508738]
CPU time:        15.58
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.80978268e+02 2.17866359e+02 8.72841436e+01 7.21467116e+01
 9.39027665e+00 1.35526373e+01 1.00000030e-09 4.49277970e-07
 8.02785552e+00 3.94215619e+01 1.01508738e+00 2.97244398e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 13.516311738372448
cond(S) = 7.7480357976147065
E1 = -617.4343695375977  E_coul = 155.46054278454068
init E= -461.973826753057
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.000226257327719823  LUMO = 397.862167318139
  mo_energy =
[-1.17801984e+02 -1.00315526e+01 -1.00315526e+01 -1.00315526e+01
 -8.84588529e+00 -1.82167749e+00 -1.82167749e+00 -1.82167749e+00
 -2.26257328e-04  3.97862167e+02]
E1 = -679.0505070810892  E_coul = 202.15281913802536
cycle= 1 E= -476.897687943064  delta_E= -14.9  |g|= 0.0499  |ddm|= 2.55
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0337686
diis-c [-0.00114032  1.        ]
  HOMO = 0.222601375361014  LUMO = 403.389052520616
  mo_energy =
[-1.12560223e+02 -6.70892944e+00 -6.70892944e+00 -6.70892944e+00
 -5.35316364e+00 -6.52413283e-05  2.22601375e-01  2.22601375e-01
  2.22601375e-01  4.03389053e+02]
E1 = -679.0516270274578  E_coul = 202.15393605853455
cycle= 2 E= -476.897690968923  delta_E= -3.03e-06  |g|= 0.000337  |ddm|= 0.000439
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.000227342
diis-c [-2.46878942e-10 -6.76164358e-03  1.00676164e+00]
  HOMO = 0.222608173741396  LUMO = 403.389443615005
  mo_energy =
[-1.12559808e+02 -6.70890636e+00 -6.70890636e+00 -6.70890636e+00
 -5.35310623e+00 -6.52413283e-05  2.22608174e-01  2.22608174e-01
  2.22608174e-01  4.03389444e+02]
E1 = -679.0516345711152  E_coul = 202.1539436020534
cycle= 3 E= -476.897690969062  delta_E= -1.39e-10  |g|= 1.41e-07  |ddm|= 2.99e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -679.0516345711152  E_coul = 202.1539436020534
  HOMO = 0.222608174653018  LUMO = 403.389443559667
  mo_energy =
[-1.12559808e+02 -6.70890636e+00 -6.70890636e+00 -6.70890636e+00
 -5.35310623e+00 -6.52413283e-05  2.22608175e-01  2.22608175e-01
  2.22608175e-01  4.03389444e+02]
E1 = -679.0516345709173  E_coul = 202.15394360185513
Extra cycle  E= -476.897690969062  delta_E= -3.41e-13  |g|= 1.39e-09  |ddm|= 6.07e-10
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
exp = [3.80978268e+02 8.72841436e+01 9.39027665e+00 1.00000030e-09
 8.02785552e+00 1.01508738e+00]
E = -476.8976909690621
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.39723093         1
[INPUT] 0    0    [1    /1   ]  92.9553382983        1
[INPUT] 0    0    [1    /1   ]  5.89632229052        1
[INPUT] 0    0    [1    /1   ]  0.423070045155       1
[INPUT] 1    0    [1    /1   ]  8.41770849288        1
[INPUT] 1    0    [1    /1   ]  0.522826146402       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.39723093028186, 1.0]], [0, [92.95533829828496, 1.0]], [0, [5.896322290515329, 1.0]], [0, [0.42307004515516855, 1.0]], [1, [8.417708492877347, 1.0]], [1, [0.5228261464015046, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.39723093]
bas 1, expnt(s) = [92.9553383]
bas 2, expnt(s) = [5.89632229]
bas 3, expnt(s) = [0.42307005]
bas 4, expnt(s) = [8.41770849]
bas 5, expnt(s) = [0.52282615]
CPU time:        15.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.39723093
 217.61710795  92.9553383   75.63464556   5.89632229   9.55984684
   0.42307005   1.32533062   8.41770849  41.82892901   0.52282615
   1.29697324]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.148571149918318
cond(S) = 7.2950681064321685
E1 = -661.8106819355471  E_coul = 185.7819479670963
init E= -476.028733968451
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694223946490876  LUMO = 403.520643422047
  mo_energy =
[-112.8578612   -11.81922682   -7.57387138   -7.57387138   -7.57387138
   -1.52838364   -0.69422395   -0.69422395   -0.69422395  403.52064342]
E1 = -693.223166612928  E_coul = 205.88831187477962
cycle= 1 E= -487.334854738148  delta_E= -11.3  |g|= 0.239  |ddm|= 0.487
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.238737
diis-c [-0.05699559  1.        ]
  HOMO = -0.107084043725354  LUMO = 406.375704721691
  mo_energy =
[-1.10387210e+02 -1.04297177e+01 -6.24641488e+00 -6.24641488e+00
 -6.24641488e+00 -8.45875157e-01 -1.07084044e-01 -1.07084044e-01
 -1.07084044e-01  4.06375705e+02]
E1 = -693.2243640013916  E_coul = 205.88945172433756
cycle= 2 E= -487.334912277054  delta_E= -5.75e-05  |g|= 0.00221  |ddm|= 0.00119
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00231159
diis-c [-1.76964448e-07 -9.61239566e-03  1.00961240e+00]
  HOMO = -0.107091039663438  LUMO = 406.377032840726
  mo_energy =
[-1.10386444e+02 -1.04297285e+01 -6.24646784e+00 -6.24646784e+00
 -6.24646784e+00 -8.45875632e-01 -1.07091040e-01 -1.07091040e-01
 -1.07091040e-01  4.06377033e+02]
E1 = -693.2243782720137  E_coul = 205.88946599014753
cycle= 3 E= -487.334912281866  delta_E= -4.81e-09  |g|= 1.15e-06  |ddm|= 9.88e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=9.36348e-07
diis-c [-7.41356206e-15  1.98514376e-05 -2.18042867e-03  1.00216058e+00]
  HOMO = -0.107091008795962  LUMO = 406.37703362732
  mo_energy =
[-1.10386443e+02 -1.04297283e+01 -6.24646769e+00 -6.24646769e+00
 -6.24646769e+00 -8.45875604e-01 -1.07091009e-01 -1.07091009e-01
 -1.07091009e-01  4.06377034e+02]
E1 = -693.2243782826771  E_coul = 205.88946600081076
cycle= 4 E= -487.334912281866  delta_E= -1.14e-13  |g|= 7.67e-10  |ddm|= 8.62e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -693.2243782826771  E_coul = 205.88946600081076
  HOMO = -0.107091008787834  LUMO = 406.377033628119
  mo_energy =
[-1.10386443e+02 -1.04297283e+01 -6.24646769e+00 -6.24646769e+00
 -6.24646769e+00 -8.45875604e-01 -1.07091009e-01 -1.07091009e-01
 -1.07091009e-01  4.06377034e+02]
E1 = -693.2243782826923  E_coul = 205.889466000826
Extra cycle  E= -487.334912281866  delta_E=    0  |g|= 4.75e-12  |ddm|= 6.19e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [380.39723093  92.9553383    5.89632229   0.42307005   8.41770849
   0.52282615]
E = -487.3349122818663
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:47 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.39723093         1
[INPUT] 0    0    [1    /1   ]  92.9553382983        1
[INPUT] 0    0    [1    /1   ]  5.89632229052        1
[INPUT] 0    0    [1    /1   ]  0.423070045155       1
[INPUT] 1    0    [1    /1   ]  8.41770849288        1
[INPUT] 1    0    [1    /1   ]  0.522826146402       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.39723093028186, 1.0]], [0, [92.95533829828496, 1.0]], [0, [5.896322290515329, 1.0]], [0, [0.42307004515516855, 1.0]], [1, [8.417708492877347, 1.0]], [1, [0.5228261464015046, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.39723093]
bas 1, expnt(s) = [92.9553383]
bas 2, expnt(s) = [5.89632229]
bas 3, expnt(s) = [0.42307005]
bas 4, expnt(s) = [8.41770849]
bas 5, expnt(s) = [0.52282615]
CPU time:        15.92
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.39723093
 217.61710795  92.9553383   75.63464556   5.89632229   9.55984684
   0.42307005   1.32533062   8.41770849  41.82892901   0.52282615
   1.29697324]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.148571149918318
cond(S) = 7.2950681064321685
E1 = -661.8106819355471  E_coul = 185.7819479670963
init E= -476.028733968451
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694223946490876  LUMO = 403.520643422047
  mo_energy =
[-112.8578612   -11.81922682   -7.57387138   -7.57387138   -7.57387138
   -1.52838364   -0.69422395   -0.69422395   -0.69422395  403.52064342]
E1 = -693.223166612928  E_coul = 205.88831187477962
cycle= 1 E= -487.334854738148  delta_E= -11.3  |g|= 0.239  |ddm|= 0.487
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.238737
diis-c [-0.05699559  1.        ]
  HOMO = -0.107084043725354  LUMO = 406.375704721691
  mo_energy =
[-1.10387210e+02 -1.04297177e+01 -6.24641488e+00 -6.24641488e+00
 -6.24641488e+00 -8.45875157e-01 -1.07084044e-01 -1.07084044e-01
 -1.07084044e-01  4.06375705e+02]
E1 = -693.2243640013916  E_coul = 205.88945172433756
cycle= 2 E= -487.334912277054  delta_E= -5.75e-05  |g|= 0.00221  |ddm|= 0.00119
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00231159
diis-c [-1.76964448e-07 -9.61239566e-03  1.00961240e+00]
  HOMO = -0.107091039663438  LUMO = 406.377032840726
  mo_energy =
[-1.10386444e+02 -1.04297285e+01 -6.24646784e+00 -6.24646784e+00
 -6.24646784e+00 -8.45875632e-01 -1.07091040e-01 -1.07091040e-01
 -1.07091040e-01  4.06377033e+02]
E1 = -693.2243782720137  E_coul = 205.88946599014753
cycle= 3 E= -487.334912281866  delta_E= -4.81e-09  |g|= 1.15e-06  |ddm|= 9.88e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=9.36348e-07
diis-c [-7.41356206e-15  1.98514376e-05 -2.18042867e-03  1.00216058e+00]
  HOMO = -0.107091008795962  LUMO = 406.37703362732
  mo_energy =
[-1.10386443e+02 -1.04297283e+01 -6.24646769e+00 -6.24646769e+00
 -6.24646769e+00 -8.45875604e-01 -1.07091009e-01 -1.07091009e-01
 -1.07091009e-01  4.06377034e+02]
E1 = -693.2243782826771  E_coul = 205.88946600081076
cycle= 4 E= -487.334912281866  delta_E= -1.14e-13  |g|= 7.67e-10  |ddm|= 8.62e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -693.2243782826771  E_coul = 205.88946600081076
  HOMO = -0.107091008787834  LUMO = 406.377033628119
  mo_energy =
[-1.10386443e+02 -1.04297283e+01 -6.24646769e+00 -6.24646769e+00
 -6.24646769e+00 -8.45875604e-01 -1.07091009e-01 -1.07091009e-01
 -1.07091009e-01  4.06377034e+02]
E1 = -693.2243782826923  E_coul = 205.889466000826
Extra cycle  E= -487.334912281866  delta_E=    0  |g|= 4.75e-12  |ddm|= 6.19e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.2950681064321685
E1 = -693.2243782826923  E_coul = 205.889466000826
init E= -487.334912281866
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.107091008787786  LUMO = 406.377033628124
  mo_energy =
[-1.10386443e+02 -1.04297283e+01 -6.24646769e+00 -6.24646769e+00
 -6.24646769e+00 -8.45875604e-01 -1.07091009e-01 -1.07091009e-01
 -1.07091009e-01  4.06377034e+02]
E1 = -693.2243782826926  E_coul = 205.88946600082625
cycle= 1 E= -487.334912281866  delta_E=    0  |g|= 1.8e-13  |ddm|= 3.7e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -693.2243782826926  E_coul = 205.88946600082625
  HOMO = -0.107091008787784  LUMO = 406.377033628124
  mo_energy =
[-1.10386443e+02 -1.04297283e+01 -6.24646769e+00 -6.24646769e+00
 -6.24646769e+00 -8.45875604e-01 -1.07091009e-01 -1.07091009e-01
 -1.07091009e-01  4.06377034e+02]
E1 = -693.2243782826926  E_coul = 205.88946600082616
Extra cycle  E= -487.334912281866  delta_E= -1.14e-13  |g|= 5.96e-14  |ddm|= 3.71e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [380.39723093  92.9553383    5.89632229   0.42307005   8.41770849
   0.52282615]
grad_E = [-0.06287932  0.59212254  0.88257602  0.03127253 -0.02761367  1.6040047 ]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.629407605        1
[INPUT] 0    0    [1    /1   ]  90.7130135065        1
[INPUT] 0    0    [1    /1   ]  5.91657727055        1
[INPUT] 0    0    [1    /1   ]  0.501539570178       1
[INPUT] 1    0    [1    /1   ]  8.28792292084        1
[INPUT] 1    0    [1    /1   ]  0.494887431782       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.62940760470406, 1.0]], [0, [90.71301350653818, 1.0]], [0, [5.916577270549254, 1.0]], [0, [0.50153957017798, 1.0]], [1, [8.287922920836285, 1.0]], [1, [0.4948874317818161, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.6294076]
bas 1, expnt(s) = [90.71301351]
bas 2, expnt(s) = [5.91657727]
bas 3, expnt(s) = [0.50153957]
bas 4, expnt(s) = [8.28792292]
bas 5, expnt(s) = [0.49488743]
CPU time:        18.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.6294076
 217.71671783  90.71301351  74.26209898   5.91657727   9.58446619
   0.50153957   1.50571899   8.28792292  41.02433234   0.49488743
   1.2109255 ]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.144916949965424
cond(S) = 7.215131358476974
E1 = -663.0664326559695  E_coul = 185.06221531262207
init E= -478.004217343347
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.714754604589255  LUMO = 397.495764976454
  mo_energy =
[-113.57106407  -12.02646285   -7.59561382   -7.59561382   -7.59561382
   -1.479228     -0.7147546    -0.7147546    -0.7147546   397.49576498]
E1 = -693.6815226565407  E_coul = 205.069877644203
cycle= 1 E= -488.611645012338  delta_E= -10.6  |g|= 0.209  |ddm|= 0.487
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.208146
diis-c [-0.04332492  1.        ]
  HOMO = -0.13888740920017  LUMO = 400.283274164291
  mo_energy =
[-1.11129240e+02 -1.06460727e+01 -6.26892926e+00 -6.26892926e+00
 -6.26892926e+00 -7.72143680e-01 -1.38887409e-01 -1.38887409e-01
 -1.38887409e-01  4.00283274e+02]
E1 = -693.6824253736271  E_coul = 205.0707356464593
cycle= 2 E= -488.611689727168  delta_E= -4.47e-05  |g|= 0.00191  |ddm|= 0.00108
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00202095
diis-c [-1.59896717e-07 -9.60878840e-03  1.00960879e+00]
  HOMO = -0.138893784530554  LUMO = 400.284400989232
  mo_energy =
[-1.11128614e+02 -1.06460893e+01 -6.26898121e+00 -6.26898121e+00
 -6.26898121e+00 -7.72145022e-01 -1.38893785e-01 -1.38893785e-01
 -1.38893785e-01  4.00284401e+02]
E1 = -693.6824368447186  E_coul = 205.0707471138943
cycle= 3 E= -488.611689730824  delta_E= -3.66e-09  |g|= 1.15e-06  |ddm|= 8.64e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=9.57633e-07
diis-c [-2.83940225e-15  2.15903164e-05 -2.36757319e-03  1.00234598e+00]
  HOMO = -0.138893756497118  LUMO = 400.284401739103
  mo_energy =
[-1.11128613e+02 -1.06460891e+01 -6.26898105e+00 -6.26898105e+00
 -6.26898105e+00 -7.72144991e-01 -1.38893756e-01 -1.38893756e-01
 -1.38893756e-01  4.00284402e+02]
E1 = -693.6824368546712  E_coul = 205.0707471238469
cycle= 4 E= -488.611689730824  delta_E=    0  |g|= 4.79e-10  |ddm|= 8.79e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -693.6824368546712  E_coul = 205.0707471238469
  HOMO = -0.138893756492256  LUMO = 400.284401739614
  mo_energy =
[-1.11128613e+02 -1.06460891e+01 -6.26898105e+00 -6.26898105e+00
 -6.26898105e+00 -7.72144991e-01 -1.38893756e-01 -1.38893756e-01
 -1.38893756e-01  4.00284402e+02]
E1 = -693.6824368546812  E_coul = 205.07074712385682
Extra cycle  E= -488.611689730824  delta_E= -1.14e-13  |g|= 2.88e-12  |ddm|= 3.97e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [380.6294076   90.71301351   5.91657727   0.50153957   8.28792292
   0.49488743]
E = -488.6116897308244
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  380.629407605        1
[INPUT] 0    0    [1    /1   ]  90.7130135065        1
[INPUT] 0    0    [1    /1   ]  5.91657727055        1
[INPUT] 0    0    [1    /1   ]  0.501539570178       1
[INPUT] 1    0    [1    /1   ]  8.28792292084        1
[INPUT] 1    0    [1    /1   ]  0.494887431782       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [380.62940760470406, 1.0]], [0, [90.71301350653818, 1.0]], [0, [5.916577270549254, 1.0]], [0, [0.50153957017798, 1.0]], [1, [8.287922920836285, 1.0]], [1, [0.4948874317818161, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [380.6294076]
bas 1, expnt(s) = [90.71301351]
bas 2, expnt(s) = [5.91657727]
bas 3, expnt(s) = [0.50153957]
bas 4, expnt(s) = [8.28792292]
bas 5, expnt(s) = [0.49488743]
CPU time:        18.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         380.6294076
 217.71671783  90.71301351  74.26209898   5.91657727   9.58446619
   0.50153957   1.50571899   8.28792292  41.02433234   0.49488743
   1.2109255 ]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.144916949965424
cond(S) = 7.215131358476974
E1 = -663.0664326559695  E_coul = 185.06221531262207
init E= -478.004217343347
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.714754604589255  LUMO = 397.495764976454
  mo_energy =
[-113.57106407  -12.02646285   -7.59561382   -7.59561382   -7.59561382
   -1.479228     -0.7147546    -0.7147546    -0.7147546   397.49576498]
E1 = -693.6815226565407  E_coul = 205.069877644203
cycle= 1 E= -488.611645012338  delta_E= -10.6  |g|= 0.209  |ddm|= 0.487
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.208146
diis-c [-0.04332492  1.        ]
  HOMO = -0.13888740920017  LUMO = 400.283274164291
  mo_energy =
[-1.11129240e+02 -1.06460727e+01 -6.26892926e+00 -6.26892926e+00
 -6.26892926e+00 -7.72143680e-01 -1.38887409e-01 -1.38887409e-01
 -1.38887409e-01  4.00283274e+02]
E1 = -693.6824253736271  E_coul = 205.0707356464593
cycle= 2 E= -488.611689727168  delta_E= -4.47e-05  |g|= 0.00191  |ddm|= 0.00108
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00202095
diis-c [-1.59896717e-07 -9.60878840e-03  1.00960879e+00]
  HOMO = -0.138893784530554  LUMO = 400.284400989232
  mo_energy =
[-1.11128614e+02 -1.06460893e+01 -6.26898121e+00 -6.26898121e+00
 -6.26898121e+00 -7.72145022e-01 -1.38893785e-01 -1.38893785e-01
 -1.38893785e-01  4.00284401e+02]
E1 = -693.6824368447186  E_coul = 205.0707471138943
cycle= 3 E= -488.611689730824  delta_E= -3.66e-09  |g|= 1.15e-06  |ddm|= 8.64e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=9.57633e-07
diis-c [-2.83940225e-15  2.15903164e-05 -2.36757319e-03  1.00234598e+00]
  HOMO = -0.138893756497118  LUMO = 400.284401739103
  mo_energy =
[-1.11128613e+02 -1.06460891e+01 -6.26898105e+00 -6.26898105e+00
 -6.26898105e+00 -7.72144991e-01 -1.38893756e-01 -1.38893756e-01
 -1.38893756e-01  4.00284402e+02]
E1 = -693.6824368546712  E_coul = 205.0707471238469
cycle= 4 E= -488.611689730824  delta_E=    0  |g|= 4.79e-10  |ddm|= 8.79e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -693.6824368546712  E_coul = 205.0707471238469
  HOMO = -0.138893756492256  LUMO = 400.284401739614
  mo_energy =
[-1.11128613e+02 -1.06460891e+01 -6.26898105e+00 -6.26898105e+00
 -6.26898105e+00 -7.72144991e-01 -1.38893756e-01 -1.38893756e-01
 -1.38893756e-01  4.00284402e+02]
E1 = -693.6824368546812  E_coul = 205.07074712385682
Extra cycle  E= -488.611689730824  delta_E= -1.14e-13  |g|= 2.88e-12  |ddm|= 3.97e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 7.215131358476974
E1 = -693.6824368546812  E_coul = 205.07074712385682
init E= -488.611689730824
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.138893756492225  LUMO = 400.284401739617
  mo_energy =
[-1.11128613e+02 -1.06460891e+01 -6.26898105e+00 -6.26898105e+00
 -6.26898105e+00 -7.72144991e-01 -1.38893756e-01 -1.38893756e-01
 -1.38893756e-01  4.00284402e+02]
E1 = -693.6824368546812  E_coul = 205.07074712385673
cycle= 1 E= -488.611689730824  delta_E= -5.68e-14  |g|= 2.94e-13  |ddm|= 2.35e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -693.6824368546812  E_coul = 205.07074712385673
  HOMO = -0.138893756492228  LUMO = 400.284401739617
  mo_energy =
[-1.11128613e+02 -1.06460891e+01 -6.26898105e+00 -6.26898105e+00
 -6.26898105e+00 -7.72144991e-01 -1.38893756e-01 -1.38893756e-01
 -1.38893756e-01  4.00284402e+02]
E1 = -693.6824368546812  E_coul = 205.0707471238567
Extra cycle  E= -488.611689730825  delta_E= -5.68e-14  |g|= 1.25e-13  |ddm|= 4.19e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [380.6294076   90.71301351   5.91657727   0.50153957   8.28792292
   0.49488743]
grad_E = [-0.06092225  0.56483605  0.90196377  1.04435909 -0.10766725  0.95370165]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:52 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  382.178684923        1
[INPUT] 0    0    [1    /1   ]  75.7928708259        1
[INPUT] 0    0    [1    /1   ]  5.67225595907        1
[INPUT] 0    0    [1    /1   ]  0.433165863673       1
[INPUT] 1    0    [1    /1   ]  8.02865895665        1
[INPUT] 1    0    [1    /1   ]  0.384202142144       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [382.1786849228993, 1.0]], [0, [75.79287082586595, 1.0]], [0, [5.672255959073418, 1.0]], [0, [0.4331658636726752, 1.0]], [1, [8.02865895664646, 1.0]], [1, [0.38420214214392, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [382.17868492]
bas 1, expnt(s) = [75.79287083]
bas 2, expnt(s) = [5.67225596]
bas 3, expnt(s) = [0.43316586]
bas 4, expnt(s) = [8.02865896]
bas 5, expnt(s) = [0.38420214]
CPU time:        21.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         382.17868492
 218.38101013  75.79287083  64.89874404   5.67225596   9.28606863
   0.43316586   1.34898056   8.02865896  39.42649365   0.38420214
   0.88243783]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.246981390419872
cond(S) = 6.151375481298162
E1 = -667.2391723228321  E_coul = 178.24699863054175
init E= -488.99217369229
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.845513308789071  LUMO = 353.227773805773
  mo_energy =
[-117.18921483  -13.16537769   -8.03544694   -8.03544694   -8.03544694
   -1.83936063   -0.84551331   -0.84551331   -0.84551331  353.22777381]
E1 = -690.0603914736629  E_coul = 194.47554525690455
cycle= 1 E= -495.584846216758  delta_E= -6.59  |g|= 0.0775  |ddm|= 0.331
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0525161
diis-c [-0.00275794  1.        ]
  HOMO = -0.404834926707163  LUMO = 355.225402688384
  mo_energy =
[-115.31922396  -11.9936725    -6.92124143   -6.92124143   -6.92124143
   -1.26352914   -0.40483493   -0.40483493   -0.40483493  355.22540269]
E1 = -690.0590418007521  E_coul = 194.47418718370741
cycle= 2 E= -495.584854617045  delta_E= -8.4e-06  |g|= 0.0004  |ddm|= 0.000724
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000325389
diis-c [-4.92678884e-08 -4.55124035e-03  1.00455124e+00]
  HOMO = -0.404839158770884  LUMO = 355.225060167198
  mo_energy =
[-115.31966004  -11.99372817   -6.92129897   -6.92129897   -6.92129897
   -1.2635342    -0.40483916   -0.40483916   -0.40483916  355.22506017]
E1 = -690.0590349200252  E_coul = 194.474180302762
cycle= 3 E= -495.584854617263  delta_E= -2.19e-10  |g|= 1.42e-06  |ddm|= 3.44e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -690.0590349200252  E_coul = 194.474180302762
  HOMO = -0.404839157260725  LUMO = 355.225060325277
  mo_energy =
[-115.31966023  -11.99372818   -6.92129902   -6.92129902   -6.92129902
   -1.2635342    -0.40483916   -0.40483916   -0.40483916  355.22506033]
E1 = -690.0590349141451  E_coul = 194.4741802968819
Extra cycle  E= -495.584854617263  delta_E= 5.68e-14  |g|= 1.3e-08  |ddm|= 7.39e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.09 sec
exp = [382.17868492  75.79287083   5.67225596   0.43316586   8.02865896
   0.38420214]
E = -495.58485461726315
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  382.178684923        1
[INPUT] 0    0    [1    /1   ]  75.7928708259        1
[INPUT] 0    0    [1    /1   ]  5.67225595907        1
[INPUT] 0    0    [1    /1   ]  0.433165863673       1
[INPUT] 1    0    [1    /1   ]  8.02865895665        1
[INPUT] 1    0    [1    /1   ]  0.384202142144       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [382.1786849228993, 1.0]], [0, [75.79287082586595, 1.0]], [0, [5.672255959073418, 1.0]], [0, [0.4331658636726752, 1.0]], [1, [8.02865895664646, 1.0]], [1, [0.38420214214392, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [382.17868492]
bas 1, expnt(s) = [75.79287083]
bas 2, expnt(s) = [5.67225596]
bas 3, expnt(s) = [0.43316586]
bas 4, expnt(s) = [8.02865896]
bas 5, expnt(s) = [0.38420214]
CPU time:        21.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         382.17868492
 218.38101013  75.79287083  64.89874404   5.67225596   9.28606863
   0.43316586   1.34898056   8.02865896  39.42649365   0.38420214
   0.88243783]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.246981390419872
cond(S) = 6.151375481298162
E1 = -667.2391723228321  E_coul = 178.24699863054175
init E= -488.99217369229
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.845513308789071  LUMO = 353.227773805773
  mo_energy =
[-117.18921483  -13.16537769   -8.03544694   -8.03544694   -8.03544694
   -1.83936063   -0.84551331   -0.84551331   -0.84551331  353.22777381]
E1 = -690.0603914736629  E_coul = 194.47554525690455
cycle= 1 E= -495.584846216758  delta_E= -6.59  |g|= 0.0775  |ddm|= 0.331
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.0525161
diis-c [-0.00275794  1.        ]
  HOMO = -0.404834926707163  LUMO = 355.225402688384
  mo_energy =
[-115.31922396  -11.9936725    -6.92124143   -6.92124143   -6.92124143
   -1.26352914   -0.40483493   -0.40483493   -0.40483493  355.22540269]
E1 = -690.0590418007521  E_coul = 194.47418718370741
cycle= 2 E= -495.584854617045  delta_E= -8.4e-06  |g|= 0.0004  |ddm|= 0.000724
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.000325389
diis-c [-4.92678884e-08 -4.55124035e-03  1.00455124e+00]
  HOMO = -0.404839158770884  LUMO = 355.225060167198
  mo_energy =
[-115.31966004  -11.99372817   -6.92129897   -6.92129897   -6.92129897
   -1.2635342    -0.40483916   -0.40483916   -0.40483916  355.22506017]
E1 = -690.0590349200252  E_coul = 194.474180302762
cycle= 3 E= -495.584854617263  delta_E= -2.19e-10  |g|= 1.42e-06  |ddm|= 3.44e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
E1 = -690.0590349200252  E_coul = 194.474180302762
  HOMO = -0.404839157260725  LUMO = 355.225060325277
  mo_energy =
[-115.31966023  -11.99372818   -6.92129902   -6.92129902   -6.92129902
   -1.2635342    -0.40483916   -0.40483916   -0.40483916  355.22506033]
E1 = -690.0590349141451  E_coul = 194.4741802968819
Extra cycle  E= -495.584854617263  delta_E= 5.68e-14  |g|= 1.3e-08  |ddm|= 7.39e-09
    CPU time for scf_cycle      0.08 sec, wall time      0.08 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 6.151375481298162
E1 = -690.0590349141451  E_coul = 194.4741802968819
init E= -495.584854617263
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.404839157278669  LUMO = 355.225060328227
  mo_energy =
[-115.31966023  -11.99372818   -6.92129902   -6.92129902   -6.92129902
   -1.2635342    -0.40483916   -0.40483916   -0.40483916  355.22506033]
E1 = -690.0590349141171  E_coul = 194.47418029685363
cycle= 1 E= -495.584854617263  delta_E= -2.84e-13  |g|= 1.24e-10  |ddm|= 6.63e-11
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -690.0590349141171  E_coul = 194.47418029685363
  HOMO = -0.404839157278887  LUMO = 355.225060328269
  mo_energy =
[-115.31966023  -11.99372818   -6.92129902   -6.92129902   -6.92129902
   -1.2635342    -0.40483916   -0.40483916   -0.40483916  355.22506033]
E1 = -690.0590349141169  E_coul = 194.47418029685363
Extra cycle  E= -495.584854617263  delta_E= 2.27e-13  |g|= 1.49e-12  |ddm|= 6.08e-13
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [382.17868492  75.79287083   5.67225596   0.43316586   8.02865896
   0.38420214]
grad_E = [-0.04049622  0.33065571  0.79634357 -0.04139598 -0.28169433 -3.65336304]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:55 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  384.414639299        1
[INPUT] 0    0    [1    /1   ]  54.3601466985        1
[INPUT] 0    0    [1    /1   ]  4.75468641996        1
[INPUT] 0    0    [1    /1   ]  0.488275302025       1
[INPUT] 1    0    [1    /1   ]  8.31660964362        1
[INPUT] 1    0    [1    /1   ]  0.458276406428       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [384.4146392991698, 1.0]], [0, [54.36014669851724, 1.0]], [0, [4.754686419959745, 1.0]], [0, [0.4882753020250147, 1.0]], [1, [8.316609643622987, 1.0]], [1, [0.45827640642811657, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [384.4146393]
bas 1, expnt(s) = [54.3601467]
bas 2, expnt(s) = [4.75468642]
bas 3, expnt(s) = [0.4882753]
bas 4, expnt(s) = [8.31660964]
bas 5, expnt(s) = [0.45827641]
CPU time:        24.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         384.4146393
 219.33854734  54.3601467   50.57961151   4.75468642   8.13497896
   0.4882753    1.47575272   8.31660964  41.20190434   0.45827641
   1.10000274]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.301871420729178
cond(S) = 5.328826969118617
E1 = -674.6509721988606  E_coul = 183.0167306412298
init E= -491.634241557631
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.704276115507346  LUMO = 284.644066050986
  mo_energy =
[-117.31476253  -13.0201218    -7.71870002   -7.71870002   -7.71870002
   -1.63666993   -0.70427612   -0.70427612   -0.70427612  284.64406605]
E1 = -693.9239903258323  E_coul = 196.6812339471386
cycle= 1 E= -497.242756378694  delta_E= -5.61  |g|= 0.32  |ddm|= 0.38
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.311269
diis-c [-0.0968883  1.       ]
  HOMO = -0.261719727917013  LUMO = 285.736614548213
  mo_energy =
[-1.16191376e+02 -1.19847005e+01 -6.73599938e+00 -6.73599938e+00
 -6.73599938e+00 -1.11159939e+00 -2.61719728e-01 -2.61719728e-01
 -2.61719728e-01  2.85736615e+02]
E1 = -693.9155531938264  E_coul = 196.67265216219135
cycle= 2 E= -497.242901031635  delta_E= -0.000145  |g|= 0.00175  |ddm|= 0.00261
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00181483
diis-c [-5.32792609e-08 -5.81671082e-03  1.00581671e+00]
  HOMO = -0.26173754608127  LUMO = 285.732659767311
  mo_energy =
[-1.16194707e+02 -1.19849046e+01 -6.73623617e+00 -6.73623617e+00
 -6.73623617e+00 -1.11161675e+00 -2.61737546e-01 -2.61737546e-01
 -2.61737546e-01  2.85732660e+02]
E1 = -693.9155090860861  E_coul = 196.67260805024463
cycle= 3 E= -497.242901035841  delta_E= -4.21e-09  |g|= 1.92e-06  |ddm|= 1.28e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.96257e-06
diis-c [-1.47830970e-12  3.26692580e-05 -6.03498714e-03  1.00600232e+00]
  HOMO = -0.261737515095016  LUMO = 285.732660871075
  mo_energy =
[-1.16194705e+02 -1.19849044e+01 -6.73623586e+00 -6.73623586e+00
 -6.73623586e+00 -1.11161673e+00 -2.61737515e-01 -2.61737515e-01
 -2.61737515e-01  2.85732661e+02]
E1 = -693.9155091122992  E_coul = 196.67260807645772
cycle= 4 E= -497.242901035841  delta_E= -5.68e-14  |g|= 7.31e-09  |ddm|= 1.73e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -693.9155091122992  E_coul = 196.67260807645772
  HOMO = -0.261737515096094  LUMO = 285.73266087359
  mo_energy =
[-1.16194705e+02 -1.19849044e+01 -6.73623586e+00 -6.73623586e+00
 -6.73623586e+00 -1.11161673e+00 -2.61737515e-01 -2.61737515e-01
 -2.61737515e-01  2.85732661e+02]
E1 = -693.915509112384  E_coul = 196.67260807654236
Extra cycle  E= -497.242901035842  delta_E= -1.71e-13  |g|= 6.89e-11  |ddm|= 4.92e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [384.4146393   54.3601467    4.75468642   0.4882753    8.31660964
   0.45827641]
E = -497.24290103584167
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  384.414639299        1
[INPUT] 0    0    [1    /1   ]  54.3601466985        1
[INPUT] 0    0    [1    /1   ]  4.75468641996        1
[INPUT] 0    0    [1    /1   ]  0.488275302025       1
[INPUT] 1    0    [1    /1   ]  8.31660964362        1
[INPUT] 1    0    [1    /1   ]  0.458276406428       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [384.4146392991698, 1.0]], [0, [54.36014669851724, 1.0]], [0, [4.754686419959745, 1.0]], [0, [0.4882753020250147, 1.0]], [1, [8.316609643622987, 1.0]], [1, [0.45827640642811657, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [384.4146393]
bas 1, expnt(s) = [54.3601467]
bas 2, expnt(s) = [4.75468642]
bas 3, expnt(s) = [0.4882753]
bas 4, expnt(s) = [8.31660964]
bas 5, expnt(s) = [0.45827641]
CPU time:        24.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         384.4146393
 219.33854734  54.3601467   50.57961151   4.75468642   8.13497896
   0.4882753    1.47575272   8.31660964  41.20190434   0.45827641
   1.10000274]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.301871420729178
cond(S) = 5.328826969118617
E1 = -674.6509721988606  E_coul = 183.0167306412298
init E= -491.634241557631
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.704276115507346  LUMO = 284.644066050986
  mo_energy =
[-117.31476253  -13.0201218    -7.71870002   -7.71870002   -7.71870002
   -1.63666993   -0.70427612   -0.70427612   -0.70427612  284.64406605]
E1 = -693.9239903258323  E_coul = 196.6812339471386
cycle= 1 E= -497.242756378694  delta_E= -5.61  |g|= 0.32  |ddm|= 0.38
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.311269
diis-c [-0.0968883  1.       ]
  HOMO = -0.261719727917013  LUMO = 285.736614548213
  mo_energy =
[-1.16191376e+02 -1.19847005e+01 -6.73599938e+00 -6.73599938e+00
 -6.73599938e+00 -1.11159939e+00 -2.61719728e-01 -2.61719728e-01
 -2.61719728e-01  2.85736615e+02]
E1 = -693.9155531938264  E_coul = 196.67265216219135
cycle= 2 E= -497.242901031635  delta_E= -0.000145  |g|= 0.00175  |ddm|= 0.00261
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00181483
diis-c [-5.32792609e-08 -5.81671082e-03  1.00581671e+00]
  HOMO = -0.26173754608127  LUMO = 285.732659767311
  mo_energy =
[-1.16194707e+02 -1.19849046e+01 -6.73623617e+00 -6.73623617e+00
 -6.73623617e+00 -1.11161675e+00 -2.61737546e-01 -2.61737546e-01
 -2.61737546e-01  2.85732660e+02]
E1 = -693.9155090860861  E_coul = 196.67260805024463
cycle= 3 E= -497.242901035841  delta_E= -4.21e-09  |g|= 1.92e-06  |ddm|= 1.28e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=1.96257e-06
diis-c [-1.47830970e-12  3.26692580e-05 -6.03498714e-03  1.00600232e+00]
  HOMO = -0.261737515095016  LUMO = 285.732660871075
  mo_energy =
[-1.16194705e+02 -1.19849044e+01 -6.73623586e+00 -6.73623586e+00
 -6.73623586e+00 -1.11161673e+00 -2.61737515e-01 -2.61737515e-01
 -2.61737515e-01  2.85732661e+02]
E1 = -693.9155091122992  E_coul = 196.67260807645772
cycle= 4 E= -497.242901035841  delta_E= -5.68e-14  |g|= 7.31e-09  |ddm|= 1.73e-08
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -693.9155091122992  E_coul = 196.67260807645772
  HOMO = -0.261737515096094  LUMO = 285.73266087359
  mo_energy =
[-1.16194705e+02 -1.19849044e+01 -6.73623586e+00 -6.73623586e+00
 -6.73623586e+00 -1.11161673e+00 -2.61737515e-01 -2.61737515e-01
 -2.61737515e-01  2.85732661e+02]
E1 = -693.915509112384  E_coul = 196.67260807654236
Extra cycle  E= -497.242901035842  delta_E= -1.71e-13  |g|= 6.89e-11  |ddm|= 4.92e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.328826969118617
E1 = -693.915509112384  E_coul = 196.67260807654236
init E= -497.242901035842
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.261737515095875  LUMO = 285.732660873595
  mo_energy =
[-1.16194705e+02 -1.19849044e+01 -6.73623586e+00 -6.73623586e+00
 -6.73623586e+00 -1.11161673e+00 -2.61737515e-01 -2.61737515e-01
 -2.61737515e-01  2.85732661e+02]
E1 = -693.9155091123846  E_coul = 196.67260807654299
cycle= 1 E= -497.242901035842  delta_E= 5.68e-14  |g|= 7.83e-13  |ddm|= 4.54e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -693.9155091123846  E_coul = 196.67260807654299
  HOMO = -0.261737515095871  LUMO = 285.732660873594
  mo_energy =
[-1.16194705e+02 -1.19849044e+01 -6.73623586e+00 -6.73623586e+00
 -6.73623586e+00 -1.11161673e+00 -2.61737515e-01 -2.61737515e-01
 -2.61737515e-01  2.85732661e+02]
E1 = -693.9155091123848  E_coul = 196.67260807654304
Extra cycle  E= -497.242901035842  delta_E= -1.71e-13  |g|= 1.59e-14  |ddm|= 6.4e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [384.4146393   54.3601467    4.75468642   0.4882753    8.31660964
   0.45827641]
grad_E = [ 0.01496288 -0.32378784  0.13215687  1.3085967  -0.21789069 -0.70567548]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:58 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.355272391        1
[INPUT] 0    0    [1    /1   ]  64.6405833363        1
[INPUT] 0    0    [1    /1   ]  4.70079056341        1
[INPUT] 0    0    [1    /1   ]  0.409709382213       1
[INPUT] 1    0    [1    /1   ]  8.48901871532        1
[INPUT] 1    0    [1    /1   ]  0.470839665307       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.3552723913889, 1.0]], [0, [64.6405833363182, 1.0]], [0, [4.700790563411561, 1.0]], [0, [0.40970938221322506, 1.0]], [1, [8.489018715324804, 1.0]], [1, [0.47083966530679106, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.35527239]
bas 1, expnt(s) = [64.64058334]
bas 2, expnt(s) = [4.70079056]
bas 3, expnt(s) = [0.40970938]
bas 4, expnt(s) = [8.48901872]
bas 5, expnt(s) = [0.47083967]
CPU time:        27.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.35527239
 218.88505238  64.64058334  57.59621901   4.70079056   8.0657211
   0.40970938   1.29381433   8.48901872  42.27233682   0.47083967
   1.13782559]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32930832965959
cond(S) = 5.371129307346902
E1 = -678.1777952387453  E_coul = 183.8948132185383
init E= -494.282982020207
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.703490045769263  LUMO = 316.714234094222
  mo_energy =
[-117.54563252  -13.10560576   -7.68354929   -7.68354929   -7.68354929
   -1.65719615   -0.70349005   -0.70349005   -0.70349005  316.71423409]
E1 = -696.4913634140528  E_coul = 197.91635122761707
cycle= 1 E= -498.575012186436  delta_E= -4.29  |g|= 0.208  |ddm|= 0.287
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.169964
diis-c [-0.02888787  1.        ]
  HOMO = -0.269353724386802  LUMO = 318.113688151683
  mo_energy =
[-1.16174412e+02 -1.20659482e+01 -6.70536892e+00 -6.70536892e+00
 -6.70536892e+00 -1.16483266e+00 -2.69353724e-01 -2.69353724e-01
 -2.69353724e-01  3.18113688e+02]
E1 = -696.4860668818251  E_coul = 197.91099293995532
cycle= 2 E= -498.57507394187  delta_E= -6.18e-05  |g|= 0.00119  |ddm|= 0.00184
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101847
diis-c [-5.21785379e-08 -5.87393337e-03  1.00587393e+00]
  HOMO = -0.269367862989673  LUMO = 318.11160693135
  mo_energy =
[-1.16176399e+02 -1.20660893e+01 -6.70554066e+00 -6.70554066e+00
 -6.70554066e+00 -1.16484187e+00 -2.69367863e-01 -2.69367863e-01
 -2.69367863e-01  3.18111607e+02]
E1 = -696.4860363748062  E_coul = 197.91096243092136
cycle= 3 E= -498.575073943885  delta_E= -2.02e-09  |g|= 6.66e-07  |ddm|= 1e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.24999e-07
diis-c [-3.64039813e-14  1.78028224e-05 -3.08510611e-03  1.00306730e+00]
  HOMO = -0.269367849315302  LUMO = 318.111607105093
  mo_energy =
[-1.16176399e+02 -1.20660892e+01 -6.70554060e+00 -6.70554060e+00
 -6.70554060e+00 -1.16484187e+00 -2.69367849e-01 -2.69367849e-01
 -2.69367849e-01  3.18111607e+02]
E1 = -696.4860363744097  E_coul = 197.9109624305249
cycle= 4 E= -498.575073943885  delta_E= 1.14e-13  |g|= 1.7e-09  |ddm|= 4.41e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -696.4860363744097  E_coul = 197.9109624305249
  HOMO = -0.269367849330076  LUMO = 318.111607105183
  mo_energy =
[-1.16176399e+02 -1.20660892e+01 -6.70554060e+00 -6.70554060e+00
 -6.70554060e+00 -1.16484187e+00 -2.69367849e-01 -2.69367849e-01
 -2.69367849e-01  3.18111607e+02]
E1 = -696.486036374401  E_coul = 197.91096243051626
Extra cycle  E= -498.575073943885  delta_E=    0  |g|= 1.65e-11  |ddm|= 1.08e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [383.35527239  64.64058334   4.70079056   0.40970938   8.48901872
   0.47083967]
E = -498.5750739438847
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:31:59 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.355272391        1
[INPUT] 0    0    [1    /1   ]  64.6405833363        1
[INPUT] 0    0    [1    /1   ]  4.70079056341        1
[INPUT] 0    0    [1    /1   ]  0.409709382213       1
[INPUT] 1    0    [1    /1   ]  8.48901871532        1
[INPUT] 1    0    [1    /1   ]  0.470839665307       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.3552723913889, 1.0]], [0, [64.6405833363182, 1.0]], [0, [4.700790563411561, 1.0]], [0, [0.40970938221322506, 1.0]], [1, [8.489018715324804, 1.0]], [1, [0.47083966530679106, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.35527239]
bas 1, expnt(s) = [64.64058334]
bas 2, expnt(s) = [4.70079056]
bas 3, expnt(s) = [0.40970938]
bas 4, expnt(s) = [8.48901872]
bas 5, expnt(s) = [0.47083967]
CPU time:        27.88
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.35527239
 218.88505238  64.64058334  57.59621901   4.70079056   8.0657211
   0.40970938   1.29381433   8.48901872  42.27233682   0.47083967
   1.13782559]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32930832965959
cond(S) = 5.371129307346902
E1 = -678.1777952387453  E_coul = 183.8948132185383
init E= -494.282982020207
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.703490045769263  LUMO = 316.714234094222
  mo_energy =
[-117.54563252  -13.10560576   -7.68354929   -7.68354929   -7.68354929
   -1.65719615   -0.70349005   -0.70349005   -0.70349005  316.71423409]
E1 = -696.4913634140528  E_coul = 197.91635122761707
cycle= 1 E= -498.575012186436  delta_E= -4.29  |g|= 0.208  |ddm|= 0.287
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.169964
diis-c [-0.02888787  1.        ]
  HOMO = -0.269353724386802  LUMO = 318.113688151683
  mo_energy =
[-1.16174412e+02 -1.20659482e+01 -6.70536892e+00 -6.70536892e+00
 -6.70536892e+00 -1.16483266e+00 -2.69353724e-01 -2.69353724e-01
 -2.69353724e-01  3.18113688e+02]
E1 = -696.4860668818251  E_coul = 197.91099293995532
cycle= 2 E= -498.57507394187  delta_E= -6.18e-05  |g|= 0.00119  |ddm|= 0.00184
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00101847
diis-c [-5.21785379e-08 -5.87393337e-03  1.00587393e+00]
  HOMO = -0.269367862989673  LUMO = 318.11160693135
  mo_energy =
[-1.16176399e+02 -1.20660893e+01 -6.70554066e+00 -6.70554066e+00
 -6.70554066e+00 -1.16484187e+00 -2.69367863e-01 -2.69367863e-01
 -2.69367863e-01  3.18111607e+02]
E1 = -696.4860363748062  E_coul = 197.91096243092136
cycle= 3 E= -498.575073943885  delta_E= -2.02e-09  |g|= 6.66e-07  |ddm|= 1e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.24999e-07
diis-c [-3.64039813e-14  1.78028224e-05 -3.08510611e-03  1.00306730e+00]
  HOMO = -0.269367849315302  LUMO = 318.111607105093
  mo_energy =
[-1.16176399e+02 -1.20660892e+01 -6.70554060e+00 -6.70554060e+00
 -6.70554060e+00 -1.16484187e+00 -2.69367849e-01 -2.69367849e-01
 -2.69367849e-01  3.18111607e+02]
E1 = -696.4860363744097  E_coul = 197.9109624305249
cycle= 4 E= -498.575073943885  delta_E= 1.14e-13  |g|= 1.7e-09  |ddm|= 4.41e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -696.4860363744097  E_coul = 197.9109624305249
  HOMO = -0.269367849330076  LUMO = 318.111607105183
  mo_energy =
[-1.16176399e+02 -1.20660892e+01 -6.70554060e+00 -6.70554060e+00
 -6.70554060e+00 -1.16484187e+00 -2.69367849e-01 -2.69367849e-01
 -2.69367849e-01  3.18111607e+02]
E1 = -696.486036374401  E_coul = 197.91096243051626
Extra cycle  E= -498.575073943885  delta_E=    0  |g|= 1.65e-11  |ddm|= 1.08e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.371129307346902
E1 = -696.486036374401  E_coul = 197.91096243051626
init E= -498.575073943885
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.269367849330152  LUMO = 318.111607105187
  mo_energy =
[-1.16176399e+02 -1.20660892e+01 -6.70554060e+00 -6.70554060e+00
 -6.70554060e+00 -1.16484187e+00 -2.69367849e-01 -2.69367849e-01
 -2.69367849e-01  3.18111607e+02]
E1 = -696.4860363744011  E_coul = 197.91096243051624
cycle= 1 E= -498.575073943885  delta_E= -1.71e-13  |g|= 5.56e-14  |ddm|= 9.18e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -696.4860363744011  E_coul = 197.91096243051624
  HOMO = -0.26936784933015  LUMO = 318.111607105187
  mo_energy =
[-1.16176399e+02 -1.20660892e+01 -6.70554060e+00 -6.70554060e+00
 -6.70554060e+00 -1.16484187e+00 -2.69367849e-01 -2.69367849e-01
 -2.69367849e-01  3.18111607e+02]
E1 = -696.486036374401  E_coul = 197.9109624305162
Extra cycle  E= -498.575073943885  delta_E= 5.68e-14  |g|= 2.03e-13  |ddm|= 2.43e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [383.35527239  64.64058334   4.70079056   0.40970938   8.48901872
   0.47083967]
grad_E = [-0.01597916  0.05931246  0.04222275  0.16584803 -0.05238147 -0.59483851]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.535088736        1
[INPUT] 0    0    [1    /1   ]  63.0070110165        1
[INPUT] 0    0    [1    /1   ]  4.64495017411        1
[INPUT] 0    0    [1    /1   ]  0.392970557166       1
[INPUT] 1    0    [1    /1   ]  8.55512757055        1
[INPUT] 1    0    [1    /1   ]  0.483634152733       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.53508873613765, 1.0]], [0, [63.007011016511676, 1.0]], [0, [4.64495017411262, 1.0]], [0, [0.3929705571657074, 1.0]], [1, [8.55512757055493, 1.0]], [1, [0.48363415273276567, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.53508874]
bas 1, expnt(s) = [63.00701102]
bas 2, expnt(s) = [4.64495017]
bas 3, expnt(s) = [0.39297056]
bas 4, expnt(s) = [8.55512757]
bas 5, expnt(s) = [0.48363415]
CPU time:        30.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.53508874
 218.96205041  63.00701102  56.50107131   4.64495017   7.99375473
   0.39297056   1.2539639    8.55512757  42.68423527   0.48363415
   1.17660474]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321158866026806
cond(S) = 5.269804144916824
E1 = -678.6317588456791  E_coul = 184.27823373677498
init E= -494.353525108904
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694847238021004  LUMO = 311.485643625409
  mo_energy =
[-117.5298547   -13.06360911   -7.66460303   -7.66460303   -7.66460303
   -1.64078742   -0.69484724   -0.69484724   -0.69484724  311.48564363]
E1 = -696.935986354131  E_coul = 198.29234565837064
cycle= 1 E= -498.64364069576  delta_E= -4.29  |g|= 0.229  |ddm|= 0.304
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.191215
diis-c [-0.03656309  1.        ]
  HOMO = -0.251695560254983  LUMO = 312.833979108629
  mo_energy =
[-1.16199013e+02 -1.20216887e+01 -6.68303967e+00 -6.68303967e+00
 -6.68303967e+00 -1.15077774e+00 -2.51695560e-01 -2.51695560e-01
 -2.51695560e-01  3.12833979e+02]
E1 = -696.9301027507545  E_coul = 198.28638737186554
cycle= 2 E= -498.643715378889  delta_E= -7.47e-05  |g|= 0.0013  |ddm|= 0.00199
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0011335
diis-c [-5.50660730e-08 -5.83330036e-03  1.00583330e+00]
  HOMO = -0.251711804842812  LUMO = 312.831613008565
  mo_energy =
[-1.16201232e+02 -1.20218414e+01 -6.68322855e+00 -6.68322855e+00
 -6.68322855e+00 -1.15078722e+00 -2.51711805e-01 -2.51711805e-01
 -2.51711805e-01  3.12831613e+02]
E1 = -696.9300690914521  E_coul = 198.2863537101648
cycle= 3 E= -498.643715381287  delta_E= -2.4e-09  |g|= 6.56e-07  |ddm|= 1.08e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.8083e-07
diis-c [-1.16920964e-14  1.63888562e-05 -2.87837676e-03  1.00286199e+00]
  HOMO = -0.251711789266176  LUMO = 312.83161315897
  mo_energy =
[-1.16201231e+02 -1.20218414e+01 -6.68322847e+00 -6.68322847e+00
 -6.68322847e+00 -1.15078721e+00 -2.51711789e-01 -2.51711789e-01
 -2.51711789e-01  3.12831613e+02]
E1 = -696.9300690913377  E_coul = 198.28635371005038
cycle= 4 E= -498.643715381287  delta_E= -5.68e-14  |g|= 9.74e-10  |ddm|= 4.68e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -696.9300690913377  E_coul = 198.28635371005038
  HOMO = -0.251711789275104  LUMO = 312.831613158959
  mo_energy =
[-1.16201231e+02 -1.20218414e+01 -6.68322847e+00 -6.68322847e+00
 -6.68322847e+00 -1.15078721e+00 -2.51711789e-01 -2.51711789e-01
 -2.51711789e-01  3.12831613e+02]
E1 = -696.9300690913319  E_coul = 198.28635371004438
Extra cycle  E= -498.643715381288  delta_E= -1.71e-13  |g|= 9.36e-12  |ddm|= 6.27e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [383.53508874  63.00701102   4.64495017   0.39297056   8.55512757
   0.48363415]
E = -498.6437153812875
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:02 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.535088736        1
[INPUT] 0    0    [1    /1   ]  63.0070110165        1
[INPUT] 0    0    [1    /1   ]  4.64495017411        1
[INPUT] 0    0    [1    /1   ]  0.392970557166       1
[INPUT] 1    0    [1    /1   ]  8.55512757055        1
[INPUT] 1    0    [1    /1   ]  0.483634152733       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.53508873613765, 1.0]], [0, [63.007011016511676, 1.0]], [0, [4.64495017411262, 1.0]], [0, [0.3929705571657074, 1.0]], [1, [8.55512757055493, 1.0]], [1, [0.48363415273276567, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.53508874]
bas 1, expnt(s) = [63.00701102]
bas 2, expnt(s) = [4.64495017]
bas 3, expnt(s) = [0.39297056]
bas 4, expnt(s) = [8.55512757]
bas 5, expnt(s) = [0.48363415]
CPU time:        30.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.53508874
 218.96205041  63.00701102  56.50107131   4.64495017   7.99375473
   0.39297056   1.2539639    8.55512757  42.68423527   0.48363415
   1.17660474]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321158866026806
cond(S) = 5.269804144916824
E1 = -678.6317588456791  E_coul = 184.27823373677498
init E= -494.353525108904
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694847238021004  LUMO = 311.485643625409
  mo_energy =
[-117.5298547   -13.06360911   -7.66460303   -7.66460303   -7.66460303
   -1.64078742   -0.69484724   -0.69484724   -0.69484724  311.48564363]
E1 = -696.935986354131  E_coul = 198.29234565837064
cycle= 1 E= -498.64364069576  delta_E= -4.29  |g|= 0.229  |ddm|= 0.304
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.191215
diis-c [-0.03656309  1.        ]
  HOMO = -0.251695560254983  LUMO = 312.833979108629
  mo_energy =
[-1.16199013e+02 -1.20216887e+01 -6.68303967e+00 -6.68303967e+00
 -6.68303967e+00 -1.15077774e+00 -2.51695560e-01 -2.51695560e-01
 -2.51695560e-01  3.12833979e+02]
E1 = -696.9301027507545  E_coul = 198.28638737186554
cycle= 2 E= -498.643715378889  delta_E= -7.47e-05  |g|= 0.0013  |ddm|= 0.00199
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0011335
diis-c [-5.50660730e-08 -5.83330036e-03  1.00583330e+00]
  HOMO = -0.251711804842812  LUMO = 312.831613008565
  mo_energy =
[-1.16201232e+02 -1.20218414e+01 -6.68322855e+00 -6.68322855e+00
 -6.68322855e+00 -1.15078722e+00 -2.51711805e-01 -2.51711805e-01
 -2.51711805e-01  3.12831613e+02]
E1 = -696.9300690914521  E_coul = 198.2863537101648
cycle= 3 E= -498.643715381287  delta_E= -2.4e-09  |g|= 6.56e-07  |ddm|= 1.08e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.8083e-07
diis-c [-1.16920964e-14  1.63888562e-05 -2.87837676e-03  1.00286199e+00]
  HOMO = -0.251711789266176  LUMO = 312.83161315897
  mo_energy =
[-1.16201231e+02 -1.20218414e+01 -6.68322847e+00 -6.68322847e+00
 -6.68322847e+00 -1.15078721e+00 -2.51711789e-01 -2.51711789e-01
 -2.51711789e-01  3.12831613e+02]
E1 = -696.9300690913377  E_coul = 198.28635371005038
cycle= 4 E= -498.643715381287  delta_E= -5.68e-14  |g|= 9.74e-10  |ddm|= 4.68e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -696.9300690913377  E_coul = 198.28635371005038
  HOMO = -0.251711789275104  LUMO = 312.831613158959
  mo_energy =
[-1.16201231e+02 -1.20218414e+01 -6.68322847e+00 -6.68322847e+00
 -6.68322847e+00 -1.15078721e+00 -2.51711789e-01 -2.51711789e-01
 -2.51711789e-01  3.12831613e+02]
E1 = -696.9300690913319  E_coul = 198.28635371004438
Extra cycle  E= -498.643715381288  delta_E= -1.71e-13  |g|= 9.36e-12  |ddm|= 6.27e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.269804144916824
E1 = -696.9300690913319  E_coul = 198.28635371004438
init E= -498.643715381288
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.25171178927515  LUMO = 312.831613158961
  mo_energy =
[-1.16201231e+02 -1.20218414e+01 -6.68322847e+00 -6.68322847e+00
 -6.68322847e+00 -1.15078721e+00 -2.51711789e-01 -2.51711789e-01
 -2.51711789e-01  3.12831613e+02]
E1 = -696.9300690913319  E_coul = 198.28635371004435
cycle= 1 E= -498.643715381288  delta_E= -5.68e-14  |g|= 2.27e-14  |ddm|= 5.29e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -696.9300690913319  E_coul = 198.28635371004435
  HOMO = -0.251711789275152  LUMO = 312.831613158961
  mo_energy =
[-1.16201231e+02 -1.20218414e+01 -6.68322847e+00 -6.68322847e+00
 -6.68322847e+00 -1.15078721e+00 -2.51711789e-01 -2.51711789e-01
 -2.51711789e-01  3.12831613e+02]
E1 = -696.9300690913318  E_coul = 198.2863537100442
Extra cycle  E= -498.643715381288  delta_E= -5.68e-14  |g|= 7.46e-14  |ddm|= 4.16e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [383.53508874  63.00701102   4.64495017   0.39297056   8.55512757
   0.48363415]
grad_E = [-0.01164709  0.00879434  0.00420419 -0.02387062 -0.01889975 -0.22780158]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.583072818        1
[INPUT] 0    0    [1    /1   ]  62.6722086669        1
[INPUT] 0    0    [1    /1   ]  4.63711632059        1
[INPUT] 0    0    [1    /1   ]  0.394738851935       1
[INPUT] 1    0    [1    /1   ]  8.58321563732        1
[INPUT] 1    0    [1    /1   ]  0.490269766976       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.58307281791804, 1.0]], [0, [62.67220866690332, 1.0]], [0, [4.637116320592531, 1.0]], [0, [0.39473885193463476, 1.0]], [1, [8.58321563731888, 1.0]], [1, [0.49026976697632163, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.58307282]
bas 1, expnt(s) = [62.67220867]
bas 2, expnt(s) = [4.63711632]
bas 3, expnt(s) = [0.39473885]
bas 4, expnt(s) = [8.58321564]
bas 5, expnt(s) = [0.49026977]
CPU time:        33.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.58307282
 218.98259585  62.67220867  56.27574776   4.63711632   7.98364131
   0.39473885   1.25819348   8.58321564  42.8594824    0.49026977
   1.19681847]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31309686982175
cond(S) = 5.259987590421314
E1 = -679.0045321417416  E_coul = 184.63757304460702
init E= -494.366959097135
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.686187339862708  LUMO = 310.478313194061
  mo_energy =
[-117.48963559  -13.03163561   -7.64116225   -7.64116225   -7.64116225
   -1.6329621    -0.68618734   -0.68618734   -0.68618734  310.47831319]
E1 = -697.4100526221405  E_coul = 198.7636583429759
cycle= 1 E= -498.646394279165  delta_E= -4.28  |g|= 0.233  |ddm|= 0.31
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.19598
diis-c [-0.03840798  1.        ]
  HOMO = -0.235917059953166  LUMO = 311.825465819225
  mo_energy =
[-1.16157700e+02 -1.19824148e+01 -6.65200697e+00 -6.65200697e+00
 -6.65200697e+00 -1.13752012e+00 -2.35917060e-01 -2.35917060e-01
 -2.35917060e-01  3.11825466e+02]
E1 = -697.404033711328  E_coul = 198.75756172543475
cycle= 2 E= -498.646471985893  delta_E= -7.77e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115969
diis-c [-5.52386223e-08 -5.82840260e-03  1.00582840e+00]
  HOMO = -0.235934097906562  LUMO = 311.823034573172
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219972e+00 -6.65219972e+00
 -6.65219972e+00 -1.13752984e+00 -2.35934098e-01 -2.35934098e-01
 -2.35934098e-01  3.11823035e+02]
E1 = -697.4039993375525  E_coul = 198.757527349172
cycle= 3 E= -498.64647198838  delta_E= -2.49e-09  |g|= 6.56e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.71216e-07
diis-c [-7.42908045e-15  1.61625799e-05 -2.84403373e-03  1.00282787e+00]
  HOMO = -0.235934081666916  LUMO = 311.823034729311
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219965e+00 -6.65219965e+00
 -6.65219965e+00 -1.13752983e+00 -2.35934082e-01 -2.35934082e-01
 -2.35934082e-01  3.11823035e+02]
E1 = -697.4039993376961  E_coul = 198.75752734931544
cycle= 4 E= -498.646471988381  delta_E= -1.71e-13  |g|= 7.8e-10  |ddm|= 4.77e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.4039993376961  E_coul = 198.75752734931544
  HOMO = -0.235934081674318  LUMO = 311.823034729289
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219965e+00 -6.65219965e+00
 -6.65219965e+00 -1.13752983e+00 -2.35934082e-01 -2.35934082e-01
 -2.35934082e-01  3.11823035e+02]
E1 = -697.4039993376912  E_coul = 198.7575273493104
Extra cycle  E= -498.646471988381  delta_E= -1.14e-13  |g|= 7.56e-12  |ddm|= 5.04e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [383.58307282  62.67220867   4.63711632   0.39473885   8.58321564
   0.49026977]
E = -498.64647198838077
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:05 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.583072818        1
[INPUT] 0    0    [1    /1   ]  62.6722086669        1
[INPUT] 0    0    [1    /1   ]  4.63711632059        1
[INPUT] 0    0    [1    /1   ]  0.394738851935       1
[INPUT] 1    0    [1    /1   ]  8.58321563732        1
[INPUT] 1    0    [1    /1   ]  0.490269766976       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.58307281791804, 1.0]], [0, [62.67220866690332, 1.0]], [0, [4.637116320592531, 1.0]], [0, [0.39473885193463476, 1.0]], [1, [8.58321563731888, 1.0]], [1, [0.49026976697632163, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.58307282]
bas 1, expnt(s) = [62.67220867]
bas 2, expnt(s) = [4.63711632]
bas 3, expnt(s) = [0.39473885]
bas 4, expnt(s) = [8.58321564]
bas 5, expnt(s) = [0.49026977]
CPU time:        34.16
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.58307282
 218.98259585  62.67220867  56.27574776   4.63711632   7.98364131
   0.39473885   1.25819348   8.58321564  42.8594824    0.49026977
   1.19681847]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.31309686982175
cond(S) = 5.259987590421314
E1 = -679.0045321417416  E_coul = 184.63757304460702
init E= -494.366959097135
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.686187339862708  LUMO = 310.478313194061
  mo_energy =
[-117.48963559  -13.03163561   -7.64116225   -7.64116225   -7.64116225
   -1.6329621    -0.68618734   -0.68618734   -0.68618734  310.47831319]
E1 = -697.4100526221405  E_coul = 198.7636583429759
cycle= 1 E= -498.646394279165  delta_E= -4.28  |g|= 0.233  |ddm|= 0.31
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.19598
diis-c [-0.03840798  1.        ]
  HOMO = -0.235917059953166  LUMO = 311.825465819225
  mo_energy =
[-1.16157700e+02 -1.19824148e+01 -6.65200697e+00 -6.65200697e+00
 -6.65200697e+00 -1.13752012e+00 -2.35917060e-01 -2.35917060e-01
 -2.35917060e-01  3.11825466e+02]
E1 = -697.404033711328  E_coul = 198.75756172543475
cycle= 2 E= -498.646471985893  delta_E= -7.77e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115969
diis-c [-5.52386223e-08 -5.82840260e-03  1.00582840e+00]
  HOMO = -0.235934097906562  LUMO = 311.823034573172
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219972e+00 -6.65219972e+00
 -6.65219972e+00 -1.13752984e+00 -2.35934098e-01 -2.35934098e-01
 -2.35934098e-01  3.11823035e+02]
E1 = -697.4039993375525  E_coul = 198.757527349172
cycle= 3 E= -498.64647198838  delta_E= -2.49e-09  |g|= 6.56e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.71216e-07
diis-c [-7.42908045e-15  1.61625799e-05 -2.84403373e-03  1.00282787e+00]
  HOMO = -0.235934081666916  LUMO = 311.823034729311
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219965e+00 -6.65219965e+00
 -6.65219965e+00 -1.13752983e+00 -2.35934082e-01 -2.35934082e-01
 -2.35934082e-01  3.11823035e+02]
E1 = -697.4039993376961  E_coul = 198.75752734931544
cycle= 4 E= -498.646471988381  delta_E= -1.71e-13  |g|= 7.8e-10  |ddm|= 4.77e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.4039993376961  E_coul = 198.75752734931544
  HOMO = -0.235934081674318  LUMO = 311.823034729289
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219965e+00 -6.65219965e+00
 -6.65219965e+00 -1.13752983e+00 -2.35934082e-01 -2.35934082e-01
 -2.35934082e-01  3.11823035e+02]
E1 = -697.4039993376912  E_coul = 198.7575273493104
Extra cycle  E= -498.646471988381  delta_E= -1.14e-13  |g|= 7.56e-12  |ddm|= 5.04e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.259987590421314
E1 = -697.4039993376912  E_coul = 198.7575273493104
init E= -498.646471988381
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.235934081674358  LUMO = 311.823034729291
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219965e+00 -6.65219965e+00
 -6.65219965e+00 -1.13752983e+00 -2.35934082e-01 -2.35934082e-01
 -2.35934082e-01  3.11823035e+02]
E1 = -697.4039993376914  E_coul = 198.75752734931046
cycle= 1 E= -498.646471988381  delta_E= -1.71e-13  |g|= 1.43e-13  |ddm|= 4.28e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -697.4039993376914  E_coul = 198.75752734931046
  HOMO = -0.235934081674363  LUMO = 311.823034729291
  mo_energy =
[-1.16159971e+02 -1.19825702e+01 -6.65219965e+00 -6.65219965e+00
 -6.65219965e+00 -1.13752983e+00 -2.35934082e-01 -2.35934082e-01
 -2.35934082e-01  3.11823035e+02]
E1 = -697.4039993376912  E_coul = 198.7575273493104
Extra cycle  E= -498.646471988381  delta_E= 1.71e-13  |g|= 1.24e-13  |ddm|= 3.41e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [383.58307282  62.67220867   4.63711632   0.39473885   8.58321564
   0.49026977]
grad_E = [-0.01072907 -0.0020352   0.00165617  0.03165567 -0.00301063 -0.00225403]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.593091422        1
[INPUT] 0    0    [1    /1   ]  62.6836753908        1
[INPUT] 0    0    [1    /1   ]  4.63488148052        1
[INPUT] 0    0    [1    /1   ]  0.392214249727       1
[INPUT] 1    0    [1    /1   ]  8.58744626958        1
[INPUT] 1    0    [1    /1   ]  0.490589885942       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.5930914224494, 1.0]], [0, [62.68367539078777, 1.0]], [0, [4.63488148051627, 1.0]], [0, [0.3922142497271468, 1.0]], [1, [8.587446269579358, 1.0]], [1, [0.4905898859418929, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.59309142]
bas 1, expnt(s) = [62.68367539]
bas 2, expnt(s) = [4.63488148]
bas 3, expnt(s) = [0.39221425]
bas 4, expnt(s) = [8.58744627]
bas 5, expnt(s) = [0.49058989]
CPU time:        37.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.59309142
 218.98688546  62.68367539  56.28346989   4.63488148   7.98075538
   0.39221425   1.25215344   8.58744627  42.88589061   0.49058989
   1.19779537]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.313010425775754
cond(S) = 5.254882099492774
E1 = -678.9859463822208  E_coul = 184.62157248038733
init E= -494.364373901834
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687063619008053  LUMO = 310.507058682265
  mo_energy =
[-117.48871376  -13.03283344   -7.64294289   -7.64294289   -7.64294289
   -1.63280923   -0.68706362   -0.68706362   -0.68706362  310.50705868]
E1 = -697.3941459980256  E_coul = 198.74758405841405
cycle= 1 E= -498.646561939612  delta_E= -4.28  |g|= 0.233  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195902
diis-c [-0.03837761  1.        ]
  HOMO = -0.236625336675953  LUMO = 311.854396838192
  mo_energy =
[-1.16156810e+02 -1.19834871e+01 -6.65368972e+00 -6.65368972e+00
 -6.65368972e+00 -1.13828495e+00 -2.36625337e-01 -2.36625337e-01
 -2.36625337e-01  3.11854397e+02]
E1 = -697.3881263511912  E_coul = 198.74148661376523
cycle= 2 E= -498.646639737426  delta_E= -7.78e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115871
diis-c [-5.59238733e-08 -5.82396657e-03  1.00582397e+00]
  HOMO = -0.236642417975298  LUMO = 311.851967586384
  mo_energy =
[-1.16159082e+02 -1.19836426e+01 -6.65388277e+00 -6.65388277e+00
 -6.65388277e+00 -1.13829459e+00 -2.36642418e-01 -2.36642418e-01
 -2.36642418e-01  3.11851968e+02]
E1 = -697.3880919739709  E_coul = 198.7414522340552
cycle= 3 E= -498.646639739916  delta_E= -2.49e-09  |g|= 6.6e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.04 sec
diis-norm(errvec)=6.8026e-07
diis-c [-9.48125451e-15  1.62469015e-05 -2.85963639e-03  1.00284339e+00]
  HOMO = -0.236642401801409  LUMO = 311.851967739118
  mo_energy =
[-1.16159081e+02 -1.19836425e+01 -6.65388269e+00 -6.65388269e+00
 -6.65388269e+00 -1.13829458e+00 -2.36642402e-01 -2.36642402e-01
 -2.36642402e-01  3.11851968e+02]
E1 = -697.3880919739623  E_coul = 198.74145223404676
cycle= 4 E= -498.646639739916  delta_E= 5.68e-14  |g|= 8.79e-10  |ddm|= 4.75e-09
    CPU time for cycle= 4      0.03 sec, wall time      0.04 sec
E1 = -697.3880919739623  E_coul = 198.74145223404676
  HOMO = -0.236642401809752  LUMO = 311.851967739098
  mo_energy =
[-1.16159081e+02 -1.19836425e+01 -6.65388269e+00 -6.65388269e+00
 -6.65388269e+00 -1.13829458e+00 -2.36642402e-01 -2.36642402e-01
 -2.36642402e-01  3.11851968e+02]
E1 = -697.388091973957  E_coul = 198.74145223404122
Extra cycle  E= -498.646639739916  delta_E= -1.71e-13  |g|= 8.53e-12  |ddm|= 5.68e-12
    CPU time for scf_cycle      0.13 sec, wall time      0.16 sec
exp = [383.59309142  62.68367539   4.63488148   0.39221425   8.58744627
   0.49058989]
E = -498.64663973991577
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:08 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.593091422        1
[INPUT] 0    0    [1    /1   ]  62.6836753908        1
[INPUT] 0    0    [1    /1   ]  4.63488148052        1
[INPUT] 0    0    [1    /1   ]  0.392214249727       1
[INPUT] 1    0    [1    /1   ]  8.58744626958        1
[INPUT] 1    0    [1    /1   ]  0.490589885942       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.5930914224494, 1.0]], [0, [62.68367539078777, 1.0]], [0, [4.63488148051627, 1.0]], [0, [0.3922142497271468, 1.0]], [1, [8.587446269579358, 1.0]], [1, [0.4905898859418929, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.59309142]
bas 1, expnt(s) = [62.68367539]
bas 2, expnt(s) = [4.63488148]
bas 3, expnt(s) = [0.39221425]
bas 4, expnt(s) = [8.58744627]
bas 5, expnt(s) = [0.49058989]
CPU time:        37.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.59309142
 218.98688546  62.68367539  56.28346989   4.63488148   7.98075538
   0.39221425   1.25215344   8.58744627  42.88589061   0.49058989
   1.19779537]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.313010425775754
cond(S) = 5.254882099492774
E1 = -678.9859463822208  E_coul = 184.62157248038733
init E= -494.364373901834
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687063619008053  LUMO = 310.507058682265
  mo_energy =
[-117.48871376  -13.03283344   -7.64294289   -7.64294289   -7.64294289
   -1.63280923   -0.68706362   -0.68706362   -0.68706362  310.50705868]
E1 = -697.3941459980256  E_coul = 198.74758405841405
cycle= 1 E= -498.646561939612  delta_E= -4.28  |g|= 0.233  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195902
diis-c [-0.03837761  1.        ]
  HOMO = -0.236625336675953  LUMO = 311.854396838192
  mo_energy =
[-1.16156810e+02 -1.19834871e+01 -6.65368972e+00 -6.65368972e+00
 -6.65368972e+00 -1.13828495e+00 -2.36625337e-01 -2.36625337e-01
 -2.36625337e-01  3.11854397e+02]
E1 = -697.3881263511912  E_coul = 198.74148661376523
cycle= 2 E= -498.646639737426  delta_E= -7.78e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115871
diis-c [-5.59238733e-08 -5.82396657e-03  1.00582397e+00]
  HOMO = -0.236642417975298  LUMO = 311.851967586384
  mo_energy =
[-1.16159082e+02 -1.19836426e+01 -6.65388277e+00 -6.65388277e+00
 -6.65388277e+00 -1.13829459e+00 -2.36642418e-01 -2.36642418e-01
 -2.36642418e-01  3.11851968e+02]
E1 = -697.3880919739709  E_coul = 198.7414522340552
cycle= 3 E= -498.646639739916  delta_E= -2.49e-09  |g|= 6.6e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.8026e-07
diis-c [-9.48125451e-15  1.62469015e-05 -2.85963639e-03  1.00284339e+00]
  HOMO = -0.236642401801409  LUMO = 311.851967739118
  mo_energy =
[-1.16159081e+02 -1.19836425e+01 -6.65388269e+00 -6.65388269e+00
 -6.65388269e+00 -1.13829458e+00 -2.36642402e-01 -2.36642402e-01
 -2.36642402e-01  3.11851968e+02]
E1 = -697.3880919739623  E_coul = 198.74145223404676
cycle= 4 E= -498.646639739916  delta_E= 5.68e-14  |g|= 8.79e-10  |ddm|= 4.75e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.3880919739623  E_coul = 198.74145223404676
  HOMO = -0.236642401809752  LUMO = 311.851967739098
  mo_energy =
[-1.16159081e+02 -1.19836425e+01 -6.65388269e+00 -6.65388269e+00
 -6.65388269e+00 -1.13829458e+00 -2.36642402e-01 -2.36642402e-01
 -2.36642402e-01  3.11851968e+02]
E1 = -697.388091973957  E_coul = 198.74145223404122
Extra cycle  E= -498.646639739916  delta_E= -1.71e-13  |g|= 8.53e-12  |ddm|= 5.68e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.254882099492774
E1 = -697.388091973957  E_coul = 198.74145223404122
init E= -498.646639739916
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.236642401809793  LUMO = 311.8519677391
  mo_energy =
[-1.16159081e+02 -1.19836425e+01 -6.65388269e+00 -6.65388269e+00
 -6.65388269e+00 -1.13829458e+00 -2.36642402e-01 -2.36642402e-01
 -2.36642402e-01  3.11851968e+02]
E1 = -697.3880919739568  E_coul = 198.7414522340412
cycle= 1 E= -498.646639739916  delta_E= 1.71e-13  |g|= 2.46e-13  |ddm|= 4.73e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -697.3880919739568  E_coul = 198.7414522340412
  HOMO = -0.236642401809792  LUMO = 311.8519677391
  mo_energy =
[-1.16159081e+02 -1.19836425e+01 -6.65388269e+00 -6.65388269e+00
 -6.65388269e+00 -1.13829458e+00 -2.36642402e-01 -2.36642402e-01
 -2.36642402e-01  3.11851968e+02]
E1 = -697.3880919739571  E_coul = 198.7414522340412
Extra cycle  E= -498.646639739916  delta_E= -3.41e-13  |g|= 1.14e-13  |ddm|= 2.39e-15
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [383.59309142  62.68367539   4.63488148   0.39221425   8.58744627
   0.49058989]
grad_E = [-1.07580728e-02 -1.61475919e-03 -3.71868991e-04 -7.52347103e-03
 -7.79220579e-05 -1.95817133e-03]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.624785832        1
[INPUT] 0    0    [1    /1   ]  62.7133525163        1
[INPUT] 0    0    [1    /1   ]  4.6326950506         1
[INPUT] 0    0    [1    /1   ]  0.390344252224       1
[INPUT] 1    0    [1    /1   ]  8.59357066577        1
[INPUT] 1    0    [1    /1   ]  0.491300180597       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.6247858315435, 1.0]], [0, [62.713352516275556, 1.0]], [0, [4.632695050597359, 1.0]], [0, [0.3903442522239694, 1.0]], [1, [8.593570665768183, 1.0]], [1, [0.4913001805967952, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.62478583]
bas 1, expnt(s) = [62.71335252]
bas 2, expnt(s) = [4.63269505]
bas 3, expnt(s) = [0.39034425]
bas 4, expnt(s) = [8.59357067]
bas 5, expnt(s) = [0.49130018]
CPU time:        40.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.62478583
 219.00045567  62.71335252  56.30345395   4.63269505   7.97793162
   0.39034425   1.24767326   8.59357067  42.92412573   0.49130018
   1.19996353]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.312288333725345
cond(S) = 5.251391500734585
E1 = -679.001963277275  E_coul = 184.63752291258567
init E= -494.364440364689
    CPU time for initialize scf      0.03 sec, wall time      0.03 sec
  HOMO = -0.687211247322589  LUMO = 310.614792059659
  mo_energy =
[-117.48381985  -13.03167338   -7.64248429   -7.64248429   -7.64248429
   -1.63219478   -0.68721125   -0.68721125   -0.68721125  310.61479206]
E1 = -697.4231429256488  E_coul = 198.77626472791394
cycle= 1 E= -498.646878197735  delta_E= -4.28  |g|= 0.233  |ddm|= 0.311
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.19567
diis-c [-0.03828665  1.        ]
  HOMO = -0.23607189836599  LUMO = 311.96382019016
  mo_energy =
[-1.16150542e+02 -1.19814652e+01 -6.65239076e+00 -6.65239076e+00
 -6.65239076e+00 -1.13795068e+00 -2.36071898e-01 -2.36071898e-01
 -2.36071898e-01  3.11963820e+02]
E1 = -697.4171262216589  E_coul = 198.7701702194223
cycle= 2 E= -498.646956002237  delta_E= -7.78e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115694
diis-c [-5.65946990e-08 -5.82005743e-03  1.00582006e+00]
  HOMO = -0.23608904788829  LUMO = 311.961395152864
  mo_energy =
[-1.16152810e+02 -1.19816207e+01 -6.65258403e+00 -6.65258403e+00
 -6.65258403e+00 -1.13796026e+00 -2.36089048e-01 -2.36089048e-01
 -2.36089048e-01  3.11961395e+02]
E1 = -697.4170918606042  E_coul = 198.77013585587744
cycle= 3 E= -498.646956004727  delta_E= -2.49e-09  |g|= 6.64e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.03 sec
diis-norm(errvec)=6.90659e-07
diis-c [-1.21885259e-14  1.63622124e-05 -2.87974284e-03  1.00286338e+00]
  HOMO = -0.236089031779473  LUMO = 311.961395303927
  mo_energy =
[-1.16152810e+02 -1.19816206e+01 -6.65258396e+00 -6.65258396e+00
 -6.65258396e+00 -1.13796026e+00 -2.36089032e-01 -2.36089032e-01
 -2.36089032e-01  3.11961395e+02]
E1 = -697.4170918604532  E_coul = 198.77013585572658
cycle= 4 E= -498.646956004727  delta_E= 1.14e-13  |g|= 9.95e-10  |ddm|= 4.74e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.4170918604532  E_coul = 198.77013585572658
  HOMO = -0.236089031788928  LUMO = 311.96139530391
  mo_energy =
[-1.16152810e+02 -1.19816206e+01 -6.65258396e+00 -6.65258396e+00
 -6.65258396e+00 -1.13796026e+00 -2.36089032e-01 -2.36089032e-01
 -2.36089032e-01  3.11961395e+02]
E1 = -697.4170918604466  E_coul = 198.7701358557202
Extra cycle  E= -498.646956004726  delta_E= 2.27e-13  |g|= 9.72e-12  |ddm|= 6.42e-12
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [383.62478583  62.71335252   4.63269505   0.39034425   8.59357067
   0.49130018]
E = -498.64695600472635
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:12 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.624785832        1
[INPUT] 0    0    [1    /1   ]  62.7133525163        1
[INPUT] 0    0    [1    /1   ]  4.6326950506         1
[INPUT] 0    0    [1    /1   ]  0.390344252224       1
[INPUT] 1    0    [1    /1   ]  8.59357066577        1
[INPUT] 1    0    [1    /1   ]  0.491300180597       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.6247858315435, 1.0]], [0, [62.713352516275556, 1.0]], [0, [4.632695050597359, 1.0]], [0, [0.3903442522239694, 1.0]], [1, [8.593570665768183, 1.0]], [1, [0.4913001805967952, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.62478583]
bas 1, expnt(s) = [62.71335252]
bas 2, expnt(s) = [4.63269505]
bas 3, expnt(s) = [0.39034425]
bas 4, expnt(s) = [8.59357067]
bas 5, expnt(s) = [0.49130018]
CPU time:        40.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.62478583
 219.00045567  62.71335252  56.30345395   4.63269505   7.97793162
   0.39034425   1.24767326   8.59357067  42.92412573   0.49130018
   1.19996353]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.312288333725345
cond(S) = 5.251391500734585
E1 = -679.001963277275  E_coul = 184.63752291258567
init E= -494.364440364689
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687211247322589  LUMO = 310.614792059659
  mo_energy =
[-117.48381985  -13.03167338   -7.64248429   -7.64248429   -7.64248429
   -1.63219478   -0.68721125   -0.68721125   -0.68721125  310.61479206]
E1 = -697.4231429256488  E_coul = 198.77626472791394
cycle= 1 E= -498.646878197735  delta_E= -4.28  |g|= 0.233  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.19567
diis-c [-0.03828665  1.        ]
  HOMO = -0.23607189836599  LUMO = 311.96382019016
  mo_energy =
[-1.16150542e+02 -1.19814652e+01 -6.65239076e+00 -6.65239076e+00
 -6.65239076e+00 -1.13795068e+00 -2.36071898e-01 -2.36071898e-01
 -2.36071898e-01  3.11963820e+02]
E1 = -697.4171262216589  E_coul = 198.7701702194223
cycle= 2 E= -498.646956002237  delta_E= -7.78e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115694
diis-c [-5.65946990e-08 -5.82005743e-03  1.00582006e+00]
  HOMO = -0.23608904788829  LUMO = 311.961395152864
  mo_energy =
[-1.16152810e+02 -1.19816207e+01 -6.65258403e+00 -6.65258403e+00
 -6.65258403e+00 -1.13796026e+00 -2.36089048e-01 -2.36089048e-01
 -2.36089048e-01  3.11961395e+02]
E1 = -697.4170918606042  E_coul = 198.77013585587744
cycle= 3 E= -498.646956004727  delta_E= -2.49e-09  |g|= 6.64e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.90659e-07
diis-c [-1.21885259e-14  1.63622124e-05 -2.87974284e-03  1.00286338e+00]
  HOMO = -0.236089031779473  LUMO = 311.961395303927
  mo_energy =
[-1.16152810e+02 -1.19816206e+01 -6.65258396e+00 -6.65258396e+00
 -6.65258396e+00 -1.13796026e+00 -2.36089032e-01 -2.36089032e-01
 -2.36089032e-01  3.11961395e+02]
E1 = -697.4170918604532  E_coul = 198.77013585572658
cycle= 4 E= -498.646956004727  delta_E= 1.14e-13  |g|= 9.95e-10  |ddm|= 4.74e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.4170918604532  E_coul = 198.77013585572658
  HOMO = -0.236089031788928  LUMO = 311.96139530391
  mo_energy =
[-1.16152810e+02 -1.19816206e+01 -6.65258396e+00 -6.65258396e+00
 -6.65258396e+00 -1.13796026e+00 -2.36089032e-01 -2.36089032e-01
 -2.36089032e-01  3.11961395e+02]
E1 = -697.4170918604466  E_coul = 198.7701358557202
Extra cycle  E= -498.646956004726  delta_E= 2.27e-13  |g|= 9.72e-12  |ddm|= 6.42e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.251391500734585
E1 = -697.4170918604466  E_coul = 198.7701358557202
init E= -498.646956004726
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.236089031788978  LUMO = 311.961395303912
  mo_energy =
[-1.16152810e+02 -1.19816206e+01 -6.65258396e+00 -6.65258396e+00
 -6.65258396e+00 -1.13796026e+00 -2.36089032e-01 -2.36089032e-01
 -2.36089032e-01  3.11961395e+02]
E1 = -697.4170918604465  E_coul = 198.77013585572004
cycle= 1 E= -498.646956004726  delta_E= -1.14e-13  |g|= 8.32e-14  |ddm|= 5.47e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -697.4170918604465  E_coul = 198.77013585572004
  HOMO = -0.236089031788986  LUMO = 311.961395303912
  mo_energy =
[-1.16152810e+02 -1.19816206e+01 -6.65258396e+00 -6.65258396e+00
 -6.65258396e+00 -1.13796026e+00 -2.36089032e-01 -2.36089032e-01
 -2.36089032e-01  3.11961395e+02]
E1 = -697.4170918604466  E_coul = 198.77013585572018
Extra cycle  E= -498.646956004726  delta_E= 5.68e-14  |g|= 7.63e-14  |ddm|= 3.84e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [383.62478583  62.71335252   4.63269505   0.39034425   8.59357067
   0.49130018]
grad_E = [-0.01082727 -0.00066583 -0.00228271 -0.03554972  0.00419387  0.01291495]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:15 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.766500977        1
[INPUT] 0    0    [1    /1   ]  62.7828521854        1
[INPUT] 0    0    [1    /1   ]  4.62824783922        1
[INPUT] 0    0    [1    /1   ]  0.386460650599       1
[INPUT] 1    0    [1    /1   ]  8.60734330568        1
[INPUT] 1    0    [1    /1   ]  0.492932558695       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.7665009766497, 1.0]], [0, [62.782852185414605, 1.0]], [0, [4.628247839220656, 1.0]], [0, [0.386460650599174, 1.0]], [1, [8.607343305676965, 1.0]], [1, [0.4929325586946324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.76650098]
bas 1, expnt(s) = [62.78285219]
bas 2, expnt(s) = [4.62824784]
bas 3, expnt(s) = [0.38646065]
bas 4, expnt(s) = [8.60734331]
bas 5, expnt(s) = [0.49293256]
CPU time:        44.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.76650098
 219.06112872  62.78285219  56.35024458   4.62824784   7.97218704
   0.38646065   1.23835164   8.60734331  43.01013434   0.49293256
   1.2049493 ]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310445366578538
cond(S) = 5.243692407782219
E1 = -679.0434544244482  E_coul = 184.6784963337484
init E= -494.3649580907
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687423585214894  LUMO = 310.918738901813
  mo_energy =
[-117.47262455  -13.02867647   -7.6410215    -7.6410215    -7.6410215
   -1.63074074   -0.68742359   -0.68742359   -0.68742359  310.9187389 ]
E1 = -697.4975142530396  E_coul = 198.84956028952928
cycle= 1 E= -498.64795396351  delta_E= -4.28  |g|= 0.233  |ddm|= 0.312
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.195193
diis-c [-0.03810032  1.        ]
  HOMO = -0.234564635396185  LUMO = 312.271850284602
  mo_energy =
[-1.16135928e+02 -1.19762994e+01 -6.64880491e+00 -6.64880491e+00
 -6.64880491e+00 -1.13689906e+00 -2.34564635e-01 -2.34564635e-01
 -2.34564635e-01  3.12271850e+02]
E1 = -697.4915056155409  E_coul = 198.84347385692394
cycle= 2 E= -498.648031758617  delta_E= -7.78e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115325
diis-c [-5.79924693e-08 -5.81161228e-03  1.00581161e+00]
  HOMO = -0.234581932581789  LUMO = 312.269434364099
  mo_energy =
[-1.16138192e+02 -1.19764548e+01 -6.64899856e+00 -6.64899856e+00
 -6.64899856e+00 -1.13690853e+00 -2.34581933e-01 -2.34581933e-01
 -2.34581933e-01  3.12269434e+02]
E1 = -697.491471303325  E_coul = 198.84343954221944
cycle= 3 E= -498.648031761106  delta_E= -2.49e-09  |g|= 6.75e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.1243e-07
diis-c [-1.85705630e-14  1.65882592e-05 -2.91979069e-03  1.00290320e+00]
  HOMO = -0.234581916601037  LUMO = 312.269434511929
  mo_energy =
[-1.16138192e+02 -1.19764547e+01 -6.64899849e+00 -6.64899849e+00
 -6.64899849e+00 -1.13690852e+00 -2.34581917e-01 -2.34581917e-01
 -2.34581917e-01  3.12269435e+02]
E1 = -697.4914713028916  E_coul = 198.8434395417862
cycle= 4 E= -498.648031761105  delta_E= 2.27e-13  |g|= 1.22e-09  |ddm|= 4.71e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.4914713028916  E_coul = 198.8434395417862
  HOMO = -0.234581916612709  LUMO = 312.269434511922
  mo_energy =
[-1.16138192e+02 -1.19764547e+01 -6.64899849e+00 -6.64899849e+00
 -6.64899849e+00 -1.13690852e+00 -2.34581917e-01 -2.34581917e-01
 -2.34581917e-01  3.12269435e+02]
E1 = -697.4914713028842  E_coul = 198.84343954177874
Extra cycle  E= -498.648031761105  delta_E= -1.14e-13  |g|= 1.19e-11  |ddm|= 7.87e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [383.76650098  62.78285219   4.62824784   0.38646065   8.60734331
   0.49293256]
E = -498.64803176110547
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:16 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  383.766500977        1
[INPUT] 0    0    [1    /1   ]  62.7828521854        1
[INPUT] 0    0    [1    /1   ]  4.62824783922        1
[INPUT] 0    0    [1    /1   ]  0.386460650599       1
[INPUT] 1    0    [1    /1   ]  8.60734330568        1
[INPUT] 1    0    [1    /1   ]  0.492932558695       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [383.7665009766497, 1.0]], [0, [62.782852185414605, 1.0]], [0, [4.628247839220656, 1.0]], [0, [0.386460650599174, 1.0]], [1, [8.607343305676965, 1.0]], [1, [0.4929325586946324, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [383.76650098]
bas 1, expnt(s) = [62.78285219]
bas 2, expnt(s) = [4.62824784]
bas 3, expnt(s) = [0.38646065]
bas 4, expnt(s) = [8.60734331]
bas 5, expnt(s) = [0.49293256]
CPU time:        44.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [  0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.           0.
   0.           0.           0.           0.         383.76650098
 219.06112872  62.78285219  56.35024458   4.62824784   7.97218704
   0.38646065   1.23835164   8.60734331  43.01013434   0.49293256
   1.2049493 ]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.310445366578538
cond(S) = 5.243692407782219
E1 = -679.0434544244482  E_coul = 184.6784963337484
init E= -494.3649580907
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687423585214894  LUMO = 310.918738901813
  mo_energy =
[-117.47262455  -13.02867647   -7.6410215    -7.6410215    -7.6410215
   -1.63074074   -0.68742359   -0.68742359   -0.68742359  310.9187389 ]
E1 = -697.4975142530396  E_coul = 198.84956028952928
cycle= 1 E= -498.64795396351  delta_E= -4.28  |g|= 0.233  |ddm|= 0.312
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.195193
diis-c [-0.03810032  1.        ]
  HOMO = -0.234564635396185  LUMO = 312.271850284602
  mo_energy =
[-1.16135928e+02 -1.19762994e+01 -6.64880491e+00 -6.64880491e+00
 -6.64880491e+00 -1.13689906e+00 -2.34564635e-01 -2.34564635e-01
 -2.34564635e-01  3.12271850e+02]
E1 = -697.4915056155409  E_coul = 198.84347385692394
cycle= 2 E= -498.648031758617  delta_E= -7.78e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00115325
diis-c [-5.79924693e-08 -5.81161228e-03  1.00581161e+00]
  HOMO = -0.234581932581789  LUMO = 312.269434364099
  mo_energy =
[-1.16138192e+02 -1.19764548e+01 -6.64899856e+00 -6.64899856e+00
 -6.64899856e+00 -1.13690853e+00 -2.34581933e-01 -2.34581933e-01
 -2.34581933e-01  3.12269434e+02]
E1 = -697.491471303325  E_coul = 198.84343954221944
cycle= 3 E= -498.648031761106  delta_E= -2.49e-09  |g|= 6.75e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.1243e-07
diis-c [-1.85705630e-14  1.65882592e-05 -2.91979069e-03  1.00290320e+00]
  HOMO = -0.234581916601037  LUMO = 312.269434511929
  mo_energy =
[-1.16138192e+02 -1.19764547e+01 -6.64899849e+00 -6.64899849e+00
 -6.64899849e+00 -1.13690852e+00 -2.34581917e-01 -2.34581917e-01
 -2.34581917e-01  3.12269435e+02]
E1 = -697.4914713028916  E_coul = 198.8434395417862
cycle= 4 E= -498.648031761105  delta_E= 2.27e-13  |g|= 1.22e-09  |ddm|= 4.71e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.4914713028916  E_coul = 198.8434395417862
  HOMO = -0.234581916612709  LUMO = 312.269434511922
  mo_energy =
[-1.16138192e+02 -1.19764547e+01 -6.64899849e+00 -6.64899849e+00
 -6.64899849e+00 -1.13690852e+00 -2.34581917e-01 -2.34581917e-01
 -2.34581917e-01  3.12269435e+02]
E1 = -697.4914713028842  E_coul = 198.84343954177874
Extra cycle  E= -498.648031761105  delta_E= -1.14e-13  |g|= 1.19e-11  |ddm|= 7.87e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.243692407782219
E1 = -697.4914713028842  E_coul = 198.84343954177874
init E= -498.648031761105
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.23458191661277  LUMO = 312.269434511925
  mo_energy =
[-1.16138192e+02 -1.19764547e+01 -6.64899849e+00 -6.64899849e+00
 -6.64899849e+00 -1.13690852e+00 -2.34581917e-01 -2.34581917e-01
 -2.34581917e-01  3.12269435e+02]
E1 = -697.491471302884  E_coul = 198.8434395417788
cycle= 1 E= -498.648031761105  delta_E= 3.41e-13  |g|= 2.46e-13  |ddm|= 6.66e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -697.491471302884  E_coul = 198.8434395417788
  HOMO = -0.23458191661277  LUMO = 312.269434511925
  mo_energy =
[-1.16138192e+02 -1.19764547e+01 -6.64899849e+00 -6.64899849e+00
 -6.64899849e+00 -1.13690852e+00 -2.34581917e-01 -2.34581917e-01
 -2.34581917e-01  3.12269435e+02]
E1 = -697.4914713028845  E_coul = 198.8434395417789
Extra cycle  E= -498.648031761106  delta_E= -4.55e-13  |g|= 1.16e-13  |ddm|= 4.33e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [383.76650098  62.78285219   4.62824784   0.38646065   8.60734331
   0.49293256]
grad_E = [-0.01096061  0.00135557 -0.00609471 -0.09402328  0.01381071  0.04850082]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  384.148143936        1
[INPUT] 0    0    [1    /1   ]  62.8978399786        1
[INPUT] 0    0    [1    /1   ]  4.62189061915        1
[INPUT] 0    0    [1    /1   ]  0.381038940611       1
[INPUT] 1    0    [1    /1   ]  8.62721064169        1
[INPUT] 1    0    [1    /1   ]  0.495280931762       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [384.1481439358636, 1.0]], [0, [62.89783997858411, 1.0]], [0, [4.621890619148944, 1.0]], [0, [0.3810389406114971, 1.0]], [1, [8.627210641685284, 1.0]], [1, [0.4952809317620366, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [384.14814394]
bas 1, expnt(s) = [62.89783998]
bas 2, expnt(s) = [4.62189062]
bas 3, expnt(s) = [0.38103894]
bas 4, expnt(s) = [8.62721064]
bas 5, expnt(s) = [0.49528093]
CPU time:        47.44
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.84148144e+02 2.19224495e+02 6.28978400e+01 5.64276317e+01
 4.62189062e+00 7.96397287e+00 3.81038941e-01 1.22529890e+00
 8.62721064e+00 4.31342643e+01 4.95280932e-01 1.21212917e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.307460090871604
cond(S) = 5.231714991024927
E1 = -679.1006449182464  E_coul = 184.73524634946477
init E= -494.365398568782
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687842746583838  LUMO = 311.529777718875
  mo_energy =
[-117.45728447  -13.02465161   -7.63902542   -7.63902542   -7.63902542
   -1.62860879   -0.68784275   -0.68784275   -0.68784275  311.52977772]
E1 = -697.6083502107327  E_coul = 198.9578832827852
cycle= 1 E= -498.650466927948  delta_E= -4.29  |g|= 0.233  |ddm|= 0.314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.194525
diis-c [-0.03784014  1.        ]
  HOMO = -0.232316469462558  LUMO = 312.889287472061
  mo_energy =
[-1.16115150e+02 -1.19688163e+01 -6.64341604e+00 -6.64341604e+00
 -6.64341604e+00 -1.13516661e+00 -2.32316469e-01 -2.32316469e-01
 -2.32316469e-01  3.12889287e+02]
E1 = -697.6023582334916  E_coul = 198.95181359091416
cycle= 2 E= -498.650544642577  delta_E= -7.77e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114794
diis-c [-5.99224602e-08 -5.79895784e-03  1.00579896e+00]
  HOMO = -0.232333959927803  LUMO = 312.886885365492
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64361000e+00 -6.64361000e+00
 -6.64361000e+00 -1.13517589e+00 -2.32333960e-01 -2.32333960e-01
 -2.32333960e-01  3.12886885e+02]
E1 = -697.6023240303093  E_coul = 198.95177938524907
cycle= 3 E= -498.65054464506  delta_E= -2.48e-09  |g|= 6.91e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.4261e-07
diis-c [-2.88936875e-14  1.68717447e-05 -2.97146336e-03  1.00295459e+00]
  HOMO = -0.232333944127729  LUMO = 312.886885509614
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64360994e+00 -6.64360994e+00
 -6.64360994e+00 -1.13517588e+00 -2.32333944e-01 -2.32333944e-01
 -2.32333944e-01  3.12886886e+02]
E1 = -697.6023240295152  E_coul = 198.95177938445497
cycle= 4 E= -498.65054464506  delta_E=    0  |g|= 1.52e-09  |ddm|= 4.69e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.6023240295152  E_coul = 198.95177938445497
  HOMO = -0.232333944142291  LUMO = 312.88688550963
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64360994e+00 -6.64360994e+00
 -6.64360994e+00 -1.13517588e+00 -2.32333944e-01 -2.32333944e-01
 -2.32333944e-01  3.12886886e+02]
E1 = -697.6023240295065  E_coul = 198.95177938444593
Extra cycle  E= -498.650544645061  delta_E= -3.41e-13  |g|= 1.47e-11  |ddm|= 9.69e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [3.84148144e+02 6.28978400e+01 4.62189062e+00 3.81038941e-01
 8.62721064e+00 4.95280932e-01]
E = -498.65054464506056
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:19 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  384.148143936        1
[INPUT] 0    0    [1    /1   ]  62.8978399786        1
[INPUT] 0    0    [1    /1   ]  4.62189061915        1
[INPUT] 0    0    [1    /1   ]  0.381038940611       1
[INPUT] 1    0    [1    /1   ]  8.62721064169        1
[INPUT] 1    0    [1    /1   ]  0.495280931762       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [384.1481439358636, 1.0]], [0, [62.89783997858411, 1.0]], [0, [4.621890619148944, 1.0]], [0, [0.3810389406114971, 1.0]], [1, [8.627210641685284, 1.0]], [1, [0.4952809317620366, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [384.14814394]
bas 1, expnt(s) = [62.89783998]
bas 2, expnt(s) = [4.62189062]
bas 3, expnt(s) = [0.38103894]
bas 4, expnt(s) = [8.62721064]
bas 5, expnt(s) = [0.49528093]
CPU time:        47.79
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.84148144e+02 2.19224495e+02 6.28978400e+01 5.64276317e+01
 4.62189062e+00 7.96397287e+00 3.81038941e-01 1.22529890e+00
 8.62721064e+00 4.31342643e+01 4.95280932e-01 1.21212917e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.307460090871604
cond(S) = 5.231714991024927
E1 = -679.1006449182464  E_coul = 184.73524634946477
init E= -494.365398568782
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687842746583838  LUMO = 311.529777718875
  mo_energy =
[-117.45728447  -13.02465161   -7.63902542   -7.63902542   -7.63902542
   -1.62860879   -0.68784275   -0.68784275   -0.68784275  311.52977772]
E1 = -697.6083502107327  E_coul = 198.9578832827852
cycle= 1 E= -498.650466927948  delta_E= -4.29  |g|= 0.233  |ddm|= 0.314
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.194525
diis-c [-0.03784014  1.        ]
  HOMO = -0.232316469462558  LUMO = 312.889287472061
  mo_energy =
[-1.16115150e+02 -1.19688163e+01 -6.64341604e+00 -6.64341604e+00
 -6.64341604e+00 -1.13516661e+00 -2.32316469e-01 -2.32316469e-01
 -2.32316469e-01  3.12889287e+02]
E1 = -697.6023582334916  E_coul = 198.95181359091416
cycle= 2 E= -498.650544642577  delta_E= -7.77e-05  |g|= 0.00132  |ddm|= 0.00203
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114794
diis-c [-5.99224602e-08 -5.79895784e-03  1.00579896e+00]
  HOMO = -0.232333959927803  LUMO = 312.886885365492
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64361000e+00 -6.64361000e+00
 -6.64361000e+00 -1.13517589e+00 -2.32333960e-01 -2.32333960e-01
 -2.32333960e-01  3.12886885e+02]
E1 = -697.6023240303093  E_coul = 198.95177938524907
cycle= 3 E= -498.65054464506  delta_E= -2.48e-09  |g|= 6.91e-07  |ddm|= 1.1e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.4261e-07
diis-c [-2.88936875e-14  1.68717447e-05 -2.97146336e-03  1.00295459e+00]
  HOMO = -0.232333944127729  LUMO = 312.886885509614
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64360994e+00 -6.64360994e+00
 -6.64360994e+00 -1.13517588e+00 -2.32333944e-01 -2.32333944e-01
 -2.32333944e-01  3.12886886e+02]
E1 = -697.6023240295152  E_coul = 198.95177938445497
cycle= 4 E= -498.65054464506  delta_E=    0  |g|= 1.52e-09  |ddm|= 4.69e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.6023240295152  E_coul = 198.95177938445497
  HOMO = -0.232333944142291  LUMO = 312.88688550963
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64360994e+00 -6.64360994e+00
 -6.64360994e+00 -1.13517588e+00 -2.32333944e-01 -2.32333944e-01
 -2.32333944e-01  3.12886886e+02]
E1 = -697.6023240295065  E_coul = 198.95177938444593
Extra cycle  E= -498.650544645061  delta_E= -3.41e-13  |g|= 1.47e-11  |ddm|= 9.69e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.231714991024927
E1 = -697.6023240295065  E_coul = 198.95177938444593
init E= -498.650544645061
    CPU time for initialize scf      0.05 sec, wall time      0.06 sec
  HOMO = -0.232333944142365  LUMO = 312.886885509634
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64360994e+00 -6.64360994e+00
 -6.64360994e+00 -1.13517588e+00 -2.32333944e-01 -2.32333944e-01
 -2.32333944e-01  3.12886886e+02]
E1 = -697.6023240295062  E_coul = 198.9517793844459
cycle= 1 E= -498.65054464506  delta_E= 2.27e-13  |g|= 6.04e-14  |ddm|= 8.38e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -697.6023240295062  E_coul = 198.9517793844459
  HOMO = -0.232333944142365  LUMO = 312.886885509634
  mo_energy =
[-1.16117404e+02 -1.19689713e+01 -6.64360994e+00 -6.64360994e+00
 -6.64360994e+00 -1.13517588e+00 -2.32333944e-01 -2.32333944e-01
 -2.32333944e-01  3.12886886e+02]
E1 = -697.6023240295063  E_coul = 198.9517793844459
Extra cycle  E= -498.65054464506  delta_E= -1.14e-13  |g|= 7.25e-14  |ddm|= 4.77e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.84148144e+02 6.28978400e+01 4.62189062e+00 3.81038941e-01
 8.62721064e+00 4.95280932e-01]
grad_E = [-0.01111844  0.00426092 -0.01159981 -0.1772481   0.02769692  0.09973114]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:22 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  385.259473453        1
[INPUT] 0    0    [1    /1   ]  63.1293907008        1
[INPUT] 0    0    [1    /1   ]  4.61157347816        1
[INPUT] 0    0    [1    /1   ]  0.372355934473       1
[INPUT] 1    0    [1    /1   ]  8.66016655968        1
[INPUT] 1    0    [1    /1   ]  0.499179211978       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [385.2594734533132, 1.0]], [0, [63.12939070075499, 1.0]], [0, [4.611573478158662, 1.0]], [0, [0.37235593447325727, 1.0]], [1, [8.660166559676519, 1.0]], [1, [0.4991792119784468, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [385.25947345]
bas 1, expnt(s) = [63.1293907]
bas 2, expnt(s) = [4.61157348]
bas 3, expnt(s) = [0.37235593]
bas 4, expnt(s) = [8.66016656]
bas 5, expnt(s) = [0.49917921]
CPU time:        50.68
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.85259473e+02 2.19699981e+02 6.31293907e+01 5.65833586e+01
 4.61157348e+00 7.95063606e+00 3.72355934e-01 1.20429736e+00
 8.66016656e+00 4.33403285e+01 4.99179212e-01 1.22406648e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30167163222723
cond(S) = 5.209205896427604
E1 = -679.1872692337823  E_coul = 184.82193933282926
init E= -494.365329900953
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688865566666385  LUMO = 313.013006970713
  mo_energy =
[-117.43404136  -13.0188577    -7.63613828   -7.63613828   -7.63613828
   -1.62499779   -0.68886557   -0.68886557   -0.68886557  313.01300697]
E1 = -697.8000127849562  E_coul = 199.14278627438776
cycle= 1 E= -498.657226510568  delta_E= -4.29  |g|= 0.233  |ddm|= 0.316
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.193448
diis-c [-0.03742229  1.        ]
  HOMO = -0.228429701892927  LUMO = 314.384488002369
  mo_energy =
[-1.16081550e+02 -1.19564356e+01 -6.63405825e+00 -6.63405825e+00
 -6.63405825e+00 -1.13180934e+00 -2.28429702e-01 -2.28429702e-01
 -2.28429702e-01  3.14384488e+02]
E1 = -697.7940623810815  E_coul = 199.1367584815628
cycle= 2 E= -498.657303899519  delta_E= -7.74e-05  |g|= 0.00131  |ddm|= 0.00202
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00113893
diis-c [-6.28571600e-08 -5.77628800e-03  1.00577629e+00]
  HOMO = -0.228447458187978  LUMO = 314.382110863324
  mo_energy =
[-1.16083783e+02 -1.19565898e+01 -6.63425209e+00 -6.63425209e+00
 -6.63425209e+00 -1.13181831e+00 -2.28447458e-01 -2.28447458e-01
 -2.28447458e-01  3.14382111e+02]
E1 = -697.7940284646777  E_coul = 199.13672456269447
cycle= 3 E= -498.657303901983  delta_E= -2.46e-09  |g|= 7.15e-07  |ddm|= 1.09e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=7.86763e-07
diis-c [-4.69538359e-14  1.72087649e-05 -3.03755436e-03  1.00302035e+00]
  HOMO = -0.2284474426778  LUMO = 314.382111002859
  mo_energy =
[-1.16083783e+02 -1.19565897e+01 -6.63425203e+00 -6.63425203e+00
 -6.63425203e+00 -1.13181830e+00 -2.28447443e-01 -2.28447443e-01
 -2.28447443e-01  3.14382111e+02]
E1 = -697.7940284633972  E_coul = 199.1367245614142
cycle= 4 E= -498.657303901983  delta_E= 2.27e-13  |g|= 1.91e-09  |ddm|= 4.67e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.7940284633972  E_coul = 199.1367245614142
  HOMO = -0.228447442696269  LUMO = 314.382111002932
  mo_energy =
[-1.16083783e+02 -1.19565897e+01 -6.63425203e+00 -6.63425203e+00
 -6.63425203e+00 -1.13181830e+00 -2.28447443e-01 -2.28447443e-01
 -2.28447443e-01  3.14382111e+02]
E1 = -697.7940284633867  E_coul = 199.1367245614035
Extra cycle  E= -498.657303901983  delta_E= -1.14e-13  |g|= 1.86e-11  |ddm|= 1.2e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.85259473e+02 6.31293907e+01 4.61157348e+00 3.72355934e-01
 8.66016656e+00 4.99179212e-01]
E = -498.65730390198314
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:23 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  385.259473453        1
[INPUT] 0    0    [1    /1   ]  63.1293907008        1
[INPUT] 0    0    [1    /1   ]  4.61157347816        1
[INPUT] 0    0    [1    /1   ]  0.372355934473       1
[INPUT] 1    0    [1    /1   ]  8.66016655968        1
[INPUT] 1    0    [1    /1   ]  0.499179211978       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [385.2594734533132, 1.0]], [0, [63.12939070075499, 1.0]], [0, [4.611573478158662, 1.0]], [0, [0.37235593447325727, 1.0]], [1, [8.660166559676519, 1.0]], [1, [0.4991792119784468, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [385.25947345]
bas 1, expnt(s) = [63.1293907]
bas 2, expnt(s) = [4.61157348]
bas 3, expnt(s) = [0.37235593]
bas 4, expnt(s) = [8.66016656]
bas 5, expnt(s) = [0.49917921]
CPU time:        51.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.85259473e+02 2.19699981e+02 6.31293907e+01 5.65833586e+01
 4.61157348e+00 7.95063606e+00 3.72355934e-01 1.20429736e+00
 8.66016656e+00 4.33403285e+01 4.99179212e-01 1.22406648e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.30167163222723
cond(S) = 5.209205896427604
E1 = -679.1872692337823  E_coul = 184.82193933282926
init E= -494.365329900953
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688865566666385  LUMO = 313.013006970713
  mo_energy =
[-117.43404136  -13.0188577    -7.63613828   -7.63613828   -7.63613828
   -1.62499779   -0.68886557   -0.68886557   -0.68886557  313.01300697]
E1 = -697.8000127849562  E_coul = 199.14278627438776
cycle= 1 E= -498.657226510568  delta_E= -4.29  |g|= 0.233  |ddm|= 0.316
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.193448
diis-c [-0.03742229  1.        ]
  HOMO = -0.228429701892927  LUMO = 314.384488002369
  mo_energy =
[-1.16081550e+02 -1.19564356e+01 -6.63405825e+00 -6.63405825e+00
 -6.63405825e+00 -1.13180934e+00 -2.28429702e-01 -2.28429702e-01
 -2.28429702e-01  3.14384488e+02]
E1 = -697.7940623810815  E_coul = 199.1367584815628
cycle= 2 E= -498.657303899519  delta_E= -7.74e-05  |g|= 0.00131  |ddm|= 0.00202
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00113893
diis-c [-6.28571600e-08 -5.77628800e-03  1.00577629e+00]
  HOMO = -0.228447458187978  LUMO = 314.382110863324
  mo_energy =
[-1.16083783e+02 -1.19565898e+01 -6.63425209e+00 -6.63425209e+00
 -6.63425209e+00 -1.13181831e+00 -2.28447458e-01 -2.28447458e-01
 -2.28447458e-01  3.14382111e+02]
E1 = -697.7940284646777  E_coul = 199.13672456269447
cycle= 3 E= -498.657303901983  delta_E= -2.46e-09  |g|= 7.15e-07  |ddm|= 1.09e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=7.86763e-07
diis-c [-4.69538359e-14  1.72087649e-05 -3.03755436e-03  1.00302035e+00]
  HOMO = -0.2284474426778  LUMO = 314.382111002859
  mo_energy =
[-1.16083783e+02 -1.19565897e+01 -6.63425203e+00 -6.63425203e+00
 -6.63425203e+00 -1.13181830e+00 -2.28447443e-01 -2.28447443e-01
 -2.28447443e-01  3.14382111e+02]
E1 = -697.7940284633972  E_coul = 199.1367245614142
cycle= 4 E= -498.657303901983  delta_E= 2.27e-13  |g|= 1.91e-09  |ddm|= 4.67e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -697.7940284633972  E_coul = 199.1367245614142
  HOMO = -0.228447442696269  LUMO = 314.382111002932
  mo_energy =
[-1.16083783e+02 -1.19565897e+01 -6.63425203e+00 -6.63425203e+00
 -6.63425203e+00 -1.13181830e+00 -2.28447443e-01 -2.28447443e-01
 -2.28447443e-01  3.14382111e+02]
E1 = -697.7940284633867  E_coul = 199.1367245614035
Extra cycle  E= -498.657303901983  delta_E= -1.14e-13  |g|= 1.86e-11  |ddm|= 1.2e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.209205896427604
E1 = -697.7940284633867  E_coul = 199.1367245614035
init E= -498.657303901983
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.228447442696371  LUMO = 314.382111002938
  mo_energy =
[-1.16083783e+02 -1.19565897e+01 -6.63425203e+00 -6.63425203e+00
 -6.63425203e+00 -1.13181830e+00 -2.28447443e-01 -2.28447443e-01
 -2.28447443e-01  3.14382111e+02]
E1 = -697.7940284633868  E_coul = 199.13672456140344
cycle= 1 E= -498.657303901983  delta_E= -2.27e-13  |g|= 2.45e-13  |ddm|= 1.03e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -697.7940284633868  E_coul = 199.13672456140344
  HOMO = -0.228447442696371  LUMO = 314.382111002938
  mo_energy =
[-1.16083783e+02 -1.19565897e+01 -6.63425203e+00 -6.63425203e+00
 -6.63425203e+00 -1.13181830e+00 -2.28447443e-01 -2.28447443e-01
 -2.28447443e-01  3.14382111e+02]
E1 = -697.7940284633867  E_coul = 199.13672456140344
Extra cycle  E= -498.657303901983  delta_E= 1.14e-13  |g|= 1.57e-13  |ddm|= 4.44e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [3.85259473e+02 6.31293907e+01 4.61157348e+00 3.72355934e-01
 8.66016656e+00 4.99179212e-01]
grad_E = [-0.01129022  0.00909172 -0.02069564 -0.31466107  0.05074522  0.18471104]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:25 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  388.141655669        1
[INPUT] 0    0    [1    /1   ]  63.5783932721        1
[INPUT] 0    0    [1    /1   ]  4.59677016152        1
[INPUT] 0    0    [1    /1   ]  0.360174633277       1
[INPUT] 1    0    [1    /1   ]  8.70911130333        1
[INPUT] 1    0    [1    /1   ]  0.504983996991       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [388.14165566860197, 1.0]], [0, [63.57839327207278, 1.0]], [0, [4.5967701615186645, 1.0]], [0, [0.36017463327703997, 1.0]], [1, [8.70911130332652, 1.0]], [1, [0.5049839969912181, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [388.14165567]
bas 1, expnt(s) = [63.57839327]
bas 2, expnt(s) = [4.59677016]
bas 3, expnt(s) = [0.36017463]
bas 4, expnt(s) = [8.7091113]
bas 5, expnt(s) = [0.504984]
CPU time:        53.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.88141656e+02 2.20931537e+02 6.35783933e+01 5.68849244e+01
 4.59677016e+00 7.93148699e+00 3.60174633e-01 1.17462669e+00
 8.70911130e+00 4.36467282e+01 5.04983997e-01 1.24188509e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.291230663093582
cond(S) = 5.168805880702184
E1 = -679.2996225369233  E_coul = 184.93586239097166
init E= -494.363760145952
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.691053568093565  LUMO = 316.430119689687
  mo_energy =
[-117.40450392  -13.01218839   -7.63267319   -7.63267319   -7.63267319
   -1.61952816   -0.69105357   -0.69105357   -0.69105357  316.43011969]
E1 = -698.1049685746121  E_coul = 199.43108923948213
cycle= 1 E= -498.67387933513  delta_E= -4.31  |g|= 0.232  |ddm|= 0.321
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.191888
diis-c [-0.0368209  1.       ]
  HOMO = -0.222245156050199  LUMO = 317.82260724407
  mo_energy =
[-1.16033509e+02 -1.19380808e+01 -6.61910294e+00 -6.61910294e+00
 -6.61910294e+00 -1.12579854e+00 -2.22245156e-01 -2.22245156e-01
 -2.22245156e-01  3.17822607e+02]
E1 = -698.0991150072946  E_coul = 199.4251592668717
cycle= 2 E= -498.673955740423  delta_E= -7.64e-05  |g|= 0.0013  |ddm|= 0.00199
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00112455
diis-c [-6.63481530e-08 -5.73736599e-03  1.00573737e+00]
  HOMO = -0.222263162752044  LUMO = 317.820272575278
  mo_energy =
[-1.16035701e+02 -1.19382326e+01 -6.61929498e+00 -6.61929498e+00
 -6.61929498e+00 -1.12580703e+00 -2.22263163e-01 -2.22263163e-01
 -2.22263163e-01  3.17820273e+02]
E1 = -698.0990817817724  E_coul = 199.42512603893937
cycle= 3 E= -498.673955742833  delta_E= -2.41e-09  |g|= 7.4e-07  |ddm|= 1.07e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.30511e-07
diis-c [-6.94867100e-14  1.73398110e-05 -3.07955212e-03  1.00306221e+00]
  HOMO = -0.222263147651455  LUMO = 317.820272709593
  mo_energy =
[-1.16035701e+02 -1.19382325e+01 -6.61929493e+00 -6.61929493e+00
 -6.61929493e+00 -1.12580703e+00 -2.22263148e-01 -2.22263148e-01
 -2.22263148e-01  3.17820273e+02]
E1 = -698.0990817800247  E_coul = 199.42512603719126
cycle= 4 E= -498.673955742833  delta_E= -3.98e-13  |g|= 2.28e-09  |ddm|= 4.62e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0990817800247  E_coul = 199.42512603719126
  HOMO = -0.22226314767344  LUMO = 317.82027270978
  mo_energy =
[-1.16035701e+02 -1.19382325e+01 -6.61929493e+00 -6.61929493e+00
 -6.61929493e+00 -1.12580703e+00 -2.22263148e-01 -2.22263148e-01
 -2.22263148e-01  3.17820273e+02]
E1 = -698.0990817800131  E_coul = 199.42512603717992
Extra cycle  E= -498.673955742833  delta_E= 2.27e-13  |g|= 2.2e-11  |ddm|= 1.4e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.88141656e+02 6.35783933e+01 4.59677016e+00 3.60174633e-01
 8.70911130e+00 5.04983997e-01]
E = -498.6739557428332
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:26 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  388.141655669        1
[INPUT] 0    0    [1    /1   ]  63.5783932721        1
[INPUT] 0    0    [1    /1   ]  4.59677016152        1
[INPUT] 0    0    [1    /1   ]  0.360174633277       1
[INPUT] 1    0    [1    /1   ]  8.70911130333        1
[INPUT] 1    0    [1    /1   ]  0.504983996991       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [388.14165566860197, 1.0]], [0, [63.57839327207278, 1.0]], [0, [4.5967701615186645, 1.0]], [0, [0.36017463327703997, 1.0]], [1, [8.70911130332652, 1.0]], [1, [0.5049839969912181, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [388.14165567]
bas 1, expnt(s) = [63.57839327]
bas 2, expnt(s) = [4.59677016]
bas 3, expnt(s) = [0.36017463]
bas 4, expnt(s) = [8.7091113]
bas 5, expnt(s) = [0.504984]
CPU time:        54.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.88141656e+02 2.20931537e+02 6.35783933e+01 5.68849244e+01
 4.59677016e+00 7.93148699e+00 3.60174633e-01 1.17462669e+00
 8.70911130e+00 4.36467282e+01 5.04983997e-01 1.24188509e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.291230663093582
cond(S) = 5.168805880702184
E1 = -679.2996225369233  E_coul = 184.93586239097166
init E= -494.363760145952
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.691053568093565  LUMO = 316.430119689687
  mo_energy =
[-117.40450392  -13.01218839   -7.63267319   -7.63267319   -7.63267319
   -1.61952816   -0.69105357   -0.69105357   -0.69105357  316.43011969]
E1 = -698.1049685746121  E_coul = 199.43108923948213
cycle= 1 E= -498.67387933513  delta_E= -4.31  |g|= 0.232  |ddm|= 0.321
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.191888
diis-c [-0.0368209  1.       ]
  HOMO = -0.222245156050199  LUMO = 317.82260724407
  mo_energy =
[-1.16033509e+02 -1.19380808e+01 -6.61910294e+00 -6.61910294e+00
 -6.61910294e+00 -1.12579854e+00 -2.22245156e-01 -2.22245156e-01
 -2.22245156e-01  3.17822607e+02]
E1 = -698.0991150072946  E_coul = 199.4251592668717
cycle= 2 E= -498.673955740423  delta_E= -7.64e-05  |g|= 0.0013  |ddm|= 0.00199
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00112455
diis-c [-6.63481530e-08 -5.73736599e-03  1.00573737e+00]
  HOMO = -0.222263162752044  LUMO = 317.820272575278
  mo_energy =
[-1.16035701e+02 -1.19382326e+01 -6.61929498e+00 -6.61929498e+00
 -6.61929498e+00 -1.12580703e+00 -2.22263163e-01 -2.22263163e-01
 -2.22263163e-01  3.17820273e+02]
E1 = -698.0990817817724  E_coul = 199.42512603893937
cycle= 3 E= -498.673955742833  delta_E= -2.41e-09  |g|= 7.4e-07  |ddm|= 1.07e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.30511e-07
diis-c [-6.94867100e-14  1.73398110e-05 -3.07955212e-03  1.00306221e+00]
  HOMO = -0.222263147651455  LUMO = 317.820272709593
  mo_energy =
[-1.16035701e+02 -1.19382325e+01 -6.61929493e+00 -6.61929493e+00
 -6.61929493e+00 -1.12580703e+00 -2.22263148e-01 -2.22263148e-01
 -2.22263148e-01  3.17820273e+02]
E1 = -698.0990817800247  E_coul = 199.42512603719126
cycle= 4 E= -498.673955742833  delta_E= -3.98e-13  |g|= 2.28e-09  |ddm|= 4.62e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0990817800247  E_coul = 199.42512603719126
  HOMO = -0.22226314767344  LUMO = 317.82027270978
  mo_energy =
[-1.16035701e+02 -1.19382325e+01 -6.61929493e+00 -6.61929493e+00
 -6.61929493e+00 -1.12580703e+00 -2.22263148e-01 -2.22263148e-01
 -2.22263148e-01  3.17820273e+02]
E1 = -698.0990817800131  E_coul = 199.42512603717992
Extra cycle  E= -498.673955742833  delta_E= 2.27e-13  |g|= 2.2e-11  |ddm|= 1.4e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.168805880702184
E1 = -698.0990817800131  E_coul = 199.42512603717992
init E= -498.673955742833
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.222263147673565  LUMO = 317.820272709787
  mo_energy =
[-1.16035701e+02 -1.19382325e+01 -6.61929493e+00 -6.61929493e+00
 -6.61929493e+00 -1.12580703e+00 -2.22263148e-01 -2.22263148e-01
 -2.22263148e-01  3.17820273e+02]
E1 = -698.0990817800133  E_coul = 199.4251260371799
cycle= 1 E= -498.673955742833  delta_E= -2.27e-13  |g|= 8.68e-14  |ddm|= 1.19e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -698.0990817800133  E_coul = 199.4251260371799
  HOMO = -0.222263147673563  LUMO = 317.820272709787
  mo_energy =
[-1.16035701e+02 -1.19382325e+01 -6.61929493e+00 -6.61929493e+00
 -6.61929493e+00 -1.12580703e+00 -2.22263148e-01 -2.22263148e-01
 -2.22263148e-01  3.17820273e+02]
E1 = -698.0990817800129  E_coul = 199.4251260371798
Extra cycle  E= -498.673955742833  delta_E= 3.41e-13  |g|= 6.51e-14  |ddm|= 5.03e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [3.88141656e+02 6.35783933e+01 4.59677016e+00 3.60174633e-01
 8.70911130e+00 5.04983997e-01]
grad_E = [-0.01131887  0.01632752 -0.03424811 -0.51640759  0.08501924  0.31120829]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  395.197411646        1
[INPUT] 0    0    [1    /1   ]  64.4486797607        1
[INPUT] 0    0    [1    /1   ]  4.57859807477        1
[INPUT] 0    0    [1    /1   ]  0.34547527654        1
[INPUT] 1    0    [1    /1   ]  8.77430742232        1
[INPUT] 1    0    [1    /1   ]  0.512772541865       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [395.19741164627715, 1.0]], [0, [64.44867976068468, 1.0]], [0, [4.5785980747735735, 1.0]], [0, [0.3454752765398954, 1.0]], [1, [8.774307422317742, 1.0]], [1, [0.512772541865292, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [395.19741165]
bas 1, expnt(s) = [64.44867976]
bas 2, expnt(s) = [4.57859807]
bas 3, expnt(s) = [0.34547528]
bas 4, expnt(s) = [8.77430742]
bas 5, expnt(s) = [0.51277254]
CPU time:        57.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.95197412e+02 2.23936864e+02 6.44486798e+01 5.74679286e+01
 4.57859807e+00 7.90795911e+00 3.45475277e-01 1.13848616e+00
 8.77430742e+00 4.40555321e+01 5.12772542e-01 1.26587360e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.274171243949404
cond(S) = 5.096428900706698
E1 = -679.4341535739076  E_coul = 185.07292430503333
init E= -494.361229268874
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694805862298324  LUMO = 324.17303787998
  mo_energy =
[-117.37439986  -13.00646364   -7.62868099   -7.62868099   -7.62868099
   -1.61232177   -0.69480586   -0.69480586   -0.69480586  324.17303788]
E1 = -698.5669109132983  E_coul = 199.8539298491878
cycle= 1 E= -498.712981064111  delta_E= -4.35  |g|= 0.23  |ddm|= 0.327
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.189753
diis-c [-0.03600606  1.        ]
  HOMO = -0.212935472059706  LUMO = 325.600471650851
  mo_energy =
[-1.15972257e+02 -1.19132817e+01 -6.59637141e+00 -6.59637141e+00
 -6.59637141e+00 -1.11610312e+00 -2.12935472e-01 -2.12935472e-01
 -2.12935472e-01  3.25600472e+02]
E1 = -698.5612729695547  E_coul = 199.84821810802603
cycle= 2 E= -498.713054861529  delta_E= -7.38e-05  |g|= 0.00128  |ddm|= 0.00192
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00110116
diis-c [-6.83317829e-08 -5.66919540e-03  1.00566920e+00]
  HOMO = -0.21295343642748  LUMO = 325.598207482466
  mo_energy =
[-1.15974364e+02 -1.19134280e+01 -6.59655709e+00 -6.59655709e+00
 -6.59655709e+00 -1.11611092e+00 -2.12953436e-01 -2.12953436e-01
 -2.12953436e-01  3.25598207e+02]
E1 = -698.5612413052088  E_coul = 199.84818644140535
cycle= 3 E= -498.713054863803  delta_E= -2.27e-09  |g|= 7.27e-07  |ddm|= 1.03e-05
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=8.22316e-07
diis-c [-7.36603125e-14  1.65778619e-05 -2.98849995e-03  1.00297192e+00]
  HOMO = -0.212953421836688  LUMO = 325.598207604001
  mo_energy =
[-1.15974364e+02 -1.19134279e+01 -6.59655704e+00 -6.59655704e+00
 -6.59655704e+00 -1.11611091e+00 -2.12953422e-01 -2.12953422e-01
 -2.12953422e-01  3.25598208e+02]
E1 = -698.5612413033185  E_coul = 199.84818643951465
cycle= 4 E= -498.713054863804  delta_E= -4.55e-13  |g|= 2.28e-09  |ddm|= 4.38e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.5612413033185  E_coul = 199.84818643951465
  HOMO = -0.212953421857939  LUMO = 325.598207604326
  mo_energy =
[-1.15974364e+02 -1.19134279e+01 -6.59655704e+00 -6.59655704e+00
 -6.59655704e+00 -1.11611091e+00 -2.12953422e-01 -2.12953422e-01
 -2.12953422e-01  3.25598208e+02]
E1 = -698.5612413033097  E_coul = 199.84818643950607
Extra cycle  E= -498.713054863804  delta_E= 3.41e-13  |g|= 2.15e-11  |ddm|= 1.32e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [3.95197412e+02 6.44486798e+01 4.57859807e+00 3.45475277e-01
 8.77430742e+00 5.12772542e-01]
E = -498.71305486380356
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:29 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  395.197411646        1
[INPUT] 0    0    [1    /1   ]  64.4486797607        1
[INPUT] 0    0    [1    /1   ]  4.57859807477        1
[INPUT] 0    0    [1    /1   ]  0.34547527654        1
[INPUT] 1    0    [1    /1   ]  8.77430742232        1
[INPUT] 1    0    [1    /1   ]  0.512772541865       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [395.19741164627715, 1.0]], [0, [64.44867976068468, 1.0]], [0, [4.5785980747735735, 1.0]], [0, [0.3454752765398954, 1.0]], [1, [8.774307422317742, 1.0]], [1, [0.512772541865292, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [395.19741165]
bas 1, expnt(s) = [64.44867976]
bas 2, expnt(s) = [4.57859807]
bas 3, expnt(s) = [0.34547528]
bas 4, expnt(s) = [8.77430742]
bas 5, expnt(s) = [0.51277254]
CPU time:        57.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.95197412e+02 2.23936864e+02 6.44486798e+01 5.74679286e+01
 4.57859807e+00 7.90795911e+00 3.45475277e-01 1.13848616e+00
 8.77430742e+00 4.40555321e+01 5.12772542e-01 1.26587360e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.274171243949404
cond(S) = 5.096428900706698
E1 = -679.4341535739076  E_coul = 185.07292430503333
init E= -494.361229268874
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.694805862298324  LUMO = 324.17303787998
  mo_energy =
[-117.37439986  -13.00646364   -7.62868099   -7.62868099   -7.62868099
   -1.61232177   -0.69480586   -0.69480586   -0.69480586  324.17303788]
E1 = -698.5669109132983  E_coul = 199.8539298491878
cycle= 1 E= -498.712981064111  delta_E= -4.35  |g|= 0.23  |ddm|= 0.327
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.189753
diis-c [-0.03600606  1.        ]
  HOMO = -0.212935472059706  LUMO = 325.600471650851
  mo_energy =
[-1.15972257e+02 -1.19132817e+01 -6.59637141e+00 -6.59637141e+00
 -6.59637141e+00 -1.11610312e+00 -2.12935472e-01 -2.12935472e-01
 -2.12935472e-01  3.25600472e+02]
E1 = -698.5612729695547  E_coul = 199.84821810802603
cycle= 2 E= -498.713054861529  delta_E= -7.38e-05  |g|= 0.00128  |ddm|= 0.00192
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00110116
diis-c [-6.83317829e-08 -5.66919540e-03  1.00566920e+00]
  HOMO = -0.21295343642748  LUMO = 325.598207482466
  mo_energy =
[-1.15974364e+02 -1.19134280e+01 -6.59655709e+00 -6.59655709e+00
 -6.59655709e+00 -1.11611092e+00 -2.12953436e-01 -2.12953436e-01
 -2.12953436e-01  3.25598207e+02]
E1 = -698.5612413052088  E_coul = 199.84818644140535
cycle= 3 E= -498.713054863803  delta_E= -2.27e-09  |g|= 7.27e-07  |ddm|= 1.03e-05
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=8.22316e-07
diis-c [-7.36603125e-14  1.65778619e-05 -2.98849995e-03  1.00297192e+00]
  HOMO = -0.212953421836688  LUMO = 325.598207604001
  mo_energy =
[-1.15974364e+02 -1.19134279e+01 -6.59655704e+00 -6.59655704e+00
 -6.59655704e+00 -1.11611091e+00 -2.12953422e-01 -2.12953422e-01
 -2.12953422e-01  3.25598208e+02]
E1 = -698.5612413033185  E_coul = 199.84818643951465
cycle= 4 E= -498.713054863804  delta_E= -4.55e-13  |g|= 2.28e-09  |ddm|= 4.38e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.5612413033185  E_coul = 199.84818643951465
  HOMO = -0.212953421857939  LUMO = 325.598207604326
  mo_energy =
[-1.15974364e+02 -1.19134279e+01 -6.59655704e+00 -6.59655704e+00
 -6.59655704e+00 -1.11611091e+00 -2.12953422e-01 -2.12953422e-01
 -2.12953422e-01  3.25598208e+02]
E1 = -698.5612413033097  E_coul = 199.84818643950607
Extra cycle  E= -498.713054863804  delta_E= 3.41e-13  |g|= 2.15e-11  |ddm|= 1.32e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 5.096428900706698
E1 = -698.5612413033097  E_coul = 199.84818643950607
init E= -498.713054863804
    CPU time for initialize scf      0.06 sec, wall time      0.06 sec
  HOMO = -0.212953421858049  LUMO = 325.598207604334
  mo_energy =
[-1.15974364e+02 -1.19134279e+01 -6.59655704e+00 -6.59655704e+00
 -6.59655704e+00 -1.11611091e+00 -2.12953422e-01 -2.12953422e-01
 -2.12953422e-01  3.25598208e+02]
E1 = -698.5612413033097  E_coul = 199.84818643950604
cycle= 1 E= -498.713054863804  delta_E= -5.68e-14  |g|= 1.94e-13  |ddm|= 1.13e-13
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
E1 = -698.5612413033097  E_coul = 199.84818643950604
  HOMO = -0.212953421858048  LUMO = 325.598207604334
  mo_energy =
[-1.15974364e+02 -1.19134279e+01 -6.59655704e+00 -6.59655704e+00
 -6.59655704e+00 -1.11611091e+00 -2.12953422e-01 -2.12953422e-01
 -2.12953422e-01  3.25598208e+02]
E1 = -698.5612413033094  E_coul = 199.8481864395059
Extra cycle  E= -498.713054863804  delta_E= 5.68e-14  |g|= 1.43e-13  |ddm|= 4.06e-15
    CPU time for scf_cycle      0.13 sec, wall time      0.13 sec
exp = [3.95197412e+02 6.44486798e+01 4.57859807e+00 3.45475277e-01
 8.77430742e+00 5.12772542e-01]
grad_E = [-0.01080166  0.02624978 -0.05241029 -0.77507077  0.13092889  0.481978  ]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  409.849969109        1
[INPUT] 0    0    [1    /1   ]  65.9119880658        1
[INPUT] 0    0    [1    /1   ]  4.56729715974        1
[INPUT] 0    0    [1    /1   ]  0.335264747242       1
[INPUT] 1    0    [1    /1   ]  8.83101144381        1
[INPUT] 1    0    [1    /1   ]  0.519719359873       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [409.84996910885206, 1.0]], [0, [65.911988065807, 1.0]], [0, [4.56729715974239, 1.0]], [0, [0.335264747241628, 1.0]], [1, [8.831011443810384, 1.0]], [1, [0.5197193598728362, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [409.84996911]
bas 1, expnt(s) = [65.91198807]
bas 2, expnt(s) = [4.56729716]
bas 3, expnt(s) = [0.33526475]
bas 4, expnt(s) = [8.83101144]
bas 5, expnt(s) = [0.51971936]
CPU time:        60.57
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.09849969e+02 2.30135546e+02 6.59119881e+01 5.84437848e+01
 4.56729716e+00 7.89331575e+00 3.35264747e-01 1.11315577e+00
 8.83101144e+00 4.44117056e+01 5.19719360e-01 1.28734666e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.256883063294133
cond(S) = 4.983122209947274
E1 = -679.5973547034461  E_coul = 185.22842261380154
init E= -494.368932089645
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.697467822221101  LUMO = 339.407472112644
  mo_energy =
[-117.36024277  -13.00382285   -7.62227978   -7.62227978   -7.62227978
   -1.60709934   -0.69746782   -0.69746782   -0.69746782  339.40747211]
E1 = -699.1157219437574  E_coul = 200.32522692815238
cycle= 1 E= -498.790495015605  delta_E= -4.42  |g|= 0.225  |ddm|= 0.331
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.18734
diis-c [-0.03509628  1.        ]
  HOMO = -0.202472820442247  LUMO = 340.878113032261
  mo_energy =
[-1.15919891e+02 -1.18898717e+01 -6.56972850e+00 -6.56972850e+00
 -6.56972850e+00 -1.10630162e+00 -2.02472820e-01 -2.02472820e-01
 -2.02472820e-01  3.40878113e+02]
E1 = -699.1104793689648  E_coul = 200.31991604338575
cycle= 2 E= -498.790563325579  delta_E= -6.83e-05  |g|= 0.00122  |ddm|= 0.00179
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00106698
diis-c [-6.37521162e-08 -5.56444141e-03  1.00556444e+00]
  HOMO = -0.202489833100158  LUMO = 340.875944887457
  mo_energy =
[-1.15921855e+02 -1.18900075e+01 -6.56989929e+00 -6.56989929e+00
 -6.56989929e+00 -1.10630865e+00 -2.02489833e-01 -2.02489833e-01
 -2.02489833e-01  3.40875945e+02]
E1 = -699.1104505444368  E_coul = 200.31988721685101
cycle= 3 E= -498.790563327586  delta_E= -2.01e-09  |g|= 6.18e-07  |ddm|= 9.31e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=6.68322e-07
diis-c [-2.02599549e-14  1.39286158e-05 -2.58961801e-03  1.00257569e+00]
  HOMO = -0.202489818925829  LUMO = 340.87594495968
  mo_energy =
[-1.15921855e+02 -1.18900074e+01 -6.56989924e+00 -6.56989924e+00
 -6.56989924e+00 -1.10630864e+00 -2.02489819e-01 -2.02489819e-01
 -2.02489819e-01  3.40875945e+02]
E1 = -699.1104505430885  E_coul = 200.31988721550266
cycle= 4 E= -498.790563327586  delta_E= -5.68e-14  |g|= 1.16e-09  |ddm|= 3.78e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -699.1104505430885  E_coul = 200.31988721550266
  HOMO = -0.202489818935552  LUMO = 340.875944959906
  mo_energy =
[-1.15921855e+02 -1.18900074e+01 -6.56989924e+00 -6.56989924e+00
 -6.56989924e+00 -1.10630864e+00 -2.02489819e-01 -2.02489819e-01
 -2.02489819e-01  3.40875945e+02]
E1 = -699.1104505430853  E_coul = 200.31988721549945
Extra cycle  E= -498.790563327586  delta_E= -5.68e-14  |g|= 1.06e-11  |ddm|= 6.16e-12
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.09849969e+02 6.59119881e+01 4.56729716e+00 3.35264747e-01
 8.83101144e+00 5.19719360e-01]
E = -498.7905633275859
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:32 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  409.849969109        1
[INPUT] 0    0    [1    /1   ]  65.9119880658        1
[INPUT] 0    0    [1    /1   ]  4.56729715974        1
[INPUT] 0    0    [1    /1   ]  0.335264747242       1
[INPUT] 1    0    [1    /1   ]  8.83101144381        1
[INPUT] 1    0    [1    /1   ]  0.519719359873       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [409.84996910885206, 1.0]], [0, [65.911988065807, 1.0]], [0, [4.56729715974239, 1.0]], [0, [0.335264747241628, 1.0]], [1, [8.831011443810384, 1.0]], [1, [0.5197193598728362, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [409.84996911]
bas 1, expnt(s) = [65.91198807]
bas 2, expnt(s) = [4.56729716]
bas 3, expnt(s) = [0.33526475]
bas 4, expnt(s) = [8.83101144]
bas 5, expnt(s) = [0.51971936]
CPU time:        60.96
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.09849969e+02 2.30135546e+02 6.59119881e+01 5.84437848e+01
 4.56729716e+00 7.89331575e+00 3.35264747e-01 1.11315577e+00
 8.83101144e+00 4.44117056e+01 5.19719360e-01 1.28734666e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.256883063294133
cond(S) = 4.983122209947274
E1 = -679.5973547034461  E_coul = 185.22842261380154
init E= -494.368932089645
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.697467822221101  LUMO = 339.407472112644
  mo_energy =
[-117.36024277  -13.00382285   -7.62227978   -7.62227978   -7.62227978
   -1.60709934   -0.69746782   -0.69746782   -0.69746782  339.40747211]
E1 = -699.1157219437574  E_coul = 200.32522692815238
cycle= 1 E= -498.790495015605  delta_E= -4.42  |g|= 0.225  |ddm|= 0.331
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.18734
diis-c [-0.03509628  1.        ]
  HOMO = -0.202472820442247  LUMO = 340.878113032261
  mo_energy =
[-1.15919891e+02 -1.18898717e+01 -6.56972850e+00 -6.56972850e+00
 -6.56972850e+00 -1.10630162e+00 -2.02472820e-01 -2.02472820e-01
 -2.02472820e-01  3.40878113e+02]
E1 = -699.1104793689648  E_coul = 200.31991604338575
cycle= 2 E= -498.790563325579  delta_E= -6.83e-05  |g|= 0.00122  |ddm|= 0.00179
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00106698
diis-c [-6.37521162e-08 -5.56444141e-03  1.00556444e+00]
  HOMO = -0.202489833100158  LUMO = 340.875944887457
  mo_energy =
[-1.15921855e+02 -1.18900075e+01 -6.56989929e+00 -6.56989929e+00
 -6.56989929e+00 -1.10630865e+00 -2.02489833e-01 -2.02489833e-01
 -2.02489833e-01  3.40875945e+02]
E1 = -699.1104505444368  E_coul = 200.31988721685101
cycle= 3 E= -498.790563327586  delta_E= -2.01e-09  |g|= 6.18e-07  |ddm|= 9.31e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=6.68322e-07
diis-c [-2.02599549e-14  1.39286158e-05 -2.58961801e-03  1.00257569e+00]
  HOMO = -0.202489818925829  LUMO = 340.87594495968
  mo_energy =
[-1.15921855e+02 -1.18900074e+01 -6.56989924e+00 -6.56989924e+00
 -6.56989924e+00 -1.10630864e+00 -2.02489819e-01 -2.02489819e-01
 -2.02489819e-01  3.40875945e+02]
E1 = -699.1104505430885  E_coul = 200.31988721550266
cycle= 4 E= -498.790563327586  delta_E= -5.68e-14  |g|= 1.16e-09  |ddm|= 3.78e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -699.1104505430885  E_coul = 200.31988721550266
  HOMO = -0.202489818935552  LUMO = 340.875944959906
  mo_energy =
[-1.15921855e+02 -1.18900074e+01 -6.56989924e+00 -6.56989924e+00
 -6.56989924e+00 -1.10630864e+00 -2.02489819e-01 -2.02489819e-01
 -2.02489819e-01  3.40875945e+02]
E1 = -699.1104505430853  E_coul = 200.31988721549945
Extra cycle  E= -498.790563327586  delta_E= -5.68e-14  |g|= 1.06e-11  |ddm|= 6.16e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.983122209947274
E1 = -699.1104505430853  E_coul = 200.31988721549945
init E= -498.790563327586
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.202489818935604  LUMO = 340.87594495991
  mo_energy =
[-1.15921855e+02 -1.18900074e+01 -6.56989924e+00 -6.56989924e+00
 -6.56989924e+00 -1.10630864e+00 -2.02489819e-01 -2.02489819e-01
 -2.02489819e-01  3.40875945e+02]
E1 = -699.1104505430856  E_coul = 200.31988721549942
cycle= 1 E= -498.790563327586  delta_E= -2.27e-13  |g|= 4.43e-13  |ddm|= 5.02e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -699.1104505430856  E_coul = 200.31988721549942
  HOMO = -0.202489818935605  LUMO = 340.87594495991
  mo_energy =
[-1.15921855e+02 -1.18900074e+01 -6.56989924e+00 -6.56989924e+00
 -6.56989924e+00 -1.10630864e+00 -2.02489819e-01 -2.02489819e-01
 -2.02489819e-01  3.40875945e+02]
E1 = -699.1104505430851  E_coul = 200.31988721549945
Extra cycle  E= -498.790563327586  delta_E= 4.55e-13  |g|= 1.42e-13  |ddm|= 3.83e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.09849969e+02 6.59119881e+01 4.56729716e+00 3.35264747e-01
 8.83101144e+00 5.19719360e-01]
grad_E = [-0.00904218  0.03603406 -0.06823189 -0.96908517  0.1721418   0.64146672]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:35 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  432.557638571        1
[INPUT] 0    0    [1    /1   ]  67.6764314519        1
[INPUT] 0    0    [1    /1   ]  4.58408322535        1
[INPUT] 0    0    [1    /1   ]  0.341726381342       1
[INPUT] 1    0    [1    /1   ]  8.816205014          1
[INPUT] 1    0    [1    /1   ]  0.518407021025       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [432.5576385708734, 1.0]], [0, [67.67643145187171, 1.0]], [0, [4.584083225354567, 1.0]], [0, [0.3417263813417083, 1.0]], [1, [8.816205013996624, 1.0]], [1, [0.5184070210252177, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [432.55763857]
bas 1, expnt(s) = [67.67643145]
bas 2, expnt(s) = [4.58408323]
bas 3, expnt(s) = [0.34172638]
bas 4, expnt(s) = [8.81620501]
bas 5, expnt(s) = [0.51840702]
CPU time:        63.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.32557639e+02 2.39633766e+02 6.76764315e+01 5.96132929e+01
 4.58408323e+00 7.91506334e+00 3.41726381e-01 1.12920789e+00
 8.81620501e+00 4.43186470e+01 5.18407021e-01 1.28328461e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.26089485175355
cond(S) = 4.851202372054605
E1 = -679.7498226400867  E_coul = 185.34459136815022
init E= -494.405231271936
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.693447756698677  LUMO = 361.881068406155
  mo_energy =
[-117.38955925  -13.00744236   -7.61323557   -7.61323557   -7.61323557
   -1.61140547   -0.69344776   -0.69344776   -0.69344776  361.88106841]
E1 = -699.3696284663769  E_coul = 200.46682539701055
cycle= 1 E= -498.902803069366  delta_E= -4.5  |g|= 0.219  |ddm|= 0.326
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.186405
diis-c [-0.03474691  1.        ]
  HOMO = -0.20061415721704  LUMO = 363.370771147514
  mo_energy =
[-1.15934036e+02 -1.18926042e+01 -6.56041821e+00 -6.56041821e+00
 -6.56041821e+00 -1.10828119e+00 -2.00614157e-01 -2.00614157e-01
 -2.00614157e-01  3.63370771e+02]
E1 = -699.364887661471  E_coul = 200.46202401016868
cycle= 2 E= -498.902863651302  delta_E= -6.06e-05  |g|= 0.00116  |ddm|= 0.00161
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00104009
diis-c [-5.22766793e-08 -5.47302812e-03  1.00547303e+00]
  HOMO = -0.200628883940608  LUMO = 363.368676593369
  mo_energy =
[-1.15935834e+02 -1.18927262e+01 -6.56056622e+00 -6.56056622e+00
 -6.56056622e+00 -1.10828774e+00 -2.00628884e-01 -2.00628884e-01
 -2.00628884e-01  3.63368677e+02]
E1 = -699.3648623209757  E_coul = 200.46199866800563
cycle= 3 E= -498.90286365297  delta_E= -1.67e-09  |g|= 5.78e-07  |ddm|= 8.04e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.53295e-07
diis-c [-5.63822765e-14  1.08548649e-05 -2.12406374e-03  1.00211321e+00]
  HOMO = -0.200628869557842  LUMO = 363.368676569683
  mo_energy =
[-1.15935834e+02 -1.18927261e+01 -6.56056614e+00 -6.56056614e+00
 -6.56056614e+00 -1.10828773e+00 -2.00628870e-01 -2.00628870e-01
 -2.00628870e-01  3.63368677e+02]
E1 = -699.364862321015  E_coul = 200.46199866804463
cycle= 4 E= -498.90286365297  delta_E= -3.41e-13  |g|= 1.8e-09  |ddm|= 3.7e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -699.364862321015  E_coul = 200.46199866804463
  HOMO = -0.200628869546332  LUMO = 363.368676569348
  mo_energy =
[-1.15935834e+02 -1.18927261e+01 -6.56056614e+00 -6.56056614e+00
 -6.56056614e+00 -1.10828773e+00 -2.00628870e-01 -2.00628870e-01
 -2.00628870e-01  3.63368677e+02]
E1 = -699.3648623210204  E_coul = 200.4619986680498
Extra cycle  E= -498.902863652971  delta_E= -2.27e-13  |g|= 1.6e-11  |ddm|= 8.9e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.32557639e+02 6.76764315e+01 4.58408323e+00 3.41726381e-01
 8.81620501e+00 5.18407021e-01]
E = -498.9028636529706
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:36 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  432.557638571        1
[INPUT] 0    0    [1    /1   ]  67.6764314519        1
[INPUT] 0    0    [1    /1   ]  4.58408322535        1
[INPUT] 0    0    [1    /1   ]  0.341726381342       1
[INPUT] 1    0    [1    /1   ]  8.816205014          1
[INPUT] 1    0    [1    /1   ]  0.518407021025       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [432.5576385708734, 1.0]], [0, [67.67643145187171, 1.0]], [0, [4.584083225354567, 1.0]], [0, [0.3417263813417083, 1.0]], [1, [8.816205013996624, 1.0]], [1, [0.5184070210252177, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [432.55763857]
bas 1, expnt(s) = [67.67643145]
bas 2, expnt(s) = [4.58408323]
bas 3, expnt(s) = [0.34172638]
bas 4, expnt(s) = [8.81620501]
bas 5, expnt(s) = [0.51840702]
CPU time:        64.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.32557639e+02 2.39633766e+02 6.76764315e+01 5.96132929e+01
 4.58408323e+00 7.91506334e+00 3.41726381e-01 1.12920789e+00
 8.81620501e+00 4.43186470e+01 5.18407021e-01 1.28328461e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.26089485175355
cond(S) = 4.851202372054605
E1 = -679.7498226400867  E_coul = 185.34459136815022
init E= -494.405231271936
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.693447756698677  LUMO = 361.881068406155
  mo_energy =
[-117.38955925  -13.00744236   -7.61323557   -7.61323557   -7.61323557
   -1.61140547   -0.69344776   -0.69344776   -0.69344776  361.88106841]
E1 = -699.3696284663769  E_coul = 200.46682539701055
cycle= 1 E= -498.902803069366  delta_E= -4.5  |g|= 0.219  |ddm|= 0.326
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.186405
diis-c [-0.03474691  1.        ]
  HOMO = -0.20061415721704  LUMO = 363.370771147514
  mo_energy =
[-1.15934036e+02 -1.18926042e+01 -6.56041821e+00 -6.56041821e+00
 -6.56041821e+00 -1.10828119e+00 -2.00614157e-01 -2.00614157e-01
 -2.00614157e-01  3.63370771e+02]
E1 = -699.364887661471  E_coul = 200.46202401016868
cycle= 2 E= -498.902863651302  delta_E= -6.06e-05  |g|= 0.00116  |ddm|= 0.00161
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00104009
diis-c [-5.22766793e-08 -5.47302812e-03  1.00547303e+00]
  HOMO = -0.200628883940608  LUMO = 363.368676593369
  mo_energy =
[-1.15935834e+02 -1.18927262e+01 -6.56056622e+00 -6.56056622e+00
 -6.56056622e+00 -1.10828774e+00 -2.00628884e-01 -2.00628884e-01
 -2.00628884e-01  3.63368677e+02]
E1 = -699.3648623209757  E_coul = 200.46199866800563
cycle= 3 E= -498.90286365297  delta_E= -1.67e-09  |g|= 5.78e-07  |ddm|= 8.04e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=5.53295e-07
diis-c [-5.63822765e-14  1.08548649e-05 -2.12406374e-03  1.00211321e+00]
  HOMO = -0.200628869557842  LUMO = 363.368676569683
  mo_energy =
[-1.15935834e+02 -1.18927261e+01 -6.56056614e+00 -6.56056614e+00
 -6.56056614e+00 -1.10828773e+00 -2.00628870e-01 -2.00628870e-01
 -2.00628870e-01  3.63368677e+02]
E1 = -699.364862321015  E_coul = 200.46199866804463
cycle= 4 E= -498.90286365297  delta_E= -3.41e-13  |g|= 1.8e-09  |ddm|= 3.7e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -699.364862321015  E_coul = 200.46199866804463
  HOMO = -0.200628869546332  LUMO = 363.368676569348
  mo_energy =
[-1.15935834e+02 -1.18927261e+01 -6.56056614e+00 -6.56056614e+00
 -6.56056614e+00 -1.10828773e+00 -2.00628870e-01 -2.00628870e-01
 -2.00628870e-01  3.63368677e+02]
E1 = -699.3648623210204  E_coul = 200.4619986680498
Extra cycle  E= -498.902863652971  delta_E= -2.27e-13  |g|= 1.6e-11  |ddm|= 8.9e-12
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.851202372054605
E1 = -699.3648623210204  E_coul = 200.4619986680498
init E= -498.902863652971
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.200628869546263  LUMO = 363.368676569341
  mo_energy =
[-1.15935834e+02 -1.18927261e+01 -6.56056614e+00 -6.56056614e+00
 -6.56056614e+00 -1.10828773e+00 -2.00628870e-01 -2.00628870e-01
 -2.00628870e-01  3.63368677e+02]
E1 = -699.3648623210202  E_coul = 200.46199866804977
cycle= 1 E= -498.90286365297  delta_E= 2.27e-13  |g|= 2.31e-13  |ddm|= 7.23e-14
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -699.3648623210202  E_coul = 200.46199866804977
  HOMO = -0.200628869546265  LUMO = 363.368676569341
  mo_energy =
[-1.15935834e+02 -1.18927261e+01 -6.56056614e+00 -6.56056614e+00
 -6.56056614e+00 -1.10828773e+00 -2.00628870e-01 -2.00628870e-01
 -2.00628870e-01  3.63368677e+02]
E1 = -699.3648623210204  E_coul = 200.4619986680498
Extra cycle  E= -498.902863652971  delta_E= -2.27e-13  |g|= 1.54e-13  |ddm|= 3.49e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.32557639e+02 6.76764315e+01 4.58408323e+00 3.41726381e-01
 8.81620501e+00 5.18407021e-01]
grad_E = [-0.0057114   0.0371629  -0.06307857 -0.86778492  0.16623666  0.63394669]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  453.409521554        1
[INPUT] 0    0    [1    /1   ]  68.6922908078        1
[INPUT] 0    0    [1    /1   ]  4.62938047273        1
[INPUT] 0    0    [1    /1   ]  0.365979998603       1
[INPUT] 1    0    [1    /1   ]  8.69962207887        1
[INPUT] 1    0    [1    /1   ]  0.504852457425       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [453.40952155429164, 1.0]], [0, [68.69229080781368, 1.0]], [0, [4.629380472726365, 1.0]], [0, [0.36597999860274477, 1.0]], [1, [8.699622078865506, 1.0]], [1, [0.504852457424786, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.40952155]
bas 1, expnt(s) = [68.69229081]
bas 2, expnt(s) = [4.62938047]
bas 3, expnt(s) = [0.36598]
bas 4, expnt(s) = [8.69962208]
bas 5, expnt(s) = [0.50485246]
CPU time:        67.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.53409522e+02 2.48246424e+02 6.86922908e+01 6.02831620e+01
 4.62938047e+00 7.97365022e+00 3.65979999e-01 1.18879792e+00
 8.69962208e+00 4.35872908e+01 5.04852457e-01 1.24148074e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.28895441129783
cond(S) = 4.7654766098370445
E1 = -679.5562086359694  E_coul = 185.1224712077968
init E= -494.433737428173
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688691501565417  LUMO = 380.971915607342
  mo_energy =
[-117.49062292  -13.03281047   -7.62037991   -7.62037991   -7.62037991
   -1.6259313    -0.6886915    -0.6886915    -0.6886915   380.97191561]
E1 = -698.8488778449206  E_coul = 199.85685002726225
cycle= 1 E= -498.992027817658  delta_E= -4.56  |g|= 0.217  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.191362
diis-c [-0.03661953  1.        ]
  HOMO = -0.217141882998259  LUMO = 382.429922572666
  mo_energy =
[-1.16063899e+02 -1.19442001e+01 -6.59405869e+00 -6.59405869e+00
 -6.59405869e+00 -1.12591566e+00 -2.17141883e-01 -2.17141883e-01
 -2.17141883e-01  3.82429923e+02]
E1 = -698.844465607609  E_coul = 199.8523822823843
cycle= 2 E= -498.992083325225  delta_E= -5.55e-05  |g|= 0.00114  |ddm|= 0.00147
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00107278
diis-c [-4.74723460e-08 -5.51947418e-03  1.00551947e+00]
  HOMO = -0.217154027323664  LUMO = 382.427801553333
  mo_energy =
[-1.16065605e+02 -1.19443122e+01 -6.59418706e+00 -6.59418706e+00
 -6.59418706e+00 -1.12592230e+00 -2.17154027e-01 -2.17154027e-01
 -2.17154027e-01  3.82427802e+02]
E1 = -698.8444424566059  E_coul = 199.85235912989634
cycle= 3 E= -498.99208332671  delta_E= -1.48e-09  |g|= 9.17e-07  |ddm|= 7.12e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=9.64302e-07
diis-c [-4.81240335e-13  1.46251929e-05 -2.89331780e-03  1.00287869e+00]
  HOMO = -0.217154011718661  LUMO = 382.427801536477
  mo_energy =
[-1.16065605e+02 -1.19443121e+01 -6.59418696e+00 -6.59418696e+00
 -6.59418696e+00 -1.12592230e+00 -2.17154012e-01 -2.17154012e-01
 -2.17154012e-01  3.82427802e+02]
E1 = -698.8444424593775  E_coul = 199.85235913266777
cycle= 4 E= -498.99208332671  delta_E= -2.84e-13  |g|= 4.47e-09  |ddm|= 5.28e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.8444424593775  E_coul = 199.85235913266777
  HOMO = -0.2171540117012  LUMO = 382.427801536169
  mo_energy =
[-1.16065605e+02 -1.19443121e+01 -6.59418696e+00 -6.59418696e+00
 -6.59418696e+00 -1.12592230e+00 -2.17154012e-01 -2.17154012e-01
 -2.17154012e-01  3.82427802e+02]
E1 = -698.8444424593959  E_coul = 199.85235913268605
Extra cycle  E= -498.99208332671  delta_E=    0  |g|= 3.73e-11  |ddm|= 2.11e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.53409522e+02 6.86922908e+01 4.62938047e+00 3.65979999e-01
 8.69962208e+00 5.04852457e-01]
E = -498.9920833267098
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:39 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  453.409521554        1
[INPUT] 0    0    [1    /1   ]  68.6922908078        1
[INPUT] 0    0    [1    /1   ]  4.62938047273        1
[INPUT] 0    0    [1    /1   ]  0.365979998603       1
[INPUT] 1    0    [1    /1   ]  8.69962207887        1
[INPUT] 1    0    [1    /1   ]  0.504852457425       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [453.40952155429164, 1.0]], [0, [68.69229080781368, 1.0]], [0, [4.629380472726365, 1.0]], [0, [0.36597999860274477, 1.0]], [1, [8.699622078865506, 1.0]], [1, [0.504852457424786, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [453.40952155]
bas 1, expnt(s) = [68.69229081]
bas 2, expnt(s) = [4.62938047]
bas 3, expnt(s) = [0.36598]
bas 4, expnt(s) = [8.69962208]
bas 5, expnt(s) = [0.50485246]
CPU time:        67.81
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.53409522e+02 2.48246424e+02 6.86922908e+01 6.02831620e+01
 4.62938047e+00 7.97365022e+00 3.65979999e-01 1.18879792e+00
 8.69962208e+00 4.35872908e+01 5.04852457e-01 1.24148074e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.28895441129783
cond(S) = 4.7654766098370445
E1 = -679.5562086359694  E_coul = 185.1224712077968
init E= -494.433737428173
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688691501565417  LUMO = 380.971915607342
  mo_energy =
[-117.49062292  -13.03281047   -7.62037991   -7.62037991   -7.62037991
   -1.6259313    -0.6886915    -0.6886915    -0.6886915   380.97191561]
E1 = -698.8488778449206  E_coul = 199.85685002726225
cycle= 1 E= -498.992027817658  delta_E= -4.56  |g|= 0.217  |ddm|= 0.311
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.191362
diis-c [-0.03661953  1.        ]
  HOMO = -0.217141882998259  LUMO = 382.429922572666
  mo_energy =
[-1.16063899e+02 -1.19442001e+01 -6.59405869e+00 -6.59405869e+00
 -6.59405869e+00 -1.12591566e+00 -2.17141883e-01 -2.17141883e-01
 -2.17141883e-01  3.82429923e+02]
E1 = -698.844465607609  E_coul = 199.8523822823843
cycle= 2 E= -498.992083325225  delta_E= -5.55e-05  |g|= 0.00114  |ddm|= 0.00147
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00107278
diis-c [-4.74723460e-08 -5.51947418e-03  1.00551947e+00]
  HOMO = -0.217154027323664  LUMO = 382.427801553333
  mo_energy =
[-1.16065605e+02 -1.19443122e+01 -6.59418706e+00 -6.59418706e+00
 -6.59418706e+00 -1.12592230e+00 -2.17154027e-01 -2.17154027e-01
 -2.17154027e-01  3.82427802e+02]
E1 = -698.8444424566059  E_coul = 199.85235912989634
cycle= 3 E= -498.99208332671  delta_E= -1.48e-09  |g|= 9.17e-07  |ddm|= 7.12e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=9.64302e-07
diis-c [-4.81240335e-13  1.46251929e-05 -2.89331780e-03  1.00287869e+00]
  HOMO = -0.217154011718661  LUMO = 382.427801536477
  mo_energy =
[-1.16065605e+02 -1.19443121e+01 -6.59418696e+00 -6.59418696e+00
 -6.59418696e+00 -1.12592230e+00 -2.17154012e-01 -2.17154012e-01
 -2.17154012e-01  3.82427802e+02]
E1 = -698.8444424593775  E_coul = 199.85235913266777
cycle= 4 E= -498.99208332671  delta_E= -2.84e-13  |g|= 4.47e-09  |ddm|= 5.28e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.8444424593775  E_coul = 199.85235913266777
  HOMO = -0.2171540117012  LUMO = 382.427801536169
  mo_energy =
[-1.16065605e+02 -1.19443121e+01 -6.59418696e+00 -6.59418696e+00
 -6.59418696e+00 -1.12592230e+00 -2.17154012e-01 -2.17154012e-01
 -2.17154012e-01  3.82427802e+02]
E1 = -698.8444424593959  E_coul = 199.85235913268605
Extra cycle  E= -498.99208332671  delta_E=    0  |g|= 3.73e-11  |ddm|= 2.11e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.7654766098370445
E1 = -698.8444424593959  E_coul = 199.85235913268605
init E= -498.99208332671
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.217154011701054  LUMO = 382.427801536158
  mo_energy =
[-1.16065605e+02 -1.19443121e+01 -6.59418696e+00 -6.59418696e+00
 -6.59418696e+00 -1.12592230e+00 -2.17154012e-01 -2.17154012e-01
 -2.17154012e-01  3.82427802e+02]
E1 = -698.8444424593962  E_coul = 199.85235913268625
cycle= 1 E= -498.99208332671  delta_E= -1.14e-13  |g|= 3.62e-13  |ddm|= 1.63e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -698.8444424593962  E_coul = 199.85235913268625
  HOMO = -0.217154011701049  LUMO = 382.427801536157
  mo_energy =
[-1.16065605e+02 -1.19443121e+01 -6.59418696e+00 -6.59418696e+00
 -6.59418696e+00 -1.12592230e+00 -2.17154012e-01 -2.17154012e-01
 -2.17154012e-01  3.82427802e+02]
E1 = -698.8444424593962  E_coul = 199.8523591326862
Extra cycle  E= -498.99208332671  delta_E= -1.14e-13  |g|= 1.17e-13  |ddm|= 4.08e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.53409522e+02 6.86922908e+01 4.62938047e+00 3.65979999e-01
 8.69962208e+00 5.04852457e-01]
grad_E = [-0.00197741  0.0216038  -0.03045015 -0.47497164  0.08951742  0.34262404]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:42 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  460.346523419        1
[INPUT] 0    0    [1    /1   ]  68.6371439527        1
[INPUT] 0    0    [1    /1   ]  4.65699310371        1
[INPUT] 0    0    [1    /1   ]  0.387639593022       1
[INPUT] 1    0    [1    /1   ]  8.60009539336        1
[INPUT] 1    0    [1    /1   ]  0.492975290568       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [460.3465234193131, 1.0]], [0, [68.6371439526809, 1.0]], [0, [4.656993103711531, 1.0]], [0, [0.38763959302151735, 1.0]], [1, [8.600095393359716, 1.0]], [1, [0.4929752905684441, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [460.34652342]
bas 1, expnt(s) = [68.63714395]
bas 2, expnt(s) = [4.6569931]
bas 3, expnt(s) = [0.38763959]
bas 4, expnt(s) = [8.60009539]
bas 5, expnt(s) = [0.49297529]
CPU time:        70.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.60346523e+02 2.51089571e+02 6.86371440e+01 6.02468614e+01
 4.65699310e+00 8.00929372e+00 3.87639593e-01 1.24118386e+00
 8.60009539e+00 4.29648676e+01 4.92975291e-01 1.20507987e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.306426014017006
cond(S) = 4.75832297807338
E1 = -679.2067446268617  E_coul = 184.7775006640988
init E= -494.429243962763
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688564544778829  LUMO = 386.126371458756
  mo_energy =
[-117.58330967  -13.06063633   -7.63612013   -7.63612013   -7.63612013
   -1.63725849   -0.68856454   -0.68856454   -0.68856454  386.12637146]
E1 = -698.2329247348295  E_coul = 199.21807605005574
cycle= 1 E= -499.014848684774  delta_E= -4.59  |g|= 0.219  |ddm|= 0.303
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.198284
diis-c [-0.03931673  1.        ]
  HOMO = -0.23194502903434  LUMO = 387.548196243332
  mo_energy =
[-1.16186297e+02 -1.19913436e+01 -6.62888767e+00 -6.62888767e+00
 -6.62888767e+00 -1.13827512e+00 -2.31945029e-01 -2.31945029e-01
 -2.31945029e-01  3.87548196e+02]
E1 = -698.2285523910227  E_coul = 199.2136484061923
cycle= 2 E= -499.01490398483  delta_E= -5.53e-05  |g|= 0.00116  |ddm|= 0.00144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00112962
diis-c [-4.92851943e-08 -5.61722596e-03  1.00561723e+00]
  HOMO = -0.23195601086996  LUMO = 387.546002336405
  mo_energy =
[-1.16188008e+02 -1.19914536e+01 -6.62900946e+00 -6.62900946e+00
 -6.62900946e+00 -1.13828216e+00 -2.31956011e-01 -2.31956011e-01
 -2.31956011e-01  3.87546002e+02]
E1 = -698.2285295310694  E_coul = 199.2136255447423
cycle= 3 E= -499.014903986327  delta_E= -1.5e-09  |g|= 1.15e-06  |ddm|= 6.93e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.24568e-06
diis-c [-7.44931212e-13  1.97618704e-05 -3.82329024e-03  1.00380353e+00]
  HOMO = -0.231955994308211  LUMO = 387.546002423869
  mo_energy =
[-1.16188008e+02 -1.19914535e+01 -6.62900933e+00 -6.62900933e+00
 -6.62900933e+00 -1.13828215e+00 -2.31955994e-01 -2.31955994e-01
 -2.31955994e-01  3.87546002e+02]
E1 = -698.2285295362067  E_coul = 199.21362554988008
cycle= 4 E= -499.014903986327  delta_E= 5.12e-13  |g|= 4.82e-09  |ddm|= 6.56e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.2285295362067  E_coul = 199.21362554988008
  HOMO = -0.231955994297877  LUMO = 387.546002423941
  mo_energy =
[-1.16188008e+02 -1.19914535e+01 -6.62900933e+00 -6.62900933e+00
 -6.62900933e+00 -1.13828215e+00 -2.31955994e-01 -2.31955994e-01
 -2.31955994e-01  3.87546002e+02]
E1 = -698.2285295362308  E_coul = 199.2136255499038
Extra cycle  E= -499.014903986327  delta_E= -3.98e-13  |g|= 3.92e-11  |ddm|= 2.25e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.60346523e+02 6.86371440e+01 4.65699310e+00 3.87639593e-01
 8.60009539e+00 4.92975291e-01]
E = -499.014903986327
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:43 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  460.346523419        1
[INPUT] 0    0    [1    /1   ]  68.6371439527        1
[INPUT] 0    0    [1    /1   ]  4.65699310371        1
[INPUT] 0    0    [1    /1   ]  0.387639593022       1
[INPUT] 1    0    [1    /1   ]  8.60009539336        1
[INPUT] 1    0    [1    /1   ]  0.492975290568       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [460.3465234193131, 1.0]], [0, [68.6371439526809, 1.0]], [0, [4.656993103711531, 1.0]], [0, [0.38763959302151735, 1.0]], [1, [8.600095393359716, 1.0]], [1, [0.4929752905684441, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [460.34652342]
bas 1, expnt(s) = [68.63714395]
bas 2, expnt(s) = [4.6569931]
bas 3, expnt(s) = [0.38763959]
bas 4, expnt(s) = [8.60009539]
bas 5, expnt(s) = [0.49297529]
CPU time:        71.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.60346523e+02 2.51089571e+02 6.86371440e+01 6.02468614e+01
 4.65699310e+00 8.00929372e+00 3.87639593e-01 1.24118386e+00
 8.60009539e+00 4.29648676e+01 4.92975291e-01 1.20507987e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.306426014017006
cond(S) = 4.75832297807338
E1 = -679.2067446268617  E_coul = 184.7775006640988
init E= -494.429243962763
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.688564544778829  LUMO = 386.126371458756
  mo_energy =
[-117.58330967  -13.06063633   -7.63612013   -7.63612013   -7.63612013
   -1.63725849   -0.68856454   -0.68856454   -0.68856454  386.12637146]
E1 = -698.2329247348295  E_coul = 199.21807605005574
cycle= 1 E= -499.014848684774  delta_E= -4.59  |g|= 0.219  |ddm|= 0.303
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.198284
diis-c [-0.03931673  1.        ]
  HOMO = -0.23194502903434  LUMO = 387.548196243332
  mo_energy =
[-1.16186297e+02 -1.19913436e+01 -6.62888767e+00 -6.62888767e+00
 -6.62888767e+00 -1.13827512e+00 -2.31945029e-01 -2.31945029e-01
 -2.31945029e-01  3.87548196e+02]
E1 = -698.2285523910227  E_coul = 199.2136484061923
cycle= 2 E= -499.01490398483  delta_E= -5.53e-05  |g|= 0.00116  |ddm|= 0.00144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00112962
diis-c [-4.92851943e-08 -5.61722596e-03  1.00561723e+00]
  HOMO = -0.23195601086996  LUMO = 387.546002336405
  mo_energy =
[-1.16188008e+02 -1.19914536e+01 -6.62900946e+00 -6.62900946e+00
 -6.62900946e+00 -1.13828216e+00 -2.31956011e-01 -2.31956011e-01
 -2.31956011e-01  3.87546002e+02]
E1 = -698.2285295310694  E_coul = 199.2136255447423
cycle= 3 E= -499.014903986327  delta_E= -1.5e-09  |g|= 1.15e-06  |ddm|= 6.93e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.24568e-06
diis-c [-7.44931212e-13  1.97618704e-05 -3.82329024e-03  1.00380353e+00]
  HOMO = -0.231955994308211  LUMO = 387.546002423869
  mo_energy =
[-1.16188008e+02 -1.19914535e+01 -6.62900933e+00 -6.62900933e+00
 -6.62900933e+00 -1.13828215e+00 -2.31955994e-01 -2.31955994e-01
 -2.31955994e-01  3.87546002e+02]
E1 = -698.2285295362067  E_coul = 199.21362554988008
cycle= 4 E= -499.014903986327  delta_E= 5.12e-13  |g|= 4.82e-09  |ddm|= 6.56e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.2285295362067  E_coul = 199.21362554988008
  HOMO = -0.231955994297877  LUMO = 387.546002423941
  mo_energy =
[-1.16188008e+02 -1.19914535e+01 -6.62900933e+00 -6.62900933e+00
 -6.62900933e+00 -1.13828215e+00 -2.31955994e-01 -2.31955994e-01
 -2.31955994e-01  3.87546002e+02]
E1 = -698.2285295362308  E_coul = 199.2136255499038
Extra cycle  E= -499.014903986327  delta_E= -3.98e-13  |g|= 3.92e-11  |ddm|= 2.25e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.75832297807338
E1 = -698.2285295362308  E_coul = 199.2136255499038
init E= -499.014903986327
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.231955994297742  LUMO = 387.546002423932
  mo_energy =
[-1.16188008e+02 -1.19914535e+01 -6.62900933e+00 -6.62900933e+00
 -6.62900933e+00 -1.13828215e+00 -2.31955994e-01 -2.31955994e-01
 -2.31955994e-01  3.87546002e+02]
E1 = -698.2285295362304  E_coul = 199.21362554990375
cycle= 1 E= -499.014903986327  delta_E= 3.41e-13  |g|= 3.37e-13  |ddm|= 1.74e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -698.2285295362304  E_coul = 199.21362554990375
  HOMO = -0.231955994297745  LUMO = 387.546002423932
  mo_energy =
[-1.16188008e+02 -1.19914535e+01 -6.62900933e+00 -6.62900933e+00
 -6.62900933e+00 -1.13828215e+00 -2.31955994e-01 -2.31955994e-01
 -2.31955994e-01  3.87546002e+02]
E1 = -698.2285295362308  E_coul = 199.2136255499039
Extra cycle  E= -499.014903986327  delta_E= -2.27e-13  |g|= 3.01e-14  |ddm|= 4.46e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.60346523e+02 6.86371440e+01 4.65699310e+00 3.87639593e-01
 8.60009539e+00 4.92975291e-01]
grad_E = [-4.85394027e-05  4.39266638e-03 -7.73983283e-03 -1.43995316e-01
  2.06038865e-02  7.03515418e-02]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  459.610336247        1
[INPUT] 0    0    [1    /1   ]  68.4604768969        1
[INPUT] 0    0    [1    /1   ]  4.66330929748        1
[INPUT] 0    0    [1    /1   ]  0.39536184501        1
[INPUT] 1    0    [1    /1   ]  8.57548700333        1
[INPUT] 1    0    [1    /1   ]  0.490103314648       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [459.610336246776, 1.0]], [0, [68.46047689693417, 1.0]], [0, [4.663309297484223, 1.0]], [0, [0.39536184500984534, 1.0]], [1, [8.575487003329785, 1.0]], [1, [0.490103314647943, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [459.61033625]
bas 1, expnt(s) = [68.4604769]
bas 2, expnt(s) = [4.6633093]
bas 3, expnt(s) = [0.39536185]
bas 4, expnt(s) = [8.575487]
bas 5, expnt(s) = [0.49010331]
CPU time:        74.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.59610336e+02 2.50788354e+02 6.84604769e+01 6.01305207e+01
 4.66330930e+00 8.01743948e+00 3.95361845e-01 1.25968248e+00
 8.57548700e+00 4.28112476e+01 4.90103315e-01 1.19631058e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.309397668366547
cond(S) = 4.775051396466265
E1 = -679.1476754412486  E_coul = 184.71202507984916
init E= -494.435650361399
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68788524952668  LUMO = 385.01318728098
  mo_energy =
[-117.60516464  -13.06533169   -7.63800713   -7.63800713   -7.63800713
   -1.63961993   -0.68788525   -0.68788525   -0.68788525  385.01318728]
E1 = -698.111802888121  E_coul = 199.09541704692583
cycle= 1 E= -499.016385841195  delta_E= -4.58  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199791
diis-c [-0.03991629  1.        ]
  HOMO = -0.234187024521184  LUMO = 386.426095193859
  mo_energy =
[-1.16215033e+02 -1.19999178e+01 -6.63449085e+00 -6.63449085e+00
 -6.63449085e+00 -1.13952741e+00 -2.34187025e-01 -2.34187025e-01
 -2.34187025e-01  3.86426095e+02]
E1 = -698.1074034833025  E_coul = 199.09096192495846
cycle= 2 E= -499.016441558344  delta_E= -5.57e-05  |g|= 0.00117  |ddm|= 0.00144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114346
diis-c [-4.91731928e-08 -5.64636777e-03  1.00564637e+00]
  HOMO = -0.234197874915808  LUMO = 386.423879324977
  mo_energy =
[-1.16216758e+02 -1.20000283e+01 -6.63461259e+00 -6.63461259e+00
 -6.63461259e+00 -1.13953465e+00 -2.34197875e-01 -2.34197875e-01
 -2.34197875e-01  3.86423879e+02]
E1 = -698.1073804548291  E_coul = 199.09093889496702
cycle= 3 E= -499.016441559862  delta_E= -1.52e-09  |g|= 1.19e-06  |ddm|= 6.96e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.28376e-06
diis-c [-7.75678960e-13  2.07310776e-05 -3.98385402e-03  1.00396312e+00]
  HOMO = -0.234197858133186  LUMO = 386.423879446375
  mo_energy =
[-1.16216758e+02 -1.20000282e+01 -6.63461246e+00 -6.63461246e+00
 -6.63461246e+00 -1.13953464e+00 -2.34197858e-01 -2.34197858e-01
 -2.34197858e-01  3.86423879e+02]
E1 = -698.107380460542  E_coul = 199.09093890068013
cycle= 4 E= -499.016441559862  delta_E= 2.27e-13  |g|= 4.82e-09  |ddm|= 6.84e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.107380460542  E_coul = 199.09093890068013
  HOMO = -0.234197858124321  LUMO = 386.42387944652
  mo_energy =
[-1.16216758e+02 -1.20000282e+01 -6.63461246e+00 -6.63461246e+00
 -6.63461246e+00 -1.13953464e+00 -2.34197858e-01 -2.34197858e-01
 -2.34197858e-01  3.86423879e+02]
E1 = -698.107380460567  E_coul = 199.09093890070508
Extra cycle  E= -499.016441559862  delta_E= -1.14e-13  |g|= 3.9e-11  |ddm|= 2.26e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.59610336e+02 6.84604769e+01 4.66330930e+00 3.95361845e-01
 8.57548700e+00 4.90103315e-01]
E = -499.01644155986196
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:46 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  459.610336247        1
[INPUT] 0    0    [1    /1   ]  68.4604768969        1
[INPUT] 0    0    [1    /1   ]  4.66330929748        1
[INPUT] 0    0    [1    /1   ]  0.39536184501        1
[INPUT] 1    0    [1    /1   ]  8.57548700333        1
[INPUT] 1    0    [1    /1   ]  0.490103314648       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [459.610336246776, 1.0]], [0, [68.46047689693417, 1.0]], [0, [4.663309297484223, 1.0]], [0, [0.39536184500984534, 1.0]], [1, [8.575487003329785, 1.0]], [1, [0.490103314647943, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [459.61033625]
bas 1, expnt(s) = [68.4604769]
bas 2, expnt(s) = [4.6633093]
bas 3, expnt(s) = [0.39536185]
bas 4, expnt(s) = [8.575487]
bas 5, expnt(s) = [0.49010331]
CPU time:        74.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.59610336e+02 2.50788354e+02 6.84604769e+01 6.01305207e+01
 4.66330930e+00 8.01743948e+00 3.95361845e-01 1.25968248e+00
 8.57548700e+00 4.28112476e+01 4.90103315e-01 1.19631058e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.309397668366547
cond(S) = 4.775051396466265
E1 = -679.1476754412486  E_coul = 184.71202507984916
init E= -494.435650361399
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.68788524952668  LUMO = 385.01318728098
  mo_energy =
[-117.60516464  -13.06533169   -7.63800713   -7.63800713   -7.63800713
   -1.63961993   -0.68788525   -0.68788525   -0.68788525  385.01318728]
E1 = -698.111802888121  E_coul = 199.09541704692583
cycle= 1 E= -499.016385841195  delta_E= -4.58  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.199791
diis-c [-0.03991629  1.        ]
  HOMO = -0.234187024521184  LUMO = 386.426095193859
  mo_energy =
[-1.16215033e+02 -1.19999178e+01 -6.63449085e+00 -6.63449085e+00
 -6.63449085e+00 -1.13952741e+00 -2.34187025e-01 -2.34187025e-01
 -2.34187025e-01  3.86426095e+02]
E1 = -698.1074034833025  E_coul = 199.09096192495846
cycle= 2 E= -499.016441558344  delta_E= -5.57e-05  |g|= 0.00117  |ddm|= 0.00144
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114346
diis-c [-4.91731928e-08 -5.64636777e-03  1.00564637e+00]
  HOMO = -0.234197874915808  LUMO = 386.423879324977
  mo_energy =
[-1.16216758e+02 -1.20000283e+01 -6.63461259e+00 -6.63461259e+00
 -6.63461259e+00 -1.13953465e+00 -2.34197875e-01 -2.34197875e-01
 -2.34197875e-01  3.86423879e+02]
E1 = -698.1073804548291  E_coul = 199.09093889496702
cycle= 3 E= -499.016441559862  delta_E= -1.52e-09  |g|= 1.19e-06  |ddm|= 6.96e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.28376e-06
diis-c [-7.75678960e-13  2.07310776e-05 -3.98385402e-03  1.00396312e+00]
  HOMO = -0.234197858133186  LUMO = 386.423879446375
  mo_energy =
[-1.16216758e+02 -1.20000282e+01 -6.63461246e+00 -6.63461246e+00
 -6.63461246e+00 -1.13953464e+00 -2.34197858e-01 -2.34197858e-01
 -2.34197858e-01  3.86423879e+02]
E1 = -698.107380460542  E_coul = 199.09093890068013
cycle= 4 E= -499.016441559862  delta_E= 2.27e-13  |g|= 4.82e-09  |ddm|= 6.84e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.107380460542  E_coul = 199.09093890068013
  HOMO = -0.234197858124321  LUMO = 386.42387944652
  mo_energy =
[-1.16216758e+02 -1.20000282e+01 -6.63461246e+00 -6.63461246e+00
 -6.63461246e+00 -1.13953464e+00 -2.34197858e-01 -2.34197858e-01
 -2.34197858e-01  3.86423879e+02]
E1 = -698.107380460567  E_coul = 199.09093890070508
Extra cycle  E= -499.016441559862  delta_E= -1.14e-13  |g|= 3.9e-11  |ddm|= 2.26e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.11 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.775051396466265
E1 = -698.107380460567  E_coul = 199.09093890070508
init E= -499.016441559862
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234197858124181  LUMO = 386.423879446511
  mo_energy =
[-1.16216758e+02 -1.20000282e+01 -6.63461246e+00 -6.63461246e+00
 -6.63461246e+00 -1.13953464e+00 -2.34197858e-01 -2.34197858e-01
 -2.34197858e-01  3.86423879e+02]
E1 = -698.1073804605674  E_coul = 199.09093890070508
cycle= 1 E= -499.016441559862  delta_E= -3.41e-13  |g|= 2.08e-13  |ddm|= 1.73e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
E1 = -698.1073804605674  E_coul = 199.09093890070508
  HOMO = -0.234197858124182  LUMO = 386.423879446511
  mo_energy =
[-1.16216758e+02 -1.20000282e+01 -6.63461246e+00 -6.63461246e+00
 -6.63461246e+00 -1.13953464e+00 -2.34197858e-01 -2.34197858e-01
 -2.34197858e-01  3.86423879e+02]
E1 = -698.1073804605676  E_coul = 199.09093890070525
Extra cycle  E= -499.016441559862  delta_E=    0  |g|= 3.43e-14  |ddm|= 3.64e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.13 sec
exp = [4.59610336e+02 6.84604769e+01 4.66330930e+00 3.95361845e-01
 8.57548700e+00 4.90103315e-01]
grad_E = [ 0.00014347  0.00020015 -0.00172182 -0.02701258  0.00321038  0.01022689]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:49 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.564080679        1
[INPUT] 0    0    [1    /1   ]  68.3794637377        1
[INPUT] 0    0    [1    /1   ]  4.66483182534        1
[INPUT] 0    0    [1    /1   ]  0.397171705761       1
[INPUT] 1    0    [1    /1   ]  8.5710119794         1
[INPUT] 1    0    [1    /1   ]  0.489581787997       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.5640806791438, 1.0]], [0, [68.37946373769478, 1.0]], [0, [4.664831825343758, 1.0]], [0, [0.39717170576051797, 1.0]], [1, [8.571011979395843, 1.0]], [1, [0.4895817879967746, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.56408068]
bas 1, expnt(s) = [68.37946374]
bas 2, expnt(s) = [4.66483183]
bas 3, expnt(s) = [0.39717171]
bas 4, expnt(s) = [8.57101198]
bas 5, expnt(s) = [0.48958179]
CPU time:        77.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58564081e+02 2.50360061e+02 6.83794637e+01 6.00771459e+01
 4.66483183e+00 8.01940261e+00 3.97171706e-01 1.26400488e+00
 8.57101198e+00 4.27833237e+01 4.89581788e-01 1.19471952e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.309834222730604
cond(S) = 4.78429061813768
E1 = -679.1477582027279  E_coul = 184.7060763346715
init E= -494.441681868056
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687596808416098  LUMO = 383.961266992364
  mo_energy =
[-117.60892961  -13.06556229   -7.63781558   -7.63781558   -7.63781558
   -1.63995086   -0.68759681   -0.68759681   -0.68759681  383.96126699]
E1 = -698.0966643492094  E_coul = 199.0801405111566
cycle= 1 E= -499.016523838053  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199747
diis-c [-0.03989905  1.        ]
  HOMO = -0.234375212141713  LUMO = 385.372627681432
  mo_energy =
[-1.16219982e+02 -1.20008304e+01 -6.63493681e+00 -6.63493681e+00
 -6.63493681e+00 -1.13947149e+00 -2.34375212e-01 -2.34375212e-01
 -2.34375212e-01  3.85372628e+02]
E1 = -698.0922499419663  E_coul = 199.0756702396236
cycle= 2 E= -499.016579702343  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0011442
diis-c [-4.87940899e-08 -5.65222962e-03  1.00565223e+00]
  HOMO = -0.234386083898045  LUMO = 385.370408673339
  mo_energy =
[-1.16221712e+02 -1.20009412e+01 -6.63505904e+00 -6.63505904e+00
 -6.63505904e+00 -1.13947879e+00 -2.34386084e-01 -2.34386084e-01
 -2.34386084e-01  3.85370409e+02]
E1 = -698.0922268122855  E_coul = 199.0756471084173
cycle= 3 E= -499.016579703868  delta_E= -1.53e-09  |g|= 1.19e-06  |ddm|= 7e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.27828e-06
diis-c [-7.71209387e-13  2.07204148e-05 -3.97666714e-03  1.00395595e+00]
  HOMO = -0.234386067088403  LUMO = 385.370408799929
  mo_energy =
[-1.16221711e+02 -1.20009411e+01 -6.63505890e+00 -6.63505890e+00
 -6.63505890e+00 -1.13947879e+00 -2.34386067e-01 -2.34386067e-01
 -2.34386067e-01  3.85370409e+02]
E1 = -698.0922268180647  E_coul = 199.07564711419636
cycle= 4 E= -499.016579703868  delta_E= -5.68e-14  |g|= 4.83e-09  |ddm|= 6.86e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0922268180647  E_coul = 199.07564711419636
  HOMO = -0.23438606707936  LUMO = 385.370408800081
  mo_energy =
[-1.16221711e+02 -1.20009411e+01 -6.63505890e+00 -6.63505890e+00
 -6.63505890e+00 -1.13947879e+00 -2.34386067e-01 -2.34386067e-01
 -2.34386067e-01  3.85370409e+02]
E1 = -698.0922268180896  E_coul = 199.07564711422114
Extra cycle  E= -499.016579703868  delta_E= -1.14e-13  |g|= 3.88e-11  |ddm|= 2.27e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.58564081e+02 6.83794637e+01 4.66483183e+00 3.97171706e-01
 8.57101198e+00 4.89581788e-01]
E = -499.0165797038684
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:50 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.564080679        1
[INPUT] 0    0    [1    /1   ]  68.3794637377        1
[INPUT] 0    0    [1    /1   ]  4.66483182534        1
[INPUT] 0    0    [1    /1   ]  0.397171705761       1
[INPUT] 1    0    [1    /1   ]  8.5710119794         1
[INPUT] 1    0    [1    /1   ]  0.489581787997       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.5640806791438, 1.0]], [0, [68.37946373769478, 1.0]], [0, [4.664831825343758, 1.0]], [0, [0.39717170576051797, 1.0]], [1, [8.571011979395843, 1.0]], [1, [0.4895817879967746, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.56408068]
bas 1, expnt(s) = [68.37946374]
bas 2, expnt(s) = [4.66483183]
bas 3, expnt(s) = [0.39717171]
bas 4, expnt(s) = [8.57101198]
bas 5, expnt(s) = [0.48958179]
CPU time:        78.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58564081e+02 2.50360061e+02 6.83794637e+01 6.00771459e+01
 4.66483183e+00 8.01940261e+00 3.97171706e-01 1.26400488e+00
 8.57101198e+00 4.27833237e+01 4.89581788e-01 1.19471952e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.309834222730604
cond(S) = 4.78429061813768
E1 = -679.1477582027279  E_coul = 184.7060763346715
init E= -494.441681868056
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687596808416098  LUMO = 383.961266992364
  mo_energy =
[-117.60892961  -13.06556229   -7.63781558   -7.63781558   -7.63781558
   -1.63995086   -0.68759681   -0.68759681   -0.68759681  383.96126699]
E1 = -698.0966643492094  E_coul = 199.0801405111566
cycle= 1 E= -499.016523838053  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199747
diis-c [-0.03989905  1.        ]
  HOMO = -0.234375212141713  LUMO = 385.372627681432
  mo_energy =
[-1.16219982e+02 -1.20008304e+01 -6.63493681e+00 -6.63493681e+00
 -6.63493681e+00 -1.13947149e+00 -2.34375212e-01 -2.34375212e-01
 -2.34375212e-01  3.85372628e+02]
E1 = -698.0922499419663  E_coul = 199.0756702396236
cycle= 2 E= -499.016579702343  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0011442
diis-c [-4.87940899e-08 -5.65222962e-03  1.00565223e+00]
  HOMO = -0.234386083898045  LUMO = 385.370408673339
  mo_energy =
[-1.16221712e+02 -1.20009412e+01 -6.63505904e+00 -6.63505904e+00
 -6.63505904e+00 -1.13947879e+00 -2.34386084e-01 -2.34386084e-01
 -2.34386084e-01  3.85370409e+02]
E1 = -698.0922268122855  E_coul = 199.0756471084173
cycle= 3 E= -499.016579703868  delta_E= -1.53e-09  |g|= 1.19e-06  |ddm|= 7e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.27828e-06
diis-c [-7.71209387e-13  2.07204148e-05 -3.97666714e-03  1.00395595e+00]
  HOMO = -0.234386067088403  LUMO = 385.370408799929
  mo_energy =
[-1.16221711e+02 -1.20009411e+01 -6.63505890e+00 -6.63505890e+00
 -6.63505890e+00 -1.13947879e+00 -2.34386067e-01 -2.34386067e-01
 -2.34386067e-01  3.85370409e+02]
E1 = -698.0922268180647  E_coul = 199.07564711419636
cycle= 4 E= -499.016579703868  delta_E= -5.68e-14  |g|= 4.83e-09  |ddm|= 6.86e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0922268180647  E_coul = 199.07564711419636
  HOMO = -0.23438606707936  LUMO = 385.370408800081
  mo_energy =
[-1.16221711e+02 -1.20009411e+01 -6.63505890e+00 -6.63505890e+00
 -6.63505890e+00 -1.13947879e+00 -2.34386067e-01 -2.34386067e-01
 -2.34386067e-01  3.85370409e+02]
E1 = -698.0922268180896  E_coul = 199.07564711422114
Extra cycle  E= -499.016579703868  delta_E= -1.14e-13  |g|= 3.88e-11  |ddm|= 2.27e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.78429061813768
E1 = -698.0922268180896  E_coul = 199.07564711422114
init E= -499.016579703868
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234386067079231  LUMO = 385.370408800072
  mo_energy =
[-1.16221711e+02 -1.20009411e+01 -6.63505890e+00 -6.63505890e+00
 -6.63505890e+00 -1.13947879e+00 -2.34386067e-01 -2.34386067e-01
 -2.34386067e-01  3.85370409e+02]
E1 = -698.0922268180894  E_coul = 199.07564711422123
cycle= 1 E= -499.016579703868  delta_E= 1.71e-13  |g|= 2.61e-13  |ddm|= 1.75e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -698.0922268180894  E_coul = 199.07564711422123
  HOMO = -0.23438606707923  LUMO = 385.370408800072
  mo_energy =
[-1.16221711e+02 -1.20009411e+01 -6.63505890e+00 -6.63505890e+00
 -6.63505890e+00 -1.13947879e+00 -2.34386067e-01 -2.34386067e-01
 -2.34386067e-01  3.85370409e+02]
E1 = -698.0922268180896  E_coul = 199.07564711422134
Extra cycle  E= -499.016579703868  delta_E=    0  |g|= 9.1e-14  |ddm|= 4.63e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.58564081e+02 6.83794637e+01 4.66483183e+00 3.97171706e-01
 8.57101198e+00 4.89581788e-01]
grad_E = [ 5.10892999e-05 -1.71079743e-04 -3.67037433e-05  7.19743691e-04
  2.88044552e-05  4.19632892e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.229971005        1
[INPUT] 0    0    [1    /1   ]  68.3612413785        1
[INPUT] 0    0    [1    /1   ]  4.66485083024        1
[INPUT] 0    0    [1    /1   ]  0.397191666182       1
[INPUT] 1    0    [1    /1   ]  8.57091845116        1
[INPUT] 1    0    [1    /1   ]  0.489563528021       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.22997100455757, 1.0]], [0, [68.36124137848967, 1.0]], [0, [4.664850830243157, 1.0]], [0, [0.3971916661820868, 1.0]], [1, [8.570918451155148, 1.0]], [1, [0.4895635280212104, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.229971]
bas 1, expnt(s) = [68.36124138]
bas 2, expnt(s) = [4.66485083]
bas 3, expnt(s) = [0.39719167]
bas 4, expnt(s) = [8.57091845]
bas 5, expnt(s) = [0.48956353]
CPU time:        81.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58229971e+02 2.50223240e+02 6.83612414e+01 6.00651381e+01
 4.66485083e+00 8.01942712e+00 3.97191666e-01 1.26405252e+00
 8.57091845e+00 4.27827401e+01 4.89563528e-01 1.19466382e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3098673559261
cond(S) = 4.786281824184705
E1 = -679.1487336215098  E_coul = 184.7053787143582
init E= -494.443354907152
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687600121807765  LUMO = 383.648175714787
  mo_energy =
[-117.60916652  -13.06556175   -7.63784523   -7.63784523   -7.63784523
   -1.63995295   -0.68760012   -0.68760012   -0.68760012  383.64817571]
E1 = -698.0950536685947  E_coul = 199.0785224066463
cycle= 1 E= -499.016531261948  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199631
diis-c [-0.03985249  1.        ]
  HOMO = -0.234408878636804  LUMO = 385.059435900185
  mo_energy =
[-1.16220320e+02 -1.20008981e+01 -6.63503197e+00 -6.63503197e+00
 -6.63503197e+00 -1.13949203e+00 -2.34408879e-01 -2.34408879e-01
 -2.34408879e-01  3.85059436e+02]
E1 = -698.090635494921  E_coul = 199.0740483395075
cycle= 2 E= -499.016587155414  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.0011435
diis-c [-4.86712112e-08 -5.65221982e-03  1.00565222e+00]
  HOMO = -0.234419766388126  LUMO = 385.057217215632
  mo_energy =
[-1.16222051e+02 -1.20010091e+01 -6.63515439e+00 -6.63515439e+00
 -6.63515439e+00 -1.13949934e+00 -2.34419766e-01 -2.34419766e-01
 -2.34419766e-01  3.85057217e+02]
E1 = -698.0906123390604  E_coul = 199.0740251821202
cycle= 3 E= -499.01658715694  delta_E= -1.53e-09  |g|= 1.18e-06  |ddm|= 7.01e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.27352e-06
diis-c [-7.67408689e-13  2.06424479e-05 -3.96182423e-03  1.00394118e+00]
  HOMO = -0.234419749586348  LUMO = 385.057217341547
  mo_energy =
[-1.16222051e+02 -1.20010090e+01 -6.63515426e+00 -6.63515426e+00
 -6.63515426e+00 -1.13949933e+00 -2.34419750e-01 -2.34419750e-01
 -2.34419750e-01  3.85057217e+02]
E1 = -698.0906123448201  E_coul = 199.07402518788
cycle= 4 E= -499.01658715694  delta_E= 1.14e-13  |g|= 4.84e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0906123448201  E_coul = 199.07402518788
  HOMO = -0.234419749577136  LUMO = 385.057217341697
  mo_energy =
[-1.16222051e+02 -1.20010090e+01 -6.63515426e+00 -6.63515426e+00
 -6.63515426e+00 -1.13949933e+00 -2.34419750e-01 -2.34419750e-01
 -2.34419750e-01  3.85057217e+02]
E1 = -698.0906123448453  E_coul = 199.0740251879051
Extra cycle  E= -499.01658715694  delta_E= -1.14e-13  |g|= 3.93e-11  |ddm|= 2.28e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
exp = [4.58229971e+02 6.83612414e+01 4.66485083e+00 3.97191666e-01
 8.57091845e+00 4.89563528e-01]
E = -499.0165871569402
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:53 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.229971005        1
[INPUT] 0    0    [1    /1   ]  68.3612413785        1
[INPUT] 0    0    [1    /1   ]  4.66485083024        1
[INPUT] 0    0    [1    /1   ]  0.397191666182       1
[INPUT] 1    0    [1    /1   ]  8.57091845116        1
[INPUT] 1    0    [1    /1   ]  0.489563528021       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.22997100455757, 1.0]], [0, [68.36124137848967, 1.0]], [0, [4.664850830243157, 1.0]], [0, [0.3971916661820868, 1.0]], [1, [8.570918451155148, 1.0]], [1, [0.4895635280212104, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.229971]
bas 1, expnt(s) = [68.36124138]
bas 2, expnt(s) = [4.66485083]
bas 3, expnt(s) = [0.39719167]
bas 4, expnt(s) = [8.57091845]
bas 5, expnt(s) = [0.48956353]
CPU time:        81.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58229971e+02 2.50223240e+02 6.83612414e+01 6.00651381e+01
 4.66485083e+00 8.01942712e+00 3.97191666e-01 1.26405252e+00
 8.57091845e+00 4.27827401e+01 4.89563528e-01 1.19466382e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3098673559261
cond(S) = 4.786281824184705
E1 = -679.1487336215098  E_coul = 184.7053787143582
init E= -494.443354907152
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687600121807765  LUMO = 383.648175714787
  mo_energy =
[-117.60916652  -13.06556175   -7.63784523   -7.63784523   -7.63784523
   -1.63995295   -0.68760012   -0.68760012   -0.68760012  383.64817571]
E1 = -698.0950536685947  E_coul = 199.0785224066463
cycle= 1 E= -499.016531261948  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199631
diis-c [-0.03985249  1.        ]
  HOMO = -0.234408878636804  LUMO = 385.059435900185
  mo_energy =
[-1.16220320e+02 -1.20008981e+01 -6.63503197e+00 -6.63503197e+00
 -6.63503197e+00 -1.13949203e+00 -2.34408879e-01 -2.34408879e-01
 -2.34408879e-01  3.85059436e+02]
E1 = -698.090635494921  E_coul = 199.0740483395075
cycle= 2 E= -499.016587155414  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.0011435
diis-c [-4.86712112e-08 -5.65221982e-03  1.00565222e+00]
  HOMO = -0.234419766388126  LUMO = 385.057217215632
  mo_energy =
[-1.16222051e+02 -1.20010091e+01 -6.63515439e+00 -6.63515439e+00
 -6.63515439e+00 -1.13949934e+00 -2.34419766e-01 -2.34419766e-01
 -2.34419766e-01  3.85057217e+02]
E1 = -698.0906123390604  E_coul = 199.0740251821202
cycle= 3 E= -499.01658715694  delta_E= -1.53e-09  |g|= 1.18e-06  |ddm|= 7.01e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.27352e-06
diis-c [-7.67408689e-13  2.06424479e-05 -3.96182423e-03  1.00394118e+00]
  HOMO = -0.234419749586348  LUMO = 385.057217341547
  mo_energy =
[-1.16222051e+02 -1.20010090e+01 -6.63515426e+00 -6.63515426e+00
 -6.63515426e+00 -1.13949933e+00 -2.34419750e-01 -2.34419750e-01
 -2.34419750e-01  3.85057217e+02]
E1 = -698.0906123448201  E_coul = 199.07402518788
cycle= 4 E= -499.01658715694  delta_E= 1.14e-13  |g|= 4.84e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0906123448201  E_coul = 199.07402518788
  HOMO = -0.234419749577136  LUMO = 385.057217341697
  mo_energy =
[-1.16222051e+02 -1.20010090e+01 -6.63515426e+00 -6.63515426e+00
 -6.63515426e+00 -1.13949933e+00 -2.34419750e-01 -2.34419750e-01
 -2.34419750e-01  3.85057217e+02]
E1 = -698.0906123448453  E_coul = 199.0740251879051
Extra cycle  E= -499.01658715694  delta_E= -1.14e-13  |g|= 3.93e-11  |ddm|= 2.28e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.786281824184705
E1 = -698.0906123448453  E_coul = 199.0740251879051
init E= -499.01658715694
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234419749576999  LUMO = 385.057217341688
  mo_energy =
[-1.16222051e+02 -1.20010090e+01 -6.63515426e+00 -6.63515426e+00
 -6.63515426e+00 -1.13949933e+00 -2.34419750e-01 -2.34419750e-01
 -2.34419750e-01  3.85057217e+02]
E1 = -698.0906123448451  E_coul = 199.0740251879049
cycle= 1 E= -499.01658715694  delta_E=    0  |g|= 3.5e-13  |ddm|= 1.74e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -698.0906123448451  E_coul = 199.0740251879049
  HOMO = -0.234419749577006  LUMO = 385.057217341688
  mo_energy =
[-1.16222051e+02 -1.20010090e+01 -6.63515426e+00 -6.63515426e+00
 -6.63515426e+00 -1.13949933e+00 -2.34419750e-01 -2.34419750e-01
 -2.34419750e-01  3.85057217e+02]
E1 = -698.0906123448456  E_coul = 199.0740251879052
Extra cycle  E= -499.01658715694  delta_E= -1.71e-13  |g|= 2.33e-13  |ddm|= 4.19e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.58229971e+02 6.83612414e+01 4.66485083e+00 3.97191666e-01
 8.57091845e+00 4.89563528e-01]
grad_E = [ 4.72540576e-06 -3.27079604e-05  4.74876316e-05  1.15126319e-03
 -5.68200071e-05 -1.25179040e-04]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:56 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.206455716        1
[INPUT] 0    0    [1    /1   ]  68.3605692929        1
[INPUT] 0    0    [1    /1   ]  4.66480794278        1
[INPUT] 0    0    [1    /1   ]  0.39712424424        1
[INPUT] 1    0    [1    /1   ]  8.57100585827        1
[INPUT] 1    0    [1    /1   ]  0.489574116064       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.20645571635185, 1.0]], [0, [68.36056929292454, 1.0]], [0, [4.664807942775228, 1.0]], [0, [0.3971242442397345, 1.0]], [1, [8.571005858266467, 1.0]], [1, [0.4895741160636007, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.20645572]
bas 1, expnt(s) = [68.36056929]
bas 2, expnt(s) = [4.66480794]
bas 3, expnt(s) = [0.39712424]
bas 4, expnt(s) = [8.57100586]
bas 5, expnt(s) = [0.48957412]
CPU time:        84.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58206456e+02 2.50213609e+02 6.83605693e+01 6.00646952e+01
 4.66480794e+00 8.01937182e+00 3.97124244e-01 1.26389159e+00
 8.57100586e+00 4.27832855e+01 4.89574116e-01 1.19469612e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.309865458517663
cond(S) = 4.786298148783539
E1 = -679.1484025036259  E_coul = 184.70497594371318
init E= -494.443426559913
    CPU time for initialize scf      0.02 sec, wall time      0.03 sec
  HOMO = -0.687618474513363  LUMO = 383.627814263714
  mo_energy =
[-117.60915284  -13.06558971   -7.637891     -7.637891     -7.637891
   -1.63994789   -0.68761847   -0.68761847   -0.68761847  383.62781426]
E1 = -698.0946477604397  E_coul = 199.07811640632752
cycle= 1 E= -499.016531354112  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.199614
diis-c [-0.03984575  1.        ]
  HOMO = -0.23442253243429  LUMO = 385.039088969977
  mo_energy =
[-1.16220301e+02 -1.20009239e+01 -6.63507717e+00 -6.63507717e+00
 -6.63507717e+00 -1.13951123e+00 -2.34422532e-01 -2.34422532e-01
 -2.34422532e-01  3.85039089e+02]
E1 = -698.0902294129563  E_coul = 199.07364216464902
cycle= 2 E= -499.016587248307  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114337
diis-c [-4.86647821e-08 -5.65203504e-03  1.00565204e+00]
  HOMO = -0.23443342201344  LUMO = 385.036870423603
  mo_energy =
[-1.16222033e+02 -1.20010349e+01 -6.63519961e+00 -6.63519961e+00
 -6.63519961e+00 -1.13951854e+00 -2.34433422e-01 -2.34433422e-01
 -2.34433422e-01  3.85036870e+02]
E1 = -698.0902062558134  E_coul = 199.07361900597883
cycle= 3 E= -499.016587249835  delta_E= -1.53e-09  |g|= 1.18e-06  |ddm|= 7.01e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.27293e-06
diis-c [-7.66942442e-13  2.06297579e-05 -3.95958148e-03  1.00393895e+00]
  HOMO = -0.234433405213839  LUMO = 385.036870549233
  mo_energy =
[-1.16222032e+02 -1.20010348e+01 -6.63519948e+00 -6.63519948e+00
 -6.63519948e+00 -1.13951853e+00 -2.34433405e-01 -2.34433405e-01
 -2.34433405e-01  3.85036871e+02]
E1 = -698.0902062615673  E_coul = 199.07361901173303
cycle= 4 E= -499.016587249834  delta_E= 3.41e-13  |g|= 4.84e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0902062615673  E_coul = 199.07361901173303
  HOMO = -0.23443340520461  LUMO = 385.036870549382
  mo_energy =
[-1.16222032e+02 -1.20010348e+01 -6.63519948e+00 -6.63519948e+00
 -6.63519948e+00 -1.13951853e+00 -2.34433405e-01 -2.34433405e-01
 -2.34433405e-01  3.85036871e+02]
E1 = -698.0902062615929  E_coul = 199.07361901175838
Extra cycle  E= -499.016587249835  delta_E= -2.27e-13  |g|= 3.91e-11  |ddm|= 2.28e-11
    CPU time for scf_cycle      0.11 sec, wall time      0.11 sec
exp = [4.58206456e+02 6.83605693e+01 4.66480794e+00 3.97124244e-01
 8.57100586e+00 4.89574116e-01]
E = -499.0165872498345
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:32:57 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.206455716        1
[INPUT] 0    0    [1    /1   ]  68.3605692929        1
[INPUT] 0    0    [1    /1   ]  4.66480794278        1
[INPUT] 0    0    [1    /1   ]  0.39712424424        1
[INPUT] 1    0    [1    /1   ]  8.57100585827        1
[INPUT] 1    0    [1    /1   ]  0.489574116064       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.20645571635185, 1.0]], [0, [68.36056929292454, 1.0]], [0, [4.664807942775228, 1.0]], [0, [0.3971242442397345, 1.0]], [1, [8.571005858266467, 1.0]], [1, [0.4895741160636007, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.20645572]
bas 1, expnt(s) = [68.36056929]
bas 2, expnt(s) = [4.66480794]
bas 3, expnt(s) = [0.39712424]
bas 4, expnt(s) = [8.57100586]
bas 5, expnt(s) = [0.48957412]
CPU time:        85.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58206456e+02 2.50213609e+02 6.83605693e+01 6.00646952e+01
 4.66480794e+00 8.01937182e+00 3.97124244e-01 1.26389159e+00
 8.57100586e+00 4.27832855e+01 4.89574116e-01 1.19469612e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.309865458517663
cond(S) = 4.786298148783539
E1 = -679.1484025036259  E_coul = 184.70497594371318
init E= -494.443426559913
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687618474513363  LUMO = 383.627814263714
  mo_energy =
[-117.60915284  -13.06558971   -7.637891     -7.637891     -7.637891
   -1.63994789   -0.68761847   -0.68761847   -0.68761847  383.62781426]
E1 = -698.0946477604397  E_coul = 199.07811640632752
cycle= 1 E= -499.016531354112  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199614
diis-c [-0.03984575  1.        ]
  HOMO = -0.23442253243429  LUMO = 385.039088969977
  mo_energy =
[-1.16220301e+02 -1.20009239e+01 -6.63507717e+00 -6.63507717e+00
 -6.63507717e+00 -1.13951123e+00 -2.34422532e-01 -2.34422532e-01
 -2.34422532e-01  3.85039089e+02]
E1 = -698.0902294129563  E_coul = 199.07364216464902
cycle= 2 E= -499.016587248307  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114337
diis-c [-4.86647821e-08 -5.65203504e-03  1.00565204e+00]
  HOMO = -0.23443342201344  LUMO = 385.036870423603
  mo_energy =
[-1.16222033e+02 -1.20010349e+01 -6.63519961e+00 -6.63519961e+00
 -6.63519961e+00 -1.13951854e+00 -2.34433422e-01 -2.34433422e-01
 -2.34433422e-01  3.85036870e+02]
E1 = -698.0902062558134  E_coul = 199.07361900597883
cycle= 3 E= -499.016587249835  delta_E= -1.53e-09  |g|= 1.18e-06  |ddm|= 7.01e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.27293e-06
diis-c [-7.66942442e-13  2.06297579e-05 -3.95958148e-03  1.00393895e+00]
  HOMO = -0.234433405213839  LUMO = 385.036870549233
  mo_energy =
[-1.16222032e+02 -1.20010348e+01 -6.63519948e+00 -6.63519948e+00
 -6.63519948e+00 -1.13951853e+00 -2.34433405e-01 -2.34433405e-01
 -2.34433405e-01  3.85036871e+02]
E1 = -698.0902062615673  E_coul = 199.07361901173303
cycle= 4 E= -499.016587249834  delta_E= 3.41e-13  |g|= 4.84e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0902062615673  E_coul = 199.07361901173303
  HOMO = -0.23443340520461  LUMO = 385.036870549382
  mo_energy =
[-1.16222032e+02 -1.20010348e+01 -6.63519948e+00 -6.63519948e+00
 -6.63519948e+00 -1.13951853e+00 -2.34433405e-01 -2.34433405e-01
 -2.34433405e-01  3.85036871e+02]
E1 = -698.0902062615929  E_coul = 199.07361901175838
Extra cycle  E= -499.016587249835  delta_E= -2.27e-13  |g|= 3.91e-11  |ddm|= 2.28e-11
    CPU time for scf_cycle      0.10 sec, wall time      0.10 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 4.786298148783539
E1 = -698.0902062615929  E_coul = 199.07361901175838
init E= -499.016587249835
    CPU time for initialize scf      0.05 sec, wall time      0.05 sec
  HOMO = -0.234433405204469  LUMO = 385.036870549373
  mo_energy =
[-1.16222032e+02 -1.20010348e+01 -6.63519948e+00 -6.63519948e+00
 -6.63519948e+00 -1.13951853e+00 -2.34433405e-01 -2.34433405e-01
 -2.34433405e-01  3.85036871e+02]
E1 = -698.0902062615928  E_coul = 199.07361901175824
cycle= 1 E= -499.016587249835  delta_E= -5.68e-14  |g|= 4.23e-13  |ddm|= 1.75e-13
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
E1 = -698.0902062615928  E_coul = 199.07361901175824
  HOMO = -0.234433405204474  LUMO = 385.036870549373
  mo_energy =
[-1.16222032e+02 -1.20010348e+01 -6.63519948e+00 -6.63519948e+00
 -6.63519948e+00 -1.13951853e+00 -2.34433405e-01 -2.34433405e-01
 -2.34433405e-01  3.85036871e+02]
E1 = -698.0902062615927  E_coul = 199.07361901175824
Extra cycle  E= -499.016587249834  delta_E= 1.14e-13  |g|= 3.78e-14  |ddm|= 3.9e-15
    CPU time for scf_cycle      0.12 sec, wall time      0.12 sec
exp = [4.58206456e+02 6.83605693e+01 4.66480794e+00 3.97124244e-01
 8.57100586e+00 4.89574116e-01]
grad_E = [ 1.17215549e-07 -2.06593957e-06  8.89009929e-06  1.28167833e-04
 -1.91098264e-06 -1.31013408e-05]
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:33:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.206501179        1
[INPUT] 0    0    [1    /1   ]  68.3606318619        1
[INPUT] 0    0    [1    /1   ]  4.66479962098        1
[INPUT] 0    0    [1    /1   ]  0.397116191283       1
[INPUT] 1    0    [1    /1   ]  8.57101143292        1
[INPUT] 1    0    [1    /1   ]  0.489575206727       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.2065011792367, 1.0]], [0, [68.36063186185903, 1.0]], [0, [4.664799620981169, 1.0]], [0, [0.3971161912828063, 1.0]], [1, [8.57101143291912, 1.0]], [1, [0.48957520672686805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.20650118]
bas 1, expnt(s) = [68.36063186]
bas 2, expnt(s) = [4.66479962]
bas 3, expnt(s) = [0.39711619]
bas 4, expnt(s) = [8.57101143]
bas 5, expnt(s) = [0.48957521]
CPU time:        88.32
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58206501e+02 2.50213628e+02 6.83606319e+01 6.00647364e+01
 4.66479962e+00 8.01936109e+00 3.97116191e-01 1.26387237e+00
 8.57101143e+00 4.27833203e+01 4.89575207e-01 1.19469945e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3098654084961
cond(S) = 4.786282475514583
E1 = -679.148312558132  E_coul = 184.70489377200815
init E= -494.443418786124
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687620916574582  LUMO = 383.627997090445
  mo_energy =
[-117.60915622  -13.06559638   -7.63789897   -7.63789897   -7.63789897
   -1.63994762   -0.68762092   -0.68762092   -0.68762092  383.62799709]
E1 = -698.094560019167  E_coul = 199.07802866434733
cycle= 1 E= -499.01653135482  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.01 sec
diis-norm(errvec)=0.199613
diis-c [-0.03984539  1.        ]
  HOMO = -0.234424623161499  LUMO = 385.039272542567
  mo_energy =
[-1.16220305e+02 -1.20009305e+01 -6.63508534e+00 -6.63508534e+00
 -6.63508534e+00 -1.13951404e+00 -2.34424623e-01 -2.34424623e-01
 -2.34424623e-01  3.85039273e+02]
E1 = -698.0901416798665  E_coul = 199.07355443091726
cycle= 2 E= -499.016587248949  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114336
diis-c [-4.86649305e-08 -5.65201119e-03  1.00565201e+00]
  HOMO = -0.234435512808671  LUMO = 385.037054008478
  mo_energy =
[-1.16222036e+02 -1.20010415e+01 -6.63520778e+00 -6.63520778e+00
 -6.63520778e+00 -1.13952134e+00 -2.34435513e-01 -2.34435513e-01
 -2.34435513e-01  3.85037054e+02]
E1 = -698.0901185227788  E_coul = 199.07353127230263
cycle= 3 E= -499.016587250476  delta_E= -1.53e-09  |g|= 1.18e-06  |ddm|= 7.01e-06
    CPU time for cycle= 3      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=1.2729e-06
diis-c [-7.66906916e-13  2.06288706e-05 -3.95943325e-03  1.00393880e+00]
  HOMO = -0.234435496009322  LUMO = 385.037054134079
  mo_energy =
[-1.16222036e+02 -1.20010414e+01 -6.63520765e+00 -6.63520765e+00
 -6.63520765e+00 -1.13952134e+00 -2.34435496e-01 -2.34435496e-01
 -2.34435496e-01  3.85037054e+02]
E1 = -698.0901185285328  E_coul = 199.0735312780567
cycle= 4 E= -499.016587250476  delta_E= 5.68e-14  |g|= 4.84e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.02 sec
E1 = -698.0901185285328  E_coul = 199.0735312780567
  HOMO = -0.234435496000086  LUMO = 385.037054134228
  mo_energy =
[-1.16222036e+02 -1.20010414e+01 -6.63520765e+00 -6.63520765e+00
 -6.63520765e+00 -1.13952134e+00 -2.34435496e-01 -2.34435496e-01
 -2.34435496e-01  3.85037054e+02]
E1 = -698.0901185285575  E_coul = 199.07353127808153
Extra cycle  E= -499.016587250476  delta_E= 1.71e-13  |g|= 3.93e-11  |ddm|= 2.28e-11
    CPU time for scf_cycle      0.09 sec, wall time      0.10 sec
exp = [4.58206501e+02 6.83606319e+01 4.66479962e+00 3.97116191e-01
 8.57101143e+00 4.89575207e-01]
E = -499.01658725047594
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -499.01658725047594
       x: [ 4.582e+02  6.836e+01  4.665e+00  3.971e-01  8.571e+00
            4.896e-01]
     nit: 25
     jac: [ 1.172e-07 -2.066e-06  8.890e-06  1.282e-04 -1.911e-06
           -1.310e-05]
    nfev: 29
    njev: 25
#INFO: **** input file is /Users/vtan/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((6, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([9.5045827955887916e+01,4.4881042475048387e+00,3.9799528004692630e-01,8.5469650038718257e+00,4.8929328703550412e-01])
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 4.0

basis = "4s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Vinnas-Air', release='19.6.0', version='Darwin Kernel Version 19.6.0: Tue Jun 21 21:18:39 PDT 2022; root:xnu-6153.141.66~1/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.8.8 (default, Apr 13 2021, 12:59:45) 
[Clang 10.0.0 ]
numpy 1.24.2  scipy 1.10.1
Date: Sat Mar 11 23:33:00 2023
PySCF version 2.1.1
PySCF path  /Users/vtan/ve_pyscfad/lib/python3.8/site-packages/pyscf

[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 4000
[CONFIG] TMPDIR = /var/folders/c6/fyjd84g92vqcf03tnvqp486c0000gn/T/
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /Users/vtan/.pyscf_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 4000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  458.206501179        1
[INPUT] 0    0    [1    /1   ]  68.3606318619        1
[INPUT] 0    0    [1    /1   ]  4.66479962098        1
[INPUT] 0    0    [1    /1   ]  0.397116191283       1
[INPUT] 1    0    [1    /1   ]  8.57101143292        1
[INPUT] 1    0    [1    /1   ]  0.489575206727       1

nuclear repulsion = 0
number of shells = 6
number of NR pGTOs = 10
number of NR cGTOs = 10
basis = {'Ar': [[0, [458.2065011792367, 1.0]], [0, [68.36063186185903, 1.0]], [0, [4.664799620981169, 1.0]], [0, [0.3971161912828063, 1.0]], [1, [8.57101143291912, 1.0]], [1, [0.48957520672686805, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [458.20650118]
bas 1, expnt(s) = [68.36063186]
bas 2, expnt(s) = [4.66479962]
bas 3, expnt(s) = [0.39711619]
bas 4, expnt(s) = [8.57101143]
bas 5, expnt(s) = [0.48957521]
CPU time:        88.84
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  1  1  1  0 32 33  0]
 [ 0  1  1  1  0 34 35  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 4.58206501e+02 2.50213628e+02 6.83606319e+01 6.00647364e+01
 4.66479962e+00 8.01936109e+00 3.97116191e-01 1.26387237e+00
 8.57101143e+00 4.27833203e+01 4.89575207e-01 1.19469945e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3098654084961
cond(S) = 4.786282475514583
E1 = -679.148312558132  E_coul = 184.70489377200815
init E= -494.443418786124
    CPU time for initialize scf      0.02 sec, wall time      0.02 sec
  HOMO = -0.687620916574582  LUMO = 383.627997090445
  mo_energy =
[-117.60915622  -13.06559638   -7.63789897   -7.63789897   -7.63789897
   -1.63994762   -0.68762092   -0.68762092   -0.68762092  383.62799709]
E1 = -698.094560019167  E_coul = 199.07802866434733
cycle= 1 E= -499.01653135482  delta_E= -4.57  |g|= 0.22  |ddm|= 0.301
    CPU time for cycle= 1      0.01 sec, wall time      0.02 sec
diis-norm(errvec)=0.199613
diis-c [-0.03984539  1.        ]
  HOMO = -0.234424623161499  LUMO = 385.039272542567
  mo_energy =
[-1.16220305e+02 -1.20009305e+01 -6.63508534e+00 -6.63508534e+00
 -6.63508534e+00 -1.13951404e+00 -2.34424623e-01 -2.34424623e-01
 -2.34424623e-01  3.85039273e+02]
E1 = -698.0901416798665  E_coul = 199.07355443091726
cycle= 2 E= -499.016587248949  delta_E= -5.59e-05  |g|= 0.00117  |ddm|= 0.00145
    CPU time for cycle= 2      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=0.00114336
diis-c [-4.86649305e-08 -5.65201119e-03  1.00565201e+00]
  HOMO = -0.234435512808671  LUMO = 385.037054008478
  mo_energy =
[-1.16222036e+02 -1.20010415e+01 -6.63520778e+00 -6.63520778e+00
 -6.63520778e+00 -1.13952134e+00 -2.34435513e-01 -2.34435513e-01
 -2.34435513e-01  3.85037054e+02]
E1 = -698.0901185227788  E_coul = 199.07353127230263
cycle= 3 E= -499.016587250476  delta_E= -1.53e-09  |g|= 1.18e-06  |ddm|= 7.01e-06
    CPU time for cycle= 3      0.02 sec, wall time      0.02 sec
diis-norm(errvec)=1.2729e-06
diis-c [-7.66906916e-13  2.06288706e-05 -3.95943325e-03  1.00393880e+00]
  HOMO = -0.234435496009322  LUMO = 385.037054134079
  mo_energy =
[-1.16222036e+02 -1.20010414e+01 -6.63520765e+00 -6.63520765e+00
 -6.63520765e+00 -1.13952134e+00 -2.34435496e-01 -2.34435496e-01
 -2.34435496e-01  3.85037054e+02]
E1 = -698.0901185285328  E_coul = 199.0735312780567
cycle= 4 E= -499.016587250476  delta_E= 5.68e-14  |g|= 4.84e-09  |ddm|= 6.85e-09
    CPU time for cycle= 4      0.02 sec, wall time      0.03 sec
E1 = -698.0901185285328  E_coul = 199.0735312780567
  HOMO = -0.234435496000086  LUMO = 385.037054134228
  mo_energy =
[-1.16222036e+02 -1.20010414e+01 -6.63520765e+00 -6.63520765e+00
 -6.63520765e+00 -1.13952134e+00 -2.34435496e-01 -2.34435496e-01
 -2.34435496e-01  3.85037054e+02]
E1 = -698.0901185285575  E_coul = 199.07353127808153
Extra cycle  E= -499.016587250476  delta_E= 1.71e-13  |g|= 3.93e-11  |ddm|= 2.28e-11
    CPU time for scf_cycle      0.11 sec, wall time      0.13 sec
exp = [4.58206501e+02 6.83606319e+01 4.66479962e+00 3.97116191e-01
 8.57101143e+00 4.89575207e-01]
E = -499.01658725047594
E = -499.01658725047594
exp = [4.5820650117923668e+02,6.8360631861859034e+01,4.6647996209811691e+00,3.9711619128280629e-01,8.5710114329191196e+00,4.8957520672686805e-01]
