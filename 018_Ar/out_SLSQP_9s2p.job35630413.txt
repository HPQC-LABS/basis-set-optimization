created virtual environment CPython3.10.2.final.0-64 in 10588ms
  creator CPython3Posix(dest=/localscratch/nike.35630413.0/ENV, clear=True, no_vcs_ignore=False, global=False)
  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/nike/.local/share/virtualenv)
    added seed packages: pip==22.3.1, setuptools==67.3.3, wheel==0.38.4+computecanada
  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Requirement already satisfied: pip in /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages (22.3.1)
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pip-23.0+computecanada-py3-none-any.whl
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 22.3.1
    Uninstalling pip-22.3.1:
      Successfully uninstalled pip-22.3.1
Successfully installed pip-23.0+computecanada
Looking in links: /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx512, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic, /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic
Processing /home/nike/pyscf_ad/dist/pyscf-2.1.1+ad-cp310-cp310-linux_x86_64.whl
Processing /home/nike/properties_ad/dist/pyscf_properties-0.1.0+ad-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/absl_py-1.4.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/contourpy-1.0.7+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/cycler-0.11.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/fonttools-4.39.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/h5py-3.8.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jax-0.4.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/jaxlib-0.4.2+cuda11.cudnn82.computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/jaxopt-0.6+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/kiwisolver-1.4.4+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/matplotlib-3.7.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/numpy-1.24.2+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/opt_einsum-3.3.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/packaging-23.0+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/avx2/Pillow-9.4.0+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyparsing-3.0.9+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/pyscfad-0.1.2+computecanada-py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/python_dateutil-2.8.2+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/gentoo/generic/scipy-1.10.1+computecanada-cp310-cp310-linux_x86_64.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/six-1.16.0+computecanada-py2.py3-none-any.whl
Processing /cvmfs/soft.computecanada.ca/custom/python/wheelhouse/generic/typing_extensions-4.5.0+computecanada-py3-none-any.whl
Installing collected packages: typing_extensions, six, pyparsing, Pillow, packaging, numpy, kiwisolver, fonttools, cycler, absl_py, scipy, python-dateutil, opt-einsum, h5py, contourpy, pyscf, matplotlib, jaxlib, pyscf-properties, jax, jaxopt, pyscfad
Successfully installed Pillow-9.4.0+computecanada absl_py-1.4.0+computecanada contourpy-1.0.7+computecanada cycler-0.11.0+computecanada fonttools-4.39.0+computecanada h5py-3.8.0+computecanada jax-0.4.2+computecanada jaxlib-0.4.2+cuda11.cudnn82.computecanada jaxopt-0.6+computecanada kiwisolver-1.4.4+computecanada matplotlib-3.7.0+computecanada numpy-1.24.2+computecanada opt-einsum-3.3.0+computecanada packaging-23.0+computecanada pyparsing-3.0.9+computecanada pyscf-2.1.1+ad pyscf-properties-0.1.0+ad pyscfad-0.1.2+computecanada python-dateutil-2.8.2+computecanada scipy-1.10.1+computecanada six-1.16.0+computecanada typing_extensions-4.5.0+computecanada
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:26:57 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478282        1
[INPUT] 0    0    [1    /1   ]  7343.4048431         1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83651385        1
[INPUT] 0    0    [1    /1   ]  332.866410939        1
[INPUT] 0    0    [1    /1   ]  97.1067319895        1
[INPUT] 0    0    [1    /1   ]  32.811638314         1
[INPUT] 0    0    [1    /1   ]  4.70643421975        1
[INPUT] 0    0    [1    /1   ]  0.390982989559       1
[INPUT] 1    0    [1    /1   ]  8.59903406652        1
[INPUT] 1    0    [1    /1   ]  0.490992297577       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782820515, 1.0]], [0, [7343.404843098567, 1.0]], [0, [18377.323914102573, 1.0]], [0, [1411.836513848047, 1.0]], [0, [332.8664109385263, 1.0]], [0, [97.10673198950983, 1.0]], [0, [32.81163831404047, 1.0]], [0, [4.7064342197545095, 1.0]], [0, [0.3909829895591577, 1.0]], [1, [8.599034066519128, 1.0]], [1, [0.4909922975773032, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782821]
bas 1, expnt(s) = [7343.4048431]
bas 2, expnt(s) = [18377.3239141]
bas 3, expnt(s) = [1411.83651385]
bas 4, expnt(s) = [332.86641094]
bas 5, expnt(s) = [97.10673199]
bas 6, expnt(s) = [32.81163831]
bas 7, expnt(s) = [4.70643422]
bas 8, expnt(s) = [0.39098299]
bas 9, expnt(s) = [8.59903407]
bas 10, expnt(s) = [0.4909923]
CPU time:         3.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340484e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183651e+03 5.81906665e+02
 3.32866411e+02 1.96887210e+02 9.71067320e+01 7.81541472e+01
 3.28116383e+01 3.46366564e+01 4.70643422e+00 8.07298265e+00
 3.90982990e-01 1.24920416e+00 8.59903407e+00 4.29582399e+01
 4.90992298e-01 1.19902363e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32059682465781
cond(S) = 204.77000143952682
E1 = -689.1835084059868  E_coul = 184.9017343187129
init E= -504.281774087274
    CPU time for initialize scf      1.93 sec, wall time      0.45 sec
  HOMO = -0.680595437704207  LUMO = 65.0804101558759
  mo_energy =
[-1.21684674e+02 -1.32892447e+01 -7.62343010e+00 -7.62343010e+00
 -7.62343010e+00 -1.65013269e+00 -6.80595438e-01 -6.80595438e-01
 -6.80595438e-01  6.50804102e+01  4.89848565e+02  2.50960820e+03
  1.24364783e+04  4.54549108e+04  1.32393033e+05]
E1 = -706.6629429836136  E_coul = 198.9448880599287
cycle= 1 E= -507.718054923685  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.69 sec, wall time      0.70 sec
diis-norm(errvec)=0.479751
diis-c [-0.23016119  1.        ]
  HOMO = -0.236405955148134  LUMO = 66.3840886247193
  mo_energy =
[-1.20288855e+02 -1.22613458e+01 -6.65450924e+00 -6.65450924e+00
 -6.65450924e+00 -1.16394970e+00 -2.36405955e-01 -2.36405955e-01
 -2.36405955e-01  6.63840886e+01  4.91232912e+02  2.51091270e+03
  1.24376528e+04  4.54560079e+04  1.32394080e+05]
E1 = -706.6174337422186  E_coul = 198.89874373943982
cycle= 2 E= -507.718690002779  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.24 sec, wall time      0.24 sec
diis-norm(errvec)=0.00629454
diis-c [-3.92590389e-05  1.25306796e-03  9.98746932e-01]
  HOMO = -0.236682066548867  LUMO = 66.3797797628124
  mo_energy =
[-1.20300673e+02 -1.22631840e+01 -6.65732952e+00 -6.65732952e+00
 -6.65732952e+00 -1.16405237e+00 -2.36682067e-01 -2.36682067e-01
 -2.36682067e-01  6.63797798e+01  4.91220158e+02  2.51089383e+03
  1.24376299e+04  4.54559834e+04  1.32394055e+05]
E1 = -706.6166865732035  E_coul = 198.89799636154163
cycle= 3 E= -507.718690211662  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00019058
diis-c [-8.80623752e-10  2.90301801e-05 -3.05593217e-02  1.03053029e+00]
  HOMO = -0.236686611272453  LUMO = 66.3797041789496
  mo_energy =
[-1.20300881e+02 -1.22632157e+01 -6.65738240e+00 -6.65738240e+00
 -6.65738240e+00 -1.16405379e+00 -2.36686611e-01 -2.36686611e-01
 -2.36686611e-01  6.63797042e+01  4.91219951e+02  2.51089357e+03
  1.24376296e+04  4.54559831e+04  1.32394055e+05]
E1 = -706.616670918157  E_coul = 198.8979807063839
cycle= 4 E= -507.718690211773  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.32e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.616670918157  E_coul = 198.8979807063839
  HOMO = -0.236686573621885  LUMO = 66.3797047345409
  mo_energy =
[-1.20300880e+02 -1.22632155e+01 -6.65738204e+00 -6.65738204e+00
 -6.65738204e+00 -1.16405378e+00 -2.36686574e-01 -2.36686574e-01
 -2.36686574e-01  6.63797047e+01  4.91219953e+02  2.51089357e+03
  1.24376296e+04  4.54559831e+04  1.32394055e+05]
E1 = -706.6166710054422  E_coul = 198.89798079366912
Extra cycle  E= -507.718690211773  delta_E=    0  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      2.94 sec, wall time      1.48 sec
exp = [3.67546478e+04 7.34340484e+03 1.83773239e+04 1.41183651e+03
 3.32866411e+02 9.71067320e+01 3.28116383e+01 4.70643422e+00
 3.90982990e-01 8.59903407e+00 4.90992298e-01]
E = -507.71869021177304
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:26:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478282        1
[INPUT] 0    0    [1    /1   ]  7343.4048431         1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83651385        1
[INPUT] 0    0    [1    /1   ]  332.866410939        1
[INPUT] 0    0    [1    /1   ]  97.1067319895        1
[INPUT] 0    0    [1    /1   ]  32.811638314         1
[INPUT] 0    0    [1    /1   ]  4.70643421975        1
[INPUT] 0    0    [1    /1   ]  0.390982989559       1
[INPUT] 1    0    [1    /1   ]  8.59903406652        1
[INPUT] 1    0    [1    /1   ]  0.490992297577       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782820515, 1.0]], [0, [7343.404843098567, 1.0]], [0, [18377.323914102573, 1.0]], [0, [1411.836513848047, 1.0]], [0, [332.8664109385263, 1.0]], [0, [97.10673198950983, 1.0]], [0, [32.81163831404047, 1.0]], [0, [4.7064342197545095, 1.0]], [0, [0.3909829895591577, 1.0]], [1, [8.599034066519128, 1.0]], [1, [0.4909922975773032, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782821]
bas 1, expnt(s) = [7343.4048431]
bas 2, expnt(s) = [18377.3239141]
bas 3, expnt(s) = [1411.83651385]
bas 4, expnt(s) = [332.86641094]
bas 5, expnt(s) = [97.10673199]
bas 6, expnt(s) = [32.81163831]
bas 7, expnt(s) = [4.70643422]
bas 8, expnt(s) = [0.39098299]
bas 9, expnt(s) = [8.59903407]
bas 10, expnt(s) = [0.4909923]
CPU time:         6.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340484e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183651e+03 5.81906665e+02
 3.32866411e+02 1.96887210e+02 9.71067320e+01 7.81541472e+01
 3.28116383e+01 3.46366564e+01 4.70643422e+00 8.07298265e+00
 3.90982990e-01 1.24920416e+00 8.59903407e+00 4.29582399e+01
 4.90992298e-01 1.19902363e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32059682465781
cond(S) = 204.77000143952682
E1 = -689.1835084059868  E_coul = 184.9017343187129
init E= -504.281774087274
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680595437704207  LUMO = 65.0804101558759
  mo_energy =
[-1.21684674e+02 -1.32892447e+01 -7.62343010e+00 -7.62343010e+00
 -7.62343010e+00 -1.65013269e+00 -6.80595438e-01 -6.80595438e-01
 -6.80595438e-01  6.50804102e+01  4.89848565e+02  2.50960820e+03
  1.24364783e+04  4.54549108e+04  1.32393033e+05]
E1 = -706.6629429836136  E_coul = 198.9448880599287
cycle= 1 E= -507.718054923685  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479751
diis-c [-0.23016119  1.        ]
  HOMO = -0.236405955148134  LUMO = 66.3840886247193
  mo_energy =
[-1.20288855e+02 -1.22613458e+01 -6.65450924e+00 -6.65450924e+00
 -6.65450924e+00 -1.16394970e+00 -2.36405955e-01 -2.36405955e-01
 -2.36405955e-01  6.63840886e+01  4.91232912e+02  2.51091270e+03
  1.24376528e+04  4.54560079e+04  1.32394080e+05]
E1 = -706.6174337422186  E_coul = 198.89874373943982
cycle= 2 E= -507.718690002779  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629454
diis-c [-3.92590389e-05  1.25306796e-03  9.98746932e-01]
  HOMO = -0.236682066548867  LUMO = 66.3797797628124
  mo_energy =
[-1.20300673e+02 -1.22631840e+01 -6.65732952e+00 -6.65732952e+00
 -6.65732952e+00 -1.16405237e+00 -2.36682067e-01 -2.36682067e-01
 -2.36682067e-01  6.63797798e+01  4.91220158e+02  2.51089383e+03
  1.24376299e+04  4.54559834e+04  1.32394055e+05]
E1 = -706.6166865732035  E_coul = 198.89799636154163
cycle= 3 E= -507.718690211662  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00019058
diis-c [-8.80623752e-10  2.90301801e-05 -3.05593217e-02  1.03053029e+00]
  HOMO = -0.236686611272453  LUMO = 66.3797041789496
  mo_energy =
[-1.20300881e+02 -1.22632157e+01 -6.65738240e+00 -6.65738240e+00
 -6.65738240e+00 -1.16405379e+00 -2.36686611e-01 -2.36686611e-01
 -2.36686611e-01  6.63797042e+01  4.91219951e+02  2.51089357e+03
  1.24376296e+04  4.54559831e+04  1.32394055e+05]
E1 = -706.616670918157  E_coul = 198.8979807063839
cycle= 4 E= -507.718690211773  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.32e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.616670918157  E_coul = 198.8979807063839
  HOMO = -0.236686573621885  LUMO = 66.3797047345409
  mo_energy =
[-1.20300880e+02 -1.22632155e+01 -6.65738204e+00 -6.65738204e+00
 -6.65738204e+00 -1.16405378e+00 -2.36686574e-01 -2.36686574e-01
 -2.36686574e-01  6.63797047e+01  4.91219953e+02  2.51089357e+03
  1.24376296e+04  4.54559831e+04  1.32394055e+05]
E1 = -706.6166710054422  E_coul = 198.89798079366912
Extra cycle  E= -507.718690211773  delta_E=    0  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.77000143952682
E1 = -706.6166710054422  E_coul = 198.89798079366912
init E= -507.718690211773
    CPU time for initialize scf      7.65 sec, wall time      0.78 sec
  HOMO = -0.236686573110976  LUMO = 66.3797047427391
  mo_energy =
[-1.20300880e+02 -1.22632155e+01 -6.65738204e+00 -6.65738204e+00
 -6.65738204e+00 -1.16405378e+00 -2.36686573e-01 -2.36686573e-01
 -2.36686573e-01  6.63797047e+01  4.91219953e+02  2.51089357e+03
  1.24376296e+04  4.54559831e+04  1.32394055e+05]
E1 = -706.6166710069728  E_coul = 198.89798079519983
cycle= 1 E= -507.718690211773  delta_E= 1.14e-13  |g|= 2.86e-10  |ddm|= 7.08e-10
    CPU time for cycle= 1      0.28 sec, wall time      0.02 sec
E1 = -706.6166710069728  E_coul = 198.89798079519983
  HOMO = -0.236686573102914  LUMO = 66.3797047428798
  mo_energy =
[-1.20300880e+02 -1.22632155e+01 -6.65738204e+00 -6.65738204e+00
 -6.65738204e+00 -1.16405378e+00 -2.36686573e-01 -2.36686573e-01
 -2.36686573e-01  6.63797047e+01  4.91219953e+02  2.51089357e+03
  1.24376296e+04  4.54559831e+04  1.32394055e+05]
E1 = -706.6166710070033  E_coul = 198.89798079523015
Extra cycle  E= -507.718690211773  delta_E= -2.27e-13  |g|= 2.45e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle     10.29 sec, wall time      3.15 sec
exp = [3.67546478e+04 7.34340484e+03 1.83773239e+04 1.41183651e+03
 3.32866411e+02 9.71067320e+01 3.28116383e+01 4.70643422e+00
 3.90982990e-01 8.59903407e+00 4.90992298e-01]
grad_E = [-2.10281965e-07  1.96815946e-06  4.81244928e-09  1.03219307e-04
 -3.18663352e-04  5.84193911e-04 -6.20596094e-04 -6.50556038e-04
 -3.63136368e-04 -1.98171481e-05 -9.97382614e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478284        1
[INPUT] 0    0    [1    /1   ]  7343.40484113        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83641063        1
[INPUT] 0    0    [1    /1   ]  332.866729602        1
[INPUT] 0    0    [1    /1   ]  97.1061477956        1
[INPUT] 0    0    [1    /1   ]  32.8122589101        1
[INPUT] 0    0    [1    /1   ]  4.70708477579        1
[INPUT] 0    0    [1    /1   ]  0.391346125927       1
[INPUT] 1    0    [1    /1   ]  8.59905388367        1
[INPUT] 1    0    [1    /1   ]  0.491002271403       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782841543, 1.0]], [0, [7343.4048411304075, 1.0]], [0, [18377.32391409776, 1.0]], [0, [1411.8364106287402, 1.0]], [0, [332.8667296018785, 1.0]], [0, [97.10614779559856, 1.0]], [0, [32.81225891013417, 1.0]], [0, [4.7070847757922, 1.0]], [0, [0.39134612592715207, 1.0]], [1, [8.599053883667235, 1.0]], [1, [0.49100227140344155, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782842]
bas 1, expnt(s) = [7343.40484113]
bas 2, expnt(s) = [18377.3239141]
bas 3, expnt(s) = [1411.83641063]
bas 4, expnt(s) = [332.8667296]
bas 5, expnt(s) = [97.1061478]
bas 6, expnt(s) = [32.81225891]
bas 7, expnt(s) = [4.70708478]
bas 8, expnt(s) = [0.39134613]
bas 9, expnt(s) = [8.59905388]
bas 10, expnt(s) = [0.49100227]
CPU time:        30.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340484e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183641e+03 5.81906633e+02
 3.32866730e+02 1.96887351e+02 9.71061478e+01 7.81537945e+01
 3.28122589e+01 3.46371477e+01 4.70708478e+00 8.07381956e+00
 3.91346126e-01 1.25007423e+00 8.59905388e+00 4.29583637e+01
 4.91002271e-01 1.19905407e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32053379566987
cond(S) = 204.7713017824306
E1 = -689.1909306687613  E_coul = 184.90817721908957
init E= -504.282753449672
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680415524699666  LUMO = 65.0862289726972
  mo_energy =
[-1.21684088e+02 -1.32887710e+01 -7.62290299e+00 -7.62290299e+00
 -7.62290299e+00 -1.65013834e+00 -6.80415525e-01 -6.80415525e-01
 -6.80415525e-01  6.50862290e+01  4.89853724e+02  2.50961270e+03
  1.24364822e+04  4.54549144e+04  1.32393036e+05]
E1 = -706.6722554832794  E_coul = 198.95419992588904
cycle= 1 E= -507.71805555739  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.47978
diis-c [-0.23018851  1.        ]
  HOMO = -0.23616700306738  LUMO = 66.3901287820295
  mo_energy =
[-1.20287863e+02 -1.22607132e+01 -6.65379929e+00 -6.65379929e+00
 -6.65379929e+00 -1.16376495e+00 -2.36167003e-01 -2.36167003e-01
 -2.36167003e-01  6.63901288e+01  4.91238492e+02  2.51091771e+03
  1.24376573e+04  4.54560121e+04  1.32394084e+05]
E1 = -706.6267595580865  E_coul = 198.90806940472694
cycle= 2 E= -507.71869015336  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629189
diis-c [-3.92248413e-05  1.25434796e-03  9.98745652e-01]
  HOMO = -0.236443036927384  LUMO = 66.3858212059712
  mo_energy =
[-1.20299678e+02 -1.22625509e+01 -6.65661855e+00 -6.65661855e+00
 -6.65661855e+00 -1.16386768e+00 -2.36443037e-01 -2.36443037e-01
 -2.36443037e-01  6.63858212e+01  4.91225740e+02  2.51089885e+03
  1.24376343e+04  4.54559876e+04  1.32394059e+05]
E1 = -706.6260126359723  E_coul = 198.90732227388165
cycle= 3 E= -507.718690362091  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190518
diis-c [-8.79949586e-10  2.90331917e-05 -3.05619550e-02  1.03053292e+00]
  HOMO = -0.236447581032638  LUMO = 66.3857456418002
  mo_energy =
[-1.20299886e+02 -1.22625826e+01 -6.65667141e+00 -6.65667141e+00
 -6.65667141e+00 -1.16386910e+00 -2.36447581e-01 -2.36447581e-01
 -2.36447581e-01  6.63857456e+01  4.91225534e+02  2.51089858e+03
  1.24376340e+04  4.54559873e+04  1.32394059e+05]
E1 = -706.6259969856931  E_coul = 198.9073066234913
cycle= 4 E= -507.718690362202  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.32e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6259969856931  E_coul = 198.9073066234913
  HOMO = -0.236447543385966  LUMO = 66.3857461973322
  mo_energy =
[-1.20299885e+02 -1.22625824e+01 -6.65667106e+00 -6.65667106e+00
 -6.65667106e+00 -1.16386909e+00 -2.36447543e-01 -2.36447543e-01
 -2.36447543e-01  6.63857462e+01  4.91225536e+02  2.51089858e+03
  1.24376340e+04  4.54559873e+04  1.32394059e+05]
E1 = -706.6259970729727  E_coul = 198.9073067107709
Extra cycle  E= -507.718690362202  delta_E= -5.68e-14  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546478e+04 7.34340484e+03 1.83773239e+04 1.41183641e+03
 3.32866730e+02 9.71061478e+01 3.28122589e+01 4.70708478e+00
 3.91346126e-01 8.59905388e+00 4.91002271e-01]
E = -507.7186903622018
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478284        1
[INPUT] 0    0    [1    /1   ]  7343.40484113        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83641063        1
[INPUT] 0    0    [1    /1   ]  332.866729602        1
[INPUT] 0    0    [1    /1   ]  97.1061477956        1
[INPUT] 0    0    [1    /1   ]  32.8122589101        1
[INPUT] 0    0    [1    /1   ]  4.70708477579        1
[INPUT] 0    0    [1    /1   ]  0.391346125927       1
[INPUT] 1    0    [1    /1   ]  8.59905388367        1
[INPUT] 1    0    [1    /1   ]  0.491002271403       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782841543, 1.0]], [0, [7343.4048411304075, 1.0]], [0, [18377.32391409776, 1.0]], [0, [1411.8364106287402, 1.0]], [0, [332.8667296018785, 1.0]], [0, [97.10614779559856, 1.0]], [0, [32.81225891013417, 1.0]], [0, [4.7070847757922, 1.0]], [0, [0.39134612592715207, 1.0]], [1, [8.599053883667235, 1.0]], [1, [0.49100227140344155, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782842]
bas 1, expnt(s) = [7343.40484113]
bas 2, expnt(s) = [18377.3239141]
bas 3, expnt(s) = [1411.83641063]
bas 4, expnt(s) = [332.8667296]
bas 5, expnt(s) = [97.1061478]
bas 6, expnt(s) = [32.81225891]
bas 7, expnt(s) = [4.70708478]
bas 8, expnt(s) = [0.39134613]
bas 9, expnt(s) = [8.59905388]
bas 10, expnt(s) = [0.49100227]
CPU time:        31.18
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340484e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183641e+03 5.81906633e+02
 3.32866730e+02 1.96887351e+02 9.71061478e+01 7.81537945e+01
 3.28122589e+01 3.46371477e+01 4.70708478e+00 8.07381956e+00
 3.91346126e-01 1.25007423e+00 8.59905388e+00 4.29583637e+01
 4.91002271e-01 1.19905407e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32053379566987
cond(S) = 204.7713017824306
E1 = -689.1909306687613  E_coul = 184.90817721908957
init E= -504.282753449672
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680415524699666  LUMO = 65.0862289726972
  mo_energy =
[-1.21684088e+02 -1.32887710e+01 -7.62290299e+00 -7.62290299e+00
 -7.62290299e+00 -1.65013834e+00 -6.80415525e-01 -6.80415525e-01
 -6.80415525e-01  6.50862290e+01  4.89853724e+02  2.50961270e+03
  1.24364822e+04  4.54549144e+04  1.32393036e+05]
E1 = -706.6722554832794  E_coul = 198.95419992588904
cycle= 1 E= -507.71805555739  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.47978
diis-c [-0.23018851  1.        ]
  HOMO = -0.23616700306738  LUMO = 66.3901287820295
  mo_energy =
[-1.20287863e+02 -1.22607132e+01 -6.65379929e+00 -6.65379929e+00
 -6.65379929e+00 -1.16376495e+00 -2.36167003e-01 -2.36167003e-01
 -2.36167003e-01  6.63901288e+01  4.91238492e+02  2.51091771e+03
  1.24376573e+04  4.54560121e+04  1.32394084e+05]
E1 = -706.6267595580865  E_coul = 198.90806940472694
cycle= 2 E= -507.71869015336  delta_E= -0.000635  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629189
diis-c [-3.92248413e-05  1.25434796e-03  9.98745652e-01]
  HOMO = -0.236443036927384  LUMO = 66.3858212059712
  mo_energy =
[-1.20299678e+02 -1.22625509e+01 -6.65661855e+00 -6.65661855e+00
 -6.65661855e+00 -1.16386768e+00 -2.36443037e-01 -2.36443037e-01
 -2.36443037e-01  6.63858212e+01  4.91225740e+02  2.51089885e+03
  1.24376343e+04  4.54559876e+04  1.32394059e+05]
E1 = -706.6260126359723  E_coul = 198.90732227388165
cycle= 3 E= -507.718690362091  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190518
diis-c [-8.79949586e-10  2.90331917e-05 -3.05619550e-02  1.03053292e+00]
  HOMO = -0.236447581032638  LUMO = 66.3857456418002
  mo_energy =
[-1.20299886e+02 -1.22625826e+01 -6.65667141e+00 -6.65667141e+00
 -6.65667141e+00 -1.16386910e+00 -2.36447581e-01 -2.36447581e-01
 -2.36447581e-01  6.63857456e+01  4.91225534e+02  2.51089858e+03
  1.24376340e+04  4.54559873e+04  1.32394059e+05]
E1 = -706.6259969856931  E_coul = 198.9073066234913
cycle= 4 E= -507.718690362202  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.32e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6259969856931  E_coul = 198.9073066234913
  HOMO = -0.236447543385966  LUMO = 66.3857461973322
  mo_energy =
[-1.20299885e+02 -1.22625824e+01 -6.65667106e+00 -6.65667106e+00
 -6.65667106e+00 -1.16386909e+00 -2.36447543e-01 -2.36447543e-01
 -2.36447543e-01  6.63857462e+01  4.91225536e+02  2.51089858e+03
  1.24376340e+04  4.54559873e+04  1.32394059e+05]
E1 = -706.6259970729727  E_coul = 198.9073067107709
Extra cycle  E= -507.718690362202  delta_E= -5.68e-14  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.7713017824306
E1 = -706.6259970729727  E_coul = 198.9073067107709
init E= -507.718690362202
    CPU time for initialize scf      2.17 sec, wall time      0.14 sec
  HOMO = -0.236447542875045  LUMO = 66.3857462055282
  mo_energy =
[-1.20299885e+02 -1.22625824e+01 -6.65667105e+00 -6.65667105e+00
 -6.65667105e+00 -1.16386909e+00 -2.36447543e-01 -2.36447543e-01
 -2.36447543e-01  6.63857462e+01  4.91225536e+02  2.51089858e+03
  1.24376340e+04  4.54559873e+04  1.32394059e+05]
E1 = -706.6259970745034  E_coul = 198.9073067123017
cycle= 1 E= -507.718690362202  delta_E= 1.14e-13  |g|= 2.86e-10  |ddm|= 7.08e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6259970745034  E_coul = 198.9073067123017
  HOMO = -0.236447542866982  LUMO = 66.3857462056697
  mo_energy =
[-1.20299885e+02 -1.22625824e+01 -6.65667105e+00 -6.65667105e+00
 -6.65667105e+00 -1.16386909e+00 -2.36447543e-01 -2.36447543e-01
 -2.36447543e-01  6.63857462e+01  4.91225536e+02  2.51089858e+03
  1.24376340e+04  4.54559873e+04  1.32394059e+05]
E1 = -706.6259970745336  E_coul = 198.90730671233183
Extra cycle  E= -507.718690362202  delta_E= -1.14e-13  |g|= 1.37e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.68 sec, wall time      0.30 sec
exp = [3.67546478e+04 7.34340484e+03 1.83773239e+04 1.41183641e+03
 3.32866730e+02 9.71061478e+01 3.28122589e+01 4.70708478e+00
 3.91346126e-01 8.59905388e+00 4.91002271e-01]
grad_E = [-2.10269531e-07  1.96879778e-06  4.82447665e-09  1.03179653e-04
 -3.18035318e-04  5.79160005e-04 -6.11791329e-04 -1.39429466e-04
  5.50122217e-03  5.58234962e-05  1.47904417e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478301        1
[INPUT] 0    0    [1    /1   ]  7343.40482564        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83559807        1
[INPUT] 0    0    [1    /1   ]  332.869237891        1
[INPUT] 0    0    [1    /1   ]  97.1015516174        1
[INPUT] 0    0    [1    /1   ]  32.8171395464        1
[INPUT] 0    0    [1    /1   ]  4.71191967149        1
[INPUT] 0    0    [1    /1   ]  0.390917371617       1
[INPUT] 1    0    [1    /1   ]  8.59916748848        1
[INPUT] 1    0    [1    /1   ]  0.490246059772       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64783007084, 1.0]], [0, [7343.404825635938, 1.0]], [0, [18377.323914059867, 1.0]], [0, [1411.835598068714, 1.0]], [0, [332.86923789081266, 1.0]], [0, [97.10155161742202, 1.0]], [0, [32.81713954644448, 1.0]], [0, [4.711919671488677, 1.0]], [0, [0.39091737161704204, 1.0]], [1, [8.599167488480642, 1.0]], [1, [0.49024605977196684, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64783007]
bas 1, expnt(s) = [7343.40482564]
bas 2, expnt(s) = [18377.32391406]
bas 3, expnt(s) = [1411.83559807]
bas 4, expnt(s) = [332.86923789]
bas 5, expnt(s) = [97.10155162]
bas 6, expnt(s) = [32.81713955]
bas 7, expnt(s) = [4.71191967]
bas 8, expnt(s) = [0.39091737]
bas 9, expnt(s) = [8.59916749]
bas 10, expnt(s) = [0.49024606]
CPU time:        41.26
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340483e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183560e+03 5.81906382e+02
 3.32869238e+02 1.96888464e+02 9.71015516e+01 7.81510202e+01
 3.28171395e+01 3.46410117e+01 4.71191967e+00 8.08003855e+00
 3.90917372e-01 1.24904692e+00 8.59916749e+00 4.29590731e+01
 4.90246060e-01 1.19674613e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321484676240868
cond(S) = 204.77686674849903
E1 = -689.1625850167767  E_coul = 184.8814737385426
init E= -504.281111278234
    CPU time for initialize scf      0.36 sec, wall time      0.06 sec
  HOMO = -0.681526248164882  LUMO = 65.1110144952956
  mo_energy =
[-1.21686044e+02 -1.32910932e+01 -7.62447692e+00 -7.62447692e+00
 -7.62447692e+00 -1.65098206e+00 -6.81526248e-01 -6.81526248e-01
 -6.81526248e-01  6.51110145e+01  4.89877192e+02  2.50963288e+03
  1.24364990e+04  4.54549293e+04  1.32393050e+05]
E1 = -706.6361012859501  E_coul = 198.91805446958983
cycle= 1 E= -507.71804681636  delta_E= -3.44  |g|= 0.335  |ddm|=  0.3
    CPU time for cycle= 1      0.39 sec, wall time      0.02 sec
diis-norm(errvec)=0.479833
diis-c [-0.23024011  1.        ]
  HOMO = -0.238037885461456  LUMO = 66.414527478096
  mo_energy =
[-1.20289655e+02 -1.22636502e+01 -6.65588093e+00 -6.65588093e+00
 -6.65588093e+00 -1.16524548e+00 -2.38037885e-01 -2.38037885e-01
 -2.38037885e-01  6.64145275e+01  4.91262201e+02  2.51093844e+03
  1.24376749e+04  4.54560278e+04  1.32394099e+05]
E1 = -706.5907250834111  E_coul = 198.87204662021117
cycle= 2 E= -507.7186784632  delta_E= -0.000632  |g|= 0.00581  |ddm|= 0.0215
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627012
diis-c [-3.89496415e-05  1.25716039e-03  9.98742840e-01]
  HOMO = -0.238312578956994  LUMO = 66.4102314808393
  mo_energy =
[-1.20301440e+02 -1.22654838e+01 -6.65869269e+00 -6.65869269e+00
 -6.65869269e+00 -1.16534794e+00 -2.38312579e-01 -2.38312579e-01
 -2.38312579e-01  6.64102315e+01  4.91249482e+02  2.51091962e+03
  1.24376520e+04  4.54560033e+04  1.32394074e+05]
E1 = -706.5899803873447  E_coul = 198.87130171660476
cycle= 3 E= -507.71867867074  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189933
diis-c [-8.76671238e-10  2.91302056e-05 -3.05697094e-02  1.03054058e+00]
  HOMO = -0.238317099121885  LUMO = 66.4101561283875
  mo_energy =
[-1.20301647e+02 -1.22655155e+01 -6.65874540e+00 -6.65874540e+00
 -6.65874540e+00 -1.16534935e+00 -2.38317099e-01 -2.38317099e-01
 -2.38317099e-01  6.64101561e+01  4.91249276e+02  2.51091935e+03
  1.24376517e+04  4.54560030e+04  1.32394073e+05]
E1 = -706.5899647839643  E_coul = 198.87128611311402
cycle= 4 E= -507.71867867085  delta_E= -1.1e-10  |g|= 6.61e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5899647839643  E_coul = 198.87128611311402
  HOMO = -0.238317061659269  LUMO = 66.4101566823203
  mo_energy =
[-1.20301645e+02 -1.22655153e+01 -6.65874505e+00 -6.65874505e+00
 -6.65874505e+00 -1.16534934e+00 -2.38317062e-01 -2.38317062e-01
 -2.38317062e-01  6.64101567e+01  4.91249277e+02  2.51091935e+03
  1.24376517e+04  4.54560030e+04  1.32394074e+05]
E1 = -706.5899648709882  E_coul = 198.87128620013777
Extra cycle  E= -507.71867867085  delta_E= -1.14e-13  |g|= 1.27e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.01 sec, wall time      0.20 sec
exp = [3.67546478e+04 7.34340483e+03 1.83773239e+04 1.41183560e+03
 3.32869238e+02 9.71015516e+01 3.28171395e+01 4.71191967e+00
 3.90917372e-01 8.59916749e+00 4.90246060e-01]
E = -507.7186786708504
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478288        1
[INPUT] 0    0    [1    /1   ]  7343.40483743        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83621673        1
[INPUT] 0    0    [1    /1   ]  332.867328161        1
[INPUT] 0    0    [1    /1   ]  97.1050509984        1
[INPUT] 0    0    [1    /1   ]  32.8134235883        1
[INPUT] 0    0    [1    /1   ]  4.70823853877        1
[INPUT] 0    0    [1    /1   ]  0.391243811238       1
[INPUT] 1    0    [1    /1   ]  8.59908099346        1
[INPUT] 1    0    [1    /1   ]  0.490821814773       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782881046, 1.0]], [0, [7343.404837432924, 1.0]], [0, [18377.323914088716, 1.0]], [0, [1411.836216725555, 1.0]], [0, [332.86732816099794, 1.0]], [0, [97.10505099836566, 1.0]], [0, [32.81342358830685, 1.0]], [0, [4.708238538770397, 1.0]], [0, [0.39124381123810764, 1.0]], [1, [8.599080993461548, 1.0]], [1, [0.49082181477338166, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782881]
bas 1, expnt(s) = [7343.40483743]
bas 2, expnt(s) = [18377.32391409]
bas 3, expnt(s) = [1411.83621673]
bas 4, expnt(s) = [332.86732816]
bas 5, expnt(s) = [97.105051]
bas 6, expnt(s) = [32.81342359]
bas 7, expnt(s) = [4.70823854]
bas 8, expnt(s) = [0.39124381]
bas 9, expnt(s) = [8.59908099]
bas 10, expnt(s) = [0.49082181]
CPU time:        42.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340484e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183622e+03 5.81906573e+02
 3.32867328e+02 1.96887617e+02 9.71050510e+01 7.81531325e+01
 3.28134236e+01 3.46380698e+01 4.70823854e+00 8.07530376e+00
 3.91243811e-01 1.24982911e+00 8.59908099e+00 4.29585330e+01
 4.90821815e-01 1.19850324e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320761744808056
cond(S) = 204.77262950631405
E1 = -689.184196270671  E_coul = 184.90182323983376
init E= -504.282373030837
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680680300641078  LUMO = 65.0921452727452
  mo_energy =
[-1.21684553e+02 -1.32893247e+01 -7.62327718e+00 -7.62327718e+00
 -7.62327718e+00 -1.65033911e+00 -6.80680301e-01 -6.80680301e-01
 -6.80680301e-01  6.50921453e+01  4.89859326e+02  2.50961752e+03
  1.24364862e+04  4.54549180e+04  1.32393040e+05]
E1 = -706.6636377495948  E_coul = 198.9455802130669
cycle= 1 E= -507.718057536528  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479792
diis-c [-0.23020074  1.        ]
  HOMO = -0.236613709623014  LUMO = 66.3959518330439
  mo_energy =
[-1.20288290e+02 -1.22614145e+01 -6.65429553e+00 -6.65429553e+00
 -6.65429553e+00 -1.16411825e+00 -2.36613710e-01 -2.36613710e-01
 -2.36613710e-01  6.63959518e+01  4.91244150e+02  2.51092266e+03
  1.24376615e+04  4.54560158e+04  1.32394088e+05]
E1 = -706.6181704159401  E_coul = 198.89947898846336
cycle= 2 E= -507.718691427477  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628669
diis-c [-3.91590385e-05  1.25502906e-03  9.98744971e-01]
  HOMO = -0.236889423109002  LUMO = 66.3916470220718
  mo_energy =
[-1.20300098e+02 -1.22632512e+01 -6.65711300e+00 -6.65711300e+00
 -6.65711300e+00 -1.16422092e+00 -2.36889423e-01 -2.36889423e-01
 -2.36889423e-01  6.63916470e+01  4.91231406e+02  2.51090380e+03
  1.24376385e+04  4.54559913e+04  1.32394063e+05]
E1 = -706.6174240254005  E_coul = 198.89873238947752
cycle= 3 E= -507.718691635923  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190378
diis-c [-8.79165265e-10  2.90563546e-05 -3.05638168e-02  1.03053476e+00]
  HOMO = -0.236893961494987  LUMO = 66.391571508409
  mo_energy =
[-1.20300306e+02 -1.22632829e+01 -6.65716582e+00 -6.65716582e+00
 -6.65716582e+00 -1.16422234e+00 -2.36893961e-01 -2.36893961e-01
 -2.36893961e-01  6.63915715e+01  4.91231200e+02  2.51090354e+03
  1.24376382e+04  4.54559910e+04  1.32394062e+05]
E1 = -706.6174083863116  E_coul = 198.8987167502778
cycle= 4 E= -507.718691636034  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6174083863116  E_coul = 198.8987167502778
  HOMO = -0.236893923892307  LUMO = 66.391572063559
  mo_energy =
[-1.20300304e+02 -1.22632827e+01 -6.65716547e+00 -6.65716547e+00
 -6.65716547e+00 -1.16422232e+00 -2.36893924e-01 -2.36893924e-01
 -2.36893924e-01  6.63915721e+01  4.91231201e+02  2.51090354e+03
  1.24376382e+04  4.54559910e+04  1.32394062e+05]
E1 = -706.6174084735301  E_coul = 198.8987168374965
Extra cycle  E= -507.718691636034  delta_E= 2.27e-13  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546478e+04 7.34340484e+03 1.83773239e+04 1.41183622e+03
 3.32867328e+02 9.71050510e+01 3.28134236e+01 4.70823854e+00
 3.91243811e-01 8.59908099e+00 4.90821815e-01]
E = -507.71869163603355
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478288        1
[INPUT] 0    0    [1    /1   ]  7343.40483743        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83621673        1
[INPUT] 0    0    [1    /1   ]  332.867328161        1
[INPUT] 0    0    [1    /1   ]  97.1050509984        1
[INPUT] 0    0    [1    /1   ]  32.8134235883        1
[INPUT] 0    0    [1    /1   ]  4.70823853877        1
[INPUT] 0    0    [1    /1   ]  0.391243811238       1
[INPUT] 1    0    [1    /1   ]  8.59908099346        1
[INPUT] 1    0    [1    /1   ]  0.490821814773       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782881046, 1.0]], [0, [7343.404837432924, 1.0]], [0, [18377.323914088716, 1.0]], [0, [1411.836216725555, 1.0]], [0, [332.86732816099794, 1.0]], [0, [97.10505099836566, 1.0]], [0, [32.81342358830685, 1.0]], [0, [4.708238538770397, 1.0]], [0, [0.39124381123810764, 1.0]], [1, [8.599080993461548, 1.0]], [1, [0.49082181477338166, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782881]
bas 1, expnt(s) = [7343.40483743]
bas 2, expnt(s) = [18377.32391409]
bas 3, expnt(s) = [1411.83621673]
bas 4, expnt(s) = [332.86732816]
bas 5, expnt(s) = [97.105051]
bas 6, expnt(s) = [32.81342359]
bas 7, expnt(s) = [4.70823854]
bas 8, expnt(s) = [0.39124381]
bas 9, expnt(s) = [8.59908099]
bas 10, expnt(s) = [0.49082181]
CPU time:        43.48
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340484e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183622e+03 5.81906573e+02
 3.32867328e+02 1.96887617e+02 9.71050510e+01 7.81531325e+01
 3.28134236e+01 3.46380698e+01 4.70823854e+00 8.07530376e+00
 3.91243811e-01 1.24982911e+00 8.59908099e+00 4.29585330e+01
 4.90821815e-01 1.19850324e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320761744808056
cond(S) = 204.77262950631405
E1 = -689.184196270671  E_coul = 184.90182323983376
init E= -504.282373030837
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680680300641078  LUMO = 65.0921452727452
  mo_energy =
[-1.21684553e+02 -1.32893247e+01 -7.62327718e+00 -7.62327718e+00
 -7.62327718e+00 -1.65033911e+00 -6.80680301e-01 -6.80680301e-01
 -6.80680301e-01  6.50921453e+01  4.89859326e+02  2.50961752e+03
  1.24364862e+04  4.54549180e+04  1.32393040e+05]
E1 = -706.6636377495948  E_coul = 198.9455802130669
cycle= 1 E= -507.718057536528  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479792
diis-c [-0.23020074  1.        ]
  HOMO = -0.236613709623014  LUMO = 66.3959518330439
  mo_energy =
[-1.20288290e+02 -1.22614145e+01 -6.65429553e+00 -6.65429553e+00
 -6.65429553e+00 -1.16411825e+00 -2.36613710e-01 -2.36613710e-01
 -2.36613710e-01  6.63959518e+01  4.91244150e+02  2.51092266e+03
  1.24376615e+04  4.54560158e+04  1.32394088e+05]
E1 = -706.6181704159401  E_coul = 198.89947898846336
cycle= 2 E= -507.718691427477  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628669
diis-c [-3.91590385e-05  1.25502906e-03  9.98744971e-01]
  HOMO = -0.236889423109002  LUMO = 66.3916470220718
  mo_energy =
[-1.20300098e+02 -1.22632512e+01 -6.65711300e+00 -6.65711300e+00
 -6.65711300e+00 -1.16422092e+00 -2.36889423e-01 -2.36889423e-01
 -2.36889423e-01  6.63916470e+01  4.91231406e+02  2.51090380e+03
  1.24376385e+04  4.54559913e+04  1.32394063e+05]
E1 = -706.6174240254005  E_coul = 198.89873238947752
cycle= 3 E= -507.718691635923  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190378
diis-c [-8.79165265e-10  2.90563546e-05 -3.05638168e-02  1.03053476e+00]
  HOMO = -0.236893961494987  LUMO = 66.391571508409
  mo_energy =
[-1.20300306e+02 -1.22632829e+01 -6.65716582e+00 -6.65716582e+00
 -6.65716582e+00 -1.16422234e+00 -2.36893961e-01 -2.36893961e-01
 -2.36893961e-01  6.63915715e+01  4.91231200e+02  2.51090354e+03
  1.24376382e+04  4.54559910e+04  1.32394062e+05]
E1 = -706.6174083863116  E_coul = 198.8987167502778
cycle= 4 E= -507.718691636034  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6174083863116  E_coul = 198.8987167502778
  HOMO = -0.236893923892307  LUMO = 66.391572063559
  mo_energy =
[-1.20300304e+02 -1.22632827e+01 -6.65716547e+00 -6.65716547e+00
 -6.65716547e+00 -1.16422232e+00 -2.36893924e-01 -2.36893924e-01
 -2.36893924e-01  6.63915721e+01  4.91231201e+02  2.51090354e+03
  1.24376382e+04  4.54559910e+04  1.32394062e+05]
E1 = -706.6174084735301  E_coul = 198.8987168374965
Extra cycle  E= -507.718691636034  delta_E= 2.27e-13  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.77262950631405
E1 = -706.6174084735301  E_coul = 198.8987168374965
init E= -507.718691636034
    CPU time for initialize scf      2.23 sec, wall time      0.14 sec
  HOMO = -0.236893923382043  LUMO = 66.3915720717503
  mo_energy =
[-1.20300304e+02 -1.22632827e+01 -6.65716546e+00 -6.65716546e+00
 -6.65716546e+00 -1.16422232e+00 -2.36893923e-01 -2.36893923e-01
 -2.36893923e-01  6.63915721e+01  4.91231201e+02  2.51090354e+03
  1.24376382e+04  4.54559910e+04  1.32394062e+05]
E1 = -706.6174084750604  E_coul = 198.89871683902618
cycle= 1 E= -507.718691636034  delta_E= -6.82e-13  |g|= 2.87e-10  |ddm|= 7.08e-10
    CPU time for cycle= 1      0.34 sec, wall time      0.02 sec
E1 = -706.6174084750604  E_coul = 198.89871683902618
  HOMO = -0.236893923373984  LUMO = 66.3915720718902
  mo_energy =
[-1.20300304e+02 -1.22632827e+01 -6.65716546e+00 -6.65716546e+00
 -6.65716546e+00 -1.16422232e+00 -2.36893923e-01 -2.36893923e-01
 -2.36893923e-01  6.63915721e+01  4.91231201e+02  2.51090354e+03
  1.24376382e+04  4.54559910e+04  1.32394062e+05]
E1 = -706.6174084750901  E_coul = 198.89871683905642
Extra cycle  E= -507.718691636034  delta_E= 5.68e-13  |g|= 1.41e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.70 sec, wall time      0.30 sec
exp = [3.67546478e+04 7.34340484e+03 1.83773239e+04 1.41183622e+03
 3.32867328e+02 9.71050510e+01 3.28134236e+01 4.70823854e+00
 3.91243811e-01 8.59908099e+00 4.90821815e-01]
grad_E = [-2.10242118e-07  1.97004250e-06  4.84857940e-09  1.03099524e-04
 -3.16767983e-04  5.68956242e-04 -5.92621044e-04  7.62682424e-04
  3.29151471e-03  3.09132162e-04 -5.38596549e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478348        1
[INPUT] 0    0    [1    /1   ]  7343.40478162        1
[INPUT] 0    0    [1    /1   ]  18377.323914         1
[INPUT] 0    0    [1    /1   ]  1411.83329003        1
[INPUT] 0    0    [1    /1   ]  332.876361222        1
[INPUT] 0    0    [1    /1   ]  97.0885092099        1
[INPUT] 0    0    [1    /1   ]  32.8309786117        1
[INPUT] 0    0    [1    /1   ]  4.72442590189        1
[INPUT] 0    0    [1    /1   ]  0.388175461858       1
[INPUT] 1    0    [1    /1   ]  8.59918868639        1
[INPUT] 1    0    [1    /1   ]  0.494015824131       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647834773146, 1.0]], [0, [7343.404781620986, 1.0]], [0, [18377.323913952197, 1.0]], [0, [1411.8332900312657, 1.0]], [0, [332.87636122212507, 1.0]], [0, [97.08850920990903, 1.0]], [0, [32.83097861166109, 1.0]], [0, [4.724425901891081, 1.0]], [0, [0.388175461857849, 1.0]], [1, [8.5991886863882, 1.0]], [1, [0.4940158241312302, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64783477]
bas 1, expnt(s) = [7343.40478162]
bas 2, expnt(s) = [18377.32391395]
bas 3, expnt(s) = [1411.83329003]
bas 4, expnt(s) = [332.87636122]
bas 5, expnt(s) = [97.08850921]
bas 6, expnt(s) = [32.83097861]
bas 7, expnt(s) = [4.7244259]
bas 8, expnt(s) = [0.38817546]
bas 9, expnt(s) = [8.59918869]
bas 10, expnt(s) = [0.49401582]
CPU time:        53.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340478e+03 2.00418647e+03
 1.83773239e+04 3.98773901e+03 1.41183329e+03 5.81905668e+02
 3.32876361e+02 1.96891624e+02 9.70885092e+01 7.81431473e+01
 3.28309786e+01 3.46519673e+01 4.72442590e+00 8.09611756e+00
 3.88175462e-01 1.24247049e+00 8.59918869e+00 4.29592055e+01
 4.94015824e-01 1.20826019e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.316659162060706
cond(S) = 204.78949156738278
E1 = -689.2667733384798  E_coul = 184.9753124137668
init E= -504.291460924713
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.678185258399561  LUMO = 65.1841381674516
  mo_energy =
[-1.21677121e+02 -1.32831260e+01 -7.61926106e+00 -7.61926106e+00
 -7.61926106e+00 -1.64783810e+00 -6.78185258e-01 -6.78185258e-01
 -6.78185258e-01  6.51841382e+01  4.89949183e+02  2.50969709e+03
  1.24365548e+04  4.54549800e+04  1.32393098e+05]
E1 = -706.8097438263339  E_coul = 199.09199893272736
cycle= 1 E= -507.717744893607  delta_E= -3.43  |g|= 0.335  |ddm|= 0.302
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.480142
diis-c [-0.23053611  1.        ]
  HOMO = -0.23065376653918  LUMO = 66.4937645794944
  mo_energy =
[-1.20273274e+02 -1.22505965e+01 -6.64579164e+00 -6.64579164e+00
 -6.64579164e+00 -1.15997487e+00 -2.30653767e-01 -2.30653767e-01
 -2.30653767e-01  6.64937646e+01  4.91341823e+02  2.51101098e+03
  1.24377395e+04  4.54560875e+04  1.32394156e+05]
E1 = -706.7645562886095  E_coul = 199.04618333448548
cycle= 2 E= -507.718372954124  delta_E= -0.000628  |g|= 0.00578  |ddm|= 0.0215
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00622828
diis-c [-3.84214426e-05  1.26546722e-03  9.98734533e-01]
  HOMO = -0.230931197430133  LUMO = 66.489488052739
  mo_energy =
[-1.20285008e+02 -1.22524250e+01 -6.64858772e+00 -6.64858772e+00
 -6.64858772e+00 -1.16007664e+00 -2.30931197e-01 -2.30931197e-01
 -2.30931197e-01  6.64894881e+01  4.91329158e+02  2.51099222e+03
  1.24377166e+04  4.54560631e+04  1.32394131e+05]
E1 = -706.7638155810392  E_coul = 199.0454424214867
cycle= 3 E= -507.718373159553  delta_E= -2.05e-07  |g|= 0.000139  |ddm|= 0.000345
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000188811
diis-c [-8.75672843e-10  2.93671187e-05 -3.05808844e-02  1.03055152e+00]
  HOMO = -0.23093576080576  LUMO = 66.4894130748368
  mo_energy =
[-1.20285214e+02 -1.22524566e+01 -6.64864010e+00 -6.64864010e+00
 -6.64864010e+00 -1.16007804e+00 -2.30935761e-01 -2.30935761e-01
 -2.30935761e-01  6.64894131e+01  4.91328952e+02  2.51099196e+03
  1.24377163e+04  4.54560628e+04  1.32394131e+05]
E1 = -706.7638000632679  E_coul = 199.04542690360603
cycle= 4 E= -507.718373159662  delta_E= -1.09e-10  |g|= 6.57e-07  |ddm|= 7.26e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.7638000632679  E_coul = 199.04542690360603
  HOMO = -0.230935723042793  LUMO = 66.4894136253302
  mo_energy =
[-1.20285212e+02 -1.22524564e+01 -6.64863975e+00 -6.64863975e+00
 -6.64863975e+00 -1.16007803e+00 -2.30935723e-01 -2.30935723e-01
 -2.30935723e-01  6.64894136e+01  4.91328954e+02  2.51099196e+03
  1.24377163e+04  4.54560628e+04  1.32394131e+05]
E1 = -706.7638001497006  E_coul = 199.04542699003895
Extra cycle  E= -507.718373159662  delta_E= 2.27e-13  |g|= 1.27e-08  |ddm|= 4.07e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546478e+04 7.34340478e+03 1.83773239e+04 1.41183329e+03
 3.32876361e+02 9.70885092e+01 3.28309786e+01 4.72442590e+00
 3.88175462e-01 8.59918869e+00 4.94015824e-01]
E = -507.71837315966167
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478294        1
[INPUT] 0    0    [1    /1   ]  7343.40483185        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83592406        1
[INPUT] 0    0    [1    /1   ]  332.868231467        1
[INPUT] 0    0    [1    /1   ]  97.1033968195        1
[INPUT] 0    0    [1    /1   ]  32.8151790906        1
[INPUT] 0    0    [1    /1   ]  4.70985727508        1
[INPUT] 0    0    [1    /1   ]  0.3909369763         1
[INPUT] 1    0    [1    /1   ]  8.59909176275        1
[INPUT] 1    0    [1    /1   ]  0.491141215709       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782940673, 1.0]], [0, [7343.404831851731, 1.0]], [0, [18377.323914075063, 1.0]], [0, [1411.835924056126, 1.0]], [0, [332.86823146711066, 1.0]], [0, [97.10339681952, 1.0]], [0, [32.81517909064227, 1.0]], [0, [4.709857275082466, 1.0]], [0, [0.3909369763000818, 1.0]], [1, [8.599091762754213, 1.0]], [1, [0.4911412157091665, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782941]
bas 1, expnt(s) = [7343.40483185]
bas 2, expnt(s) = [18377.32391408]
bas 3, expnt(s) = [1411.83592406]
bas 4, expnt(s) = [332.86823147]
bas 5, expnt(s) = [97.10339682]
bas 6, expnt(s) = [32.81517909]
bas 7, expnt(s) = [4.70985728]
bas 8, expnt(s) = [0.39093698]
bas 9, expnt(s) = [8.59909176]
bas 10, expnt(s) = [0.49114122]
CPU time:        54.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340483e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183592e+03 5.81906483e+02
 3.32868231e+02 1.96888017e+02 9.71033968e+01 7.81521340e+01
 3.28151791e+01 3.46394596e+01 4.70985728e+00 8.07738594e+00
 3.90936976e-01 1.24909390e+00 8.59909176e+00 4.29586002e+01
 4.91141216e-01 1.19947823e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320362407929895
cond(S) = 204.77431395277057
E1 = -689.19273125604  E_coul = 184.9093638493799
init E= -504.28336740666
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680426514361134  LUMO = 65.1013591997329
  mo_energy =
[-1.21683796e+02 -1.32886968e+01 -7.62286129e+00 -7.62286129e+00
 -7.62286129e+00 -1.65008420e+00 -6.80426514e-01 -6.80426514e-01
 -6.80426514e-01  6.51013592e+01  4.89868324e+02  2.50962549e+03
  1.24364931e+04  4.54549242e+04  1.32393045e+05]
E1 = -706.6783420845009  E_coul = 198.96028373432972
cycle= 1 E= -507.718058350171  delta_E= -3.43  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479827
diis-c [-0.23023378  1.        ]
  HOMO = -0.236019300363944  LUMO = 66.4057381338119
  mo_energy =
[-1.20286784e+02 -1.22603336e+01 -6.65343989e+00 -6.65343989e+00
 -6.65343989e+00 -1.16370388e+00 -2.36019300e-01 -2.36019300e-01
 -2.36019300e-01  6.64057381e+01  4.91253920e+02  2.51093149e+03
  1.24376693e+04  4.54560230e+04  1.32394095e+05]
E1 = -706.6329028164522  E_coul = 198.91421116380786
cycle= 2 E= -507.718691652644  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628083
diis-c [-3.90847178e-05  1.25612460e-03  9.98743875e-01]
  HOMO = -0.236295186265244  LUMO = 66.4014361597111
  mo_energy =
[-1.20298584e+02 -1.22621694e+01 -6.65625521e+00 -6.65625521e+00
 -6.65625521e+00 -1.16380646e+00 -2.36295186e-01 -2.36295186e-01
 -2.36295186e-01  6.64014362e+01  4.91241185e+02  2.51091265e+03
  1.24376463e+04  4.54559985e+04  1.32394069e+05]
E1 = -706.6321569956383  E_coul = 198.91346513485084
cycle= 3 E= -507.718691860787  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190222
diis-c [-8.78807663e-10  2.90874000e-05 -3.05655985e-02  1.03053651e+00]
  HOMO = -0.236299727184042  LUMO = 66.4013606995137
  mo_energy =
[-1.20298792e+02 -1.22622012e+01 -6.65630799e+00 -6.65630799e+00
 -6.65630799e+00 -1.16380787e+00 -2.36299727e-01 -2.36299727e-01
 -2.36299727e-01  6.64013607e+01  4.91240978e+02  2.51091238e+03
  1.24376460e+04  4.54559982e+04  1.32394069e+05]
E1 = -706.6321413686676  E_coul = 198.91344950776949
cycle= 4 E= -507.718691860898  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6321413686676  E_coul = 198.91344950776949
  HOMO = -0.236299689565087  LUMO = 66.4013612541978
  mo_energy =
[-1.20298790e+02 -1.22622009e+01 -6.65630764e+00 -6.65630764e+00
 -6.65630764e+00 -1.16380786e+00 -2.36299690e-01 -2.36299690e-01
 -2.36299690e-01  6.64013613e+01  4.91240980e+02  2.51091238e+03
  1.24376461e+04  4.54559982e+04  1.32394069e+05]
E1 = -706.632141455808  E_coul = 198.91344959490993
Extra cycle  E= -507.718691860898  delta_E= 5.68e-14  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546478e+04 7.34340483e+03 1.83773239e+04 1.41183592e+03
 3.32868231e+02 9.71033968e+01 3.28151791e+01 4.70985728e+00
 3.90936976e-01 8.59909176e+00 4.91141216e-01]
E = -507.71869186089805
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478291        1
[INPUT] 0    0    [1    /1   ]  7343.40483447        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83606116        1
[INPUT] 0    0    [1    /1   ]  332.8678083          1
[INPUT] 0    0    [1    /1   ]  97.104171744         1
[INPUT] 0    0    [1    /1   ]  32.8143566997        1
[INPUT] 0    0    [1    /1   ]  4.70909895422        1
[INPUT] 0    0    [1    /1   ]  0.391080717646       1
[INPUT] 1    0    [1    /1   ]  8.59908671772        1
[INPUT] 1    0    [1    /1   ]  0.490991587637       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.6478291274, 1.0]], [0, [7343.404834466322, 1.0]], [0, [18377.32391408146, 1.0]], [0, [1411.8360611614305, 1.0]], [0, [332.86780830005847, 1.0]], [0, [97.10417174396257, 1.0]], [0, [32.814356699718644, 1.0]], [0, [4.709098954216738, 1.0]], [0, [0.3910807176457874, 1.0]], [1, [8.599086717720457, 1.0]], [1, [0.4909915876367419, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782913]
bas 1, expnt(s) = [7343.40483447]
bas 2, expnt(s) = [18377.32391408]
bas 3, expnt(s) = [1411.83606116]
bas 4, expnt(s) = [332.8678083]
bas 5, expnt(s) = [97.10417174]
bas 6, expnt(s) = [32.8143567]
bas 7, expnt(s) = [4.70909895]
bas 8, expnt(s) = [0.39108072]
bas 9, expnt(s) = [8.59908672]
bas 10, expnt(s) = [0.49099159]
CPU time:        55.70
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340483e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183606e+03 5.81906525e+02
 3.32867808e+02 1.96887830e+02 9.71041717e+01 7.81526017e+01
 3.28143567e+01 3.46388085e+01 4.70909895e+00 8.07641054e+00
 3.91080718e-01 1.24943834e+00 8.59908672e+00 4.29585687e+01
 4.90991588e-01 1.19902146e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320549786179665
cond(S) = 204.77352480041222
E1 = -689.1887405933526  E_coul = 184.905836649231
init E= -504.282903944122
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680545286134203  LUMO = 65.097043205377
  mo_energy =
[-1.21684150e+02 -1.32889908e+01 -7.62305572e+00 -7.62305572e+00
 -7.62305572e+00 -1.65020348e+00 -6.80545286e-01 -6.80545286e-01
 -6.80545286e-01  6.50970432e+01  4.89864109e+02  2.50962176e+03
  1.24364899e+04  4.54549213e+04  1.32393043e+05]
E1 = -706.6714562164353  E_coul = 198.95339735952234
cycle= 1 E= -507.718058856913  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479811
diis-c [-0.23021829  1.        ]
  HOMO = -0.236297804316113  LUMO = 66.401153736313
  mo_energy =
[-1.20287489e+02 -1.22608400e+01 -6.65384058e+00 -6.65384058e+00
 -6.65384058e+00 -1.16389800e+00 -2.36297804e-01 -2.36297804e-01
 -2.36297804e-01  6.64011537e+01  4.91249343e+02  2.51092736e+03
  1.24376657e+04  4.54560196e+04  1.32394091e+05]
E1 = -706.6260038030339  E_coul = 198.90731136811837
cycle= 2 E= -507.718692434916  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628358
diis-c [-3.91195190e-05  1.25561283e-03  9.98744387e-01]
  HOMO = -0.236573609465438  LUMO = 66.3968504334719
  mo_energy =
[-1.20299293e+02 -1.22626762e+01 -6.65665691e+00 -6.65665691e+00
 -6.65665691e+00 -1.16400062e+00 -2.36573609e-01 -2.36573609e-01
 -2.36573609e-01  6.63968504e+01  4.91236604e+02  2.51090850e+03
  1.24376427e+04  4.54559951e+04  1.32394066e+05]
E1 = -706.6252577153632  E_coul = 198.906565072163
cycle= 3 E= -507.7186926432  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190295
diis-c [-8.78975605e-10  2.90727526e-05 -3.05647628e-02  1.03053569e+00]
  HOMO = -0.236578149198652  LUMO = 66.3967749482252
  mo_energy =
[-1.20299501e+02 -1.22627080e+01 -6.65670971e+00 -6.65670971e+00
 -6.65670971e+00 -1.16400203e+00 -2.36578149e-01 -2.36578149e-01
 -2.36578149e-01  6.63967749e+01  4.91236398e+02  2.51090824e+03
  1.24376424e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6252420827152  E_coul = 198.906549439404
cycle= 4 E= -507.718692643311  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6252420827152  E_coul = 198.906549439404
  HOMO = -0.2365781115873  LUMO = 66.3967755031276
  mo_energy =
[-1.20299499e+02 -1.22627077e+01 -6.65670935e+00 -6.65670935e+00
 -6.65670935e+00 -1.16400202e+00 -2.36578112e-01 -2.36578112e-01
 -2.36578112e-01  6.63967755e+01  4.91236399e+02  2.51090824e+03
  1.24376424e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6252421698922  E_coul = 198.90654952658105
Extra cycle  E= -507.718692643311  delta_E= 5.68e-14  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546478e+04 7.34340483e+03 1.83773239e+04 1.41183606e+03
 3.32867808e+02 9.71041717e+01 3.28143567e+01 4.70909895e+00
 3.91080718e-01 8.59908672e+00 4.90991588e-01]
E = -507.71869264331116
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478291        1
[INPUT] 0    0    [1    /1   ]  7343.40483447        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83606116        1
[INPUT] 0    0    [1    /1   ]  332.8678083          1
[INPUT] 0    0    [1    /1   ]  97.104171744         1
[INPUT] 0    0    [1    /1   ]  32.8143566997        1
[INPUT] 0    0    [1    /1   ]  4.70909895422        1
[INPUT] 0    0    [1    /1   ]  0.391080717646       1
[INPUT] 1    0    [1    /1   ]  8.59908671772        1
[INPUT] 1    0    [1    /1   ]  0.490991587637       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.6478291274, 1.0]], [0, [7343.404834466322, 1.0]], [0, [18377.32391408146, 1.0]], [0, [1411.8360611614305, 1.0]], [0, [332.86780830005847, 1.0]], [0, [97.10417174396257, 1.0]], [0, [32.814356699718644, 1.0]], [0, [4.709098954216738, 1.0]], [0, [0.3910807176457874, 1.0]], [1, [8.599086717720457, 1.0]], [1, [0.4909915876367419, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782913]
bas 1, expnt(s) = [7343.40483447]
bas 2, expnt(s) = [18377.32391408]
bas 3, expnt(s) = [1411.83606116]
bas 4, expnt(s) = [332.8678083]
bas 5, expnt(s) = [97.10417174]
bas 6, expnt(s) = [32.8143567]
bas 7, expnt(s) = [4.70909895]
bas 8, expnt(s) = [0.39108072]
bas 9, expnt(s) = [8.59908672]
bas 10, expnt(s) = [0.49099159]
CPU time:        56.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340483e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183606e+03 5.81906525e+02
 3.32867808e+02 1.96887830e+02 9.71041717e+01 7.81526017e+01
 3.28143567e+01 3.46388085e+01 4.70909895e+00 8.07641054e+00
 3.91080718e-01 1.24943834e+00 8.59908672e+00 4.29585687e+01
 4.90991588e-01 1.19902146e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320549786179665
cond(S) = 204.77352480041222
E1 = -689.1887405933526  E_coul = 184.905836649231
init E= -504.282903944122
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680545286134203  LUMO = 65.097043205377
  mo_energy =
[-1.21684150e+02 -1.32889908e+01 -7.62305572e+00 -7.62305572e+00
 -7.62305572e+00 -1.65020348e+00 -6.80545286e-01 -6.80545286e-01
 -6.80545286e-01  6.50970432e+01  4.89864109e+02  2.50962176e+03
  1.24364899e+04  4.54549213e+04  1.32393043e+05]
E1 = -706.6714562164353  E_coul = 198.95339735952234
cycle= 1 E= -507.718058856913  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479811
diis-c [-0.23021829  1.        ]
  HOMO = -0.236297804316113  LUMO = 66.401153736313
  mo_energy =
[-1.20287489e+02 -1.22608400e+01 -6.65384058e+00 -6.65384058e+00
 -6.65384058e+00 -1.16389800e+00 -2.36297804e-01 -2.36297804e-01
 -2.36297804e-01  6.64011537e+01  4.91249343e+02  2.51092736e+03
  1.24376657e+04  4.54560196e+04  1.32394091e+05]
E1 = -706.6260038030339  E_coul = 198.90731136811837
cycle= 2 E= -507.718692434916  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628358
diis-c [-3.91195190e-05  1.25561283e-03  9.98744387e-01]
  HOMO = -0.236573609465438  LUMO = 66.3968504334719
  mo_energy =
[-1.20299293e+02 -1.22626762e+01 -6.65665691e+00 -6.65665691e+00
 -6.65665691e+00 -1.16400062e+00 -2.36573609e-01 -2.36573609e-01
 -2.36573609e-01  6.63968504e+01  4.91236604e+02  2.51090850e+03
  1.24376427e+04  4.54559951e+04  1.32394066e+05]
E1 = -706.6252577153632  E_coul = 198.906565072163
cycle= 3 E= -507.7186926432  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190295
diis-c [-8.78975605e-10  2.90727526e-05 -3.05647628e-02  1.03053569e+00]
  HOMO = -0.236578149198652  LUMO = 66.3967749482252
  mo_energy =
[-1.20299501e+02 -1.22627080e+01 -6.65670971e+00 -6.65670971e+00
 -6.65670971e+00 -1.16400203e+00 -2.36578149e-01 -2.36578149e-01
 -2.36578149e-01  6.63967749e+01  4.91236398e+02  2.51090824e+03
  1.24376424e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6252420827152  E_coul = 198.906549439404
cycle= 4 E= -507.718692643311  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6252420827152  E_coul = 198.906549439404
  HOMO = -0.2365781115873  LUMO = 66.3967755031276
  mo_energy =
[-1.20299499e+02 -1.22627077e+01 -6.65670935e+00 -6.65670935e+00
 -6.65670935e+00 -1.16400202e+00 -2.36578112e-01 -2.36578112e-01
 -2.36578112e-01  6.63967755e+01  4.91236399e+02  2.51090824e+03
  1.24376424e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6252421698922  E_coul = 198.90654952658105
Extra cycle  E= -507.718692643311  delta_E= 5.68e-14  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.77352480041222
E1 = -706.6252421698922  E_coul = 198.90654952658105
init E= -507.718692643311
    CPU time for initialize scf      2.05 sec, wall time      0.13 sec
  HOMO = -0.23657811107695  LUMO = 66.3967755113151
  mo_energy =
[-1.20299499e+02 -1.22627077e+01 -6.65670935e+00 -6.65670935e+00
 -6.65670935e+00 -1.16400202e+00 -2.36578111e-01 -2.36578111e-01
 -2.36578111e-01  6.63967755e+01  4.91236399e+02  2.51090824e+03
  1.24376424e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6252421714211  E_coul = 198.90654952810974
cycle= 1 E= -507.718692643311  delta_E= -1.71e-13  |g|= 2.85e-10  |ddm|= 7.08e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6252421714211  E_coul = 198.90654952810974
  HOMO = -0.236578111068902  LUMO = 66.3967755114551
  mo_energy =
[-1.20299499e+02 -1.22627077e+01 -6.65670935e+00 -6.65670935e+00
 -6.65670935e+00 -1.16400202e+00 -2.36578111e-01 -2.36578111e-01
 -2.36578111e-01  6.63967755e+01  4.91236399e+02  2.51090824e+03
  1.24376424e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6252421714512  E_coul = 198.90654952814006
Extra cycle  E= -507.718692643311  delta_E= 2.27e-13  |g|= 1.29e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.56 sec, wall time      0.29 sec
exp = [3.67546478e+04 7.34340483e+03 1.83773239e+04 1.41183606e+03
 3.32867808e+02 9.71041717e+01 3.28143567e+01 4.70909895e+00
 3.91080718e-01 8.59908672e+00 4.90991588e-01]
grad_E = [-2.10219564e-07  1.97104255e-06  4.86820170e-09  1.03034852e-04
 -3.15744496e-04  5.60774339e-04 -5.76962130e-04  1.48422852e-03
  1.10904795e-03  1.83295300e-04  6.00005453e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478297        1
[INPUT] 0    0    [1    /1   ]  7343.40482902        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83577571        1
[INPUT] 0    0    [1    /1   ]  332.868687157        1
[INPUT] 0    0    [1    /1   ]  97.1025791306        1
[INPUT] 0    0    [1    /1   ]  32.8160292543        1
[INPUT] 0    0    [1    /1   ]  4.70870973544        1
[INPUT] 0    0    [1    /1   ]  0.3909542267         1
[INPUT] 1    0    [1    /1   ]  8.5989210969         1
[INPUT] 1    0    [1    /1   ]  0.490982195244       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782970926, 1.0]], [0, [7343.404829016759, 1.0]], [0, [18377.32391406808, 1.0]], [0, [1411.8357757060924, 1.0]], [0, [332.8686871573917, 1.0]], [0, [97.10257913061248, 1.0]], [0, [32.81602925429813, 1.0]], [0, [4.708709735437234, 1.0]], [0, [0.39095422669977625, 1.0]], [1, [8.59892109690039, 1.0]], [1, [0.49098219524391634, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782971]
bas 1, expnt(s) = [7343.40482902]
bas 2, expnt(s) = [18377.32391407]
bas 3, expnt(s) = [1411.83577571]
bas 4, expnt(s) = [332.86868716]
bas 5, expnt(s) = [97.10257913]
bas 6, expnt(s) = [32.81602925]
bas 7, expnt(s) = [4.70870974]
bas 8, expnt(s) = [0.39095423]
bas 9, expnt(s) = [8.5989211]
bas 10, expnt(s) = [0.4909822]
CPU time:        66.62
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340483e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183578e+03 5.81906437e+02
 3.32868687e+02 1.96888220e+02 9.71025791e+01 7.81516404e+01
 3.28160293e+01 3.46401327e+01 4.70870974e+00 8.07590988e+00
 3.90954227e-01 1.24913523e+00 8.59892110e+00 4.29575345e+01
 4.90982195e-01 1.19899279e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32058194297526
cond(S) = 204.77354284350776
E1 = -689.1849996274173  E_coul = 184.90256280551012
init E= -504.282436821907
    CPU time for initialize scf      1.26 sec, wall time      0.12 sec
  HOMO = -0.680613611198797  LUMO = 65.0969136013726
  mo_energy =
[-1.21684528e+02 -1.32892475e+01 -7.62331363e+00 -7.62331363e+00
 -7.62331363e+00 -1.65020666e+00 -6.80613611e-01 -6.80613611e-01
 -6.80613611e-01  6.50969136e+01  4.89864657e+02  2.50962242e+03
  1.24364903e+04  4.54549215e+04  1.32393043e+05]
E1 = -706.666799639684  E_coul = 198.94873826554928
cycle= 1 E= -507.718061374135  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
diis-norm(errvec)=0.479799
diis-c [-0.23020753  1.        ]
  HOMO = -0.236397694838739  LUMO = 66.4009192731499
  mo_energy =
[-1.20288060e+02 -1.22611756e+01 -6.65418890e+00 -6.65418890e+00
 -6.65418890e+00 -1.16397772e+00 -2.36397695e-01 -2.36397695e-01
 -2.36397695e-01  6.64009193e+01  4.91249696e+02  2.51092778e+03
  1.24376659e+04  4.54560196e+04  1.32394091e+05]
E1 = -706.621344020402  E_coul = 198.90264889430944
cycle= 2 E= -507.718695126093  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628454
diis-c [-3.91323359e-05  1.25448828e-03  9.98745512e-01]
  HOMO = -0.236673506091395  LUMO = 66.3966155938849
  mo_energy =
[-1.20299865e+02 -1.22630119e+01 -6.65700549e+00 -6.65700549e+00
 -6.65700549e+00 -1.16408031e+00 -2.36673506e-01 -2.36673506e-01
 -2.36673506e-01  6.63966156e+01  4.91236956e+02  2.51090893e+03
  1.24376429e+04  4.54559951e+04  1.32394066e+05]
E1 = -706.6205978710233  E_coul = 198.90190253658815
cycle= 3 E= -507.718695334435  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190312
diis-c [-8.79091612e-10  2.90748272e-05 -3.05629377e-02  1.03053386e+00]
  HOMO = -0.236678045469297  LUMO = 66.3965401061892
  mo_energy =
[-1.20300073e+02 -1.22630437e+01 -6.65705829e+00 -6.65705829e+00
 -6.65705829e+00 -1.16408173e+00 -2.36678045e-01 -2.36678045e-01
 -2.36678045e-01  6.63965401e+01  4.91236750e+02  2.51090866e+03
  1.24376426e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.620582237867  E_coul = 198.90188690332127
cycle= 4 E= -507.718695334546  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.620582237867  E_coul = 198.90188690332127
  HOMO = -0.236678007860903  LUMO = 66.3965406610845
  mo_energy =
[-1.20300071e+02 -1.22630434e+01 -6.65705794e+00 -6.65705794e+00
 -6.65705794e+00 -1.16408171e+00 -2.36678008e-01 -2.36678008e-01
 -2.36678008e-01  6.63965407e+01  4.91236752e+02  2.51090867e+03
  1.24376426e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6205823250416  E_coul = 198.90188699049554
Extra cycle  E= -507.718695334546  delta_E= -3.41e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.91 sec, wall time      0.25 sec
exp = [3.67546478e+04 7.34340483e+03 1.83773239e+04 1.41183578e+03
 3.32868687e+02 9.71025791e+01 3.28160293e+01 4.70870974e+00
 3.90954227e-01 8.59892110e+00 4.90982195e-01]
E = -507.71869533454606
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478297        1
[INPUT] 0    0    [1    /1   ]  7343.40482902        1
[INPUT] 0    0    [1    /1   ]  18377.3239141        1
[INPUT] 0    0    [1    /1   ]  1411.83577571        1
[INPUT] 0    0    [1    /1   ]  332.868687157        1
[INPUT] 0    0    [1    /1   ]  97.1025791306        1
[INPUT] 0    0    [1    /1   ]  32.8160292543        1
[INPUT] 0    0    [1    /1   ]  4.70870973544        1
[INPUT] 0    0    [1    /1   ]  0.3909542267         1
[INPUT] 1    0    [1    /1   ]  8.5989210969         1
[INPUT] 1    0    [1    /1   ]  0.490982195244       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64782970926, 1.0]], [0, [7343.404829016759, 1.0]], [0, [18377.32391406808, 1.0]], [0, [1411.8357757060924, 1.0]], [0, [332.8686871573917, 1.0]], [0, [97.10257913061248, 1.0]], [0, [32.81602925429813, 1.0]], [0, [4.708709735437234, 1.0]], [0, [0.39095422669977625, 1.0]], [1, [8.59892109690039, 1.0]], [1, [0.49098219524391634, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64782971]
bas 1, expnt(s) = [7343.40482902]
bas 2, expnt(s) = [18377.32391407]
bas 3, expnt(s) = [1411.83577571]
bas 4, expnt(s) = [332.86868716]
bas 5, expnt(s) = [97.10257913]
bas 6, expnt(s) = [32.81602925]
bas 7, expnt(s) = [4.70870974]
bas 8, expnt(s) = [0.39095423]
bas 9, expnt(s) = [8.5989211]
bas 10, expnt(s) = [0.4909822]
CPU time:        68.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340483e+03 2.00418648e+03
 1.83773239e+04 3.98773901e+03 1.41183578e+03 5.81906437e+02
 3.32868687e+02 1.96888220e+02 9.71025791e+01 7.81516404e+01
 3.28160293e+01 3.46401327e+01 4.70870974e+00 8.07590988e+00
 3.90954227e-01 1.24913523e+00 8.59892110e+00 4.29575345e+01
 4.90982195e-01 1.19899279e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32058194297526
cond(S) = 204.77354284350776
E1 = -689.1849996274173  E_coul = 184.90256280551012
init E= -504.282436821907
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680613611198797  LUMO = 65.0969136013726
  mo_energy =
[-1.21684528e+02 -1.32892475e+01 -7.62331363e+00 -7.62331363e+00
 -7.62331363e+00 -1.65020666e+00 -6.80613611e-01 -6.80613611e-01
 -6.80613611e-01  6.50969136e+01  4.89864657e+02  2.50962242e+03
  1.24364903e+04  4.54549215e+04  1.32393043e+05]
E1 = -706.666799639684  E_coul = 198.94873826554928
cycle= 1 E= -507.718061374135  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479799
diis-c [-0.23020753  1.        ]
  HOMO = -0.236397694838739  LUMO = 66.4009192731499
  mo_energy =
[-1.20288060e+02 -1.22611756e+01 -6.65418890e+00 -6.65418890e+00
 -6.65418890e+00 -1.16397772e+00 -2.36397695e-01 -2.36397695e-01
 -2.36397695e-01  6.64009193e+01  4.91249696e+02  2.51092778e+03
  1.24376659e+04  4.54560196e+04  1.32394091e+05]
E1 = -706.621344020402  E_coul = 198.90264889430944
cycle= 2 E= -507.718695126093  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628454
diis-c [-3.91323359e-05  1.25448828e-03  9.98745512e-01]
  HOMO = -0.236673506091395  LUMO = 66.3966155938849
  mo_energy =
[-1.20299865e+02 -1.22630119e+01 -6.65700549e+00 -6.65700549e+00
 -6.65700549e+00 -1.16408031e+00 -2.36673506e-01 -2.36673506e-01
 -2.36673506e-01  6.63966156e+01  4.91236956e+02  2.51090893e+03
  1.24376429e+04  4.54559951e+04  1.32394066e+05]
E1 = -706.6205978710233  E_coul = 198.90190253658815
cycle= 3 E= -507.718695334435  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190312
diis-c [-8.79091612e-10  2.90748272e-05 -3.05629377e-02  1.03053386e+00]
  HOMO = -0.236678045469297  LUMO = 66.3965401061892
  mo_energy =
[-1.20300073e+02 -1.22630437e+01 -6.65705829e+00 -6.65705829e+00
 -6.65705829e+00 -1.16408173e+00 -2.36678045e-01 -2.36678045e-01
 -2.36678045e-01  6.63965401e+01  4.91236750e+02  2.51090866e+03
  1.24376426e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.620582237867  E_coul = 198.90188690332127
cycle= 4 E= -507.718695334546  delta_E= -1.11e-10  |g|= 6.62e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.620582237867  E_coul = 198.90188690332127
  HOMO = -0.236678007860903  LUMO = 66.3965406610845
  mo_energy =
[-1.20300071e+02 -1.22630434e+01 -6.65705794e+00 -6.65705794e+00
 -6.65705794e+00 -1.16408171e+00 -2.36678008e-01 -2.36678008e-01
 -2.36678008e-01  6.63965407e+01  4.91236752e+02  2.51090867e+03
  1.24376426e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6205823250416  E_coul = 198.90188699049554
Extra cycle  E= -507.718695334546  delta_E= -3.41e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.01 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.77354284350776
E1 = -706.6205823250416  E_coul = 198.90188699049554
init E= -507.718695334546
    CPU time for initialize scf      2.39 sec, wall time      0.15 sec
  HOMO = -0.236678007350617  LUMO = 66.3965406692714
  mo_energy =
[-1.20300071e+02 -1.22630434e+01 -6.65705794e+00 -6.65705794e+00
 -6.65705794e+00 -1.16408171e+00 -2.36678007e-01 -2.36678007e-01
 -2.36678007e-01  6.63965407e+01  4.91236752e+02  2.51090867e+03
  1.24376426e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6205823265701  E_coul = 198.901886992024
cycle= 1 E= -507.718695334546  delta_E= -5.68e-14  |g|= 2.85e-10  |ddm|= 7.07e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6205823265701  E_coul = 198.901886992024
  HOMO = -0.236678007342562  LUMO = 66.3965406694117
  mo_energy =
[-1.20300071e+02 -1.22630434e+01 -6.65705794e+00 -6.65705794e+00
 -6.65705794e+00 -1.16408171e+00 -2.36678007e-01 -2.36678007e-01
 -2.36678007e-01  6.63965407e+01  4.91236752e+02  2.51090867e+03
  1.24376426e+04  4.54559948e+04  1.32394066e+05]
E1 = -706.6205823266  E_coul = 198.9018869920542
Extra cycle  E= -507.718695334546  delta_E= 2.84e-13  |g|= 1.51e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.91 sec, wall time      0.31 sec
exp = [3.67546478e+04 7.34340483e+03 1.83773239e+04 1.41183578e+03
 3.32868687e+02 9.71025791e+01 3.28160293e+01 4.70870974e+00
 3.90954227e-01 8.59892110e+00 4.90982195e-01]
grad_E = [-2.10182462e-07  1.97249347e-06  4.90521265e-09  1.02946471e-04
 -3.14321544e-04  5.53101124e-04 -5.59208056e-04  1.18331256e-03
 -9.70762895e-04  2.37675321e-05 -7.65670228e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478346        1
[INPUT] 0    0    [1    /1   ]  7343.40478342        1
[INPUT] 0    0    [1    /1   ]  18377.323914         1
[INPUT] 0    0    [1    /1   ]  1411.83338795        1
[INPUT] 0    0    [1    /1   ]  332.876033448        1
[INPUT] 0    0    [1    /1   ]  97.0892870758        1
[INPUT] 0    0    [1    /1   ]  32.8299463139        1
[INPUT] 0    0    [1    /1   ]  4.7074533755         1
[INPUT] 0    0    [1    /1   ]  0.390649383029       1
[INPUT] 1    0    [1    /1   ]  8.59835093249        1
[INPUT] 1    0    [1    /1   ]  0.490954437098       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647834577, 1.0]], [0, [7343.4047834187295, 1.0]], [0, [18377.323913956014, 1.0]], [0, [1411.833387951942, 1.0]], [0, [332.8760334476081, 1.0]], [0, [97.0892870757958, 1.0]], [0, [32.82994631389154, 1.0]], [0, [4.707453375496165, 1.0]], [0, [0.39064938302945657, 1.0]], [1, [8.598350932485259, 1.0]], [1, [0.490954437098251, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64783458]
bas 1, expnt(s) = [7343.40478342]
bas 2, expnt(s) = [18377.32391396]
bas 3, expnt(s) = [1411.83338795]
bas 4, expnt(s) = [332.87603345]
bas 5, expnt(s) = [97.08928708]
bas 6, expnt(s) = [32.82994631]
bas 7, expnt(s) = [4.70745338]
bas 8, expnt(s) = [0.39064938]
bas 9, expnt(s) = [8.59835093]
bas 10, expnt(s) = [0.49095444]
CPU time:        78.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340478e+03 2.00418647e+03
 1.83773239e+04 3.98773901e+03 1.41183339e+03 5.81905699e+02
 3.32876033e+02 1.96891478e+02 9.70892871e+01 7.81436168e+01
 3.28299463e+01 3.46511501e+01 4.70745338e+00 8.07429374e+00
 3.90649383e-01 1.24840466e+00 8.59835093e+00 4.29539741e+01
 4.90954437e-01 1.19890806e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32066996849507
cond(S) = 204.77654466469792
E1 = -689.1744477172076  E_coul = 184.89354171426038
init E= -504.280906002947
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680783161904215  LUMO = 65.109463786862
  mo_energy =
[-1.21685584e+02 -1.32900164e+01 -7.62401768e+00 -7.62401768e+00
 -7.62401768e+00 -1.65021978e+00 -6.80783162e-01 -6.80783162e-01
 -6.80783162e-01  6.51094638e+01  4.89880943e+02  2.50963811e+03
  1.24365033e+04  4.54549322e+04  1.32393053e+05]
E1 = -706.6541103851142  E_coul = 198.93603349720868
cycle= 1 E= -507.718076887906  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479783
diis-c [-0.23019138  1.        ]
  HOMO = -0.236654487633775  LUMO = 66.4132261947602
  mo_energy =
[-1.20289616e+02 -1.22621572e+01 -6.65513615e+00 -6.65513615e+00
 -6.65513615e+00 -1.16418789e+00 -2.36654488e-01 -2.36654488e-01
 -2.36654488e-01  6.64132262e+01  4.91265503e+02  2.51094289e+03
  1.24376782e+04  4.54560296e+04  1.32394100e+05]
E1 = -706.6086604698069  E_coul = 198.88994955859613
cycle= 2 E= -507.718710911211  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.0062856
diis-c [-3.91488136e-05  1.24894686e-03  9.98751053e-01]
  HOMO = -0.236930214054466  LUMO = 66.4089226478633
  mo_energy =
[-1.20301420e+02 -1.22639932e+01 -6.65795254e+00 -6.65795254e+00
 -6.65795254e+00 -1.16429038e+00 -2.36930214e-01 -2.36930214e-01
 -2.36930214e-01  6.64089226e+01  4.91252766e+02  2.51092405e+03
  1.24376552e+04  4.54560051e+04  1.32394075e+05]
E1 = -706.6079144224994  E_coul = 198.88920330286354
cycle= 3 E= -507.718711119636  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00019029
diis-c [-8.78659626e-10  2.91004368e-05 -3.05548273e-02  1.03052573e+00]
  HOMO = -0.236934749902524  LUMO = 66.4088471880708
  mo_energy =
[-1.20301628e+02 -1.22640250e+01 -6.65800532e+00 -6.65800532e+00
 -6.65800532e+00 -1.16429179e+00 -2.36934750e-01 -2.36934750e-01
 -2.36934750e-01  6.64088472e+01  4.91252559e+02  2.51092378e+03
  1.24376549e+04  4.54560048e+04  1.32394075e+05]
E1 = -706.6078987964698  E_coul = 198.88918767672283
cycle= 4 E= -507.718711119747  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6078987964698  E_coul = 198.88918767672283
  HOMO = -0.236934712322563  LUMO = 66.4088477427254
  mo_energy =
[-1.20301626e+02 -1.22640247e+01 -6.65800497e+00 -6.65800497e+00
 -6.65800497e+00 -1.16429178e+00 -2.36934712e-01 -2.36934712e-01
 -2.36934712e-01  6.64088477e+01  4.91252561e+02  2.51092378e+03
  1.24376549e+04  4.54560048e+04  1.32394075e+05]
E1 = -706.6078988835969  E_coul = 198.88918776385012
Extra cycle  E= -507.718711119747  delta_E= 2.27e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546478e+04 7.34340478e+03 1.83773239e+04 1.41183339e+03
 3.32876033e+02 9.70892871e+01 3.28299463e+01 4.70745338e+00
 3.90649383e-01 8.59835093e+00 4.90954437e-01]
E = -507.7187111197468
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478346        1
[INPUT] 0    0    [1    /1   ]  7343.40478342        1
[INPUT] 0    0    [1    /1   ]  18377.323914         1
[INPUT] 0    0    [1    /1   ]  1411.83338795        1
[INPUT] 0    0    [1    /1   ]  332.876033448        1
[INPUT] 0    0    [1    /1   ]  97.0892870758        1
[INPUT] 0    0    [1    /1   ]  32.8299463139        1
[INPUT] 0    0    [1    /1   ]  4.7074533755         1
[INPUT] 0    0    [1    /1   ]  0.390649383029       1
[INPUT] 1    0    [1    /1   ]  8.59835093249        1
[INPUT] 1    0    [1    /1   ]  0.490954437098       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647834577, 1.0]], [0, [7343.4047834187295, 1.0]], [0, [18377.323913956014, 1.0]], [0, [1411.833387951942, 1.0]], [0, [332.8760334476081, 1.0]], [0, [97.0892870757958, 1.0]], [0, [32.82994631389154, 1.0]], [0, [4.707453375496165, 1.0]], [0, [0.39064938302945657, 1.0]], [1, [8.598350932485259, 1.0]], [1, [0.490954437098251, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64783458]
bas 1, expnt(s) = [7343.40478342]
bas 2, expnt(s) = [18377.32391396]
bas 3, expnt(s) = [1411.83338795]
bas 4, expnt(s) = [332.87603345]
bas 5, expnt(s) = [97.08928708]
bas 6, expnt(s) = [32.82994631]
bas 7, expnt(s) = [4.70745338]
bas 8, expnt(s) = [0.39064938]
bas 9, expnt(s) = [8.59835093]
bas 10, expnt(s) = [0.49095444]
CPU time:        79.97
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340478e+03 2.00418647e+03
 1.83773239e+04 3.98773901e+03 1.41183339e+03 5.81905699e+02
 3.32876033e+02 1.96891478e+02 9.70892871e+01 7.81436168e+01
 3.28299463e+01 3.46511501e+01 4.70745338e+00 8.07429374e+00
 3.90649383e-01 1.24840466e+00 8.59835093e+00 4.29539741e+01
 4.90954437e-01 1.19890806e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32066996849507
cond(S) = 204.77654466469792
E1 = -689.1744477172076  E_coul = 184.89354171426038
init E= -504.280906002947
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680783161904215  LUMO = 65.109463786862
  mo_energy =
[-1.21685584e+02 -1.32900164e+01 -7.62401768e+00 -7.62401768e+00
 -7.62401768e+00 -1.65021978e+00 -6.80783162e-01 -6.80783162e-01
 -6.80783162e-01  6.51094638e+01  4.89880943e+02  2.50963811e+03
  1.24365033e+04  4.54549322e+04  1.32393053e+05]
E1 = -706.6541103851142  E_coul = 198.93603349720868
cycle= 1 E= -507.718076887906  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479783
diis-c [-0.23019138  1.        ]
  HOMO = -0.236654487633775  LUMO = 66.4132261947602
  mo_energy =
[-1.20289616e+02 -1.22621572e+01 -6.65513615e+00 -6.65513615e+00
 -6.65513615e+00 -1.16418789e+00 -2.36654488e-01 -2.36654488e-01
 -2.36654488e-01  6.64132262e+01  4.91265503e+02  2.51094289e+03
  1.24376782e+04  4.54560296e+04  1.32394100e+05]
E1 = -706.6086604698069  E_coul = 198.88994955859613
cycle= 2 E= -507.718710911211  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.0062856
diis-c [-3.91488136e-05  1.24894686e-03  9.98751053e-01]
  HOMO = -0.236930214054466  LUMO = 66.4089226478633
  mo_energy =
[-1.20301420e+02 -1.22639932e+01 -6.65795254e+00 -6.65795254e+00
 -6.65795254e+00 -1.16429038e+00 -2.36930214e-01 -2.36930214e-01
 -2.36930214e-01  6.64089226e+01  4.91252766e+02  2.51092405e+03
  1.24376552e+04  4.54560051e+04  1.32394075e+05]
E1 = -706.6079144224994  E_coul = 198.88920330286354
cycle= 3 E= -507.718711119636  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.06 sec
diis-norm(errvec)=0.00019029
diis-c [-8.78659626e-10  2.91004368e-05 -3.05548273e-02  1.03052573e+00]
  HOMO = -0.236934749902524  LUMO = 66.4088471880708
  mo_energy =
[-1.20301628e+02 -1.22640250e+01 -6.65800532e+00 -6.65800532e+00
 -6.65800532e+00 -1.16429179e+00 -2.36934750e-01 -2.36934750e-01
 -2.36934750e-01  6.64088472e+01  4.91252559e+02  2.51092378e+03
  1.24376549e+04  4.54560048e+04  1.32394075e+05]
E1 = -706.6078987964698  E_coul = 198.88918767672283
cycle= 4 E= -507.718711119747  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6078987964698  E_coul = 198.88918767672283
  HOMO = -0.236934712322563  LUMO = 66.4088477427254
  mo_energy =
[-1.20301626e+02 -1.22640247e+01 -6.65800497e+00 -6.65800497e+00
 -6.65800497e+00 -1.16429178e+00 -2.36934712e-01 -2.36934712e-01
 -2.36934712e-01  6.64088477e+01  4.91252561e+02  2.51092378e+03
  1.24376549e+04  4.54560048e+04  1.32394075e+05]
E1 = -706.6078988835969  E_coul = 198.88918776385012
Extra cycle  E= -507.718711119747  delta_E= 2.27e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.22 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.77654466469792
E1 = -706.6078988835969  E_coul = 198.88918776385012
init E= -507.718711119747
    CPU time for initialize scf      2.05 sec, wall time      0.13 sec
  HOMO = -0.23693471181273  LUMO = 66.4088477509085
  mo_energy =
[-1.20301626e+02 -1.22640247e+01 -6.65800496e+00 -6.65800496e+00
 -6.65800496e+00 -1.16429178e+00 -2.36934712e-01 -2.36934712e-01
 -2.36934712e-01  6.64088478e+01  4.91252561e+02  2.51092378e+03
  1.24376549e+04  4.54560048e+04  1.32394075e+05]
E1 = -706.6078988851248  E_coul = 198.88918776537795
cycle= 1 E= -507.718711119747  delta_E=    0  |g|= 2.85e-10  |ddm|= 7.07e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6078988851248  E_coul = 198.88918776537795
  HOMO = -0.236934711804683  LUMO = 66.4088477510504
  mo_energy =
[-1.20301626e+02 -1.22640247e+01 -6.65800496e+00 -6.65800496e+00
 -6.65800496e+00 -1.16429178e+00 -2.36934712e-01 -2.36934712e-01
 -2.36934712e-01  6.64088478e+01  4.91252561e+02  2.51092378e+03
  1.24376549e+04  4.54560048e+04  1.32394075e+05]
E1 = -706.6078988851542  E_coul = 198.88918776540777
Extra cycle  E= -507.718711119746  delta_E= 3.41e-13  |g|= 1.61e-11  |ddm|= 1.4e-11
    CPU time for scf_cycle      2.56 sec, wall time      0.29 sec
exp = [3.67546478e+04 7.34340478e+03 1.83773239e+04 1.41183339e+03
 3.32876033e+02 9.70892871e+01 3.28299463e+01 4.70745338e+00
 3.90649383e-01 8.59835093e+00 4.90954437e-01]
grad_E = [-2.09873778e-07  1.98490058e-06  5.21117122e-09  1.02187606e-04
 -3.02129536e-04  4.82979606e-04 -4.03940464e-04  2.75257855e-04
 -6.05914475e-03 -4.98316094e-04 -1.53302199e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478491        1
[INPUT] 0    0    [1    /1   ]  7343.40464749        1
[INPUT] 0    0    [1    /1   ]  18377.3239136        1
[INPUT] 0    0    [1    /1   ]  1411.82627381        1
[INPUT] 0    0    [1    /1   ]  332.897894405        1
[INPUT] 0    0    [1    /1   ]  97.049864904         1
[INPUT] 0    0    [1    /1   ]  32.8710011898        1
[INPUT] 0    0    [1    /1   ]  4.70551299297        1
[INPUT] 0    0    [1    /1   ]  0.390422565563       1
[INPUT] 1    0    [1    /1   ]  8.59775735508        1
[INPUT] 1    0    [1    /1   ]  0.490927973268       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64784908344, 1.0]], [0, [7343.404647489626, 1.0]], [0, [18377.323913621196, 1.0]], [0, [1411.826273812959, 1.0]], [0, [332.89789440476136, 1.0]], [0, [97.04986490395895, 1.0]], [0, [32.87100118979012, 1.0]], [0, [4.705512992973524, 1.0]], [0, [0.39042256556268934, 1.0]], [1, [8.597757355081699, 1.0]], [1, [0.49092797326800014, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64784908]
bas 1, expnt(s) = [7343.40464749]
bas 2, expnt(s) = [18377.32391362]
bas 3, expnt(s) = [1411.82627381]
bas 4, expnt(s) = [332.8978944]
bas 5, expnt(s) = [97.0498649]
bas 6, expnt(s) = [32.87100119]
bas 7, expnt(s) = [4.70551299]
bas 8, expnt(s) = [0.39042257]
bas 9, expnt(s) = [8.59775736]
bas 10, expnt(s) = [0.49092797]
CPU time:        89.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340465e+03 2.00418644e+03
 1.83773239e+04 3.98773901e+03 1.41182627e+03 5.81903500e+02
 3.32897894e+02 1.96901176e+02 9.70498649e+01 7.81198185e+01
 3.28710012e+01 3.46836443e+01 4.70551299e+00 8.07179748e+00
 3.90422566e-01 1.24786099e+00 8.59775736e+00 4.29502675e+01
 4.90927973e-01 1.19882728e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320755344136327
cond(S) = 204.7879389321184
E1 = -689.1637501014147  E_coul = 184.88525312885582
init E= -504.278496972559
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680915934320766  LUMO = 65.1588411441825
  mo_energy =
[-1.21686449e+02 -1.32909011e+01 -7.62466441e+00 -7.62466441e+00
 -7.62466441e+00 -1.65023148e+00 -6.80915934e-01 -6.80915934e-01
 -6.80915934e-01  6.51588411e+01  4.89939478e+02  2.50969370e+03
  1.24365497e+04  4.54549712e+04  1.32393089e+05]
E1 = -706.6424167135361  E_coul = 198.92431381230338
cycle= 1 E= -507.718102901233  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479805
diis-c [-0.23021323  1.        ]
  HOMO = -0.236871957493299  LUMO = 66.4624862568288
  mo_energy =
[-1.20290923e+02 -1.22632468e+01 -6.65601506e+00 -6.65601506e+00
 -6.65601506e+00 -1.16437547e+00 -2.36871957e-01 -2.36871957e-01
 -2.36871957e-01  6.64624863e+01  4.91323684e+02  2.51099801e+03
  1.24377242e+04  4.54560682e+04  1.32394136e+05]
E1 = -706.5970099083852  E_coul = 198.87827317767363
cycle= 2 E= -507.718736730712  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.0062828
diis-c [-3.91210299e-05  1.23610136e-03  9.98763899e-01]
  HOMO = -0.237147345353059  LUMO = 66.4581858039639
  mo_energy =
[-1.20302716e+02 -1.22650809e+01 -6.65882885e+00 -6.65882885e+00
 -6.65882885e+00 -1.16447777e+00 -2.37147345e-01 -2.37147345e-01
 -2.37147345e-01  6.64581858e+01  4.91310961e+02  2.51097918e+03
  1.24377012e+04  4.54560438e+04  1.32394111e+05]
E1 = -706.5962646668189  E_coul = 198.87752772777012
cycle= 3 E= -507.718736939049  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190093
diis-c [-8.76241616e-10  2.91830848e-05 -3.05372264e-02  1.03050804e+00]
  HOMO = -0.237151870908679  LUMO = 66.4581104653169
  mo_energy =
[-1.20302923e+02 -1.22651126e+01 -6.65888154e+00 -6.65888154e+00
 -6.65888154e+00 -1.16447918e+00 -2.37151871e-01 -2.37151871e-01
 -2.37151871e-01  6.64581105e+01  4.91310755e+02  2.51097892e+03
  1.24377009e+04  4.54560435e+04  1.32394110e+05]
E1 = -706.5962490709046  E_coul = 198.87751213174514
cycle= 4 E= -507.718736939159  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5962490709046  E_coul = 198.87751213174514
  HOMO = -0.23715183341198  LUMO = 66.4581110191102
  mo_energy =
[-1.20302922e+02 -1.22651123e+01 -6.65888119e+00 -6.65888119e+00
 -6.65888119e+00 -1.16447916e+00 -2.37151833e-01 -2.37151833e-01
 -2.37151833e-01  6.64581110e+01  4.91310756e+02  2.51097892e+03
  1.24377009e+04  4.54560435e+04  1.32394110e+05]
E1 = -706.5962491578819  E_coul = 198.87751221872244
Extra cycle  E= -507.718736939159  delta_E= 1.14e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546478e+04 7.34340465e+03 1.83773239e+04 1.41182627e+03
 3.32897894e+02 9.70498649e+01 3.28710012e+01 4.70551299e+00
 3.90422566e-01 8.59775736e+00 4.90927973e-01]
E = -507.7187369391594
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478491        1
[INPUT] 0    0    [1    /1   ]  7343.40464749        1
[INPUT] 0    0    [1    /1   ]  18377.3239136        1
[INPUT] 0    0    [1    /1   ]  1411.82627381        1
[INPUT] 0    0    [1    /1   ]  332.897894405        1
[INPUT] 0    0    [1    /1   ]  97.049864904         1
[INPUT] 0    0    [1    /1   ]  32.8710011898        1
[INPUT] 0    0    [1    /1   ]  4.70551299297        1
[INPUT] 0    0    [1    /1   ]  0.390422565563       1
[INPUT] 1    0    [1    /1   ]  8.59775735508        1
[INPUT] 1    0    [1    /1   ]  0.490927973268       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64784908344, 1.0]], [0, [7343.404647489626, 1.0]], [0, [18377.323913621196, 1.0]], [0, [1411.826273812959, 1.0]], [0, [332.89789440476136, 1.0]], [0, [97.04986490395895, 1.0]], [0, [32.87100118979012, 1.0]], [0, [4.705512992973524, 1.0]], [0, [0.39042256556268934, 1.0]], [1, [8.597757355081699, 1.0]], [1, [0.49092797326800014, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64784908]
bas 1, expnt(s) = [7343.40464749]
bas 2, expnt(s) = [18377.32391362]
bas 3, expnt(s) = [1411.82627381]
bas 4, expnt(s) = [332.8978944]
bas 5, expnt(s) = [97.0498649]
bas 6, expnt(s) = [32.87100119]
bas 7, expnt(s) = [4.70551299]
bas 8, expnt(s) = [0.39042257]
bas 9, expnt(s) = [8.59775736]
bas 10, expnt(s) = [0.49092797]
CPU time:        91.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546478e+04 6.70655088e+03 7.34340465e+03 2.00418644e+03
 1.83773239e+04 3.98773901e+03 1.41182627e+03 5.81903500e+02
 3.32897894e+02 1.96901176e+02 9.70498649e+01 7.81198185e+01
 3.28710012e+01 3.46836443e+01 4.70551299e+00 8.07179748e+00
 3.90422566e-01 1.24786099e+00 8.59775736e+00 4.29502675e+01
 4.90927973e-01 1.19882728e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320755344136327
cond(S) = 204.7879389321184
E1 = -689.1637501014147  E_coul = 184.88525312885582
init E= -504.278496972559
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680915934320766  LUMO = 65.1588411441825
  mo_energy =
[-1.21686449e+02 -1.32909011e+01 -7.62466441e+00 -7.62466441e+00
 -7.62466441e+00 -1.65023148e+00 -6.80915934e-01 -6.80915934e-01
 -6.80915934e-01  6.51588411e+01  4.89939478e+02  2.50969370e+03
  1.24365497e+04  4.54549712e+04  1.32393089e+05]
E1 = -706.6424167135361  E_coul = 198.92431381230338
cycle= 1 E= -507.718102901233  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
diis-norm(errvec)=0.479805
diis-c [-0.23021323  1.        ]
  HOMO = -0.236871957493299  LUMO = 66.4624862568288
  mo_energy =
[-1.20290923e+02 -1.22632468e+01 -6.65601506e+00 -6.65601506e+00
 -6.65601506e+00 -1.16437547e+00 -2.36871957e-01 -2.36871957e-01
 -2.36871957e-01  6.64624863e+01  4.91323684e+02  2.51099801e+03
  1.24377242e+04  4.54560682e+04  1.32394136e+05]
E1 = -706.5970099083852  E_coul = 198.87827317767363
cycle= 2 E= -507.718736730712  delta_E= -0.000634  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.0062828
diis-c [-3.91210299e-05  1.23610136e-03  9.98763899e-01]
  HOMO = -0.237147345353059  LUMO = 66.4581858039639
  mo_energy =
[-1.20302716e+02 -1.22650809e+01 -6.65882885e+00 -6.65882885e+00
 -6.65882885e+00 -1.16447777e+00 -2.37147345e-01 -2.37147345e-01
 -2.37147345e-01  6.64581858e+01  4.91310961e+02  2.51097918e+03
  1.24377012e+04  4.54560438e+04  1.32394111e+05]
E1 = -706.5962646668189  E_coul = 198.87752772777012
cycle= 3 E= -507.718736939049  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190093
diis-c [-8.76241616e-10  2.91830848e-05 -3.05372264e-02  1.03050804e+00]
  HOMO = -0.237151870908679  LUMO = 66.4581104653169
  mo_energy =
[-1.20302923e+02 -1.22651126e+01 -6.65888154e+00 -6.65888154e+00
 -6.65888154e+00 -1.16447918e+00 -2.37151871e-01 -2.37151871e-01
 -2.37151871e-01  6.64581105e+01  4.91310755e+02  2.51097892e+03
  1.24377009e+04  4.54560435e+04  1.32394110e+05]
E1 = -706.5962490709046  E_coul = 198.87751213174514
cycle= 4 E= -507.718736939159  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.5962490709046  E_coul = 198.87751213174514
  HOMO = -0.23715183341198  LUMO = 66.4581110191102
  mo_energy =
[-1.20302922e+02 -1.22651123e+01 -6.65888119e+00 -6.65888119e+00
 -6.65888119e+00 -1.16447916e+00 -2.37151833e-01 -2.37151833e-01
 -2.37151833e-01  6.64581110e+01  4.91310756e+02  2.51097892e+03
  1.24377009e+04  4.54560435e+04  1.32394110e+05]
E1 = -706.5962491578819  E_coul = 198.87751221872244
Extra cycle  E= -507.718736939159  delta_E= 1.14e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.7879389321184
E1 = -706.5962491578819  E_coul = 198.87751221872244
init E= -507.718736939159
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.237151832903338  LUMO = 66.4581110272823
  mo_energy =
[-1.20302922e+02 -1.22651123e+01 -6.65888118e+00 -6.65888118e+00
 -6.65888118e+00 -1.16447916e+00 -2.37151833e-01 -2.37151833e-01
 -2.37151833e-01  6.64581110e+01  4.91310756e+02  2.51097892e+03
  1.24377009e+04  4.54560435e+04  1.32394110e+05]
E1 = -706.5962491594071  E_coul = 198.8775122202476
cycle= 1 E= -507.718736939159  delta_E= -1.14e-13  |g|= 2.84e-10  |ddm|= 7.07e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.5962491594071  E_coul = 198.8775122202476
  HOMO = -0.237151832895313  LUMO = 66.4581110274238
  mo_energy =
[-1.20302922e+02 -1.22651123e+01 -6.65888118e+00 -6.65888118e+00
 -6.65888118e+00 -1.16447916e+00 -2.37151833e-01 -2.37151833e-01
 -2.37151833e-01  6.64581110e+01  4.91310756e+02  2.51097892e+03
  1.24377009e+04  4.54560435e+04  1.32394110e+05]
E1 = -706.5962491594368  E_coul = 198.8775122202776
Extra cycle  E= -507.718736939159  delta_E= 3.41e-13  |g|= 1.33e-11  |ddm|= 1.4e-11
    CPU time for scf_cycle      2.57 sec, wall time      0.29 sec
exp = [3.67546478e+04 7.34340465e+03 1.83773239e+04 1.41182627e+03
 3.32897894e+02 9.70498649e+01 3.28710012e+01 4.70551299e+00
 3.90422566e-01 8.59775736e+00 4.90927973e-01]
grad_E = [-2.08959824e-07  2.02192542e-06  6.11833872e-09  9.99237287e-05
 -2.65745776e-04  2.70393143e-04  6.04759466e-05 -9.62437281e-04
 -1.00110256e-02 -1.02009083e-03 -2.83321008e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478552        1
[INPUT] 0    0    [1    /1   ]  7343.40459054        1
[INPUT] 0    0    [1    /1   ]  18377.3239135        1
[INPUT] 0    0    [1    /1   ]  1411.82329959        1
[INPUT] 0    0    [1    /1   ]  332.90699077         1
[INPUT] 0    0    [1    /1   ]  97.0336788665        1
[INPUT] 0    0    [1    /1   ]  32.8875020311        1
[INPUT] 0    0    [1    /1   ]  4.70569201931        1
[INPUT] 0    0    [1    /1   ]  0.390696360484       1
[INPUT] 1    0    [1    /1   ]  8.59820005901        1
[INPUT] 1    0    [1    /1   ]  0.49095004865        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785515362, 1.0]], [0, [7343.404590543794, 1.0]], [0, [18377.32391347974, 1.0]], [0, [1411.8232995865915, 1.0]], [0, [332.90699076978575, 1.0]], [0, [97.03367886650757, 1.0]], [0, [32.8875020310537, 1.0]], [0, [4.705692019305845, 1.0]], [0, [0.3906963604842022, 1.0]], [1, [8.598200059008022, 1.0]], [1, [0.4909500486495953, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785515]
bas 1, expnt(s) = [7343.40459054]
bas 2, expnt(s) = [18377.32391348]
bas 3, expnt(s) = [1411.82329959]
bas 4, expnt(s) = [332.90699077]
bas 5, expnt(s) = [97.03367887]
bas 6, expnt(s) = [32.88750203]
bas 7, expnt(s) = [4.70569202]
bas 8, expnt(s) = [0.39069636]
bas 9, expnt(s) = [8.59820006]
bas 10, expnt(s) = [0.49095005]
CPU time:       100.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340459e+03 2.00418643e+03
 1.83773239e+04 3.98773901e+03 1.41182330e+03 5.81902580e+02
 3.32906991e+02 1.96905211e+02 9.70336789e+01 7.81100466e+01
 3.28875020e+01 3.46967015e+01 4.70569202e+00 8.07202780e+00
 3.90696360e-01 1.24851725e+00 8.59820006e+00 4.29530319e+01
 4.90950049e-01 1.19889466e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320692621860086
cond(S) = 204.79386535630286
E1 = -689.1710848351738  E_coul = 184.89237968987433
init E= -504.278705145299
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.68076694005462  LUMO = 65.1853867948114
  mo_energy =
[-1.21685480e+02 -1.32904666e+01 -7.62411257e+00 -7.62411257e+00
 -7.62411257e+00 -1.65021868e+00 -6.80766940e-01 -6.80766940e-01
 -6.80766940e-01  6.51853868e+01  4.89968371e+02  2.50972088e+03
  1.24365727e+04  4.54549909e+04  1.32393107e+05]
E1 = -706.6523008323086  E_coul = 198.93419091365953
cycle= 1 E= -507.718109918649  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479855
diis-c [-0.2302606  1.       ]
  HOMO = -0.23665992622349  LUMO = 66.4893193473654
  mo_energy =
[-1.20289561e+02 -1.22626596e+01 -6.65528656e+00 -6.65528656e+00
 -6.65528656e+00 -1.16421096e+00 -2.36659926e-01 -2.36659926e-01
 -2.36659926e-01  6.64893193e+01  4.91353020e+02  2.51102569e+03
  1.24377477e+04  4.54560885e+04  1.32394155e+05]
E1 = -706.6069250045556  E_coul = 198.88818186145633
cycle= 2 E= -507.718743143099  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627854
diis-c [-3.90693366e-05  1.23285131e-03  9.98767149e-01]
  HOMO = -0.236935138218094  LUMO = 66.4850215611538
  mo_energy =
[-1.20301347e+02 -1.22644924e+01 -6.65809826e+00 -6.65809826e+00
 -6.65809826e+00 -1.16431325e+00 -2.36935138e-01 -2.36935138e-01
 -2.36935138e-01  6.64850216e+01  4.91340307e+02  2.51100688e+03
  1.24377248e+04  4.54560641e+04  1.32394130e+05]
E1 = -706.606180349494  E_coul = 198.88743699826895
cycle= 3 E= -507.718743351225  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189944
diis-c [-8.74674924e-10  2.92198724e-05 -3.05335950e-02  1.03050438e+00]
  HOMO = -0.236939659854252  LUMO = 66.4849462913085
  mo_energy =
[-1.20301554e+02 -1.22645240e+01 -6.65815089e+00 -6.65815089e+00
 -6.65815089e+00 -1.16431466e+00 -2.36939660e-01 -2.36939660e-01
 -2.36939660e-01  6.64849463e+01  4.91340101e+02  2.51100661e+03
  1.24377245e+04  4.54560638e+04  1.32394129e+05]
E1 = -706.606164770356  E_coul = 198.8874214190206
cycle= 4 E= -507.718743351335  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.606164770356  E_coul = 198.8874214190206
  HOMO = -0.236939622389586  LUMO = 66.4849468446861
  mo_energy =
[-1.20301552e+02 -1.22645238e+01 -6.65815054e+00 -6.65815054e+00
 -6.65815054e+00 -1.16431464e+00 -2.36939622e-01 -2.36939622e-01
 -2.36939622e-01  6.64849468e+01  4.91340103e+02  2.51100661e+03
  1.24377245e+04  4.54560638e+04  1.32394129e+05]
E1 = -706.6061648572677  E_coul = 198.8874215059317
Extra cycle  E= -507.718743351336  delta_E= -5.68e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546479e+04 7.34340459e+03 1.83773239e+04 1.41182330e+03
 3.32906991e+02 9.70336789e+01 3.28875020e+01 4.70569202e+00
 3.90696360e-01 8.59820006e+00 4.90950049e-01]
E = -507.718743351336
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:27:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478552        1
[INPUT] 0    0    [1    /1   ]  7343.40459054        1
[INPUT] 0    0    [1    /1   ]  18377.3239135        1
[INPUT] 0    0    [1    /1   ]  1411.82329959        1
[INPUT] 0    0    [1    /1   ]  332.90699077         1
[INPUT] 0    0    [1    /1   ]  97.0336788665        1
[INPUT] 0    0    [1    /1   ]  32.8875020311        1
[INPUT] 0    0    [1    /1   ]  4.70569201931        1
[INPUT] 0    0    [1    /1   ]  0.390696360484       1
[INPUT] 1    0    [1    /1   ]  8.59820005901        1
[INPUT] 1    0    [1    /1   ]  0.49095004865        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785515362, 1.0]], [0, [7343.404590543794, 1.0]], [0, [18377.32391347974, 1.0]], [0, [1411.8232995865915, 1.0]], [0, [332.90699076978575, 1.0]], [0, [97.03367886650757, 1.0]], [0, [32.8875020310537, 1.0]], [0, [4.705692019305845, 1.0]], [0, [0.3906963604842022, 1.0]], [1, [8.598200059008022, 1.0]], [1, [0.4909500486495953, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785515]
bas 1, expnt(s) = [7343.40459054]
bas 2, expnt(s) = [18377.32391348]
bas 3, expnt(s) = [1411.82329959]
bas 4, expnt(s) = [332.90699077]
bas 5, expnt(s) = [97.03367887]
bas 6, expnt(s) = [32.88750203]
bas 7, expnt(s) = [4.70569202]
bas 8, expnt(s) = [0.39069636]
bas 9, expnt(s) = [8.59820006]
bas 10, expnt(s) = [0.49095005]
CPU time:       102.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340459e+03 2.00418643e+03
 1.83773239e+04 3.98773901e+03 1.41182330e+03 5.81902580e+02
 3.32906991e+02 1.96905211e+02 9.70336789e+01 7.81100466e+01
 3.28875020e+01 3.46967015e+01 4.70569202e+00 8.07202780e+00
 3.90696360e-01 1.24851725e+00 8.59820006e+00 4.29530319e+01
 4.90950049e-01 1.19889466e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320692621860086
cond(S) = 204.79386535630286
E1 = -689.1710848351738  E_coul = 184.89237968987433
init E= -504.278705145299
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.68076694005462  LUMO = 65.1853867948114
  mo_energy =
[-1.21685480e+02 -1.32904666e+01 -7.62411257e+00 -7.62411257e+00
 -7.62411257e+00 -1.65021868e+00 -6.80766940e-01 -6.80766940e-01
 -6.80766940e-01  6.51853868e+01  4.89968371e+02  2.50972088e+03
  1.24365727e+04  4.54549909e+04  1.32393107e+05]
E1 = -706.6523008323086  E_coul = 198.93419091365953
cycle= 1 E= -507.718109918649  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479855
diis-c [-0.2302606  1.       ]
  HOMO = -0.23665992622349  LUMO = 66.4893193473654
  mo_energy =
[-1.20289561e+02 -1.22626596e+01 -6.65528656e+00 -6.65528656e+00
 -6.65528656e+00 -1.16421096e+00 -2.36659926e-01 -2.36659926e-01
 -2.36659926e-01  6.64893193e+01  4.91353020e+02  2.51102569e+03
  1.24377477e+04  4.54560885e+04  1.32394155e+05]
E1 = -706.6069250045556  E_coul = 198.88818186145633
cycle= 2 E= -507.718743143099  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627854
diis-c [-3.90693366e-05  1.23285131e-03  9.98767149e-01]
  HOMO = -0.236935138218094  LUMO = 66.4850215611538
  mo_energy =
[-1.20301347e+02 -1.22644924e+01 -6.65809826e+00 -6.65809826e+00
 -6.65809826e+00 -1.16431325e+00 -2.36935138e-01 -2.36935138e-01
 -2.36935138e-01  6.64850216e+01  4.91340307e+02  2.51100688e+03
  1.24377248e+04  4.54560641e+04  1.32394130e+05]
E1 = -706.606180349494  E_coul = 198.88743699826895
cycle= 3 E= -507.718743351225  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189944
diis-c [-8.74674924e-10  2.92198724e-05 -3.05335950e-02  1.03050438e+00]
  HOMO = -0.236939659854252  LUMO = 66.4849462913085
  mo_energy =
[-1.20301554e+02 -1.22645240e+01 -6.65815089e+00 -6.65815089e+00
 -6.65815089e+00 -1.16431466e+00 -2.36939660e-01 -2.36939660e-01
 -2.36939660e-01  6.64849463e+01  4.91340101e+02  2.51100661e+03
  1.24377245e+04  4.54560638e+04  1.32394129e+05]
E1 = -706.606164770356  E_coul = 198.8874214190206
cycle= 4 E= -507.718743351335  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.606164770356  E_coul = 198.8874214190206
  HOMO = -0.236939622389586  LUMO = 66.4849468446861
  mo_energy =
[-1.20301552e+02 -1.22645238e+01 -6.65815054e+00 -6.65815054e+00
 -6.65815054e+00 -1.16431464e+00 -2.36939622e-01 -2.36939622e-01
 -2.36939622e-01  6.64849468e+01  4.91340103e+02  2.51100661e+03
  1.24377245e+04  4.54560638e+04  1.32394129e+05]
E1 = -706.6061648572677  E_coul = 198.8874215059317
Extra cycle  E= -507.718743351336  delta_E= -5.68e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.79386535630286
E1 = -706.6061648572677  E_coul = 198.8874215059317
init E= -507.718743351336
    CPU time for initialize scf      2.08 sec, wall time      0.13 sec
  HOMO = -0.236939621881338  LUMO = 66.4849468528519
  mo_energy =
[-1.20301552e+02 -1.22645238e+01 -6.65815054e+00 -6.65815054e+00
 -6.65815054e+00 -1.16431464e+00 -2.36939622e-01 -2.36939622e-01
 -2.36939622e-01  6.64849469e+01  4.91340103e+02  2.51100661e+03
  1.24377245e+04  4.54560638e+04  1.32394129e+05]
E1 = -706.606164858792  E_coul = 198.88742150745583
cycle= 1 E= -507.718743351336  delta_E= -1.71e-13  |g|= 2.85e-10  |ddm|= 7.06e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.606164858792  E_coul = 198.88742150745583
  HOMO = -0.23693962187331  LUMO = 66.484946852991
  mo_energy =
[-1.20301552e+02 -1.22645238e+01 -6.65815054e+00 -6.65815054e+00
 -6.65815054e+00 -1.16431464e+00 -2.36939622e-01 -2.36939622e-01
 -2.36939622e-01  6.64849469e+01  4.91340103e+02  2.51100661e+03
  1.24377245e+04  4.54560638e+04  1.32394129e+05]
E1 = -706.606164858822  E_coul = 198.88742150748598
Extra cycle  E= -507.718743351336  delta_E= 1.71e-13  |g|= 9.3e-12  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.59 sec, wall time      0.29 sec
exp = [3.67546479e+04 7.34340459e+03 1.83773239e+04 1.41182330e+03
 3.32906991e+02 9.70336789e+01 3.28875020e+01 4.70569202e+00
 3.90696360e-01 8.59820006e+00 4.90950049e-01]
grad_E = [-2.08587203e-07  2.03717642e-06  6.48844124e-09  9.89915005e-05
 -2.50780574e-04  1.81231900e-04  2.51650853e-04 -6.68965163e-04
 -5.57525640e-03 -6.02970982e-04 -1.60781003e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478574        1
[INPUT] 0    0    [1    /1   ]  7343.40456901        1
[INPUT] 0    0    [1    /1   ]  18377.3239134        1
[INPUT] 0    0    [1    /1   ]  1411.82218443        1
[INPUT] 0    0    [1    /1   ]  332.910335119        1
[INPUT] 0    0    [1    /1   ]  97.0280662515        1
[INPUT] 0    0    [1    /1   ]  32.8926686279        1
[INPUT] 0    0    [1    /1   ]  4.70629698338        1
[INPUT] 0    0    [1    /1   ]  0.390994376116       1
[INPUT] 1    0    [1    /1   ]  8.59876082776        1
[INPUT] 1    0    [1    /1   ]  0.490976784052       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785743793, 1.0]], [0, [7343.404569011645, 1.0]], [0, [18377.323913424432, 1.0]], [0, [1411.8221844273169, 1.0]], [0, [332.9103351191741, 1.0]], [0, [97.0280662515126, 1.0]], [0, [32.89266862793338, 1.0]], [0, [4.706296983383966, 1.0]], [0, [0.39099437611593585, 1.0]], [1, [8.598760827760362, 1.0]], [1, [0.49097678405210515, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785744]
bas 1, expnt(s) = [7343.40456901]
bas 2, expnt(s) = [18377.32391342]
bas 3, expnt(s) = [1411.82218443]
bas 4, expnt(s) = [332.91033512]
bas 5, expnt(s) = [97.02806625]
bas 6, expnt(s) = [32.89266863]
bas 7, expnt(s) = [4.70629698]
bas 8, expnt(s) = [0.39099438]
bas 9, expnt(s) = [8.59876083]
bas 10, expnt(s) = [0.49097678]
CPU time:       112.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340457e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182218e+03 5.81902235e+02
 3.32910335e+02 1.96906695e+02 9.70280663e+01 7.81066581e+01
 3.28926686e+01 3.47007896e+01 4.70629698e+00 8.07280610e+00
 3.90994376e-01 1.24923144e+00 8.59876083e+00 4.29565337e+01
 4.90976784e-01 1.19897627e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32061483982393
cond(S) = 204.79644660885904
E1 = -689.1802682825232  E_coul = 184.90081779784956
init E= -504.279450484674
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680602432216274  LUMO = 65.1974513779582
  mo_energy =
[-1.21684387e+02 -1.32898619e+01 -7.62345925e+00 -7.62345925e+00
 -7.62345925e+00 -1.65020262e+00 -6.80602432e-01 -6.80602432e-01
 -6.80602432e-01  6.51974514e+01  4.89979887e+02  2.50973175e+03
  1.24365820e+04  4.54549990e+04  1.32393114e+05]
E1 = -706.664035086125  E_coul = 198.9459228858865
cycle= 1 E= -507.718112200238  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479894
diis-c [-0.23029794  1.        ]
  HOMO = -0.236417747681289  LUMO = 66.501671067553
  mo_energy =
[-1.20288011e+02 -1.22618685e+01 -6.65441871e+00 -6.65441871e+00
 -6.65441871e+00 -1.16401728e+00 -2.36417748e-01 -2.36417748e-01
 -2.36417748e-01  6.65016711e+01  4.91365018e+02  2.51103712e+03
  1.24377576e+04  4.54560972e+04  1.32394163e+05]
E1 = -706.618676514443  E_coul = 198.89993157705482
cycle= 2 E= -507.718744937388  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627544
diis-c [-3.90302426e-05  1.23292903e-03  9.98767071e-01]
  HOMO = -0.23669288516322  LUMO = 66.4973749171607
  mo_energy =
[-1.20299792e+02 -1.22637005e+01 -6.65722918e+00 -6.65722918e+00
 -6.65722918e+00 -1.16411961e+00 -2.36692885e-01 -2.36692885e-01
 -2.36692885e-01  6.64973749e+01  4.91352309e+02  2.51101831e+03
  1.24377347e+04  4.54560728e+04  1.32394138e+05]
E1 = -706.6179321877638  E_coul = 198.8991870424144
cycle= 3 E= -507.718745145349  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189858
diis-c [-8.73848345e-10  2.92334608e-05 -3.05344754e-02  1.03050524e+00]
  HOMO = -0.236697405764249  LUMO = 66.4972996799811
  mo_energy =
[-1.20299999e+02 -1.22637321e+01 -6.65728179e+00 -6.65728179e+00
 -6.65728179e+00 -1.16412102e+00 -2.36697406e-01 -2.36697406e-01
 -2.36697406e-01  6.64972997e+01  4.91352104e+02  2.51101805e+03
  1.24377344e+04  4.54560725e+04  1.32394137e+05]
E1 = -706.61791661642  E_coul = 198.8991714709602
cycle= 4 E= -507.71874514546  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.61791661642  E_coul = 198.8991714709602
  HOMO = -0.236697368308204  LUMO = 66.4973002331936
  mo_energy =
[-1.20299998e+02 -1.22637319e+01 -6.65728144e+00 -6.65728144e+00
 -6.65728144e+00 -1.16412100e+00 -2.36697368e-01 -2.36697368e-01
 -2.36697368e-01  6.64973002e+01  4.91352105e+02  2.51101805e+03
  1.24377344e+04  4.54560725e+04  1.32394137e+05]
E1 = -706.6179167033083  E_coul = 198.89917155784818
Extra cycle  E= -507.71874514546  delta_E= -3.98e-13  |g|= 1.27e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546479e+04 7.34340457e+03 1.83773239e+04 1.41182218e+03
 3.32910335e+02 9.70280663e+01 3.28926686e+01 4.70629698e+00
 3.90994376e-01 8.59876083e+00 4.90976784e-01]
E = -507.71874514546016
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:05 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478574        1
[INPUT] 0    0    [1    /1   ]  7343.40456901        1
[INPUT] 0    0    [1    /1   ]  18377.3239134        1
[INPUT] 0    0    [1    /1   ]  1411.82218443        1
[INPUT] 0    0    [1    /1   ]  332.910335119        1
[INPUT] 0    0    [1    /1   ]  97.0280662515        1
[INPUT] 0    0    [1    /1   ]  32.8926686279        1
[INPUT] 0    0    [1    /1   ]  4.70629698338        1
[INPUT] 0    0    [1    /1   ]  0.390994376116       1
[INPUT] 1    0    [1    /1   ]  8.59876082776        1
[INPUT] 1    0    [1    /1   ]  0.490976784052       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785743793, 1.0]], [0, [7343.404569011645, 1.0]], [0, [18377.323913424432, 1.0]], [0, [1411.8221844273169, 1.0]], [0, [332.9103351191741, 1.0]], [0, [97.0280662515126, 1.0]], [0, [32.89266862793338, 1.0]], [0, [4.706296983383966, 1.0]], [0, [0.39099437611593585, 1.0]], [1, [8.598760827760362, 1.0]], [1, [0.49097678405210515, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785744]
bas 1, expnt(s) = [7343.40456901]
bas 2, expnt(s) = [18377.32391342]
bas 3, expnt(s) = [1411.82218443]
bas 4, expnt(s) = [332.91033512]
bas 5, expnt(s) = [97.02806625]
bas 6, expnt(s) = [32.89266863]
bas 7, expnt(s) = [4.70629698]
bas 8, expnt(s) = [0.39099438]
bas 9, expnt(s) = [8.59876083]
bas 10, expnt(s) = [0.49097678]
CPU time:       113.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340457e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182218e+03 5.81902235e+02
 3.32910335e+02 1.96906695e+02 9.70280663e+01 7.81066581e+01
 3.28926686e+01 3.47007896e+01 4.70629698e+00 8.07280610e+00
 3.90994376e-01 1.24923144e+00 8.59876083e+00 4.29565337e+01
 4.90976784e-01 1.19897627e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32061483982393
cond(S) = 204.79644660885904
E1 = -689.1802682825232  E_coul = 184.90081779784956
init E= -504.279450484674
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680602432216274  LUMO = 65.1974513779582
  mo_energy =
[-1.21684387e+02 -1.32898619e+01 -7.62345925e+00 -7.62345925e+00
 -7.62345925e+00 -1.65020262e+00 -6.80602432e-01 -6.80602432e-01
 -6.80602432e-01  6.51974514e+01  4.89979887e+02  2.50973175e+03
  1.24365820e+04  4.54549990e+04  1.32393114e+05]
E1 = -706.664035086125  E_coul = 198.9459228858865
cycle= 1 E= -507.718112200238  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479894
diis-c [-0.23029794  1.        ]
  HOMO = -0.236417747681289  LUMO = 66.501671067553
  mo_energy =
[-1.20288011e+02 -1.22618685e+01 -6.65441871e+00 -6.65441871e+00
 -6.65441871e+00 -1.16401728e+00 -2.36417748e-01 -2.36417748e-01
 -2.36417748e-01  6.65016711e+01  4.91365018e+02  2.51103712e+03
  1.24377576e+04  4.54560972e+04  1.32394163e+05]
E1 = -706.618676514443  E_coul = 198.89993157705482
cycle= 2 E= -507.718744937388  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627544
diis-c [-3.90302426e-05  1.23292903e-03  9.98767071e-01]
  HOMO = -0.23669288516322  LUMO = 66.4973749171607
  mo_energy =
[-1.20299792e+02 -1.22637005e+01 -6.65722918e+00 -6.65722918e+00
 -6.65722918e+00 -1.16411961e+00 -2.36692885e-01 -2.36692885e-01
 -2.36692885e-01  6.64973749e+01  4.91352309e+02  2.51101831e+03
  1.24377347e+04  4.54560728e+04  1.32394138e+05]
E1 = -706.6179321877638  E_coul = 198.8991870424144
cycle= 3 E= -507.718745145349  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189858
diis-c [-8.73848345e-10  2.92334608e-05 -3.05344754e-02  1.03050524e+00]
  HOMO = -0.236697405764249  LUMO = 66.4972996799811
  mo_energy =
[-1.20299999e+02 -1.22637321e+01 -6.65728179e+00 -6.65728179e+00
 -6.65728179e+00 -1.16412102e+00 -2.36697406e-01 -2.36697406e-01
 -2.36697406e-01  6.64972997e+01  4.91352104e+02  2.51101805e+03
  1.24377344e+04  4.54560725e+04  1.32394137e+05]
E1 = -706.61791661642  E_coul = 198.8991714709602
cycle= 4 E= -507.71874514546  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.61791661642  E_coul = 198.8991714709602
  HOMO = -0.236697368308204  LUMO = 66.4973002331936
  mo_energy =
[-1.20299998e+02 -1.22637319e+01 -6.65728144e+00 -6.65728144e+00
 -6.65728144e+00 -1.16412100e+00 -2.36697368e-01 -2.36697368e-01
 -2.36697368e-01  6.64973002e+01  4.91352105e+02  2.51101805e+03
  1.24377344e+04  4.54560725e+04  1.32394137e+05]
E1 = -706.6179167033083  E_coul = 198.89917155784818
Extra cycle  E= -507.71874514546  delta_E= -3.98e-13  |g|= 1.27e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.79644660885904
E1 = -706.6179167033083  E_coul = 198.89917155784818
init E= -507.71874514546
    CPU time for initialize scf      2.03 sec, wall time      0.13 sec
  HOMO = -0.236697367800013  LUMO = 66.4973002413555
  mo_energy =
[-1.20299998e+02 -1.22637319e+01 -6.65728144e+00 -6.65728144e+00
 -6.65728144e+00 -1.16412100e+00 -2.36697368e-01 -2.36697368e-01
 -2.36697368e-01  6.64973002e+01  4.91352105e+02  2.51101805e+03
  1.24377344e+04  4.54560725e+04  1.32394137e+05]
E1 = -706.617916704832  E_coul = 198.8991715593722
cycle= 1 E= -507.71874514546  delta_E= 3.41e-13  |g|= 2.85e-10  |ddm|= 7.06e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.617916704832  E_coul = 198.8991715593722
  HOMO = -0.236697367791989  LUMO = 66.4973002414956
  mo_energy =
[-1.20299998e+02 -1.22637319e+01 -6.65728144e+00 -6.65728144e+00
 -6.65728144e+00 -1.16412100e+00 -2.36697368e-01 -2.36697368e-01
 -2.36697368e-01  6.64973002e+01  4.91352105e+02  2.51101805e+03
  1.24377344e+04  4.54560725e+04  1.32394137e+05]
E1 = -706.6179167048624  E_coul = 198.89917155940222
Extra cycle  E= -507.71874514546  delta_E= -3.41e-13  |g|= 2.22e-11  |ddm|= 1.4e-11
    CPU time for scf_cycle      2.54 sec, wall time      0.29 sec
exp = [3.67546479e+04 7.34340457e+03 1.83773239e+04 1.41182218e+03
 3.32910335e+02 9.70280663e+01 3.28926686e+01 4.70629698e+00
 3.90994376e-01 8.59876083e+00 4.90976784e-01]
grad_E = [-2.08462320e-07  2.04237402e-06  6.61193757e-09  9.86738432e-05
 -2.45727388e-04  1.50296085e-04  3.15721963e-04 -1.20572380e-04
 -6.83574683e-04 -8.69927968e-05 -2.04562534e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:25 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478576        1
[INPUT] 0    0    [1    /1   ]  7343.40456744        1
[INPUT] 0    0    [1    /1   ]  18377.3239134        1
[INPUT] 0    0    [1    /1   ]  1411.82211277        1
[INPUT] 0    0    [1    /1   ]  332.910480027        1
[INPUT] 0    0    [1    /1   ]  97.028188419         1
[INPUT] 0    0    [1    /1   ]  32.8919228545        1
[INPUT] 0    0    [1    /1   ]  4.70649028213        1
[INPUT] 0    0    [1    /1   ]  0.391062999192       1
[INPUT] 1    0    [1    /1   ]  8.59890601679        1
[INPUT] 1    0    [1    /1   ]  0.490983441556       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785759355, 1.0]], [0, [7343.404567436847, 1.0]], [0, [18377.323913418484, 1.0]], [0, [1411.8221127693325, 1.0]], [0, [332.91048002665224, 1.0]], [0, [97.02818841897046, 1.0]], [0, [32.89192285449414, 1.0]], [0, [4.706490282133534, 1.0]], [0, [0.3910629991918681, 1.0]], [1, [8.598906016793642, 1.0]], [1, [0.4909834415562404, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785759]
bas 1, expnt(s) = [7343.40456744]
bas 2, expnt(s) = [18377.32391342]
bas 3, expnt(s) = [1411.82211277]
bas 4, expnt(s) = [332.91048003]
bas 5, expnt(s) = [97.02818842]
bas 6, expnt(s) = [32.89192285]
bas 7, expnt(s) = [4.70649028]
bas 8, expnt(s) = [0.391063]
bas 9, expnt(s) = [8.59890602]
bas 10, expnt(s) = [0.49098344]
CPU time:       123.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340457e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182211e+03 5.81902213e+02
 3.32910480e+02 1.96906759e+02 9.70281884e+01 7.81067319e+01
 3.28919229e+01 3.47001995e+01 4.70649028e+00 8.07305477e+00
 3.91062999e-01 1.24939588e+00 8.59890602e+00 4.29574403e+01
 4.90983442e-01 1.19899659e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320595465818258
cond(S) = 204.7963932081696
E1 = -689.1825742052987  E_coul = 184.90287887507017
init E= -504.279695330228
    CPU time for initialize scf      0.37 sec, wall time      0.06 sec
  HOMO = -0.68056415110589  LUMO = 65.1974968853428
  mo_energy =
[-1.21684126e+02 -1.32897023e+01 -7.62329997e+00 -7.62329997e+00
 -7.62329997e+00 -1.65019831e+00 -6.80564151e-01 -6.80564151e-01
 -6.80564151e-01  6.51974969e+01  4.89978742e+02  2.50973087e+03
  1.24365812e+04  4.54549983e+04  1.32393114e+05]
E1 = -706.666898235531  E_coul = 198.9487856773709
cycle= 1 E= -507.71811255816  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.4799
diis-c [-0.23030428  1.        ]
  HOMO = -0.236360169027187  LUMO = 66.5017784638218
  mo_energy =
[-1.20287640e+02 -1.22616630e+01 -6.65420680e+00 -6.65420680e+00
 -6.65420680e+00 -1.16397030e+00 -2.36360169e-01 -2.36360169e-01
 -2.36360169e-01  6.65017785e+01  4.91363984e+02  2.51103638e+03
  1.24377570e+04  4.54560967e+04  1.32394162e+05]
E1 = -706.6215408902763  E_coul = 198.90279567576118
cycle= 2 E= -507.718745214515  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627498
diis-c [-3.90242137e-05  1.23348023e-03  9.98766520e-01]
  HOMO = -0.236635308983801  LUMO = 66.4974824837325
  mo_energy =
[-1.20299421e+02 -1.22634950e+01 -6.65701716e+00 -6.65701716e+00
 -6.65701716e+00 -1.16407264e+00 -2.36635309e-01 -2.36635309e-01
 -2.36635309e-01  6.64974825e+01  4.91351275e+02  2.51101757e+03
  1.24377341e+04  4.54560723e+04  1.32394137e+05]
E1 = -706.62079658627  E_coul = 198.9020511638181
cycle= 3 E= -507.718745422452  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189851
diis-c [-8.73797536e-10  2.92326691e-05 -3.05354386e-02  1.03050621e+00]
  HOMO = -0.236639829873277  LUMO = 66.4974072472919
  mo_energy =
[-1.20299628e+02 -1.22635266e+01 -6.65706977e+00 -6.65706977e+00
 -6.65706977e+00 -1.16407405e+00 -2.36639830e-01 -2.36639830e-01
 -2.36639830e-01  6.64974072e+01  4.91351069e+02  2.51101730e+03
  1.24377338e+04  4.54560719e+04  1.32394137e+05]
E1 = -706.6207810149929  E_coul = 198.90203559243074
cycle= 4 E= -507.718745422562  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6207810149929  E_coul = 198.90203559243074
  HOMO = -0.236639792414862  LUMO = 66.4974078005116
  mo_energy =
[-1.20299627e+02 -1.22635264e+01 -6.65706942e+00 -6.65706942e+00
 -6.65706942e+00 -1.16407403e+00 -2.36639792e-01 -2.36639792e-01
 -2.36639792e-01  6.64974078e+01  4.91351071e+02  2.51101730e+03
  1.24377338e+04  4.54560719e+04  1.32394137e+05]
E1 = -706.6207811018842  E_coul = 198.90203567932187
Extra cycle  E= -507.718745422562  delta_E= -1.14e-13  |g|= 1.27e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.02 sec, wall time      0.20 sec
exp = [3.67546479e+04 7.34340457e+03 1.83773239e+04 1.41182211e+03
 3.32910480e+02 9.70281884e+01 3.28919229e+01 4.70649028e+00
 3.91062999e-01 8.59890602e+00 4.90983442e-01]
E = -507.7187454225623
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:25 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478576        1
[INPUT] 0    0    [1    /1   ]  7343.40456744        1
[INPUT] 0    0    [1    /1   ]  18377.3239134        1
[INPUT] 0    0    [1    /1   ]  1411.82211277        1
[INPUT] 0    0    [1    /1   ]  332.910480027        1
[INPUT] 0    0    [1    /1   ]  97.028188419         1
[INPUT] 0    0    [1    /1   ]  32.8919228545        1
[INPUT] 0    0    [1    /1   ]  4.70649028213        1
[INPUT] 0    0    [1    /1   ]  0.391062999192       1
[INPUT] 1    0    [1    /1   ]  8.59890601679        1
[INPUT] 1    0    [1    /1   ]  0.490983441556       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785759355, 1.0]], [0, [7343.404567436847, 1.0]], [0, [18377.323913418484, 1.0]], [0, [1411.8221127693325, 1.0]], [0, [332.91048002665224, 1.0]], [0, [97.02818841897046, 1.0]], [0, [32.89192285449414, 1.0]], [0, [4.706490282133534, 1.0]], [0, [0.3910629991918681, 1.0]], [1, [8.598906016793642, 1.0]], [1, [0.4909834415562404, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785759]
bas 1, expnt(s) = [7343.40456744]
bas 2, expnt(s) = [18377.32391342]
bas 3, expnt(s) = [1411.82211277]
bas 4, expnt(s) = [332.91048003]
bas 5, expnt(s) = [97.02818842]
bas 6, expnt(s) = [32.89192285]
bas 7, expnt(s) = [4.70649028]
bas 8, expnt(s) = [0.391063]
bas 9, expnt(s) = [8.59890602]
bas 10, expnt(s) = [0.49098344]
CPU time:       124.20
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340457e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182211e+03 5.81902213e+02
 3.32910480e+02 1.96906759e+02 9.70281884e+01 7.81067319e+01
 3.28919229e+01 3.47001995e+01 4.70649028e+00 8.07305477e+00
 3.91062999e-01 1.24939588e+00 8.59890602e+00 4.29574403e+01
 4.90983442e-01 1.19899659e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320595465818258
cond(S) = 204.7963932081696
E1 = -689.1825742052987  E_coul = 184.90287887507017
init E= -504.279695330228
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.68056415110589  LUMO = 65.1974968853428
  mo_energy =
[-1.21684126e+02 -1.32897023e+01 -7.62329997e+00 -7.62329997e+00
 -7.62329997e+00 -1.65019831e+00 -6.80564151e-01 -6.80564151e-01
 -6.80564151e-01  6.51974969e+01  4.89978742e+02  2.50973087e+03
  1.24365812e+04  4.54549983e+04  1.32393114e+05]
E1 = -706.666898235531  E_coul = 198.9487856773709
cycle= 1 E= -507.71811255816  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.4799
diis-c [-0.23030428  1.        ]
  HOMO = -0.236360169027187  LUMO = 66.5017784638218
  mo_energy =
[-1.20287640e+02 -1.22616630e+01 -6.65420680e+00 -6.65420680e+00
 -6.65420680e+00 -1.16397030e+00 -2.36360169e-01 -2.36360169e-01
 -2.36360169e-01  6.65017785e+01  4.91363984e+02  2.51103638e+03
  1.24377570e+04  4.54560967e+04  1.32394162e+05]
E1 = -706.6215408902763  E_coul = 198.90279567576118
cycle= 2 E= -507.718745214515  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627498
diis-c [-3.90242137e-05  1.23348023e-03  9.98766520e-01]
  HOMO = -0.236635308983801  LUMO = 66.4974824837325
  mo_energy =
[-1.20299421e+02 -1.22634950e+01 -6.65701716e+00 -6.65701716e+00
 -6.65701716e+00 -1.16407264e+00 -2.36635309e-01 -2.36635309e-01
 -2.36635309e-01  6.64974825e+01  4.91351275e+02  2.51101757e+03
  1.24377341e+04  4.54560723e+04  1.32394137e+05]
E1 = -706.62079658627  E_coul = 198.9020511638181
cycle= 3 E= -507.718745422452  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189851
diis-c [-8.73797536e-10  2.92326691e-05 -3.05354386e-02  1.03050621e+00]
  HOMO = -0.236639829873277  LUMO = 66.4974072472919
  mo_energy =
[-1.20299628e+02 -1.22635266e+01 -6.65706977e+00 -6.65706977e+00
 -6.65706977e+00 -1.16407405e+00 -2.36639830e-01 -2.36639830e-01
 -2.36639830e-01  6.64974072e+01  4.91351069e+02  2.51101730e+03
  1.24377338e+04  4.54560719e+04  1.32394137e+05]
E1 = -706.6207810149929  E_coul = 198.90203559243074
cycle= 4 E= -507.718745422562  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6207810149929  E_coul = 198.90203559243074
  HOMO = -0.236639792414862  LUMO = 66.4974078005116
  mo_energy =
[-1.20299627e+02 -1.22635264e+01 -6.65706942e+00 -6.65706942e+00
 -6.65706942e+00 -1.16407403e+00 -2.36639792e-01 -2.36639792e-01
 -2.36639792e-01  6.64974078e+01  4.91351071e+02  2.51101730e+03
  1.24377338e+04  4.54560719e+04  1.32394137e+05]
E1 = -706.6207811018842  E_coul = 198.90203567932187
Extra cycle  E= -507.718745422562  delta_E= -1.14e-13  |g|= 1.27e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.7963932081696
E1 = -706.6207811018842  E_coul = 198.90203567932187
init E= -507.718745422562
    CPU time for initialize scf      2.55 sec, wall time      0.17 sec
  HOMO = -0.236639791906625  LUMO = 66.4974078086739
  mo_energy =
[-1.20299627e+02 -1.22635264e+01 -6.65706942e+00 -6.65706942e+00
 -6.65706942e+00 -1.16407403e+00 -2.36639792e-01 -2.36639792e-01
 -2.36639792e-01  6.64974078e+01  4.91351071e+02  2.51101730e+03
  1.24377338e+04  4.54560719e+04  1.32394137e+05]
E1 = -706.6207811034084  E_coul = 198.90203568084598
cycle= 1 E= -507.718745422562  delta_E= -1.14e-13  |g|= 2.86e-10  |ddm|= 7.06e-10
    CPU time for cycle= 1      0.15 sec, wall time      0.04 sec
E1 = -706.6207811034084  E_coul = 198.90203568084598
  HOMO = -0.236639791898596  LUMO = 66.4974078088139
  mo_energy =
[-1.20299627e+02 -1.22635264e+01 -6.65706942e+00 -6.65706942e+00
 -6.65706942e+00 -1.16407403e+00 -2.36639792e-01 -2.36639792e-01
 -2.36639792e-01  6.64974078e+01  4.91351071e+02  2.51101730e+03
  1.24377338e+04  4.54560719e+04  1.32394137e+05]
E1 = -706.6207811034384  E_coul = 198.90203568087608
Extra cycle  E= -507.718745422562  delta_E= 1.14e-13  |g|= 1.35e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.88 sec, wall time      0.43 sec
exp = [3.67546479e+04 7.34340457e+03 1.83773239e+04 1.41182211e+03
 3.32910480e+02 9.70281884e+01 3.28919229e+01 4.70649028e+00
 3.91062999e-01 8.59890602e+00 4.90983442e-01]
grad_E = [-2.08470045e-07  2.04208657e-06  6.60396437e-09  9.86920259e-05
 -2.46069315e-04  1.52286116e-04  3.10210232e-04  3.56104480e-05
  4.52808906e-04  4.44046936e-05  1.27430252e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478583        1
[INPUT] 0    0    [1    /1   ]  7343.40456034        1
[INPUT] 0    0    [1    /1   ]  18377.3239134        1
[INPUT] 0    0    [1    /1   ]  1411.82177893        1
[INPUT] 0    0    [1    /1   ]  332.911241983        1
[INPUT] 0    0    [1    /1   ]  97.0281586659        1
[INPUT] 0    0    [1    /1   ]  32.889788303         1
[INPUT] 0    0    [1    /1   ]  4.70679817441        1
[INPUT] 0    0    [1    /1   ]  0.391166387495       1
[INPUT] 1    0    [1    /1   ]  8.59913276113        1
[INPUT] 1    0    [1    /1   ]  0.490993723567       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785830761, 1.0]], [0, [7343.404560337015, 1.0]], [0, [18377.323913393735, 1.0]], [0, [1411.8217789283833, 1.0]], [0, [332.91124198257324, 1.0]], [0, [97.02815866592344, 1.0]], [0, [32.88978830299344, 1.0]], [0, [4.706798174414243, 1.0]], [0, [0.3911663874952545, 1.0]], [1, [8.599132761127493, 1.0]], [1, [0.4909937235671138, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785831]
bas 1, expnt(s) = [7343.40456034]
bas 2, expnt(s) = [18377.32391339]
bas 3, expnt(s) = [1411.82177893]
bas 4, expnt(s) = [332.91124198]
bas 5, expnt(s) = [97.02815867]
bas 6, expnt(s) = [32.8897883]
bas 7, expnt(s) = [4.70679817]
bas 8, expnt(s) = [0.39116639]
bas 9, expnt(s) = [8.59913276]
bas 10, expnt(s) = [0.49099372]
CPU time:       134.43
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340456e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182178e+03 5.81902110e+02
 3.32911242e+02 1.96907097e+02 9.70281587e+01 7.81067139e+01
 3.28897883e+01 3.46985105e+01 4.70679817e+00 8.07345086e+00
 3.91166387e-01 1.24964361e+00 8.59913276e+00 4.29588563e+01
 4.90993724e-01 1.19902798e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320565659733578
cond(S) = 204.79583460955487
E1 = -689.1861235656372  E_coul = 184.90603542375163
init E= -504.280088141886
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680506299883246  LUMO = 65.1957186916338
  mo_energy =
[-1.21683727e+02 -1.32894539e+01 -7.62305631e+00 -7.62305631e+00
 -7.62305631e+00 -1.65019141e+00 -6.80506300e-01 -6.80506300e-01
 -6.80506300e-01  6.51957187e+01  4.89973197e+02  2.50972650e+03
  1.24365775e+04  4.54549947e+04  1.32393110e+05]
E1 = -706.671281287545  E_coul = 198.95316798223413
cycle= 1 E= -507.718113305311  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479909
diis-c [-0.23031246  1.        ]
  HOMO = -0.236272647396087  LUMO = 66.500090603592
  mo_energy =
[-1.20287076e+02 -1.22613443e+01 -6.65388249e+00 -6.65388249e+00
 -6.65388249e+00 -1.16389845e+00 -2.36272647e-01 -2.36272647e-01
 -2.36272647e-01  6.65000906e+01  4.91358605e+02  2.51103220e+03
  1.24377535e+04  4.54560933e+04  1.32394159e+05]
E1 = -706.6259239468259  E_coul = 198.90717808248334
cycle= 2 E= -507.718745864343  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627447
diis-c [-3.90171233e-05  1.23456429e-03  9.98765436e-01]
  HOMO = -0.236547804461093  LUMO = 66.4957947565201
  mo_energy =
[-1.20298857e+02 -1.22631763e+01 -6.65669281e+00 -6.65669281e+00
 -6.65669281e+00 -1.16400081e+00 -2.36547804e-01 -2.36547804e-01
 -2.36547804e-01  6.64957948e+01  4.91345896e+02  2.51101339e+03
  1.24377306e+04  4.54560689e+04  1.32394134e+05]
E1 = -706.6251796386468  E_coul = 198.90643356639472
cycle= 3 E= -507.718746072252  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189848
diis-c [-8.73807706e-10  2.92295886e-05 -3.05373763e-02  1.03050815e+00]
  HOMO = -0.236552326125385  LUMO = 66.4957195170216
  mo_energy =
[-1.20299064e+02 -1.22632079e+01 -6.65674542e+00 -6.65674542e+00
 -6.65674542e+00 -1.16400222e+00 -2.36552326e-01 -2.36552326e-01
 -2.36552326e-01  6.64957195e+01  4.91345690e+02  2.51101313e+03
  1.24377303e+04  4.54560686e+04  1.32394134e+05]
E1 = -706.6251640662991  E_coul = 198.90641799393657
cycle= 4 E= -507.718746072363  delta_E= -1.11e-10  |g|= 6.6e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6251640662991  E_coul = 198.90641799393657
  HOMO = -0.236552288660323  LUMO = 66.4957200702838
  mo_energy =
[-1.20299062e+02 -1.22632077e+01 -6.65674507e+00 -6.65674507e+00
 -6.65674507e+00 -1.16400221e+00 -2.36552289e-01 -2.36552289e-01
 -2.36552289e-01  6.64957201e+01  4.91345692e+02  2.51101313e+03
  1.24377303e+04  4.54560686e+04  1.32394134e+05]
E1 = -706.6251641532017  E_coul = 198.90641808083893
Extra cycle  E= -507.718746072363  delta_E= -1.71e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546479e+04 7.34340456e+03 1.83773239e+04 1.41182178e+03
 3.32911242e+02 9.70281587e+01 3.28897883e+01 4.70679817e+00
 3.91166387e-01 8.59913276e+00 4.90993724e-01]
E = -507.71874607236276
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478583        1
[INPUT] 0    0    [1    /1   ]  7343.40456034        1
[INPUT] 0    0    [1    /1   ]  18377.3239134        1
[INPUT] 0    0    [1    /1   ]  1411.82177893        1
[INPUT] 0    0    [1    /1   ]  332.911241983        1
[INPUT] 0    0    [1    /1   ]  97.0281586659        1
[INPUT] 0    0    [1    /1   ]  32.889788303         1
[INPUT] 0    0    [1    /1   ]  4.70679817441        1
[INPUT] 0    0    [1    /1   ]  0.391166387495       1
[INPUT] 1    0    [1    /1   ]  8.59913276113        1
[INPUT] 1    0    [1    /1   ]  0.490993723567       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64785830761, 1.0]], [0, [7343.404560337015, 1.0]], [0, [18377.323913393735, 1.0]], [0, [1411.8217789283833, 1.0]], [0, [332.91124198257324, 1.0]], [0, [97.02815866592344, 1.0]], [0, [32.88978830299344, 1.0]], [0, [4.706798174414243, 1.0]], [0, [0.3911663874952545, 1.0]], [1, [8.599132761127493, 1.0]], [1, [0.4909937235671138, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64785831]
bas 1, expnt(s) = [7343.40456034]
bas 2, expnt(s) = [18377.32391339]
bas 3, expnt(s) = [1411.82177893]
bas 4, expnt(s) = [332.91124198]
bas 5, expnt(s) = [97.02815867]
bas 6, expnt(s) = [32.8897883]
bas 7, expnt(s) = [4.70679817]
bas 8, expnt(s) = [0.39116639]
bas 9, expnt(s) = [8.59913276]
bas 10, expnt(s) = [0.49099372]
CPU time:       135.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340456e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182178e+03 5.81902110e+02
 3.32911242e+02 1.96907097e+02 9.70281587e+01 7.81067139e+01
 3.28897883e+01 3.46985105e+01 4.70679817e+00 8.07345086e+00
 3.91166387e-01 1.24964361e+00 8.59913276e+00 4.29588563e+01
 4.90993724e-01 1.19902798e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320565659733578
cond(S) = 204.79583460955487
E1 = -689.1861235656372  E_coul = 184.90603542375163
init E= -504.280088141886
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680506299883246  LUMO = 65.1957186916338
  mo_energy =
[-1.21683727e+02 -1.32894539e+01 -7.62305631e+00 -7.62305631e+00
 -7.62305631e+00 -1.65019141e+00 -6.80506300e-01 -6.80506300e-01
 -6.80506300e-01  6.51957187e+01  4.89973197e+02  2.50972650e+03
  1.24365775e+04  4.54549947e+04  1.32393110e+05]
E1 = -706.671281287545  E_coul = 198.95316798223413
cycle= 1 E= -507.718113305311  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479909
diis-c [-0.23031246  1.        ]
  HOMO = -0.236272647396087  LUMO = 66.500090603592
  mo_energy =
[-1.20287076e+02 -1.22613443e+01 -6.65388249e+00 -6.65388249e+00
 -6.65388249e+00 -1.16389845e+00 -2.36272647e-01 -2.36272647e-01
 -2.36272647e-01  6.65000906e+01  4.91358605e+02  2.51103220e+03
  1.24377535e+04  4.54560933e+04  1.32394159e+05]
E1 = -706.6259239468259  E_coul = 198.90717808248334
cycle= 2 E= -507.718745864343  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627447
diis-c [-3.90171233e-05  1.23456429e-03  9.98765436e-01]
  HOMO = -0.236547804461093  LUMO = 66.4957947565201
  mo_energy =
[-1.20298857e+02 -1.22631763e+01 -6.65669281e+00 -6.65669281e+00
 -6.65669281e+00 -1.16400081e+00 -2.36547804e-01 -2.36547804e-01
 -2.36547804e-01  6.64957948e+01  4.91345896e+02  2.51101339e+03
  1.24377306e+04  4.54560689e+04  1.32394134e+05]
E1 = -706.6251796386468  E_coul = 198.90643356639472
cycle= 3 E= -507.718746072252  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189848
diis-c [-8.73807706e-10  2.92295886e-05 -3.05373763e-02  1.03050815e+00]
  HOMO = -0.236552326125385  LUMO = 66.4957195170216
  mo_energy =
[-1.20299064e+02 -1.22632079e+01 -6.65674542e+00 -6.65674542e+00
 -6.65674542e+00 -1.16400222e+00 -2.36552326e-01 -2.36552326e-01
 -2.36552326e-01  6.64957195e+01  4.91345690e+02  2.51101313e+03
  1.24377303e+04  4.54560686e+04  1.32394134e+05]
E1 = -706.6251640662991  E_coul = 198.90641799393657
cycle= 4 E= -507.718746072363  delta_E= -1.11e-10  |g|= 6.6e-07  |ddm|= 7.29e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6251640662991  E_coul = 198.90641799393657
  HOMO = -0.236552288660323  LUMO = 66.4957200702838
  mo_energy =
[-1.20299062e+02 -1.22632077e+01 -6.65674507e+00 -6.65674507e+00
 -6.65674507e+00 -1.16400221e+00 -2.36552289e-01 -2.36552289e-01
 -2.36552289e-01  6.64957201e+01  4.91345692e+02  2.51101313e+03
  1.24377303e+04  4.54560686e+04  1.32394134e+05]
E1 = -706.6251641532017  E_coul = 198.90641808083893
Extra cycle  E= -507.718746072363  delta_E= -1.71e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.79583460955487
E1 = -706.6251641532017  E_coul = 198.90641808083893
init E= -507.718746072363
    CPU time for initialize scf      2.78 sec, wall time      0.18 sec
  HOMO = -0.236552288151968  LUMO = 66.4957200784462
  mo_energy =
[-1.20299062e+02 -1.22632077e+01 -6.65674507e+00 -6.65674507e+00
 -6.65674507e+00 -1.16400221e+00 -2.36552288e-01 -2.36552288e-01
 -2.36552288e-01  6.64957201e+01  4.91345692e+02  2.51101313e+03
  1.24377303e+04  4.54560686e+04  1.32394134e+05]
E1 = -706.6251641547259  E_coul = 198.9064180823632
cycle= 1 E= -507.718746072363  delta_E= 5.68e-14  |g|= 2.86e-10  |ddm|= 7.07e-10
    CPU time for cycle= 1      0.28 sec, wall time      0.03 sec
E1 = -706.6251641547259  E_coul = 198.9064180823632
  HOMO = -0.236552288143945  LUMO = 66.495720078586
  mo_energy =
[-1.20299062e+02 -1.22632077e+01 -6.65674507e+00 -6.65674507e+00
 -6.65674507e+00 -1.16400221e+00 -2.36552288e-01 -2.36552288e-01
 -2.36552288e-01  6.64957201e+01  4.91345692e+02  2.51101313e+03
  1.24377303e+04  4.54560686e+04  1.32394134e+05]
E1 = -706.625164154756  E_coul = 198.90641808239334
Extra cycle  E= -507.718746072363  delta_E=    0  |g|= 1.66e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      3.21 sec, wall time      0.35 sec
exp = [3.67546479e+04 7.34340456e+03 1.83773239e+04 1.41182178e+03
 3.32911242e+02 9.70281587e+01 3.28897883e+01 4.70679817e+00
 3.91166387e-01 8.59913276e+00 4.90993724e-01]
grad_E = [-2.08486533e-07  2.04145033e-06  6.58705764e-09  9.87337998e-05
 -2.46909376e-04  1.57954353e-04  2.94836560e-04  2.80715215e-04
  2.16889364e-03  2.48617373e-04  6.30879041e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478609        1
[INPUT] 0    0    [1    /1   ]  7343.4045349         1
[INPUT] 0    0    [1    /1   ]  18377.3239133        1
[INPUT] 0    0    [1    /1   ]  1411.82055256        1
[INPUT] 0    0    [1    /1   ]  332.914277944        1
[INPUT] 0    0    [1    /1   ]  97.0264138255        1
[INPUT] 0    0    [1    /1   ]  32.8856016759        1
[INPUT] 0    0    [1    /1   ]  4.70723399129        1
[INPUT] 0    0    [1    /1   ]  0.391311878644       1
[INPUT] 1    0    [1    /1   ]  8.59945550614        1
[INPUT] 1    0    [1    /1   ]  0.491008321583       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647860900855, 1.0]], [0, [7343.404534901985, 1.0]], [0, [18377.32391331092, 1.0]], [0, [1411.820552558643, 1.0]], [0, [332.91427794390466, 1.0]], [0, [97.0264138255479, 1.0]], [0, [32.88560167592895, 1.0]], [0, [4.707233991291499, 1.0]], [0, [0.39131187864357153, 1.0]], [1, [8.59945550613837, 1.0]], [1, [0.491008321583285, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6478609]
bas 1, expnt(s) = [7343.4045349]
bas 2, expnt(s) = [18377.32391331]
bas 3, expnt(s) = [1411.82055256]
bas 4, expnt(s) = [332.91427794]
bas 5, expnt(s) = [97.02641383]
bas 6, expnt(s) = [32.88560168]
bas 7, expnt(s) = [4.70723399]
bas 8, expnt(s) = [0.39131188]
bas 9, expnt(s) = [8.59945551]
bas 10, expnt(s) = [0.49100832]
CPU time:       146.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340453e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182055e+03 5.81901731e+02
 3.32914278e+02 1.96908444e+02 9.70264138e+01 7.81056605e+01
 3.28856017e+01 3.46951978e+01 4.70723399e+00 8.07401152e+00
 3.91311879e-01 1.24999219e+00 8.59945551e+00 4.29608717e+01
 4.91008322e-01 1.19907254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320523385564922
cond(S) = 204.79427672560055
E1 = -689.1911402241237  E_coul = 184.91049405999374
init E= -504.28064616413
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680424876006545  LUMO = 65.1904147675873
  mo_energy =
[-1.21683165e+02 -1.32891013e+01 -7.62271238e+00 -7.62271238e+00
 -7.62271238e+00 -1.65018126e+00 -6.80424876e-01 -6.80424876e-01
 -6.80424876e-01  6.51904148e+01  4.89958122e+02  2.50971482e+03
  1.24365673e+04  4.54549848e+04  1.32393101e+05]
E1 = -706.677475500761  E_coul = 198.95936059154417
cycle= 1 E= -507.718114909217  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479919
diis-c [-0.23032205  1.        ]
  HOMO = -0.236149188786217  LUMO = 66.494908906683
  mo_energy =
[-1.20286279e+02 -1.22608923e+01 -6.65342435e+00 -6.65342435e+00
 -6.65342435e+00 -1.16379671e+00 -2.36149189e-01 -2.36149189e-01
 -2.36149189e-01  6.64949089e+01  4.91343764e+02  2.51102080e+03
  1.24377436e+04  4.54560837e+04  1.32394150e+05]
E1 = -706.6321154318458  E_coul = 198.9133680608555
cycle= 2 E= -507.71874737099  delta_E= -0.000632  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627399
diis-c [-3.90100654e-05  1.23634756e-03  9.98763652e-01]
  HOMO = -0.236424389851254  LUMO = 66.490613082109
  mo_energy =
[-1.20298060e+02 -1.22627245e+01 -6.65623481e+00 -6.65623481e+00
 -6.65623481e+00 -1.16389912e+00 -2.36424390e-01 -2.36424390e-01
 -2.36424390e-01  6.64906131e+01  4.91331054e+02  2.51100198e+03
  1.24377207e+04  4.54560592e+04  1.32394125e+05]
E1 = -706.6313710574367  E_coul = 198.91262347855312
cycle= 3 E= -507.718747578884  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189856
diis-c [-8.73939750e-10  2.92237558e-05 -3.05408174e-02  1.03051159e+00]
  HOMO = -0.23642891309396  LUMO = 66.4905378325557
  mo_energy =
[-1.20298267e+02 -1.22627561e+01 -6.65628744e+00 -6.65628744e+00
 -6.65628744e+00 -1.16390053e+00 -2.36428913e-01 -2.36428913e-01
 -2.36428913e-01  6.64905378e+01  4.91330848e+02  2.51100172e+03
  1.24377204e+04  4.54560589e+04  1.32394124e+05]
E1 = -706.6313554818164  E_coul = 198.912607902823
cycle= 4 E= -507.718747578993  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6313554818164  E_coul = 198.912607902823
  HOMO = -0.236428875614909  LUMO = 66.4905383859192
  mo_energy =
[-1.20298266e+02 -1.22627559e+01 -6.65628708e+00 -6.65628708e+00
 -6.65628708e+00 -1.16390052e+00 -2.36428876e-01 -2.36428876e-01
 -2.36428876e-01  6.64905384e+01  4.91330850e+02  2.51100172e+03
  1.24377204e+04  4.54560589e+04  1.32394124e+05]
E1 = -706.6313555687456  E_coul = 198.91260798975185
Extra cycle  E= -507.718747578994  delta_E= -2.84e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546479e+04 7.34340453e+03 1.83773239e+04 1.41182055e+03
 3.32914278e+02 9.70264138e+01 3.28856017e+01 4.70723399e+00
 3.91311879e-01 8.59945551e+00 4.91008322e-01]
E = -507.7187475789937
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:40 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478609        1
[INPUT] 0    0    [1    /1   ]  7343.4045349         1
[INPUT] 0    0    [1    /1   ]  18377.3239133        1
[INPUT] 0    0    [1    /1   ]  1411.82055256        1
[INPUT] 0    0    [1    /1   ]  332.914277944        1
[INPUT] 0    0    [1    /1   ]  97.0264138255        1
[INPUT] 0    0    [1    /1   ]  32.8856016759        1
[INPUT] 0    0    [1    /1   ]  4.70723399129        1
[INPUT] 0    0    [1    /1   ]  0.391311878644       1
[INPUT] 1    0    [1    /1   ]  8.59945550614        1
[INPUT] 1    0    [1    /1   ]  0.491008321583       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647860900855, 1.0]], [0, [7343.404534901985, 1.0]], [0, [18377.32391331092, 1.0]], [0, [1411.820552558643, 1.0]], [0, [332.91427794390466, 1.0]], [0, [97.0264138255479, 1.0]], [0, [32.88560167592895, 1.0]], [0, [4.707233991291499, 1.0]], [0, [0.39131187864357153, 1.0]], [1, [8.59945550613837, 1.0]], [1, [0.491008321583285, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6478609]
bas 1, expnt(s) = [7343.4045349]
bas 2, expnt(s) = [18377.32391331]
bas 3, expnt(s) = [1411.82055256]
bas 4, expnt(s) = [332.91427794]
bas 5, expnt(s) = [97.02641383]
bas 6, expnt(s) = [32.88560168]
bas 7, expnt(s) = [4.70723399]
bas 8, expnt(s) = [0.39131188]
bas 9, expnt(s) = [8.59945551]
bas 10, expnt(s) = [0.49100832]
CPU time:       147.34
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340453e+03 2.00418642e+03
 1.83773239e+04 3.98773901e+03 1.41182055e+03 5.81901731e+02
 3.32914278e+02 1.96908444e+02 9.70264138e+01 7.81056605e+01
 3.28856017e+01 3.46951978e+01 4.70723399e+00 8.07401152e+00
 3.91311879e-01 1.24999219e+00 8.59945551e+00 4.29608717e+01
 4.91008322e-01 1.19907254e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320523385564922
cond(S) = 204.79427672560055
E1 = -689.1911402241237  E_coul = 184.91049405999374
init E= -504.28064616413
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680424876006545  LUMO = 65.1904147675873
  mo_energy =
[-1.21683165e+02 -1.32891013e+01 -7.62271238e+00 -7.62271238e+00
 -7.62271238e+00 -1.65018126e+00 -6.80424876e-01 -6.80424876e-01
 -6.80424876e-01  6.51904148e+01  4.89958122e+02  2.50971482e+03
  1.24365673e+04  4.54549848e+04  1.32393101e+05]
E1 = -706.677475500761  E_coul = 198.95936059154417
cycle= 1 E= -507.718114909217  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479919
diis-c [-0.23032205  1.        ]
  HOMO = -0.236149188786217  LUMO = 66.494908906683
  mo_energy =
[-1.20286279e+02 -1.22608923e+01 -6.65342435e+00 -6.65342435e+00
 -6.65342435e+00 -1.16379671e+00 -2.36149189e-01 -2.36149189e-01
 -2.36149189e-01  6.64949089e+01  4.91343764e+02  2.51102080e+03
  1.24377436e+04  4.54560837e+04  1.32394150e+05]
E1 = -706.6321154318458  E_coul = 198.9133680608555
cycle= 2 E= -507.71874737099  delta_E= -0.000632  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627399
diis-c [-3.90100654e-05  1.23634756e-03  9.98763652e-01]
  HOMO = -0.236424389851254  LUMO = 66.490613082109
  mo_energy =
[-1.20298060e+02 -1.22627245e+01 -6.65623481e+00 -6.65623481e+00
 -6.65623481e+00 -1.16389912e+00 -2.36424390e-01 -2.36424390e-01
 -2.36424390e-01  6.64906131e+01  4.91331054e+02  2.51100198e+03
  1.24377207e+04  4.54560592e+04  1.32394125e+05]
E1 = -706.6313710574367  E_coul = 198.91262347855312
cycle= 3 E= -507.718747578884  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000346
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189856
diis-c [-8.73939750e-10  2.92237558e-05 -3.05408174e-02  1.03051159e+00]
  HOMO = -0.23642891309396  LUMO = 66.4905378325557
  mo_energy =
[-1.20298267e+02 -1.22627561e+01 -6.65628744e+00 -6.65628744e+00
 -6.65628744e+00 -1.16390053e+00 -2.36428913e-01 -2.36428913e-01
 -2.36428913e-01  6.64905378e+01  4.91330848e+02  2.51100172e+03
  1.24377204e+04  4.54560589e+04  1.32394124e+05]
E1 = -706.6313554818164  E_coul = 198.912607902823
cycle= 4 E= -507.718747578993  delta_E= -1.1e-10  |g|= 6.6e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6313554818164  E_coul = 198.912607902823
  HOMO = -0.236428875614909  LUMO = 66.4905383859192
  mo_energy =
[-1.20298266e+02 -1.22627559e+01 -6.65628708e+00 -6.65628708e+00
 -6.65628708e+00 -1.16390052e+00 -2.36428876e-01 -2.36428876e-01
 -2.36428876e-01  6.64905384e+01  4.91330850e+02  2.51100172e+03
  1.24377204e+04  4.54560589e+04  1.32394124e+05]
E1 = -706.6313555687456  E_coul = 198.91260798975185
Extra cycle  E= -507.718747578994  delta_E= -2.84e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.79427672560055
E1 = -706.6313555687456  E_coul = 198.91260798975185
init E= -507.718747578994
    CPU time for initialize scf      2.08 sec, wall time      0.13 sec
  HOMO = -0.236428875106315  LUMO = 66.4905383940842
  mo_energy =
[-1.20298266e+02 -1.22627559e+01 -6.65628708e+00 -6.65628708e+00
 -6.65628708e+00 -1.16390052e+00 -2.36428875e-01 -2.36428875e-01
 -2.36428875e-01  6.64905384e+01  4.91330850e+02  2.51100172e+03
  1.24377204e+04  4.54560589e+04  1.32394124e+05]
E1 = -706.6313555702703  E_coul = 198.91260799127662
cycle= 1 E= -507.718747578994  delta_E=    0  |g|= 2.85e-10  |ddm|= 7.07e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6313555702703  E_coul = 198.91260799127662
  HOMO = -0.236428875098285  LUMO = 66.4905383942241
  mo_energy =
[-1.20298266e+02 -1.22627559e+01 -6.65628708e+00 -6.65628708e+00
 -6.65628708e+00 -1.16390052e+00 -2.36428875e-01 -2.36428875e-01
 -2.36428875e-01  6.64905384e+01  4.91330850e+02  2.51100172e+03
  1.24377204e+04  4.54560589e+04  1.32394124e+05]
E1 = -706.6313555703003  E_coul = 198.9126079913067
Extra cycle  E= -507.718747578994  delta_E= 5.68e-14  |g|= 1.94e-11  |ddm|= 1.4e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546479e+04 7.34340453e+03 1.83773239e+04 1.41182055e+03
 3.32914278e+02 9.70264138e+01 3.28856017e+01 4.70723399e+00
 3.91311879e-01 8.59945551e+00 4.91008322e-01]
grad_E = [-2.08493746e-07  2.04118991e-06  6.57908551e-09  9.87585941e-05
 -2.47768017e-04  1.65869873e-04  2.70283711e-04  6.28426511e-04
  4.58544245e-03  5.38683022e-04  1.34049271e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:46 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478695        1
[INPUT] 0    0    [1    /1   ]  7343.40445089        1
[INPUT] 0    0    [1    /1   ]  18377.323913         1
[INPUT] 0    0    [1    /1   ]  1411.81646518        1
[INPUT] 0    0    [1    /1   ]  332.924675351        1
[INPUT] 0    0    [1    /1   ]  97.0186693735        1
[INPUT] 0    0    [1    /1   ]  32.8759649327        1
[INPUT] 0    0    [1    /1   ]  4.70794346878        1
[INPUT] 0    0    [1    /1   ]  0.391550165118       1
[INPUT] 1    0    [1    /1   ]  8.59998666415        1
[INPUT] 1    0    [1    /1   ]  0.49103235525        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64786950879, 1.0]], [0, [7343.404450888454, 1.0]], [0, [18377.323913044416, 1.0]], [0, [1411.8164651814523, 1.0]], [0, [332.9246753507534, 1.0]], [0, [97.0186693735103, 1.0]], [0, [32.8759649327149, 1.0]], [0, [4.707943468783013, 1.0]], [0, [0.3915501651183103, 1.0]], [1, [8.599986664145325, 1.0]], [1, [0.4910323552502925, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64786951]
bas 1, expnt(s) = [7343.40445089]
bas 2, expnt(s) = [18377.32391304]
bas 3, expnt(s) = [1411.81646518]
bas 4, expnt(s) = [332.92467535]
bas 5, expnt(s) = [97.01866937]
bas 6, expnt(s) = [32.87596493]
bas 7, expnt(s) = [4.70794347]
bas 8, expnt(s) = [0.39155017]
bas 9, expnt(s) = [8.59998666]
bas 10, expnt(s) = [0.49103236]
CPU time:       157.37
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340445e+03 2.00418640e+03
 1.83773239e+04 3.98773901e+03 1.41181647e+03 5.81900468e+02
 3.32924675e+02 1.96913056e+02 9.70186694e+01 7.81009847e+01
 3.28759649e+01 3.46875723e+01 4.70794347e+00 8.07492419e+00
 3.91550165e-01 1.25056302e+00 8.59998666e+00 4.29641886e+01
 4.91032355e-01 1.19914591e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320453732568545
cond(S) = 204.78978291767524
E1 = -689.1993537084201  E_coul = 184.9177952802886
init E= -504.281558428131
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680291658096061  LUMO = 65.1747520413404
  mo_energy =
[-1.21682246e+02 -1.32885216e+01 -7.62214962e+00 -7.62214962e+00
 -7.62214962e+00 -1.65016378e+00 -6.80291658e-01 -6.80291658e-01
 -6.80291658e-01  6.51747520e+01  4.89914634e+02  2.50968150e+03
  1.24365380e+04  4.54549559e+04  1.32393073e+05]
E1 = -706.6876317593172  E_coul = 198.9695127609291
cycle= 1 E= -507.718118998388  delta_E= -3.44  |g|= 0.336  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.47993
diis-c [-0.23033303  1.        ]
  HOMO = -0.235946841283177  LUMO = 66.479433673209
  mo_energy =
[-1.20284974e+02 -1.22601493e+01 -6.65267361e+00 -6.65267361e+00
 -6.65267361e+00 -1.16362920e+00 -2.35946841e-01 -2.35946841e-01
 -2.35946841e-01  6.64794337e+01  4.91300656e+02  2.51098792e+03
  1.24377148e+04  4.54560553e+04  1.32394122e+05]
E1 = -706.6422604581171  E_coul = 198.9235090575514
cycle= 2 E= -507.718751400566  delta_E= -0.000632  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.0062738
diis-c [-3.90056973e-05  1.23985052e-03  9.98760149e-01]
  HOMO = -0.236222163646433  LUMO = 66.4751374876731
  mo_energy =
[-1.20296758e+02 -1.22619821e+01 -6.65548476e+00 -6.65548476e+00
 -6.65548476e+00 -1.16373172e+00 -2.36222164e-01 -2.36222164e-01
 -2.36222164e-01  6.64751375e+01  4.91287943e+02  2.51096911e+03
  1.24376919e+04  4.54560309e+04  1.32394097e+05]
E1 = -706.6415158241383  E_coul = 198.92276421565626
cycle= 3 E= -507.718751608482  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189898
diis-c [-8.74444995e-10  2.92106496e-05 -3.05482085e-02  1.03051900e+00]
  HOMO = -0.236226690673673  LUMO = 66.4750622076245
  mo_energy =
[-1.20296965e+02 -1.22620137e+01 -6.65553741e+00 -6.65553741e+00
 -6.65553741e+00 -1.16373313e+00 -2.36226691e-01 -2.36226691e-01
 -2.36226691e-01  6.64750622e+01  4.91287738e+02  2.51096884e+03
  1.24376916e+04  4.54560306e+04  1.32394097e+05]
E1 = -706.6415002387743  E_coul = 198.92274863018145
cycle= 4 E= -507.718751608593  delta_E= -1.11e-10  |g|= 6.6e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6415002387743  E_coul = 198.92274863018145
  HOMO = -0.236226653160077  LUMO = 66.475062761265
  mo_energy =
[-1.20296964e+02 -1.22620135e+01 -6.65553706e+00 -6.65553706e+00
 -6.65553706e+00 -1.16373312e+00 -2.36226653e-01 -2.36226653e-01
 -2.36226653e-01  6.64750628e+01  4.91287739e+02  2.51096884e+03
  1.24376916e+04  4.54560306e+04  1.32394097e+05]
E1 = -706.6415003257723  E_coul = 198.9227487171796
Extra cycle  E= -507.718751608593  delta_E= 1.14e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546479e+04 7.34340445e+03 1.83773239e+04 1.41181647e+03
 3.32924675e+02 9.70186694e+01 3.28759649e+01 4.70794347e+00
 3.91550165e-01 8.59998666e+00 4.91032355e-01]
E = -507.7187516085927
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478695        1
[INPUT] 0    0    [1    /1   ]  7343.40445089        1
[INPUT] 0    0    [1    /1   ]  18377.323913         1
[INPUT] 0    0    [1    /1   ]  1411.81646518        1
[INPUT] 0    0    [1    /1   ]  332.924675351        1
[INPUT] 0    0    [1    /1   ]  97.0186693735        1
[INPUT] 0    0    [1    /1   ]  32.8759649327        1
[INPUT] 0    0    [1    /1   ]  4.70794346878        1
[INPUT] 0    0    [1    /1   ]  0.391550165118       1
[INPUT] 1    0    [1    /1   ]  8.59998666415        1
[INPUT] 1    0    [1    /1   ]  0.49103235525        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64786950879, 1.0]], [0, [7343.404450888454, 1.0]], [0, [18377.323913044416, 1.0]], [0, [1411.8164651814523, 1.0]], [0, [332.9246753507534, 1.0]], [0, [97.0186693735103, 1.0]], [0, [32.8759649327149, 1.0]], [0, [4.707943468783013, 1.0]], [0, [0.3915501651183103, 1.0]], [1, [8.599986664145325, 1.0]], [1, [0.4910323552502925, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64786951]
bas 1, expnt(s) = [7343.40445089]
bas 2, expnt(s) = [18377.32391304]
bas 3, expnt(s) = [1411.81646518]
bas 4, expnt(s) = [332.92467535]
bas 5, expnt(s) = [97.01866937]
bas 6, expnt(s) = [32.87596493]
bas 7, expnt(s) = [4.70794347]
bas 8, expnt(s) = [0.39155017]
bas 9, expnt(s) = [8.59998666]
bas 10, expnt(s) = [0.49103236]
CPU time:       158.53
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655088e+03 7.34340445e+03 2.00418640e+03
 1.83773239e+04 3.98773901e+03 1.41181647e+03 5.81900468e+02
 3.32924675e+02 1.96913056e+02 9.70186694e+01 7.81009847e+01
 3.28759649e+01 3.46875723e+01 4.70794347e+00 8.07492419e+00
 3.91550165e-01 1.25056302e+00 8.59998666e+00 4.29641886e+01
 4.91032355e-01 1.19914591e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320453732568545
cond(S) = 204.78978291767524
E1 = -689.1993537084201  E_coul = 184.9177952802886
init E= -504.281558428131
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680291658096061  LUMO = 65.1747520413404
  mo_energy =
[-1.21682246e+02 -1.32885216e+01 -7.62214962e+00 -7.62214962e+00
 -7.62214962e+00 -1.65016378e+00 -6.80291658e-01 -6.80291658e-01
 -6.80291658e-01  6.51747520e+01  4.89914634e+02  2.50968150e+03
  1.24365380e+04  4.54549559e+04  1.32393073e+05]
E1 = -706.6876317593172  E_coul = 198.9695127609291
cycle= 1 E= -507.718118998388  delta_E= -3.44  |g|= 0.336  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.47993
diis-c [-0.23033303  1.        ]
  HOMO = -0.235946841283177  LUMO = 66.479433673209
  mo_energy =
[-1.20284974e+02 -1.22601493e+01 -6.65267361e+00 -6.65267361e+00
 -6.65267361e+00 -1.16362920e+00 -2.35946841e-01 -2.35946841e-01
 -2.35946841e-01  6.64794337e+01  4.91300656e+02  2.51098792e+03
  1.24377148e+04  4.54560553e+04  1.32394122e+05]
E1 = -706.6422604581171  E_coul = 198.9235090575514
cycle= 2 E= -507.718751400566  delta_E= -0.000632  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.0062738
diis-c [-3.90056973e-05  1.23985052e-03  9.98760149e-01]
  HOMO = -0.236222163646433  LUMO = 66.4751374876731
  mo_energy =
[-1.20296758e+02 -1.22619821e+01 -6.65548476e+00 -6.65548476e+00
 -6.65548476e+00 -1.16373172e+00 -2.36222164e-01 -2.36222164e-01
 -2.36222164e-01  6.64751375e+01  4.91287943e+02  2.51096911e+03
  1.24376919e+04  4.54560309e+04  1.32394097e+05]
E1 = -706.6415158241383  E_coul = 198.92276421565626
cycle= 3 E= -507.718751608482  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189898
diis-c [-8.74444995e-10  2.92106496e-05 -3.05482085e-02  1.03051900e+00]
  HOMO = -0.236226690673673  LUMO = 66.4750622076245
  mo_energy =
[-1.20296965e+02 -1.22620137e+01 -6.65553741e+00 -6.65553741e+00
 -6.65553741e+00 -1.16373313e+00 -2.36226691e-01 -2.36226691e-01
 -2.36226691e-01  6.64750622e+01  4.91287738e+02  2.51096884e+03
  1.24376916e+04  4.54560306e+04  1.32394097e+05]
E1 = -706.6415002387743  E_coul = 198.92274863018145
cycle= 4 E= -507.718751608593  delta_E= -1.11e-10  |g|= 6.6e-07  |ddm|= 7.3e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6415002387743  E_coul = 198.92274863018145
  HOMO = -0.236226653160077  LUMO = 66.475062761265
  mo_energy =
[-1.20296964e+02 -1.22620135e+01 -6.65553706e+00 -6.65553706e+00
 -6.65553706e+00 -1.16373312e+00 -2.36226653e-01 -2.36226653e-01
 -2.36226653e-01  6.64750628e+01  4.91287739e+02  2.51096884e+03
  1.24376916e+04  4.54560306e+04  1.32394097e+05]
E1 = -706.6415003257723  E_coul = 198.9227487171796
Extra cycle  E= -507.718751608593  delta_E= 1.14e-13  |g|= 1.28e-08  |ddm|= 4.1e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.78978291767524
E1 = -706.6415003257723  E_coul = 198.9227487171796
init E= -507.718751608593
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236226652650917  LUMO = 66.4750627694345
  mo_energy =
[-1.20296964e+02 -1.22620135e+01 -6.65553705e+00 -6.65553705e+00
 -6.65553705e+00 -1.16373312e+00 -2.36226653e-01 -2.36226653e-01
 -2.36226653e-01  6.64750628e+01  4.91287739e+02  2.51096884e+03
  1.24376916e+04  4.54560306e+04  1.32394097e+05]
E1 = -706.6415003272984  E_coul = 198.9227487187056
cycle= 1 E= -507.718751608593  delta_E= -1.14e-13  |g|= 2.86e-10  |ddm|= 7.07e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6415003272984  E_coul = 198.9227487187056
  HOMO = -0.236226652642877  LUMO = 66.4750627695751
  mo_energy =
[-1.20296964e+02 -1.22620135e+01 -6.65553705e+00 -6.65553705e+00
 -6.65553705e+00 -1.16373312e+00 -2.36226653e-01 -2.36226653e-01
 -2.36226653e-01  6.64750628e+01  4.91287739e+02  2.51096884e+03
  1.24376916e+04  4.54560306e+04  1.32394097e+05]
E1 = -706.641500327329  E_coul = 198.92274871873616
Extra cycle  E= -507.718751608593  delta_E= -5.68e-14  |g|= 1.17e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546479e+04 7.34340445e+03 1.83773239e+04 1.41181647e+03
 3.32924675e+02 9.70186694e+01 3.28759649e+01 4.70794347e+00
 3.91550165e-01 8.59998666e+00 4.91032355e-01]
grad_E = [-2.08454761e-07  2.04278812e-06  6.61635855e-09  9.86883074e-05
 -2.47984690e-04  1.76752109e-04  2.26471146e-04  1.19905465e-03
  8.54486965e-03  1.01517531e-03  2.50340949e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:54 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478934        1
[INPUT] 0    0    [1    /1   ]  7343.40421828        1
[INPUT] 0    0    [1    /1   ]  18377.3239123        1
[INPUT] 0    0    [1    /1   ]  1411.80510115        1
[INPUT] 0    0    [1    /1   ]  332.953941923        1
[INPUT] 0    0    [1    /1   ]  96.9946435038        1
[INPUT] 0    0    [1    /1   ]  32.8547722126        1
[INPUT] 0    0    [1    /1   ]  4.70897092802        1
[INPUT] 0    0    [1    /1   ]  0.391899909622       1
[INPUT] 1    0    [1    /1   ]  8.6007697666         1
[INPUT] 1    0    [1    /1   ]  0.491067860421       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64789339622, 1.0]], [0, [7343.404218280313, 1.0]], [0, [18377.323912315638, 1.0]], [0, [1411.8051011486004, 1.0]], [0, [332.9539419230547, 1.0]], [0, [96.9946435037764, 1.0]], [0, [32.85477221257116, 1.0]], [0, [4.708970928016633, 1.0]], [0, [0.3918999096218489, 1.0]], [1, [8.600769766601251, 1.0]], [1, [0.4910678604211982, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6478934]
bas 1, expnt(s) = [7343.40421828]
bas 2, expnt(s) = [18377.32391232]
bas 3, expnt(s) = [1411.80510115]
bas 4, expnt(s) = [332.95394192]
bas 5, expnt(s) = [96.9946435]
bas 6, expnt(s) = [32.85477221]
bas 7, expnt(s) = [4.70897093]
bas 8, expnt(s) = [0.39189991]
bas 9, expnt(s) = [8.60076977]
bas 10, expnt(s) = [0.49106786]
CPU time:       168.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655089e+03 7.34340422e+03 2.00418635e+03
 1.83773239e+04 3.98773901e+03 1.41180510e+03 5.81896955e+02
 3.32953942e+02 1.96926039e+02 9.69946435e+01 7.80864785e+01
 3.28547722e+01 3.46708005e+01 4.70897093e+00 8.07624586e+00
 3.91899910e-01 1.25140071e+00 8.60076977e+00 4.29690790e+01
 4.91067860e-01 1.19925429e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320350726004033
cond(S) = 204.77822838494706
E1 = -689.2113818291093  E_coul = 184.928491858185
init E= -504.282889970924
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680096475512212  LUMO = 65.1339590817439
  mo_energy =
[-1.21680907e+02 -1.32876671e+01 -7.62132622e+00 -7.62132622e+00
 -7.62132622e+00 -1.65013618e+00 -6.80096476e-01 -6.80096476e-01
 -6.80096476e-01  6.51339591e+01  4.89802617e+02  2.50959625e+03
  1.24364629e+04  4.54548813e+04  1.32393000e+05]
E1 = -706.7025454802234  E_coul = 198.98441677043252
cycle= 1 E= -507.718128709791  delta_E= -3.44  |g|= 0.336  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479934
diis-c [-0.23033711  1.        ]
  HOMO = -0.235649700133781  LUMO = 66.4388831365838
  mo_energy =
[-1.20283065e+02 -1.22590543e+01 -6.65157223e+00 -6.65157223e+00
 -6.65157223e+00 -1.16338153e+00 -2.35649700e-01 -2.35649700e-01
 -2.35649700e-01  6.64388831e+01  4.91189193e+02  2.51090333e+03
  1.24376404e+04  4.54559815e+04  1.32394051e+05]
E1 = -706.6571404303328  E_coul = 198.9383791512592
cycle= 2 E= -507.718761279074  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627505
diis-c [-3.90176029e-05  1.24646181e-03  9.98753538e-01]
  HOMO = -0.235925326206023  LUMO = 66.4345854102655
  mo_energy =
[-1.20294857e+02 -1.22608887e+01 -6.65438559e+00 -6.65438559e+00
 -6.65438559e+00 -1.16348424e+00 -2.35925326e-01 -2.35925326e-01
 -2.35925326e-01  6.64345854e+01  4.91176472e+02  2.51088450e+03
  1.24376174e+04  4.54559570e+04  1.32394025e+05]
E1 = -706.6563950290182  E_coul = 198.93763354186189
cycle= 3 E= -507.718761487156  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190032
diis-c [-8.75923348e-10  2.91824661e-05 -3.05635300e-02  1.03053435e+00]
  HOMO = -0.23592986185118  LUMO = 66.4345100497224
  mo_energy =
[-1.20295064e+02 -1.22609204e+01 -6.65443831e+00 -6.65443831e+00
 -6.65443831e+00 -1.16348566e+00 -2.35929862e-01 -2.35929862e-01
 -2.35929862e-01  6.64345100e+01  4.91176266e+02  2.51088423e+03
  1.24376171e+04  4.54559567e+04  1.32394025e+05]
E1 = -706.6563794181336  E_coul = 198.9376179308664
cycle= 4 E= -507.718761487267  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6563794181336  E_coul = 198.9376179308664
  HOMO = -0.235929824257189  LUMO = 66.4345106040374
  mo_energy =
[-1.20295063e+02 -1.22609201e+01 -6.65443796e+00 -6.65443796e+00
 -6.65443796e+00 -1.16348564e+00 -2.35929824e-01 -2.35929824e-01
 -2.35929824e-01  6.64345106e+01  4.91176267e+02  2.51088423e+03
  1.24376171e+04  4.54559567e+04  1.32394025e+05]
E1 = -706.6563795053022  E_coul = 198.93761801803512
Extra cycle  E= -507.718761487267  delta_E= 1.14e-13  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546479e+04 7.34340422e+03 1.83773239e+04 1.41180510e+03
 3.32953942e+02 9.69946435e+01 3.28547722e+01 4.70897093e+00
 3.91899910e-01 8.60076977e+00 4.91067860e-01]
E = -507.7187614872671
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:28:54 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6478934        1
[INPUT] 0    0    [1    /1   ]  7343.40421828        1
[INPUT] 0    0    [1    /1   ]  18377.3239123        1
[INPUT] 0    0    [1    /1   ]  1411.80510115        1
[INPUT] 0    0    [1    /1   ]  332.953941923        1
[INPUT] 0    0    [1    /1   ]  96.9946435038        1
[INPUT] 0    0    [1    /1   ]  32.8547722126        1
[INPUT] 0    0    [1    /1   ]  4.70897092802        1
[INPUT] 0    0    [1    /1   ]  0.391899909622       1
[INPUT] 1    0    [1    /1   ]  8.6007697666         1
[INPUT] 1    0    [1    /1   ]  0.491067860421       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64789339622, 1.0]], [0, [7343.404218280313, 1.0]], [0, [18377.323912315638, 1.0]], [0, [1411.8051011486004, 1.0]], [0, [332.9539419230547, 1.0]], [0, [96.9946435037764, 1.0]], [0, [32.85477221257116, 1.0]], [0, [4.708970928016633, 1.0]], [0, [0.3918999096218489, 1.0]], [1, [8.600769766601251, 1.0]], [1, [0.4910678604211982, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6478934]
bas 1, expnt(s) = [7343.40421828]
bas 2, expnt(s) = [18377.32391232]
bas 3, expnt(s) = [1411.80510115]
bas 4, expnt(s) = [332.95394192]
bas 5, expnt(s) = [96.9946435]
bas 6, expnt(s) = [32.85477221]
bas 7, expnt(s) = [4.70897093]
bas 8, expnt(s) = [0.39189991]
bas 9, expnt(s) = [8.60076977]
bas 10, expnt(s) = [0.49106786]
CPU time:       169.71
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546479e+04 6.70655089e+03 7.34340422e+03 2.00418635e+03
 1.83773239e+04 3.98773901e+03 1.41180510e+03 5.81896955e+02
 3.32953942e+02 1.96926039e+02 9.69946435e+01 7.80864785e+01
 3.28547722e+01 3.46708005e+01 4.70897093e+00 8.07624586e+00
 3.91899910e-01 1.25140071e+00 8.60076977e+00 4.29690790e+01
 4.91067860e-01 1.19925429e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320350726004033
cond(S) = 204.77822838494706
E1 = -689.2113818291093  E_coul = 184.928491858185
init E= -504.282889970924
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680096475512212  LUMO = 65.1339590817439
  mo_energy =
[-1.21680907e+02 -1.32876671e+01 -7.62132622e+00 -7.62132622e+00
 -7.62132622e+00 -1.65013618e+00 -6.80096476e-01 -6.80096476e-01
 -6.80096476e-01  6.51339591e+01  4.89802617e+02  2.50959625e+03
  1.24364629e+04  4.54548813e+04  1.32393000e+05]
E1 = -706.7025454802234  E_coul = 198.98441677043252
cycle= 1 E= -507.718128709791  delta_E= -3.44  |g|= 0.336  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479934
diis-c [-0.23033711  1.        ]
  HOMO = -0.235649700133781  LUMO = 66.4388831365838
  mo_energy =
[-1.20283065e+02 -1.22590543e+01 -6.65157223e+00 -6.65157223e+00
 -6.65157223e+00 -1.16338153e+00 -2.35649700e-01 -2.35649700e-01
 -2.35649700e-01  6.64388831e+01  4.91189193e+02  2.51090333e+03
  1.24376404e+04  4.54559815e+04  1.32394051e+05]
E1 = -706.6571404303328  E_coul = 198.9383791512592
cycle= 2 E= -507.718761279074  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00627505
diis-c [-3.90176029e-05  1.24646181e-03  9.98753538e-01]
  HOMO = -0.235925326206023  LUMO = 66.4345854102655
  mo_energy =
[-1.20294857e+02 -1.22608887e+01 -6.65438559e+00 -6.65438559e+00
 -6.65438559e+00 -1.16348424e+00 -2.35925326e-01 -2.35925326e-01
 -2.35925326e-01  6.64345854e+01  4.91176472e+02  2.51088450e+03
  1.24376174e+04  4.54559570e+04  1.32394025e+05]
E1 = -706.6563950290182  E_coul = 198.93763354186189
cycle= 3 E= -507.718761487156  delta_E= -2.08e-07  |g|= 0.00014  |ddm|= 0.000347
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190032
diis-c [-8.75923348e-10  2.91824661e-05 -3.05635300e-02  1.03053435e+00]
  HOMO = -0.23592986185118  LUMO = 66.4345100497224
  mo_energy =
[-1.20295064e+02 -1.22609204e+01 -6.65443831e+00 -6.65443831e+00
 -6.65443831e+00 -1.16348566e+00 -2.35929862e-01 -2.35929862e-01
 -2.35929862e-01  6.64345100e+01  4.91176266e+02  2.51088423e+03
  1.24376171e+04  4.54559567e+04  1.32394025e+05]
E1 = -706.6563794181336  E_coul = 198.9376179308664
cycle= 4 E= -507.718761487267  delta_E= -1.11e-10  |g|= 6.61e-07  |ddm|= 7.31e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6563794181336  E_coul = 198.9376179308664
  HOMO = -0.235929824257189  LUMO = 66.4345106040374
  mo_energy =
[-1.20295063e+02 -1.22609201e+01 -6.65443796e+00 -6.65443796e+00
 -6.65443796e+00 -1.16348564e+00 -2.35929824e-01 -2.35929824e-01
 -2.35929824e-01  6.64345106e+01  4.91176267e+02  2.51088423e+03
  1.24376171e+04  4.54559567e+04  1.32394025e+05]
E1 = -706.6563795053022  E_coul = 198.93761801803512
Extra cycle  E= -507.718761487267  delta_E= 1.14e-13  |g|= 1.28e-08  |ddm|= 4.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.77822838494706
E1 = -706.6563795053022  E_coul = 198.93761801803512
init E= -507.718761487267
    CPU time for initialize scf      2.25 sec, wall time      0.14 sec
  HOMO = -0.235929823746717  LUMO = 66.4345106122218
  mo_energy =
[-1.20295063e+02 -1.22609201e+01 -6.65443796e+00 -6.65443796e+00
 -6.65443796e+00 -1.16348564e+00 -2.35929824e-01 -2.35929824e-01
 -2.35929824e-01  6.64345106e+01  4.91176267e+02  2.51088423e+03
  1.24376171e+04  4.54559567e+04  1.32394025e+05]
E1 = -706.6563795068317  E_coul = 198.93761801956452
cycle= 1 E= -507.718761487267  delta_E= -1.14e-13  |g|= 2.85e-10  |ddm|= 7.09e-10
    CPU time for cycle= 1      0.35 sec, wall time      0.02 sec
E1 = -706.6563795068317  E_coul = 198.93761801956452
  HOMO = -0.235929823738654  LUMO = 66.4345106123623
  mo_energy =
[-1.20295063e+02 -1.22609201e+01 -6.65443796e+00 -6.65443796e+00
 -6.65443796e+00 -1.16348564e+00 -2.35929824e-01 -2.35929824e-01
 -2.35929824e-01  6.64345106e+01  4.91176267e+02  2.51088423e+03
  1.24376171e+04  4.54559567e+04  1.32394025e+05]
E1 = -706.6563795068616  E_coul = 198.9376180195946
Extra cycle  E= -507.718761487267  delta_E= 1.71e-13  |g|= 1.16e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.74 sec, wall time      0.30 sec
exp = [3.67546479e+04 7.34340422e+03 1.83773239e+04 1.41180510e+03
 3.32953942e+02 9.69946435e+01 3.28547722e+01 4.70897093e+00
 3.91899910e-01 8.60076977e+00 4.91067860e-01]
grad_E = [-2.08264484e-07  2.05043892e-06  6.80306271e-09  9.82941209e-05
 -2.45148414e-04  1.86834696e-04  1.54058946e-04  2.03790007e-03
  1.43602813e-02  1.71573564e-03  4.21149559e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:29:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6479538        1
[INPUT] 0    0    [1    /1   ]  7343.40363086        1
[INPUT] 0    0    [1    /1   ]  18377.3239105        1
[INPUT] 0    0    [1    /1   ]  1411.77633861        1
[INPUT] 0    0    [1    /1   ]  333.028504383        1
[INPUT] 0    0    [1    /1   ]  96.9304118475        1
[INPUT] 0    0    [1    /1   ]  32.8088641587        1
[INPUT] 0    0    [1    /1   ]  4.71027157962        1
[INPUT] 0    0    [1    /1   ]  0.392355015873       1
[INPUT] 1    0    [1    /1   ]  8.60179675371        1
[INPUT] 1    0    [1    /1   ]  0.491114634956       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647953794854, 1.0]], [0, [7343.403630857164, 1.0]], [0, [18377.323910487477, 1.0]], [0, [1411.7763386137908, 1.0]], [0, [333.0285043825868, 1.0]], [0, [96.93041184752704, 1.0]], [0, [32.808864158685374, 1.0]], [0, [4.710271579622264, 1.0]], [0, [0.392355015873371, 1.0]], [1, [8.601796753712813, 1.0]], [1, [0.4911146349563289, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64795379]
bas 1, expnt(s) = [7343.40363086]
bas 2, expnt(s) = [18377.32391049]
bas 3, expnt(s) = [1411.77633861]
bas 4, expnt(s) = [333.02850438]
bas 5, expnt(s) = [96.93041185]
bas 6, expnt(s) = [32.80886416]
bas 7, expnt(s) = [4.71027158]
bas 8, expnt(s) = [0.39235502]
bas 9, expnt(s) = [8.60179675]
bas 10, expnt(s) = [0.49111463]
CPU time:       179.93
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546480e+04 6.70655089e+03 7.34340363e+03 2.00418623e+03
 1.83773239e+04 3.98773901e+03 1.41177634e+03 5.81888063e+02
 3.33028504e+02 1.96959113e+02 9.69304118e+01 7.80476925e+01
 3.28088642e+01 3.46344600e+01 4.71027158e+00 8.07791884e+00
 3.92355016e-01 1.25249047e+00 8.60179675e+00 4.29754926e+01
 4.91114635e-01 1.19939708e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320215472874406
cond(S) = 204.75031685963228
E1 = -689.2269741671964  E_coul = 184.94236475391403
init E= -504.284609413282
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.679842909640662  LUMO = 65.0345713813292
  mo_energy =
[-1.21679187e+02 -1.32865460e+01 -7.62026114e+00 -7.62026114e+00
 -7.62026114e+00 -1.65009586e+00 -6.79842910e-01 -6.79842910e-01
 -6.79842910e-01  6.50345714e+01  4.89531397e+02  2.50939079e+03
  1.24362814e+04  4.54547004e+04  1.32392824e+05]
E1 = -706.7219681820759  E_coul = 199.00381745970313
cycle= 1 E= -507.718150722373  delta_E= -3.43  |g|= 0.336  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479907
diis-c [-0.23031104  1.        ]
  HOMO = -0.2352626213062  LUMO = 66.3397248590145
  mo_energy =
[-1.20280595e+02 -1.22576181e+01 -6.65014057e+00 -6.65014057e+00
 -6.65014057e+00 -1.16305544e+00 -2.35262621e-01 -2.35262621e-01
 -2.35262621e-01  6.63397249e+01  4.90918684e+02  2.51069870e+03
  1.24374598e+04  4.54558014e+04  1.32393875e+05]
E1 = -706.676474187796  E_coul = 198.9576900153492
cycle= 2 E= -507.718784172447  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628066
diis-c [-3.90807889e-05  1.25889125e-03  9.98741109e-01]
  HOMO = -0.235538970735441  LUMO = 66.3354224978852
  mo_energy =
[-1.20292406e+02 -1.22594568e+01 -6.65295992e+00 -6.65295992e+00
 -6.65295992e+00 -1.16315852e+00 -2.35538971e-01 -2.35538971e-01
 -2.35538971e-01  6.63354225e+01  4.90905941e+02  2.51067983e+03
  1.24374368e+04  4.54557769e+04  1.32393850e+05]
E1 = -706.6757267790395  E_coul = 198.9569423979499
cycle= 3 E= -507.71878438109  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000348
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190397
diis-c [-8.79773165e-10  2.91227621e-05 -3.05951428e-02  1.03056602e+00]
  HOMO = -0.235543525607206  LUMO = 66.3353469393918
  mo_energy =
[-1.20292614e+02 -1.22594886e+01 -6.65301283e+00 -6.65301283e+00
 -6.65301283e+00 -1.16315995e+00 -2.35543526e-01 -2.35543526e-01
 -2.35543526e-01  6.63353469e+01  4.90905734e+02  2.51067957e+03
  1.24374365e+04  4.54557766e+04  1.32393850e+05]
E1 = -706.6757111056171  E_coul = 198.9569267244165
cycle= 4 E= -507.718784381201  delta_E= -1.11e-10  |g|= 6.63e-07  |ddm|= 7.33e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6757111056171  E_coul = 198.9569267244165
  HOMO = -0.23554348783084  LUMO = 66.335347495301
  mo_energy =
[-1.20292613e+02 -1.22594884e+01 -6.65301248e+00 -6.65301248e+00
 -6.65301248e+00 -1.16315993e+00 -2.35543488e-01 -2.35543488e-01
 -2.35543488e-01  6.63353475e+01  4.90905736e+02  2.51067957e+03
  1.24374365e+04  4.54557766e+04  1.32393850e+05]
E1 = -706.6757111931865  E_coul = 198.9569268119856
Extra cycle  E= -507.718784381201  delta_E= -3.41e-13  |g|= 1.28e-08  |ddm|= 4.13e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546480e+04 7.34340363e+03 1.83773239e+04 1.41177634e+03
 3.33028504e+02 9.69304118e+01 3.28088642e+01 4.71027158e+00
 3.92355016e-01 8.60179675e+00 4.91114635e-01]
E = -507.718784381201
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:29:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6479538        1
[INPUT] 0    0    [1    /1   ]  7343.40363086        1
[INPUT] 0    0    [1    /1   ]  18377.3239105        1
[INPUT] 0    0    [1    /1   ]  1411.77633861        1
[INPUT] 0    0    [1    /1   ]  333.028504383        1
[INPUT] 0    0    [1    /1   ]  96.9304118475        1
[INPUT] 0    0    [1    /1   ]  32.8088641587        1
[INPUT] 0    0    [1    /1   ]  4.71027157962        1
[INPUT] 0    0    [1    /1   ]  0.392355015873       1
[INPUT] 1    0    [1    /1   ]  8.60179675371        1
[INPUT] 1    0    [1    /1   ]  0.491114634956       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.647953794854, 1.0]], [0, [7343.403630857164, 1.0]], [0, [18377.323910487477, 1.0]], [0, [1411.7763386137908, 1.0]], [0, [333.0285043825868, 1.0]], [0, [96.93041184752704, 1.0]], [0, [32.808864158685374, 1.0]], [0, [4.710271579622264, 1.0]], [0, [0.392355015873371, 1.0]], [1, [8.601796753712813, 1.0]], [1, [0.4911146349563289, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64795379]
bas 1, expnt(s) = [7343.40363086]
bas 2, expnt(s) = [18377.32391049]
bas 3, expnt(s) = [1411.77633861]
bas 4, expnt(s) = [333.02850438]
bas 5, expnt(s) = [96.93041185]
bas 6, expnt(s) = [32.80886416]
bas 7, expnt(s) = [4.71027158]
bas 8, expnt(s) = [0.39235502]
bas 9, expnt(s) = [8.60179675]
bas 10, expnt(s) = [0.49111463]
CPU time:       181.08
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546480e+04 6.70655089e+03 7.34340363e+03 2.00418623e+03
 1.83773239e+04 3.98773901e+03 1.41177634e+03 5.81888063e+02
 3.33028504e+02 1.96959113e+02 9.69304118e+01 7.80476925e+01
 3.28088642e+01 3.46344600e+01 4.71027158e+00 8.07791884e+00
 3.92355016e-01 1.25249047e+00 8.60179675e+00 4.29754926e+01
 4.91114635e-01 1.19939708e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320215472874406
cond(S) = 204.75031685963228
E1 = -689.2269741671964  E_coul = 184.94236475391403
init E= -504.284609413282
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.679842909640662  LUMO = 65.0345713813292
  mo_energy =
[-1.21679187e+02 -1.32865460e+01 -7.62026114e+00 -7.62026114e+00
 -7.62026114e+00 -1.65009586e+00 -6.79842910e-01 -6.79842910e-01
 -6.79842910e-01  6.50345714e+01  4.89531397e+02  2.50939079e+03
  1.24362814e+04  4.54547004e+04  1.32392824e+05]
E1 = -706.7219681820759  E_coul = 199.00381745970313
cycle= 1 E= -507.718150722373  delta_E= -3.43  |g|= 0.336  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479907
diis-c [-0.23031104  1.        ]
  HOMO = -0.2352626213062  LUMO = 66.3397248590145
  mo_energy =
[-1.20280595e+02 -1.22576181e+01 -6.65014057e+00 -6.65014057e+00
 -6.65014057e+00 -1.16305544e+00 -2.35262621e-01 -2.35262621e-01
 -2.35262621e-01  6.63397249e+01  4.90918684e+02  2.51069870e+03
  1.24374598e+04  4.54558014e+04  1.32393875e+05]
E1 = -706.676474187796  E_coul = 198.9576900153492
cycle= 2 E= -507.718784172447  delta_E= -0.000633  |g|= 0.00582  |ddm|= 0.0216
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00628066
diis-c [-3.90807889e-05  1.25889125e-03  9.98741109e-01]
  HOMO = -0.235538970735441  LUMO = 66.3354224978852
  mo_energy =
[-1.20292406e+02 -1.22594568e+01 -6.65295992e+00 -6.65295992e+00
 -6.65295992e+00 -1.16315852e+00 -2.35538971e-01 -2.35538971e-01
 -2.35538971e-01  6.63354225e+01  4.90905941e+02  2.51067983e+03
  1.24374368e+04  4.54557769e+04  1.32393850e+05]
E1 = -706.6757267790395  E_coul = 198.9569423979499
cycle= 3 E= -507.71878438109  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000348
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190397
diis-c [-8.79773165e-10  2.91227621e-05 -3.05951428e-02  1.03056602e+00]
  HOMO = -0.235543525607206  LUMO = 66.3353469393918
  mo_energy =
[-1.20292614e+02 -1.22594886e+01 -6.65301283e+00 -6.65301283e+00
 -6.65301283e+00 -1.16315995e+00 -2.35543526e-01 -2.35543526e-01
 -2.35543526e-01  6.63353469e+01  4.90905734e+02  2.51067957e+03
  1.24374365e+04  4.54557766e+04  1.32393850e+05]
E1 = -706.6757111056171  E_coul = 198.9569267244165
cycle= 4 E= -507.718784381201  delta_E= -1.11e-10  |g|= 6.63e-07  |ddm|= 7.33e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6757111056171  E_coul = 198.9569267244165
  HOMO = -0.23554348783084  LUMO = 66.335347495301
  mo_energy =
[-1.20292613e+02 -1.22594884e+01 -6.65301248e+00 -6.65301248e+00
 -6.65301248e+00 -1.16315993e+00 -2.35543488e-01 -2.35543488e-01
 -2.35543488e-01  6.63353475e+01  4.90905736e+02  2.51067957e+03
  1.24374365e+04  4.54557766e+04  1.32393850e+05]
E1 = -706.6757111931865  E_coul = 198.9569268119856
Extra cycle  E= -507.718784381201  delta_E= -3.41e-13  |g|= 1.28e-08  |ddm|= 4.13e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.75031685963228
E1 = -706.6757111931865  E_coul = 198.9569268119856
init E= -507.718784381201
    CPU time for initialize scf      2.04 sec, wall time      0.13 sec
  HOMO = -0.23554348731742  LUMO = 66.335347503514
  mo_energy =
[-1.20292613e+02 -1.22594884e+01 -6.65301247e+00 -6.65301247e+00
 -6.65301247e+00 -1.16315993e+00 -2.35543487e-01 -2.35543487e-01
 -2.35543487e-01  6.63353475e+01  4.90905736e+02  2.51067957e+03
  1.24374365e+04  4.54557766e+04  1.32393850e+05]
E1 = -706.6757111947235  E_coul = 198.9569268135228
cycle= 1 E= -507.718784381201  delta_E= 3.41e-13  |g|= 2.86e-10  |ddm|= 7.12e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6757111947235  E_coul = 198.9569268135228
  HOMO = -0.235543487309307  LUMO = 66.3353475036555
  mo_energy =
[-1.20292613e+02 -1.22594884e+01 -6.65301247e+00 -6.65301247e+00
 -6.65301247e+00 -1.16315993e+00 -2.35543487e-01 -2.35543487e-01
 -2.35543487e-01  6.63353475e+01  4.90905736e+02  2.51067957e+03
  1.24374365e+04  4.54557766e+04  1.32393850e+05]
E1 = -706.6757111947538  E_coul = 198.956926813553
Extra cycle  E= -507.718784381201  delta_E= -2.27e-13  |g|= 1.2e-11  |ddm|= 1.41e-11
    CPU time for scf_cycle      2.55 sec, wall time      0.31 sec
exp = [3.67546480e+04 7.34340363e+03 1.83773239e+04 1.41177634e+03
 3.33028504e+02 9.69304118e+01 3.28088642e+01 4.71027158e+00
 3.92355016e-01 8.60179675e+00 4.91114635e-01]
grad_E = [-2.07668604e-07  2.07427977e-06  7.39293893e-09  9.70203892e-05
 -2.33182085e-04  1.84338463e-04  3.91392237e-05  3.13315980e-03
  2.19427550e-02  2.62968214e-03  6.43810913e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:29:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6480792        1
[INPUT] 0    0    [1    /1   ]  7343.402412          1
[INPUT] 0    0    [1    /1   ]  18377.3239067        1
[INPUT] 0    0    [1    /1   ]  1411.71657639        1
[INPUT] 0    0    [1    /1   ]  333.184064955        1
[INPUT] 0    0    [1    /1   ]  96.7924259968        1
[INPUT] 0    0    [1    /1   ]  32.7238203681        1
[INPUT] 0    0    [1    /1   ]  4.71122768181        1
[INPUT] 0    0    [1    /1   ]  0.392722321157       1
[INPUT] 1    0    [1    /1   ]  8.60264724636        1
[INPUT] 1    0    [1    /1   ]  0.491153958291       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64807921179, 1.0]], [0, [7343.402412000959, 1.0]], [0, [18377.3239067099, 1.0]], [0, [1411.7165763852877, 1.0]], [0, [333.184064955238, 1.0]], [0, [96.79242599680813, 1.0]], [0, [32.723820368061084, 1.0]], [0, [4.7112276818053065, 1.0]], [0, [0.39272232115719724, 1.0]], [1, [8.602647246358755, 1.0]], [1, [0.4911539582906548, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64807921]
bas 1, expnt(s) = [7343.402412]
bas 2, expnt(s) = [18377.32390671]
bas 3, expnt(s) = [1411.71657639]
bas 4, expnt(s) = [333.18406496]
bas 5, expnt(s) = [96.792426]
bas 6, expnt(s) = [32.72382037]
bas 7, expnt(s) = [4.71122768]
bas 8, expnt(s) = [0.39272232]
bas 9, expnt(s) = [8.60264725]
bas 10, expnt(s) = [0.49115396]
CPU time:       191.23
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546481e+04 6.70655091e+03 7.34340241e+03 2.00418598e+03
 1.83773239e+04 3.98773901e+03 1.41171658e+03 5.81869589e+02
 3.33184065e+02 1.97028110e+02 9.67924260e+01 7.79643488e+01
 3.27238204e+01 3.45671062e+01 4.71122768e+00 8.07914856e+00
 3.92722321e-01 1.25336976e+00 8.60264725e+00 4.29808041e+01
 4.91153958e-01 1.19951713e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32010593678328
cond(S) = 204.69419892686764
E1 = -689.2394900224042  E_coul = 184.95349815552177
init E= -504.285991866882
    CPU time for initialize scf      0.37 sec, wall time      0.06 sec
  HOMO = -0.679637251501813  LUMO = 64.833265970713
  mo_energy =
[-1.21677846e+02 -1.32856139e+01 -7.61941419e+00 -7.61941419e+00
 -7.61941419e+00 -1.65005405e+00 -6.79637252e-01 -6.79637252e-01
 -6.79637252e-01  6.48332660e+01  4.88984171e+02  2.50897775e+03
  1.24359160e+04  4.54543350e+04  1.32392467e+05]
E1 = -706.7377175563246  E_coul = 199.01952567130348
cycle= 1 E= -507.718191885021  delta_E= -3.43  |g|= 0.336  |ddm|= 0.299
    CPU time for cycle= 1      0.42 sec, wall time      0.03 sec
diis-norm(errvec)=0.4798
diis-c [-0.23020795  1.        ]
  HOMO = -0.234948513407525  LUMO = 66.1383769955174
  mo_energy =
[-1.20278626e+02 -1.22564285e+01 -6.64898681e+00 -6.64898681e+00
 -6.64898681e+00 -1.16278527e+00 -2.34948513e-01 -2.34948513e-01
 -2.34948513e-01  6.61383770e+01  4.90372004e+02  2.51028626e+03
  1.24370951e+04  4.54554368e+04  1.32393520e+05]
E1 = -706.6920334340527  E_coul = 198.97320564594847
cycle= 2 E= -507.718827788104  delta_E= -0.000636  |g|= 0.00583  |ddm|= 0.0217
    CPU time for cycle= 2      0.14 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629559
diis-c [-3.92569676e-05  1.27895666e-03  9.98721043e-01]
  HOMO = -0.235226310200728  LUMO = 66.1340640026876
  mo_energy =
[-1.20290480e+02 -1.22582762e+01 -6.65181921e+00 -6.65181921e+00
 -6.65181921e+00 -1.16288899e+00 -2.35226310e-01 -2.35226310e-01
 -2.35226310e-01  6.61340640e+01  4.90359216e+02  2.51026733e+03
  1.24370720e+04  4.54554122e+04  1.32393494e+05]
E1 = -706.6912817497988  E_coul = 198.9724537516924
cycle= 3 E= -507.718827998106  delta_E= -2.1e-07  |g|= 0.000141  |ddm|= 0.000349
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000191191
diis-c [-8.87966656e-10  2.90140392e-05 -3.06512618e-02  1.03062225e+00]
  HOMO = -0.235230901714254  LUMO = 66.1339880395425
  mo_energy =
[-1.20290689e+02 -1.22583083e+01 -6.65187250e+00 -6.65187250e+00
 -6.65187250e+00 -1.16289043e+00 -2.35230902e-01 -2.35230902e-01
 -2.35230902e-01  6.61339880e+01  4.90359008e+02  2.51026707e+03
  1.24370717e+04  4.54554119e+04  1.32393494e+05]
E1 = -706.6912659485798  E_coul = 198.97243795036104
cycle= 4 E= -507.718827998219  delta_E= -1.12e-10  |g|= 6.67e-07  |ddm|= 7.39e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6912659485798  E_coul = 198.97243795036104
  HOMO = -0.235230863585505  LUMO = 66.1339885986055
  mo_energy =
[-1.20290688e+02 -1.22583080e+01 -6.65187214e+00 -6.65187214e+00
 -6.65187214e+00 -1.16289042e+00 -2.35230864e-01 -2.35230864e-01
 -2.35230864e-01  6.61339886e+01  4.90359009e+02  2.51026707e+03
  1.24370717e+04  4.54554119e+04  1.32393494e+05]
E1 = -706.6912660369427  E_coul = 198.97243803872394
Extra cycle  E= -507.718827998219  delta_E=    0  |g|= 1.29e-08  |ddm|= 4.16e-08
    CPU time for scf_cycle      1.03 sec, wall time      0.22 sec
exp = [3.67546481e+04 7.34340241e+03 1.83773239e+04 1.41171658e+03
 3.33184065e+02 9.67924260e+01 3.27238204e+01 4.71122768e+00
 3.92722321e-01 8.60264725e+00 4.91153958e-01]
E = -507.7188279982188
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:29:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6480792        1
[INPUT] 0    0    [1    /1   ]  7343.402412          1
[INPUT] 0    0    [1    /1   ]  18377.3239067        1
[INPUT] 0    0    [1    /1   ]  1411.71657639        1
[INPUT] 0    0    [1    /1   ]  333.184064955        1
[INPUT] 0    0    [1    /1   ]  96.7924259968        1
[INPUT] 0    0    [1    /1   ]  32.7238203681        1
[INPUT] 0    0    [1    /1   ]  4.71122768181        1
[INPUT] 0    0    [1    /1   ]  0.392722321157       1
[INPUT] 1    0    [1    /1   ]  8.60264724636        1
[INPUT] 1    0    [1    /1   ]  0.491153958291       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64807921179, 1.0]], [0, [7343.402412000959, 1.0]], [0, [18377.3239067099, 1.0]], [0, [1411.7165763852877, 1.0]], [0, [333.184064955238, 1.0]], [0, [96.79242599680813, 1.0]], [0, [32.723820368061084, 1.0]], [0, [4.7112276818053065, 1.0]], [0, [0.39272232115719724, 1.0]], [1, [8.602647246358755, 1.0]], [1, [0.4911539582906548, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64807921]
bas 1, expnt(s) = [7343.402412]
bas 2, expnt(s) = [18377.32390671]
bas 3, expnt(s) = [1411.71657639]
bas 4, expnt(s) = [333.18406496]
bas 5, expnt(s) = [96.792426]
bas 6, expnt(s) = [32.72382037]
bas 7, expnt(s) = [4.71122768]
bas 8, expnt(s) = [0.39272232]
bas 9, expnt(s) = [8.60264725]
bas 10, expnt(s) = [0.49115396]
CPU time:       192.48
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546481e+04 6.70655091e+03 7.34340241e+03 2.00418598e+03
 1.83773239e+04 3.98773901e+03 1.41171658e+03 5.81869589e+02
 3.33184065e+02 1.97028110e+02 9.67924260e+01 7.79643488e+01
 3.27238204e+01 3.45671062e+01 4.71122768e+00 8.07914856e+00
 3.92722321e-01 1.25336976e+00 8.60264725e+00 4.29808041e+01
 4.91153958e-01 1.19951713e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32010593678328
cond(S) = 204.69419892686764
E1 = -689.2394900224042  E_coul = 184.95349815552177
init E= -504.285991866882
    CPU time for initialize scf      0.58 sec, wall time      0.08 sec
  HOMO = -0.679637251501813  LUMO = 64.833265970713
  mo_energy =
[-1.21677846e+02 -1.32856139e+01 -7.61941419e+00 -7.61941419e+00
 -7.61941419e+00 -1.65005405e+00 -6.79637252e-01 -6.79637252e-01
 -6.79637252e-01  6.48332660e+01  4.88984171e+02  2.50897775e+03
  1.24359160e+04  4.54543350e+04  1.32392467e+05]
E1 = -706.7377175563246  E_coul = 199.01952567130348
cycle= 1 E= -507.718191885021  delta_E= -3.43  |g|= 0.336  |ddm|= 0.299
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.4798
diis-c [-0.23020795  1.        ]
  HOMO = -0.234948513407525  LUMO = 66.1383769955174
  mo_energy =
[-1.20278626e+02 -1.22564285e+01 -6.64898681e+00 -6.64898681e+00
 -6.64898681e+00 -1.16278527e+00 -2.34948513e-01 -2.34948513e-01
 -2.34948513e-01  6.61383770e+01  4.90372004e+02  2.51028626e+03
  1.24370951e+04  4.54554368e+04  1.32393520e+05]
E1 = -706.6920334340527  E_coul = 198.97320564594847
cycle= 2 E= -507.718827788104  delta_E= -0.000636  |g|= 0.00583  |ddm|= 0.0217
    CPU time for cycle= 2      0.20 sec, wall time      0.05 sec
diis-norm(errvec)=0.00629559
diis-c [-3.92569676e-05  1.27895666e-03  9.98721043e-01]
  HOMO = -0.235226310200728  LUMO = 66.1340640026876
  mo_energy =
[-1.20290480e+02 -1.22582762e+01 -6.65181921e+00 -6.65181921e+00
 -6.65181921e+00 -1.16288899e+00 -2.35226310e-01 -2.35226310e-01
 -2.35226310e-01  6.61340640e+01  4.90359216e+02  2.51026733e+03
  1.24370720e+04  4.54554122e+04  1.32393494e+05]
E1 = -706.6912817497988  E_coul = 198.9724537516924
cycle= 3 E= -507.718827998106  delta_E= -2.1e-07  |g|= 0.000141  |ddm|= 0.000349
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000191191
diis-c [-8.87966656e-10  2.90140392e-05 -3.06512618e-02  1.03062225e+00]
  HOMO = -0.235230901714254  LUMO = 66.1339880395425
  mo_energy =
[-1.20290689e+02 -1.22583083e+01 -6.65187250e+00 -6.65187250e+00
 -6.65187250e+00 -1.16289043e+00 -2.35230902e-01 -2.35230902e-01
 -2.35230902e-01  6.61339880e+01  4.90359008e+02  2.51026707e+03
  1.24370717e+04  4.54554119e+04  1.32393494e+05]
E1 = -706.6912659485798  E_coul = 198.97243795036104
cycle= 4 E= -507.718827998219  delta_E= -1.12e-10  |g|= 6.67e-07  |ddm|= 7.39e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6912659485798  E_coul = 198.97243795036104
  HOMO = -0.235230863585505  LUMO = 66.1339885986055
  mo_energy =
[-1.20290688e+02 -1.22583080e+01 -6.65187214e+00 -6.65187214e+00
 -6.65187214e+00 -1.16289042e+00 -2.35230864e-01 -2.35230864e-01
 -2.35230864e-01  6.61339886e+01  4.90359009e+02  2.51026707e+03
  1.24370717e+04  4.54554119e+04  1.32393494e+05]
E1 = -706.6912660369427  E_coul = 198.97243803872394
Extra cycle  E= -507.718827998219  delta_E=    0  |g|= 1.29e-08  |ddm|= 4.16e-08
    CPU time for scf_cycle      1.23 sec, wall time      0.23 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.69419892686764
E1 = -706.6912660369427  E_coul = 198.97243803872394
init E= -507.718827998219
    CPU time for initialize scf      2.05 sec, wall time      0.13 sec
  HOMO = -0.23523086306646  LUMO = 66.1339886068761
  mo_energy =
[-1.20290688e+02 -1.22583080e+01 -6.65187214e+00 -6.65187214e+00
 -6.65187214e+00 -1.16289042e+00 -2.35230863e-01 -2.35230863e-01
 -2.35230863e-01  6.61339886e+01  4.90359009e+02  2.51026707e+03
  1.24370717e+04  4.54554119e+04  1.32393494e+05]
E1 = -706.6912660384963  E_coul = 198.97243804027758
cycle= 1 E= -507.718827998219  delta_E=    0  |g|= 2.9e-10  |ddm|= 7.19e-10
    CPU time for cycle= 1      0.40 sec, wall time      0.04 sec
E1 = -706.6912660384963  E_coul = 198.97243804027758
  HOMO = -0.235230863058242  LUMO = 66.1339886070195
  mo_energy =
[-1.20290688e+02 -1.22583080e+01 -6.65187214e+00 -6.65187214e+00
 -6.65187214e+00 -1.16289042e+00 -2.35230863e-01 -2.35230863e-01
 -2.35230863e-01  6.61339886e+01  4.90359009e+02  2.51026707e+03
  1.24370717e+04  4.54554119e+04  1.32393494e+05]
E1 = -706.6912660385269  E_coul = 198.97243804030825
Extra cycle  E= -507.718827998219  delta_E= 1.14e-13  |g|= 9.42e-12  |ddm|= 1.43e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.33 sec
exp = [3.67546481e+04 7.34340241e+03 1.83773239e+04 1.41171658e+03
 3.33184065e+02 9.67924260e+01 3.27238204e+01 4.71122768e+00
 3.92722321e-01 8.60264725e+00 4.91153958e-01]
grad_E = [-2.06271735e-07  2.13002871e-06  8.78865326e-09  9.39979140e-05
 -2.01727240e-04  1.40812716e-04 -1.07432292e-04  4.03073644e-03
  2.81225051e-02  3.37465928e-03  8.25024094e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:29:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6482573        1
[INPUT] 0    0    [1    /1   ]  7343.40068227        1
[INPUT] 0    0    [1    /1   ]  18377.3239014        1
[INPUT] 0    0    [1    /1   ]  1411.63167632        1
[INPUT] 0    0    [1    /1   ]  333.405768813        1
[INPUT] 0    0    [1    /1   ]  96.5911974259        1
[INPUT] 0    0    [1    /1   ]  32.615143132         1
[INPUT] 0    0    [1    /1   ]  4.71048934097        1
[INPUT] 0    0    [1    /1   ]  0.392549318094       1
[INPUT] 1    0    [1    /1   ]  8.60231834612        1
[INPUT] 1    0    [1    /1   ]  0.491140629891       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.648257298046, 1.0]], [0, [7343.400682268304, 1.0]], [0, [18377.323901365777, 1.0]], [0, [1411.6316763203374, 1.0]], [0, [333.40576881299774, 1.0]], [0, [96.59119742593823, 1.0]], [0, [32.615143132047024, 1.0]], [0, [4.710489340972097, 1.0]], [0, [0.39254931809362165, 1.0]], [1, [8.602318346117327, 1.0]], [1, [0.4911406298913722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6482573]
bas 1, expnt(s) = [7343.40068227]
bas 2, expnt(s) = [18377.32390137]
bas 3, expnt(s) = [1411.63167632]
bas 4, expnt(s) = [333.40576881]
bas 5, expnt(s) = [96.59119743]
bas 6, expnt(s) = [32.61514313]
bas 7, expnt(s) = [4.71048934]
bas 8, expnt(s) = [0.39254932]
bas 9, expnt(s) = [8.60231835]
bas 10, expnt(s) = [0.49114063]
CPU time:       202.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546483e+04 6.70655094e+03 7.34340068e+03 2.00418563e+03
 1.83773239e+04 3.98773901e+03 1.41163168e+03 5.81843344e+02
 3.33405769e+02 1.97126430e+02 9.65911974e+01 7.78427530e+01
 3.26151431e+01 3.44809713e+01 4.71048934e+00 8.07819892e+00
 3.92549318e-01 1.25295564e+00 8.60231835e+00 4.29787500e+01
 4.91140630e-01 1.19947644e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32016016943688
cond(S) = 204.61675551120265
E1 = -689.2335590599416  E_coul = 184.94818314043022
init E= -504.285375919511
    CPU time for initialize scf      5.29 sec, wall time      0.99 sec
  HOMO = -0.679727508777894  LUMO = 64.5532195435937
  mo_energy =
[-1.21678603e+02 -1.32859596e+01 -7.61984339e+00 -7.61984339e+00
 -7.61984339e+00 -1.65004800e+00 -6.79727509e-01 -6.79727509e-01
 -6.79727509e-01  6.45532195e+01  4.88225535e+02  2.50840722e+03
  1.24354108e+04  4.54538285e+04  1.32391973e+05]
E1 = -706.730603926296  E_coul = 199.01236058638233
cycle= 1 E= -507.718243339914  delta_E= -3.43  |g|= 0.336  |ddm|= 0.299
    CPU time for cycle= 1      0.34 sec, wall time      0.04 sec
diis-norm(errvec)=0.479586
diis-c [-0.23000246  1.        ]
  HOMO = -0.235089783125252  LUMO = 65.8576421602332
  mo_energy =
[-1.20279613e+02 -1.22568888e+01 -6.64953013e+00 -6.64953013e+00
 -6.64953013e+00 -1.16289471e+00 -2.35089783e-01 -2.35089783e-01
 -2.35089783e-01  6.58576422e+01  4.89613022e+02  2.50971527e+03
  1.24365894e+04  4.54549299e+04  1.32393025e+05]
E1 = -706.6846419677012  E_coul = 198.96575846888095
cycle= 2 E= -507.71888349882  delta_E= -0.00064  |g|= 0.00585  |ddm|= 0.0218
    CPU time for cycle= 2      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.00632083
diis-c [-3.95628386e-05  1.30062117e-03  9.98699379e-01]
  HOMO = -0.235369579883381  LUMO = 65.8533127965092
  mo_energy =
[-1.20291529e+02 -1.22587494e+01 -6.65238187e+00 -6.65238187e+00
 -6.65238187e+00 -1.16299918e+00 -2.35369580e-01 -2.35369580e-01
 -2.35369580e-01  6.58533128e+01  4.89600168e+02  2.50969625e+03
  1.24365663e+04  4.54549052e+04  1.32392999e+05]
E1 = -706.6838840497672  E_coul = 198.96500033876742
cycle= 3 E= -507.718883711  delta_E= -2.12e-07  |g|= 0.000142  |ddm|= 0.000352
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192368
diis-c [-8.99939735e-10  2.88780189e-05 -3.07196887e-02  1.03069081e+00]
  HOMO = -0.235374219755867  LUMO = 65.8532362637324
  mo_energy =
[-1.20291740e+02 -1.22587818e+01 -6.65243569e+00 -6.65243569e+00
 -6.65243569e+00 -1.16300063e+00 -2.35374220e-01 -2.35374220e-01
 -2.35374220e-01  6.58532363e+01  4.89599958e+02  2.50969598e+03
  1.24365660e+04  4.54549049e+04  1.32392999e+05]
E1 = -706.6838680684372  E_coul = 198.96498435732283
cycle= 4 E= -507.718883711114  delta_E= -1.15e-10  |g|= 6.72e-07  |ddm|= 7.46e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6838680684372  E_coul = 198.96498435732283
  HOMO = -0.235374181155507  LUMO = 65.8532368271132
  mo_energy =
[-1.20291739e+02 -1.22587816e+01 -6.65243533e+00 -6.65243533e+00
 -6.65243533e+00 -1.16300062e+00 -2.35374181e-01 -2.35374181e-01
 -2.35374181e-01  6.58532368e+01  4.89599960e+02  2.50969598e+03
  1.24365660e+04  4.54549049e+04  1.32392999e+05]
E1 = -706.6838681578877  E_coul = 198.9649844467734
Extra cycle  E= -507.718883711114  delta_E= 1.14e-13  |g|= 1.3e-08  |ddm|= 4.21e-08
    CPU time for scf_cycle      5.75 sec, wall time      1.13 sec
exp = [3.67546483e+04 7.34340068e+03 1.83773239e+04 1.41163168e+03
 3.33405769e+02 9.65911974e+01 3.26151431e+01 4.71048934e+00
 3.92549318e-01 8.60231835e+00 4.91140630e-01]
E = -507.71888371111424
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:03 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6482573        1
[INPUT] 0    0    [1    /1   ]  7343.40068227        1
[INPUT] 0    0    [1    /1   ]  18377.3239014        1
[INPUT] 0    0    [1    /1   ]  1411.63167632        1
[INPUT] 0    0    [1    /1   ]  333.405768813        1
[INPUT] 0    0    [1    /1   ]  96.5911974259        1
[INPUT] 0    0    [1    /1   ]  32.615143132         1
[INPUT] 0    0    [1    /1   ]  4.71048934097        1
[INPUT] 0    0    [1    /1   ]  0.392549318094       1
[INPUT] 1    0    [1    /1   ]  8.60231834612        1
[INPUT] 1    0    [1    /1   ]  0.491140629891       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.648257298046, 1.0]], [0, [7343.400682268304, 1.0]], [0, [18377.323901365777, 1.0]], [0, [1411.6316763203374, 1.0]], [0, [333.40576881299774, 1.0]], [0, [96.59119742593823, 1.0]], [0, [32.615143132047024, 1.0]], [0, [4.710489340972097, 1.0]], [0, [0.39254931809362165, 1.0]], [1, [8.602318346117327, 1.0]], [1, [0.4911406298913722, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6482573]
bas 1, expnt(s) = [7343.40068227]
bas 2, expnt(s) = [18377.32390137]
bas 3, expnt(s) = [1411.63167632]
bas 4, expnt(s) = [333.40576881]
bas 5, expnt(s) = [96.59119743]
bas 6, expnt(s) = [32.61514313]
bas 7, expnt(s) = [4.71048934]
bas 8, expnt(s) = [0.39254932]
bas 9, expnt(s) = [8.60231835]
bas 10, expnt(s) = [0.49114063]
CPU time:       208.90
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546483e+04 6.70655094e+03 7.34340068e+03 2.00418563e+03
 1.83773239e+04 3.98773901e+03 1.41163168e+03 5.81843344e+02
 3.33405769e+02 1.97126430e+02 9.65911974e+01 7.78427530e+01
 3.26151431e+01 3.44809713e+01 4.71048934e+00 8.07819892e+00
 3.92549318e-01 1.25295564e+00 8.60231835e+00 4.29787500e+01
 4.91140630e-01 1.19947644e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32016016943688
cond(S) = 204.61675551120265
E1 = -689.2335590599416  E_coul = 184.94818314043022
init E= -504.285375919511
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.679727508777894  LUMO = 64.5532195435937
  mo_energy =
[-1.21678603e+02 -1.32859596e+01 -7.61984339e+00 -7.61984339e+00
 -7.61984339e+00 -1.65004800e+00 -6.79727509e-01 -6.79727509e-01
 -6.79727509e-01  6.45532195e+01  4.88225535e+02  2.50840722e+03
  1.24354108e+04  4.54538285e+04  1.32391973e+05]
E1 = -706.730603926296  E_coul = 199.01236058638233
cycle= 1 E= -507.718243339914  delta_E= -3.43  |g|= 0.336  |ddm|= 0.299
    CPU time for cycle= 1      0.40 sec, wall time      0.03 sec
diis-norm(errvec)=0.479586
diis-c [-0.23000246  1.        ]
  HOMO = -0.235089783125252  LUMO = 65.8576421602332
  mo_energy =
[-1.20279613e+02 -1.22568888e+01 -6.64953013e+00 -6.64953013e+00
 -6.64953013e+00 -1.16289471e+00 -2.35089783e-01 -2.35089783e-01
 -2.35089783e-01  6.58576422e+01  4.89613022e+02  2.50971527e+03
  1.24365894e+04  4.54549299e+04  1.32393025e+05]
E1 = -706.6846419677012  E_coul = 198.96575846888095
cycle= 2 E= -507.71888349882  delta_E= -0.00064  |g|= 0.00585  |ddm|= 0.0218
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00632083
diis-c [-3.95628386e-05  1.30062117e-03  9.98699379e-01]
  HOMO = -0.235369579883381  LUMO = 65.8533127965092
  mo_energy =
[-1.20291529e+02 -1.22587494e+01 -6.65238187e+00 -6.65238187e+00
 -6.65238187e+00 -1.16299918e+00 -2.35369580e-01 -2.35369580e-01
 -2.35369580e-01  6.58533128e+01  4.89600168e+02  2.50969625e+03
  1.24365663e+04  4.54549052e+04  1.32392999e+05]
E1 = -706.6838840497672  E_coul = 198.96500033876742
cycle= 3 E= -507.718883711  delta_E= -2.12e-07  |g|= 0.000142  |ddm|= 0.000352
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192368
diis-c [-8.99939735e-10  2.88780189e-05 -3.07196887e-02  1.03069081e+00]
  HOMO = -0.235374219755867  LUMO = 65.8532362637324
  mo_energy =
[-1.20291740e+02 -1.22587818e+01 -6.65243569e+00 -6.65243569e+00
 -6.65243569e+00 -1.16300063e+00 -2.35374220e-01 -2.35374220e-01
 -2.35374220e-01  6.58532363e+01  4.89599958e+02  2.50969598e+03
  1.24365660e+04  4.54549049e+04  1.32392999e+05]
E1 = -706.6838680684372  E_coul = 198.96498435732283
cycle= 4 E= -507.718883711114  delta_E= -1.15e-10  |g|= 6.72e-07  |ddm|= 7.46e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6838680684372  E_coul = 198.96498435732283
  HOMO = -0.235374181155507  LUMO = 65.8532368271132
  mo_energy =
[-1.20291739e+02 -1.22587816e+01 -6.65243533e+00 -6.65243533e+00
 -6.65243533e+00 -1.16300062e+00 -2.35374181e-01 -2.35374181e-01
 -2.35374181e-01  6.58532368e+01  4.89599960e+02  2.50969598e+03
  1.24365660e+04  4.54549049e+04  1.32392999e+05]
E1 = -706.6838681578877  E_coul = 198.9649844467734
Extra cycle  E= -507.718883711114  delta_E= 1.14e-13  |g|= 1.3e-08  |ddm|= 4.21e-08
    CPU time for scf_cycle      1.01 sec, wall time      0.21 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.61675551120265
E1 = -706.6838681578877  E_coul = 198.9649844467734
init E= -507.718883711114
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.235374180628993  LUMO = 65.8532368354661
  mo_energy =
[-1.20291739e+02 -1.22587816e+01 -6.65243532e+00 -6.65243532e+00
 -6.65243532e+00 -1.16300062e+00 -2.35374181e-01 -2.35374181e-01
 -2.35374181e-01  6.58532368e+01  4.89599960e+02  2.50969598e+03
  1.24365660e+04  4.54549049e+04  1.32392999e+05]
E1 = -706.6838681594631  E_coul = 198.9649844483489
cycle= 1 E= -507.718883711114  delta_E=    0  |g|= 2.96e-10  |ddm|= 7.28e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6838681594631  E_coul = 198.9649844483489
  HOMO = -0.235374180620654  LUMO = 65.8532368356119
  mo_energy =
[-1.20291739e+02 -1.22587816e+01 -6.65243532e+00 -6.65243532e+00
 -6.65243532e+00 -1.16300062e+00 -2.35374181e-01 -2.35374181e-01
 -2.35374181e-01  6.58532368e+01  4.89599960e+02  2.50969598e+03
  1.24365660e+04  4.54549049e+04  1.32392999e+05]
E1 = -706.6838681594944  E_coul = 198.96498444838
Extra cycle  E= -507.718883711114  delta_E= -1.71e-13  |g|= 2.03e-11  |ddm|= 1.45e-11
    CPU time for scf_cycle      2.57 sec, wall time      0.29 sec
exp = [3.67546483e+04 7.34340068e+03 1.83773239e+04 1.41163168e+03
 3.33405769e+02 9.65911974e+01 3.26151431e+01 4.71048934e+00
 3.92549318e-01 8.60231835e+00 4.91140630e-01]
grad_E = [-2.04090951e-07  2.21689007e-06  1.09964622e-08  8.92551824e-05
 -1.48999096e-04  3.23094530e-05 -2.06284392e-04  3.65851961e-03
  2.54309110e-02  3.05102741e-03  7.45516792e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.648376         1
[INPUT] 0    0    [1    /1   ]  7343.39953052        1
[INPUT] 0    0    [1    /1   ]  18377.3238978        1
[INPUT] 0    0    [1    /1   ]  1411.57507538        1
[INPUT] 0    0    [1    /1   ]  333.554177556        1
[INPUT] 0    0    [1    /1   ]  96.4523377525        1
[INPUT] 0    0    [1    /1   ]  32.5541272758        1
[INPUT] 0    0    [1    /1   ]  4.70793692353        1
[INPUT] 0    0    [1    /1   ]  0.391752977476       1
[INPUT] 1    0    [1    /1   ]  8.60059980427        1
[INPUT] 1    0    [1    /1   ]  0.491064403617       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64837595604, 1.0]], [0, [7343.3995305225435, 1.0]], [0, [18377.323897820304, 1.0]], [0, [1411.5750753794096, 1.0]], [0, [333.55417755605805, 1.0]], [0, [96.45233775247544, 1.0]], [0, [32.55412727575904, 1.0]], [0, [4.707936923532435, 1.0]], [0, [0.39175297747569543, 1.0]], [1, [8.600599804271006, 1.0]], [1, [0.49106440361657916, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64837596]
bas 1, expnt(s) = [7343.39953052]
bas 2, expnt(s) = [18377.32389782]
bas 3, expnt(s) = [1411.57507538]
bas 4, expnt(s) = [333.55417756]
bas 5, expnt(s) = [96.45233775]
bas 6, expnt(s) = [32.55412728]
bas 7, expnt(s) = [4.70793692]
bas 8, expnt(s) = [0.39175298]
bas 9, expnt(s) = [8.6005998]
bas 10, expnt(s) = [0.4910644]
CPU time:       218.98
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339953e+03 2.00418539e+03
 1.83773239e+04 3.98773901e+03 1.41157508e+03 5.81825847e+02
 3.33554178e+02 1.97192236e+02 9.64523378e+01 7.77588077e+01
 3.25541273e+01 3.44325801e+01 4.70793692e+00 8.07491577e+00
 3.91752977e-01 1.25104881e+00 8.60059980e+00 4.29680176e+01
 4.91064404e-01 1.19924374e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32039843774019
cond(S) = 204.56705973636485
E1 = -689.206374895315  E_coul = 184.92394312588232
init E= -504.282431769433
    CPU time for initialize scf      0.37 sec, wall time      0.06 sec
  HOMO = -0.680163840632711  LUMO = 64.3715524776225
  mo_energy =
[-1.21681721e+02 -1.32878210e+01 -7.62172846e+00 -7.62172846e+00
 -7.62172846e+00 -1.65009266e+00 -6.80163841e-01 -6.80163841e-01
 -6.80163841e-01  6.43715525e+01  4.87737627e+02  2.50804226e+03
  1.24350871e+04  4.54535027e+04  1.32391655e+05]
E1 = -706.696982032831  E_coul = 198.9787070619973
cycle= 1 E= -507.718274970834  delta_E= -3.44  |g|= 0.337  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479382
diis-c [-0.22980701  1.        ]
  HOMO = -0.235759253351425  LUMO = 65.6749009594279
  mo_energy =
[-1.20283989e+02 -1.22592966e+01 -6.65203026e+00 -6.65203026e+00
 -6.65203026e+00 -1.16344655e+00 -2.35759253e-01 -2.35759253e-01
 -2.35759253e-01  6.56749010e+01  4.89123774e+02  2.50934869e+03
  1.24362640e+04  4.54546023e+04  1.32392704e+05]
E1 = -706.6508268085639  E_coul = 198.93190806961385
cycle= 2 E= -507.71891873895  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634171
diis-c [-3.98229458e-05  1.30843600e-03  9.98691564e-01]
  HOMO = -0.236040328776063  LUMO = 65.6705593488599
  mo_energy =
[-1.20295949e+02 -1.22611662e+01 -6.65489571e+00 -6.65489571e+00
 -6.65489571e+00 -1.16355134e+00 -2.36040329e-01 -2.36040329e-01
 -2.36040329e-01  6.56705593e+01  4.89110876e+02  2.50932961e+03
  1.24362407e+04  4.54545775e+04  1.32392679e+05]
E1 = -706.6500645762983  E_coul = 198.93114562347046
cycle= 3 E= -507.718918952828  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193202
diis-c [-9.08254400e-10  2.88044760e-05 -3.07542641e-02  1.03072546e+00]
  HOMO = -0.236044997164905  LUMO = 65.6704824402877
  mo_energy =
[-1.20296161e+02 -1.22611988e+01 -6.65494988e+00 -6.65494988e+00
 -6.65494988e+00 -1.16355280e+00 -2.36044997e-01 -2.36044997e-01
 -2.36044997e-01  6.56704824e+01  4.89110665e+02  2.50932933e+03
  1.24362404e+04  4.54545772e+04  1.32392679e+05]
E1 = -706.6500484765049  E_coul = 198.93112952356145
cycle= 4 E= -507.718918952943  delta_E= -1.16e-10  |g|= 6.75e-07  |ddm|= 7.5e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6500484765049  E_coul = 198.93112952356145
  HOMO = -0.236044958279923  LUMO = 65.6704830063886
  mo_energy =
[-1.20296160e+02 -1.22611986e+01 -6.65494952e+00 -6.65494952e+00
 -6.65494952e+00 -1.16355278e+00 -2.36044958e-01 -2.36044958e-01
 -2.36044958e-01  6.56704830e+01  4.89110667e+02  2.50932934e+03
  1.24362404e+04  4.54545772e+04  1.32392679e+05]
E1 = -706.6500485666386  E_coul = 198.93112961369513
Extra cycle  E= -507.718918952943  delta_E=    0  |g|= 1.31e-08  |ddm|= 4.24e-08
    CPU time for scf_cycle      1.02 sec, wall time      0.20 sec
exp = [3.67546484e+04 7.34339953e+03 1.83773239e+04 1.41157508e+03
 3.33554178e+02 9.64523378e+01 3.25541273e+01 4.70793692e+00
 3.91752977e-01 8.60059980e+00 4.91064404e-01]
E = -507.71891895294345
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:10 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.648376         1
[INPUT] 0    0    [1    /1   ]  7343.39953052        1
[INPUT] 0    0    [1    /1   ]  18377.3238978        1
[INPUT] 0    0    [1    /1   ]  1411.57507538        1
[INPUT] 0    0    [1    /1   ]  333.554177556        1
[INPUT] 0    0    [1    /1   ]  96.4523377525        1
[INPUT] 0    0    [1    /1   ]  32.5541272758        1
[INPUT] 0    0    [1    /1   ]  4.70793692353        1
[INPUT] 0    0    [1    /1   ]  0.391752977476       1
[INPUT] 1    0    [1    /1   ]  8.60059980427        1
[INPUT] 1    0    [1    /1   ]  0.491064403617       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64837595604, 1.0]], [0, [7343.3995305225435, 1.0]], [0, [18377.323897820304, 1.0]], [0, [1411.5750753794096, 1.0]], [0, [333.55417755605805, 1.0]], [0, [96.45233775247544, 1.0]], [0, [32.55412727575904, 1.0]], [0, [4.707936923532435, 1.0]], [0, [0.39175297747569543, 1.0]], [1, [8.600599804271006, 1.0]], [1, [0.49106440361657916, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64837596]
bas 1, expnt(s) = [7343.39953052]
bas 2, expnt(s) = [18377.32389782]
bas 3, expnt(s) = [1411.57507538]
bas 4, expnt(s) = [333.55417756]
bas 5, expnt(s) = [96.45233775]
bas 6, expnt(s) = [32.55412728]
bas 7, expnt(s) = [4.70793692]
bas 8, expnt(s) = [0.39175298]
bas 9, expnt(s) = [8.6005998]
bas 10, expnt(s) = [0.4910644]
CPU time:       220.19
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339953e+03 2.00418539e+03
 1.83773239e+04 3.98773901e+03 1.41157508e+03 5.81825847e+02
 3.33554178e+02 1.97192236e+02 9.64523378e+01 7.77588077e+01
 3.25541273e+01 3.44325801e+01 4.70793692e+00 8.07491577e+00
 3.91752977e-01 1.25104881e+00 8.60059980e+00 4.29680176e+01
 4.91064404e-01 1.19924374e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32039843774019
cond(S) = 204.56705973636485
E1 = -689.206374895315  E_coul = 184.92394312588232
init E= -504.282431769433
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680163840632711  LUMO = 64.3715524776225
  mo_energy =
[-1.21681721e+02 -1.32878210e+01 -7.62172846e+00 -7.62172846e+00
 -7.62172846e+00 -1.65009266e+00 -6.80163841e-01 -6.80163841e-01
 -6.80163841e-01  6.43715525e+01  4.87737627e+02  2.50804226e+03
  1.24350871e+04  4.54535027e+04  1.32391655e+05]
E1 = -706.696982032831  E_coul = 198.9787070619973
cycle= 1 E= -507.718274970834  delta_E= -3.44  |g|= 0.337  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479382
diis-c [-0.22980701  1.        ]
  HOMO = -0.235759253351425  LUMO = 65.6749009594279
  mo_energy =
[-1.20283989e+02 -1.22592966e+01 -6.65203026e+00 -6.65203026e+00
 -6.65203026e+00 -1.16344655e+00 -2.35759253e-01 -2.35759253e-01
 -2.35759253e-01  6.56749010e+01  4.89123774e+02  2.50934869e+03
  1.24362640e+04  4.54546023e+04  1.32392704e+05]
E1 = -706.6508268085639  E_coul = 198.93190806961385
cycle= 2 E= -507.71891873895  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634171
diis-c [-3.98229458e-05  1.30843600e-03  9.98691564e-01]
  HOMO = -0.236040328776063  LUMO = 65.6705593488599
  mo_energy =
[-1.20295949e+02 -1.22611662e+01 -6.65489571e+00 -6.65489571e+00
 -6.65489571e+00 -1.16355134e+00 -2.36040329e-01 -2.36040329e-01
 -2.36040329e-01  6.56705593e+01  4.89110876e+02  2.50932961e+03
  1.24362407e+04  4.54545775e+04  1.32392679e+05]
E1 = -706.6500645762983  E_coul = 198.93114562347046
cycle= 3 E= -507.718918952828  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193202
diis-c [-9.08254400e-10  2.88044760e-05 -3.07542641e-02  1.03072546e+00]
  HOMO = -0.236044997164905  LUMO = 65.6704824402877
  mo_energy =
[-1.20296161e+02 -1.22611988e+01 -6.65494988e+00 -6.65494988e+00
 -6.65494988e+00 -1.16355280e+00 -2.36044997e-01 -2.36044997e-01
 -2.36044997e-01  6.56704824e+01  4.89110665e+02  2.50932933e+03
  1.24362404e+04  4.54545772e+04  1.32392679e+05]
E1 = -706.6500484765049  E_coul = 198.93112952356145
cycle= 4 E= -507.718918952943  delta_E= -1.16e-10  |g|= 6.75e-07  |ddm|= 7.5e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6500484765049  E_coul = 198.93112952356145
  HOMO = -0.236044958279923  LUMO = 65.6704830063886
  mo_energy =
[-1.20296160e+02 -1.22611986e+01 -6.65494952e+00 -6.65494952e+00
 -6.65494952e+00 -1.16355278e+00 -2.36044958e-01 -2.36044958e-01
 -2.36044958e-01  6.56704830e+01  4.89110667e+02  2.50932934e+03
  1.24362404e+04  4.54545772e+04  1.32392679e+05]
E1 = -706.6500485666386  E_coul = 198.93112961369513
Extra cycle  E= -507.718918952943  delta_E=    0  |g|= 1.31e-08  |ddm|= 4.24e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.56705973636485
E1 = -706.6500485666386  E_coul = 198.93112961369513
init E= -507.718918952943
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.23604495774899  LUMO = 65.6704830147952
  mo_energy =
[-1.20296160e+02 -1.22611986e+01 -6.65494951e+00 -6.65494951e+00
 -6.65494951e+00 -1.16355278e+00 -2.36044958e-01 -2.36044958e-01
 -2.36044958e-01  6.56704830e+01  4.89110667e+02  2.50932934e+03
  1.24362404e+04  4.54545772e+04  1.32392679e+05]
E1 = -706.650048568228  E_coul = 198.9311296152844
cycle= 1 E= -507.718918952944  delta_E= -2.27e-13  |g|= 2.93e-10  |ddm|= 7.34e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.650048568228  E_coul = 198.9311296152844
  HOMO = -0.236044957740567  LUMO = 65.6704830149399
  mo_energy =
[-1.20296160e+02 -1.22611986e+01 -6.65494951e+00 -6.65494951e+00
 -6.65494951e+00 -1.16355278e+00 -2.36044958e-01 -2.36044958e-01
 -2.36044958e-01  6.56704830e+01  4.89110667e+02  2.50932934e+03
  1.24362404e+04  4.54545772e+04  1.32392679e+05]
E1 = -706.6500485682592  E_coul = 198.93112961531597
Extra cycle  E= -507.718918952943  delta_E= 4.55e-13  |g|= 1.3e-11  |ddm|= 1.47e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.29 sec
exp = [3.67546484e+04 7.34339953e+03 1.83773239e+04 1.41157508e+03
 3.33554178e+02 9.64523378e+01 3.25541273e+01 4.70793692e+00
 3.91752977e-01 8.60059980e+00 4.91064404e-01]
grad_E = [-2.02459387e-07  2.28171014e-06  1.26711086e-08  8.56873100e-05
 -1.06536898e-04 -8.30090436e-05 -1.70832056e-04  1.79105531e-03
  1.23795177e-02  1.48495353e-03  3.62984719e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:17 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483837        1
[INPUT] 0    0    [1    /1   ]  7343.39945602        1
[INPUT] 0    0    [1    /1   ]  18377.3238976        1
[INPUT] 0    0    [1    /1   ]  1411.5713735         1
[INPUT] 0    0    [1    /1   ]  333.564305479        1
[INPUT] 0    0    [1    /1   ]  96.4395623019        1
[INPUT] 0    0    [1    /1   ]  32.5597437173        1
[INPUT] 0    0    [1    /1   ]  4.70606264537        1
[INPUT] 0    0    [1    /1   ]  0.391139145745       1
[INPUT] 1    0    [1    /1   ]  8.59925056671        1
[INPUT] 1    0    [1    /1   ]  0.491003777191       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64838367524, 1.0]], [0, [7343.399456024411, 1.0]], [0, [18377.323897597962, 1.0]], [0, [1411.571373502281, 1.0]], [0, [333.5643054793704, 1.0]], [0, [96.43956230190821, 1.0]], [0, [32.559743717256985, 1.0]], [0, [4.706062645374346, 1.0]], [0, [0.39113914574520087, 1.0]], [1, [8.599250566705647, 1.0]], [1, [0.49100377719114047, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64838368]
bas 1, expnt(s) = [7343.39945602]
bas 2, expnt(s) = [18377.3238976]
bas 3, expnt(s) = [1411.5713735]
bas 4, expnt(s) = [333.56430548]
bas 5, expnt(s) = [96.4395623]
bas 6, expnt(s) = [32.55974372]
bas 7, expnt(s) = [4.70606265]
bas 8, expnt(s) = [0.39113915]
bas 9, expnt(s) = [8.59925057]
bas 10, expnt(s) = [0.49100378]
CPU time:       230.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339946e+03 2.00418538e+03
 1.83773239e+04 3.98773901e+03 1.41157137e+03 5.81824702e+02
 3.33564305e+02 1.97196727e+02 9.64395623e+01 7.77510830e+01
 3.25597437e+01 3.44370354e+01 4.70606265e+00 8.07250462e+00
 3.91139146e-01 1.24957833e+00 8.59925057e+00 4.29595919e+01
 4.91003777e-01 1.19905867e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32057754589099
cond(S) = 204.5653494184819
E1 = -689.1853379639823  E_coul = 184.90521319334164
init E= -504.280124770641
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680505192555623  LUMO = 64.364057081431
  mo_energy =
[-1.21684097e+02 -1.32892915e+01 -7.62317593e+00 -7.62317593e+00
 -7.62317593e+00 -1.65013285e+00 -6.80505193e-01 -6.80505193e-01
 -6.80505193e-01  6.43640571e+01  4.87721847e+02  2.50803220e+03
  1.24350775e+04  4.54534919e+04  1.32391644e+05]
E1 = -706.6709124991584  E_coul = 198.95262986570154
cycle= 1 E= -507.718282633457  delta_E= -3.44  |g|= 0.337  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479318
diis-c [-0.22974602  1.        ]
  HOMO = -0.236278478213691  LUMO = 65.6668304773809
  mo_energy =
[-1.20287360e+02 -1.22611893e+01 -6.65396135e+00 -6.65396135e+00
 -6.65396135e+00 -1.16387411e+00 -2.36278478e-01 -2.36278478e-01
 -2.36278478e-01  6.56668305e+01  4.89106991e+02  2.50933743e+03
  1.24362531e+04  4.54545901e+04  1.32392692e+05]
E1 = -706.6247391360821  E_coul = 198.9058118758259
cycle= 2 E= -507.718927260256  delta_E= -0.000645  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.0063464
diis-c [-3.98855776e-05  1.30341635e-03  9.98696584e-01]
  HOMO = -0.236559581766923  LUMO = 65.6624869904309
  mo_energy =
[-1.20299325e+02 -1.22630596e+01 -6.65682829e+00 -6.65682829e+00
 -6.65682829e+00 -1.16397878e+00 -2.36559582e-01 -2.36559582e-01
 -2.36559582e-01  6.56624870e+01  4.89094089e+02  2.50931835e+03
  1.24362298e+04  4.54545653e+04  1.32392667e+05]
E1 = -706.6239765234333  E_coul = 198.90504904899686
cycle= 3 E= -507.718927474436  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193294
diis-c [-9.08980152e-10  2.88138755e-05 -3.07471988e-02  1.03071838e+00]
  HOMO = -0.236564248627586  LUMO = 65.6624100627912
  mo_energy =
[-1.20299538e+02 -1.22630923e+01 -6.65688247e+00 -6.65688247e+00
 -6.65688247e+00 -1.16398024e+00 -2.36564249e-01 -2.36564249e-01
 -2.36564249e-01  6.56624101e+01  4.89093878e+02  2.50931807e+03
  1.24362295e+04  4.54545650e+04  1.32392666e+05]
E1 = -706.6239604184087  E_coul = 198.90503294385715
cycle= 4 E= -507.718927474552  delta_E= -1.15e-10  |g|= 6.75e-07  |ddm|= 7.51e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6239604184087  E_coul = 198.90503294385715
  HOMO = -0.236564209752053  LUMO = 65.6624106289193
  mo_energy =
[-1.20299536e+02 -1.22630920e+01 -6.65688211e+00 -6.65688211e+00
 -6.65688211e+00 -1.16398022e+00 -2.36564210e-01 -2.36564210e-01
 -2.36564210e-01  6.56624106e+01  4.89093880e+02  2.50931808e+03
  1.24362295e+04  4.54545650e+04  1.32392666e+05]
E1 = -706.6239605085452  E_coul = 198.90503303399393
Extra cycle  E= -507.718927474551  delta_E= 3.41e-13  |g|= 1.31e-08  |ddm|= 4.24e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546484e+04 7.34339946e+03 1.83773239e+04 1.41157137e+03
 3.33564305e+02 9.64395623e+01 3.25597437e+01 4.70606265e+00
 3.91139146e-01 8.59925057e+00 4.91003777e-01]
E = -507.71892747455126
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:18 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483837        1
[INPUT] 0    0    [1    /1   ]  7343.39945602        1
[INPUT] 0    0    [1    /1   ]  18377.3238976        1
[INPUT] 0    0    [1    /1   ]  1411.5713735         1
[INPUT] 0    0    [1    /1   ]  333.564305479        1
[INPUT] 0    0    [1    /1   ]  96.4395623019        1
[INPUT] 0    0    [1    /1   ]  32.5597437173        1
[INPUT] 0    0    [1    /1   ]  4.70606264537        1
[INPUT] 0    0    [1    /1   ]  0.391139145745       1
[INPUT] 1    0    [1    /1   ]  8.59925056671        1
[INPUT] 1    0    [1    /1   ]  0.491003777191       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64838367524, 1.0]], [0, [7343.399456024411, 1.0]], [0, [18377.323897597962, 1.0]], [0, [1411.571373502281, 1.0]], [0, [333.5643054793704, 1.0]], [0, [96.43956230190821, 1.0]], [0, [32.559743717256985, 1.0]], [0, [4.706062645374346, 1.0]], [0, [0.39113914574520087, 1.0]], [1, [8.599250566705647, 1.0]], [1, [0.49100377719114047, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64838368]
bas 1, expnt(s) = [7343.39945602]
bas 2, expnt(s) = [18377.3238976]
bas 3, expnt(s) = [1411.5713735]
bas 4, expnt(s) = [333.56430548]
bas 5, expnt(s) = [96.4395623]
bas 6, expnt(s) = [32.55974372]
bas 7, expnt(s) = [4.70606265]
bas 8, expnt(s) = [0.39113915]
bas 9, expnt(s) = [8.59925057]
bas 10, expnt(s) = [0.49100378]
CPU time:       231.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339946e+03 2.00418538e+03
 1.83773239e+04 3.98773901e+03 1.41157137e+03 5.81824702e+02
 3.33564305e+02 1.97196727e+02 9.64395623e+01 7.77510830e+01
 3.25597437e+01 3.44370354e+01 4.70606265e+00 8.07250462e+00
 3.91139146e-01 1.24957833e+00 8.59925057e+00 4.29595919e+01
 4.91003777e-01 1.19905867e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32057754589099
cond(S) = 204.5653494184819
E1 = -689.1853379639823  E_coul = 184.90521319334164
init E= -504.280124770641
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680505192555623  LUMO = 64.364057081431
  mo_energy =
[-1.21684097e+02 -1.32892915e+01 -7.62317593e+00 -7.62317593e+00
 -7.62317593e+00 -1.65013285e+00 -6.80505193e-01 -6.80505193e-01
 -6.80505193e-01  6.43640571e+01  4.87721847e+02  2.50803220e+03
  1.24350775e+04  4.54534919e+04  1.32391644e+05]
E1 = -706.6709124991584  E_coul = 198.95262986570154
cycle= 1 E= -507.718282633457  delta_E= -3.44  |g|= 0.337  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479318
diis-c [-0.22974602  1.        ]
  HOMO = -0.236278478213691  LUMO = 65.6668304773809
  mo_energy =
[-1.20287360e+02 -1.22611893e+01 -6.65396135e+00 -6.65396135e+00
 -6.65396135e+00 -1.16387411e+00 -2.36278478e-01 -2.36278478e-01
 -2.36278478e-01  6.56668305e+01  4.89106991e+02  2.50933743e+03
  1.24362531e+04  4.54545901e+04  1.32392692e+05]
E1 = -706.6247391360821  E_coul = 198.9058118758259
cycle= 2 E= -507.718927260256  delta_E= -0.000645  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.0063464
diis-c [-3.98855776e-05  1.30341635e-03  9.98696584e-01]
  HOMO = -0.236559581766923  LUMO = 65.6624869904309
  mo_energy =
[-1.20299325e+02 -1.22630596e+01 -6.65682829e+00 -6.65682829e+00
 -6.65682829e+00 -1.16397878e+00 -2.36559582e-01 -2.36559582e-01
 -2.36559582e-01  6.56624870e+01  4.89094089e+02  2.50931835e+03
  1.24362298e+04  4.54545653e+04  1.32392667e+05]
E1 = -706.6239765234333  E_coul = 198.90504904899686
cycle= 3 E= -507.718927474436  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193294
diis-c [-9.08980152e-10  2.88138755e-05 -3.07471988e-02  1.03071838e+00]
  HOMO = -0.236564248627586  LUMO = 65.6624100627912
  mo_energy =
[-1.20299538e+02 -1.22630923e+01 -6.65688247e+00 -6.65688247e+00
 -6.65688247e+00 -1.16398024e+00 -2.36564249e-01 -2.36564249e-01
 -2.36564249e-01  6.56624101e+01  4.89093878e+02  2.50931807e+03
  1.24362295e+04  4.54545650e+04  1.32392666e+05]
E1 = -706.6239604184087  E_coul = 198.90503294385715
cycle= 4 E= -507.718927474552  delta_E= -1.15e-10  |g|= 6.75e-07  |ddm|= 7.51e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6239604184087  E_coul = 198.90503294385715
  HOMO = -0.236564209752053  LUMO = 65.6624106289193
  mo_energy =
[-1.20299536e+02 -1.22630920e+01 -6.65688211e+00 -6.65688211e+00
 -6.65688211e+00 -1.16398022e+00 -2.36564210e-01 -2.36564210e-01
 -2.36564210e-01  6.56624106e+01  4.89093880e+02  2.50931808e+03
  1.24362295e+04  4.54545650e+04  1.32392666e+05]
E1 = -706.6239605085452  E_coul = 198.90503303399393
Extra cycle  E= -507.718927474551  delta_E= 3.41e-13  |g|= 1.31e-08  |ddm|= 4.24e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.5653494184819
E1 = -706.6239605085452  E_coul = 198.90503303399393
init E= -507.718927474551
    CPU time for initialize scf      2.08 sec, wall time      0.13 sec
  HOMO = -0.236564209221345  LUMO = 65.6624106373259
  mo_energy =
[-1.20299536e+02 -1.22630920e+01 -6.65688211e+00 -6.65688211e+00
 -6.65688211e+00 -1.16398022e+00 -2.36564209e-01 -2.36564209e-01
 -2.36564209e-01  6.56624106e+01  4.89093880e+02  2.50931808e+03
  1.24362295e+04  4.54545650e+04  1.32392666e+05]
E1 = -706.6239605101351  E_coul = 198.90503303558344
cycle= 1 E= -507.718927474552  delta_E= -4.55e-13  |g|= 2.95e-10  |ddm|= 7.34e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.06 sec
E1 = -706.6239605101351  E_coul = 198.90503303558344
  HOMO = -0.236564209212928  LUMO = 65.662410637472
  mo_energy =
[-1.20299536e+02 -1.22630920e+01 -6.65688211e+00 -6.65688211e+00
 -6.65688211e+00 -1.16398022e+00 -2.36564209e-01 -2.36564209e-01
 -2.36564209e-01  6.56624106e+01  4.89093880e+02  2.50931808e+03
  1.24362295e+04  4.54545650e+04  1.32392666e+05]
E1 = -706.6239605101663  E_coul = 198.90503303561468
Extra cycle  E= -507.718927474552  delta_E= 1.14e-13  |g|= 2.21e-11  |ddm|= 1.46e-11
    CPU time for scf_cycle      2.59 sec, wall time      0.33 sec
exp = [3.67546484e+04 7.34339946e+03 1.83773239e+04 1.41157137e+03
 3.33564305e+02 9.64395623e+01 3.25597437e+01 4.70606265e+00
 3.91139146e-01 8.59925057e+00 4.91003777e-01]
grad_E = [-2.02217856e-07  2.29119739e-06  1.29229338e-08  8.51336747e-05
 -9.80946024e-05 -1.24413064e-04 -8.58541453e-05  3.21636630e-04
  2.21666203e-03  2.67335388e-04  6.53731686e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:25 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483677        1
[INPUT] 0    0    [1    /1   ]  7343.3996111         1
[INPUT] 0    0    [1    /1   ]  18377.3238981        1
[INPUT] 0    0    [1    /1   ]  1411.57899607        1
[INPUT] 0    0    [1    /1   ]  333.544421081        1
[INPUT] 0    0    [1    /1   ]  96.4567977981        1
[INPUT] 0    0    [1    /1   ]  32.5725497369        1
[INPUT] 0    0    [1    /1   ]  4.70567056823        1
[INPUT] 0    0    [1    /1   ]  0.391003957          1
[INPUT] 1    0    [1    /1   ]  8.59894561768        1
[INPUT] 1    0    [1    /1   ]  0.490989816885       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64836769383, 1.0]], [0, [7343.399611100083, 1.0]], [0, [18377.3238980742, 1.0]], [0, [1411.5789960701989, 1.0]], [0, [333.54442108078365, 1.0]], [0, [96.45679779805873, 1.0]], [0, [32.572549736880134, 1.0]], [0, [4.705670568232501, 1.0]], [0, [0.39100395699955404, 1.0]], [1, [8.598945617682531, 1.0]], [1, [0.49098981688489546, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64836769]
bas 1, expnt(s) = [7343.3996111]
bas 2, expnt(s) = [18377.32389807]
bas 3, expnt(s) = [1411.57899607]
bas 4, expnt(s) = [333.54442108]
bas 5, expnt(s) = [96.4567978]
bas 6, expnt(s) = [32.57254974]
bas 7, expnt(s) = [4.70567057]
bas 8, expnt(s) = [0.39100396]
bas 9, expnt(s) = [8.59894562]
bas 10, expnt(s) = [0.49098982]
CPU time:       241.61
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339961e+03 2.00418541e+03
 1.83773239e+04 3.98773901e+03 1.41157900e+03 5.81827059e+02
 3.33544421e+02 1.97187910e+02 9.64567978e+01 7.77615044e+01
 3.25725497e+01 3.44471932e+01 4.70567057e+00 8.07200021e+00
 3.91003957e-01 1.24925440e+00 8.59894562e+00 4.29576876e+01
 4.90989817e-01 1.19901606e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320616653076552
cond(S) = 204.57292365828627
E1 = -689.1806751194418  E_coul = 184.90106662416662
init E= -504.279608495275
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.68058142531788  LUMO = 64.3912660990002
  mo_energy =
[-1.21684616e+02 -1.32896257e+01 -7.62349423e+00 -7.62349423e+00
 -7.62349423e+00 -1.65014366e+00 -6.80581425e-01 -6.80581425e-01
 -6.80581425e-01  6.43912661e+01  4.87796461e+02  2.50808917e+03
  1.24351276e+04  4.54535417e+04  1.32391692e+05]
E1 = -706.6651283340772  E_coul = 198.9468448172264
cycle= 1 E= -507.718283516851  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479325
diis-c [-0.22975218  1.        ]
  HOMO = -0.236393885277487  LUMO = 65.6939682759682
  mo_energy =
[-1.20288103e+02 -1.22616168e+01 -6.65438826e+00 -6.65438826e+00
 -6.65438826e+00 -1.16396970e+00 -2.36393885e-01 -2.36393885e-01
 -2.36393885e-01  6.56939683e+01  4.89181392e+02  2.50939415e+03
  1.24363030e+04  4.54546396e+04  1.32392740e+05]
E1 = -706.6189796950558  E_coul = 198.90005178608567
cycle= 2 E= -507.71892790897  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634492
diis-c [-3.98688271e-05  1.29987781e-03  9.98700122e-01]
  HOMO = -0.23667478508658  LUMO = 65.6896260475422
  mo_energy =
[-1.20300063e+02 -1.22634860e+01 -6.65725353e+00 -6.65725353e+00
 -6.65725353e+00 -1.16407426e+00 -2.36674785e-01 -2.36674785e-01
 -2.36674785e-01  6.56896260e+01  4.89168496e+02  2.50937508e+03
  1.24362797e+04  4.54546149e+04  1.32392715e+05]
E1 = -706.6182176438215  E_coul = 198.89928952082553
cycle= 3 E= -507.718928122996  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193194
diis-c [-9.07887751e-10  2.88306413e-05 -3.07383096e-02  1.03070948e+00]
  HOMO = -0.236679446460072  LUMO = 65.6895491751652
  mo_energy =
[-1.20300275e+02 -1.22635185e+01 -6.65730766e+00 -6.65730766e+00
 -6.65730766e+00 -1.16407571e+00 -2.36679446e-01 -2.36679446e-01
 -2.36679446e-01  6.56895492e+01  4.89168285e+02  2.50937480e+03
  1.24362794e+04  4.54546145e+04  1.32392714e+05]
E1 = -706.6182015565065  E_coul = 198.89927343339494
cycle= 4 E= -507.718928123112  delta_E= -1.16e-10  |g|= 6.75e-07  |ddm|= 7.5e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6182015565065  E_coul = 198.89927343339494
  HOMO = -0.236679407636634  LUMO = 65.6895497408481
  mo_energy =
[-1.20300273e+02 -1.22635183e+01 -6.65730730e+00 -6.65730730e+00
 -6.65730730e+00 -1.16407570e+00 -2.36679408e-01 -2.36679408e-01
 -2.36679408e-01  6.56895497e+01  4.89168287e+02  2.50937481e+03
  1.24362794e+04  4.54546146e+04  1.32392714e+05]
E1 = -706.6182016465285  E_coul = 198.89927352341735
Extra cycle  E= -507.718928123111  delta_E= 4.55e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546484e+04 7.34339961e+03 1.83773239e+04 1.41157900e+03
 3.33544421e+02 9.64567978e+01 3.25725497e+01 4.70567057e+00
 3.91003957e-01 8.59894562e+00 4.90989817e-01]
E = -507.71892812311114
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:25 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483677        1
[INPUT] 0    0    [1    /1   ]  7343.3996111         1
[INPUT] 0    0    [1    /1   ]  18377.3238981        1
[INPUT] 0    0    [1    /1   ]  1411.57899607        1
[INPUT] 0    0    [1    /1   ]  333.544421081        1
[INPUT] 0    0    [1    /1   ]  96.4567977981        1
[INPUT] 0    0    [1    /1   ]  32.5725497369        1
[INPUT] 0    0    [1    /1   ]  4.70567056823        1
[INPUT] 0    0    [1    /1   ]  0.391003957          1
[INPUT] 1    0    [1    /1   ]  8.59894561768        1
[INPUT] 1    0    [1    /1   ]  0.490989816885       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64836769383, 1.0]], [0, [7343.399611100083, 1.0]], [0, [18377.3238980742, 1.0]], [0, [1411.5789960701989, 1.0]], [0, [333.54442108078365, 1.0]], [0, [96.45679779805873, 1.0]], [0, [32.572549736880134, 1.0]], [0, [4.705670568232501, 1.0]], [0, [0.39100395699955404, 1.0]], [1, [8.598945617682531, 1.0]], [1, [0.49098981688489546, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64836769]
bas 1, expnt(s) = [7343.3996111]
bas 2, expnt(s) = [18377.32389807]
bas 3, expnt(s) = [1411.57899607]
bas 4, expnt(s) = [333.54442108]
bas 5, expnt(s) = [96.4567978]
bas 6, expnt(s) = [32.57254974]
bas 7, expnt(s) = [4.70567057]
bas 8, expnt(s) = [0.39100396]
bas 9, expnt(s) = [8.59894562]
bas 10, expnt(s) = [0.49098982]
CPU time:       242.80
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339961e+03 2.00418541e+03
 1.83773239e+04 3.98773901e+03 1.41157900e+03 5.81827059e+02
 3.33544421e+02 1.97187910e+02 9.64567978e+01 7.77615044e+01
 3.25725497e+01 3.44471932e+01 4.70567057e+00 8.07200021e+00
 3.91003957e-01 1.24925440e+00 8.59894562e+00 4.29576876e+01
 4.90989817e-01 1.19901606e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320616653076552
cond(S) = 204.57292365828627
E1 = -689.1806751194418  E_coul = 184.90106662416662
init E= -504.279608495275
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.68058142531788  LUMO = 64.3912660990002
  mo_energy =
[-1.21684616e+02 -1.32896257e+01 -7.62349423e+00 -7.62349423e+00
 -7.62349423e+00 -1.65014366e+00 -6.80581425e-01 -6.80581425e-01
 -6.80581425e-01  6.43912661e+01  4.87796461e+02  2.50808917e+03
  1.24351276e+04  4.54535417e+04  1.32391692e+05]
E1 = -706.6651283340772  E_coul = 198.9468448172264
cycle= 1 E= -507.718283516851  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479325
diis-c [-0.22975218  1.        ]
  HOMO = -0.236393885277487  LUMO = 65.6939682759682
  mo_energy =
[-1.20288103e+02 -1.22616168e+01 -6.65438826e+00 -6.65438826e+00
 -6.65438826e+00 -1.16396970e+00 -2.36393885e-01 -2.36393885e-01
 -2.36393885e-01  6.56939683e+01  4.89181392e+02  2.50939415e+03
  1.24363030e+04  4.54546396e+04  1.32392740e+05]
E1 = -706.6189796950558  E_coul = 198.90005178608567
cycle= 2 E= -507.71892790897  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634492
diis-c [-3.98688271e-05  1.29987781e-03  9.98700122e-01]
  HOMO = -0.23667478508658  LUMO = 65.6896260475422
  mo_energy =
[-1.20300063e+02 -1.22634860e+01 -6.65725353e+00 -6.65725353e+00
 -6.65725353e+00 -1.16407426e+00 -2.36674785e-01 -2.36674785e-01
 -2.36674785e-01  6.56896260e+01  4.89168496e+02  2.50937508e+03
  1.24362797e+04  4.54546149e+04  1.32392715e+05]
E1 = -706.6182176438215  E_coul = 198.89928952082553
cycle= 3 E= -507.718928122996  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193194
diis-c [-9.07887751e-10  2.88306413e-05 -3.07383096e-02  1.03070948e+00]
  HOMO = -0.236679446460072  LUMO = 65.6895491751652
  mo_energy =
[-1.20300275e+02 -1.22635185e+01 -6.65730766e+00 -6.65730766e+00
 -6.65730766e+00 -1.16407571e+00 -2.36679446e-01 -2.36679446e-01
 -2.36679446e-01  6.56895492e+01  4.89168285e+02  2.50937480e+03
  1.24362794e+04  4.54546145e+04  1.32392714e+05]
E1 = -706.6182015565065  E_coul = 198.89927343339494
cycle= 4 E= -507.718928123112  delta_E= -1.16e-10  |g|= 6.75e-07  |ddm|= 7.5e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6182015565065  E_coul = 198.89927343339494
  HOMO = -0.236679407636634  LUMO = 65.6895497408481
  mo_energy =
[-1.20300273e+02 -1.22635183e+01 -6.65730730e+00 -6.65730730e+00
 -6.65730730e+00 -1.16407570e+00 -2.36679408e-01 -2.36679408e-01
 -2.36679408e-01  6.56895497e+01  4.89168287e+02  2.50937481e+03
  1.24362794e+04  4.54546146e+04  1.32392714e+05]
E1 = -706.6182016465285  E_coul = 198.89927352341735
Extra cycle  E= -507.718928123111  delta_E= 4.55e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.57292365828627
E1 = -706.6182016465285  E_coul = 198.89927352341735
init E= -507.718928123111
    CPU time for initialize scf      2.03 sec, wall time      0.13 sec
  HOMO = -0.236679407106776  LUMO = 65.6895497492456
  mo_energy =
[-1.20300273e+02 -1.22635183e+01 -6.65730730e+00 -6.65730730e+00
 -6.65730730e+00 -1.16407570e+00 -2.36679407e-01 -2.36679407e-01
 -2.36679407e-01  6.56895497e+01  4.89168287e+02  2.50937481e+03
  1.24362794e+04  4.54546146e+04  1.32392714e+05]
E1 = -706.6182016481162  E_coul = 198.8992735250049
cycle= 1 E= -507.718928123111  delta_E= -1.14e-13  |g|= 2.94e-10  |ddm|= 7.33e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6182016481162  E_coul = 198.8992735250049
  HOMO = -0.236679407098372  LUMO = 65.6895497493915
  mo_energy =
[-1.20300273e+02 -1.22635183e+01 -6.65730730e+00 -6.65730730e+00
 -6.65730730e+00 -1.16407570e+00 -2.36679407e-01 -2.36679407e-01
 -2.36679407e-01  6.56895497e+01  4.89168287e+02  2.50937481e+03
  1.24362794e+04  4.54546146e+04  1.32392714e+05]
E1 = -706.6182016481472  E_coul = 198.89927352503622
Extra cycle  E= -507.718928123111  delta_E= 2.84e-13  |g|= 1.55e-11  |ddm|= 1.46e-11
    CPU time for scf_cycle      2.54 sec, wall time      0.29 sec
exp = [3.67546484e+04 7.34339961e+03 1.83773239e+04 1.41157900e+03
 3.33544421e+02 9.64567978e+01 3.25725497e+01 4.70567057e+00
 3.91003957e-01 8.59894562e+00 4.90989817e-01]
grad_E = [-2.02377664e-07  2.28480832e-06  1.27590606e-08  8.54693863e-05
 -1.01251873e-04 -1.24505888e-04 -5.20138478e-05 -6.82117524e-06
 -4.31574005e-05 -4.53599485e-06 -1.22309339e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483637        1
[INPUT] 0    0    [1    /1   ]  7343.39964932        1
[INPUT] 0    0    [1    /1   ]  18377.3238982        1
[INPUT] 0    0    [1    /1   ]  1411.58090073        1
[INPUT] 0    0    [1    /1   ]  333.539322538        1
[INPUT] 0    0    [1    /1   ]  96.4615651305        1
[INPUT] 0    0    [1    /1   ]  32.5754776187        1
[INPUT] 0    0    [1    /1   ]  4.70565873088        1
[INPUT] 0    0    [1    /1   ]  0.3909982241         1
[INPUT] 1    0    [1    /1   ]  8.59893066697        1
[INPUT] 1    0    [1    /1   ]  0.490989097072       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64836372349, 1.0]], [0, [7343.399649315285, 1.0]], [0, [18377.323898186027, 1.0]], [0, [1411.5809007268026, 1.0]], [0, [333.5393225384834, 1.0]], [0, [96.46156513049692, 1.0]], [0, [32.57547761868847, 1.0]], [0, [4.7056587308837035, 1.0]], [0, [0.39099822410030993, 1.0]], [1, [8.598930666969665, 1.0]], [1, [0.4909890970715638, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64836372]
bas 1, expnt(s) = [7343.39964932]
bas 2, expnt(s) = [18377.32389819]
bas 3, expnt(s) = [1411.58090073]
bas 4, expnt(s) = [333.53932254]
bas 5, expnt(s) = [96.46156513]
bas 6, expnt(s) = [32.57547762]
bas 7, expnt(s) = [4.70565873]
bas 8, expnt(s) = [0.39099822]
bas 9, expnt(s) = [8.59893067]
bas 10, expnt(s) = [0.4909891]
CPU time:       252.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339965e+03 2.00418542e+03
 1.83773239e+04 3.98773901e+03 1.41158090e+03 5.81827648e+02
 3.33539323e+02 1.97185650e+02 9.64615651e+01 7.77643869e+01
 3.25754776e+01 3.44495155e+01 4.70565873e+00 8.07198498e+00
 3.90998224e-01 1.24924067e+00 8.59893067e+00 4.29575942e+01
 4.90989097e-01 1.19901386e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32061832869382
cond(S) = 204.57488022909627
E1 = -689.1804713895342  E_coul = 184.9008866851461
init E= -504.279584704388
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680584808020762  LUMO = 64.3983338992832
  mo_energy =
[-1.21684637e+02 -1.32896423e+01 -7.62350758e+00 -7.62350758e+00
 -7.62350758e+00 -1.65014463e+00 -6.80584808e-01 -6.80584808e-01
 -6.80584808e-01  6.43983339e+01  4.87815697e+02  2.50810416e+03
  1.24351408e+04  4.54535547e+04  1.32391705e+05]
E1 = -706.664875794556  E_coul = 198.94659212823862
cycle= 1 E= -507.718283666317  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479329
diis-c [-0.22975646  1.        ]
  HOMO = -0.236398970102766  LUMO = 65.701044581905
  mo_energy =
[-1.20288134e+02 -1.22616374e+01 -6.65440659e+00 -6.65440659e+00
 -6.65440659e+00 -1.16397417e+00 -2.36398970e-01 -2.36398970e-01
 -2.36398970e-01  6.57010446e+01  4.89200621e+02  2.50940914e+03
  1.24363161e+04  4.54546527e+04  1.32392753e+05]
E1 = -706.6187341167583  E_coul = 198.89980615579637
cycle= 2 E= -507.718927960962  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634433
diis-c [-3.98617800e-05  1.29922514e-03  9.98700775e-01]
  HOMO = -0.236679818144767  LUMO = 65.6967027537095
  mo_energy =
[-1.20300092e+02 -1.22635062e+01 -6.65727138e+00 -6.65727138e+00
 -6.65727138e+00 -1.16407871e+00 -2.36679818e-01 -2.36679818e-01
 -2.36679818e-01  6.56967028e+01  4.89187727e+02  2.50939007e+03
  1.24362929e+04  4.54546279e+04  1.32392727e+05]
E1 = -706.617972221814  E_coul = 198.8990440468788
cycle= 3 E= -507.718928174935  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193164
diis-c [-9.07583789e-10  2.88345136e-05 -3.07364389e-02  1.03070760e+00]
  HOMO = -0.23668447822837  LUMO = 65.6966258959286
  mo_energy =
[-1.20300304e+02 -1.22635388e+01 -6.65732550e+00 -6.65732550e+00
 -6.65732550e+00 -1.16408016e+00 -2.36684478e-01 -2.36684478e-01
 -2.36684478e-01  6.56966259e+01  4.89187516e+02  2.50938979e+03
  1.24362926e+04  4.54546276e+04  1.32392727e+05]
E1 = -706.6179561391191  E_coul = 198.89902796406847
cycle= 4 E= -507.718928175051  delta_E= -1.15e-10  |g|= 6.75e-07  |ddm|= 7.5e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.07 sec
E1 = -706.6179561391191  E_coul = 198.89902796406847
  HOMO = -0.236684439417393  LUMO = 65.6966264614997
  mo_energy =
[-1.20300303e+02 -1.22635385e+01 -6.65732514e+00 -6.65732514e+00
 -6.65732514e+00 -1.16408015e+00 -2.36684439e-01 -2.36684439e-01
 -2.36684439e-01  6.56966265e+01  4.89187518e+02  2.50938980e+03
  1.24362926e+04  4.54546276e+04  1.32392727e+05]
E1 = -706.6179562291138  E_coul = 198.89902805406336
Extra cycle  E= -507.71892817505  delta_E= 1.71e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.24 sec
exp = [3.67546484e+04 7.34339965e+03 1.83773239e+04 1.41158090e+03
 3.33539323e+02 9.64615651e+01 3.25754776e+01 4.70565873e+00
 3.90998224e-01 8.59893067e+00 4.90989097e-01]
E = -507.71892817505045
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:32 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483637        1
[INPUT] 0    0    [1    /1   ]  7343.39964932        1
[INPUT] 0    0    [1    /1   ]  18377.3238982        1
[INPUT] 0    0    [1    /1   ]  1411.58090073        1
[INPUT] 0    0    [1    /1   ]  333.539322538        1
[INPUT] 0    0    [1    /1   ]  96.4615651305        1
[INPUT] 0    0    [1    /1   ]  32.5754776187        1
[INPUT] 0    0    [1    /1   ]  4.70565873088        1
[INPUT] 0    0    [1    /1   ]  0.3909982241         1
[INPUT] 1    0    [1    /1   ]  8.59893066697        1
[INPUT] 1    0    [1    /1   ]  0.490989097072       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64836372349, 1.0]], [0, [7343.399649315285, 1.0]], [0, [18377.323898186027, 1.0]], [0, [1411.5809007268026, 1.0]], [0, [333.5393225384834, 1.0]], [0, [96.46156513049692, 1.0]], [0, [32.57547761868847, 1.0]], [0, [4.7056587308837035, 1.0]], [0, [0.39099822410030993, 1.0]], [1, [8.598930666969665, 1.0]], [1, [0.4909890970715638, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64836372]
bas 1, expnt(s) = [7343.39964932]
bas 2, expnt(s) = [18377.32389819]
bas 3, expnt(s) = [1411.58090073]
bas 4, expnt(s) = [333.53932254]
bas 5, expnt(s) = [96.46156513]
bas 6, expnt(s) = [32.57547762]
bas 7, expnt(s) = [4.70565873]
bas 8, expnt(s) = [0.39099822]
bas 9, expnt(s) = [8.59893067]
bas 10, expnt(s) = [0.4909891]
CPU time:       254.09
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339965e+03 2.00418542e+03
 1.83773239e+04 3.98773901e+03 1.41158090e+03 5.81827648e+02
 3.33539323e+02 1.97185650e+02 9.64615651e+01 7.77643869e+01
 3.25754776e+01 3.44495155e+01 4.70565873e+00 8.07198498e+00
 3.90998224e-01 1.24924067e+00 8.59893067e+00 4.29575942e+01
 4.90989097e-01 1.19901386e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32061832869382
cond(S) = 204.57488022909627
E1 = -689.1804713895342  E_coul = 184.9008866851461
init E= -504.279584704388
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680584808020762  LUMO = 64.3983338992832
  mo_energy =
[-1.21684637e+02 -1.32896423e+01 -7.62350758e+00 -7.62350758e+00
 -7.62350758e+00 -1.65014463e+00 -6.80584808e-01 -6.80584808e-01
 -6.80584808e-01  6.43983339e+01  4.87815697e+02  2.50810416e+03
  1.24351408e+04  4.54535547e+04  1.32391705e+05]
E1 = -706.664875794556  E_coul = 198.94659212823862
cycle= 1 E= -507.718283666317  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479329
diis-c [-0.22975646  1.        ]
  HOMO = -0.236398970102766  LUMO = 65.701044581905
  mo_energy =
[-1.20288134e+02 -1.22616374e+01 -6.65440659e+00 -6.65440659e+00
 -6.65440659e+00 -1.16397417e+00 -2.36398970e-01 -2.36398970e-01
 -2.36398970e-01  6.57010446e+01  4.89200621e+02  2.50940914e+03
  1.24363161e+04  4.54546527e+04  1.32392753e+05]
E1 = -706.6187341167583  E_coul = 198.89980615579637
cycle= 2 E= -507.718927960962  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634433
diis-c [-3.98617800e-05  1.29922514e-03  9.98700775e-01]
  HOMO = -0.236679818144767  LUMO = 65.6967027537095
  mo_energy =
[-1.20300092e+02 -1.22635062e+01 -6.65727138e+00 -6.65727138e+00
 -6.65727138e+00 -1.16407871e+00 -2.36679818e-01 -2.36679818e-01
 -2.36679818e-01  6.56967028e+01  4.89187727e+02  2.50939007e+03
  1.24362929e+04  4.54546279e+04  1.32392727e+05]
E1 = -706.617972221814  E_coul = 198.8990440468788
cycle= 3 E= -507.718928174935  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193164
diis-c [-9.07583789e-10  2.88345136e-05 -3.07364389e-02  1.03070760e+00]
  HOMO = -0.23668447822837  LUMO = 65.6966258959286
  mo_energy =
[-1.20300304e+02 -1.22635388e+01 -6.65732550e+00 -6.65732550e+00
 -6.65732550e+00 -1.16408016e+00 -2.36684478e-01 -2.36684478e-01
 -2.36684478e-01  6.56966259e+01  4.89187516e+02  2.50938979e+03
  1.24362926e+04  4.54546276e+04  1.32392727e+05]
E1 = -706.6179561391191  E_coul = 198.89902796406847
cycle= 4 E= -507.718928175051  delta_E= -1.15e-10  |g|= 6.75e-07  |ddm|= 7.5e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6179561391191  E_coul = 198.89902796406847
  HOMO = -0.236684439417393  LUMO = 65.6966264614997
  mo_energy =
[-1.20300303e+02 -1.22635385e+01 -6.65732514e+00 -6.65732514e+00
 -6.65732514e+00 -1.16408015e+00 -2.36684439e-01 -2.36684439e-01
 -2.36684439e-01  6.56966265e+01  4.89187518e+02  2.50938980e+03
  1.24362926e+04  4.54546276e+04  1.32392727e+05]
E1 = -706.6179562291138  E_coul = 198.89902805406336
Extra cycle  E= -507.71892817505  delta_E= 1.71e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.57488022909627
E1 = -706.6179562291138  E_coul = 198.89902805406336
init E= -507.71892817505
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236684438887726  LUMO = 65.6966264698947
  mo_energy =
[-1.20300303e+02 -1.22635385e+01 -6.65732514e+00 -6.65732514e+00
 -6.65732514e+00 -1.16408015e+00 -2.36684439e-01 -2.36684439e-01
 -2.36684439e-01  6.56966265e+01  4.89187518e+02  2.50938980e+03
  1.24362926e+04  4.54546276e+04  1.32392727e+05]
E1 = -706.6179562307004  E_coul = 198.89902805564998
cycle= 1 E= -507.71892817505  delta_E=    0  |g|= 2.93e-10  |ddm|= 7.33e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6179562307004  E_coul = 198.89902805564998
  HOMO = -0.236684438879327  LUMO = 65.6966264700392
  mo_energy =
[-1.20300303e+02 -1.22635385e+01 -6.65732514e+00 -6.65732514e+00
 -6.65732514e+00 -1.16408015e+00 -2.36684439e-01 -2.36684439e-01
 -2.36684439e-01  6.56966265e+01  4.89187518e+02  2.50938980e+03
  1.24362926e+04  4.54546276e+04  1.32392727e+05]
E1 = -706.6179562307324  E_coul = 198.89902805568167
Extra cycle  E= -507.718928175051  delta_E= -2.27e-13  |g|= 1.26e-11  |ddm|= 1.47e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546484e+04 7.34339965e+03 1.83773239e+04 1.41158090e+03
 3.33539323e+02 9.64615651e+01 3.25754776e+01 4.70565873e+00
 3.90998224e-01 8.59893067e+00 4.90989097e-01]
grad_E = [-2.02425484e-07  2.28290387e-06  1.27098804e-08  8.55717959e-05
 -1.02343875e-04 -1.22966250e-04 -4.69821340e-05 -2.09129981e-05
 -1.43040649e-04 -1.70566493e-05 -4.21291829e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:39 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.648359         1
[INPUT] 0    0    [1    /1   ]  7343.39969396        1
[INPUT] 0    0    [1    /1   ]  18377.3238983        1
[INPUT] 0    0    [1    /1   ]  1411.58319062        1
[INPUT] 0    0    [1    /1   ]  333.532901512        1
[INPUT] 0    0    [1    /1   ]  96.4680801349        1
[INPUT] 0    0    [1    /1   ]  32.5793744471        1
[INPUT] 0    0    [1    /1   ]  4.7056536561         1
[INPUT] 0    0    [1    /1   ]  0.390994047834       1
[INPUT] 1    0    [1    /1   ]  8.59891813405        1
[INPUT] 1    0    [1    /1   ]  0.490988479888       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64835900525, 1.0]], [0, [7343.3996939625995, 1.0]], [0, [18377.32389830286, 1.0]], [0, [1411.5831906218411, 1.0]], [0, [333.53290151180875, 1.0]], [0, [96.46808013492324, 1.0]], [0, [32.579374447129595, 1.0]], [0, [4.705653656104391, 1.0]], [0, [0.3909940478343383, 1.0]], [1, [8.598918134054541, 1.0]], [1, [0.49098847988781347, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64835901]
bas 1, expnt(s) = [7343.39969396]
bas 2, expnt(s) = [18377.3238983]
bas 3, expnt(s) = [1411.58319062]
bas 4, expnt(s) = [333.53290151]
bas 5, expnt(s) = [96.46808013]
bas 6, expnt(s) = [32.57937445]
bas 7, expnt(s) = [4.70565366]
bas 8, expnt(s) = [0.39099405]
bas 9, expnt(s) = [8.59891813]
bas 10, expnt(s) = [0.49098848]
CPU time:       264.17
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339969e+03 2.00418543e+03
 1.83773239e+04 3.98773901e+03 1.41158319e+03 5.81828355e+02
 3.33532902e+02 1.97182803e+02 9.64680801e+01 7.77683260e+01
 3.25793744e+01 3.44526062e+01 4.70565366e+00 8.07197845e+00
 3.90994048e-01 1.24923066e+00 8.59891813e+00 4.29575160e+01
 4.90988480e-01 1.19901197e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320619562461246
cond(S) = 204.57754175499628
E1 = -689.1803170480995  E_coul = 184.90075190966164
init E= -504.279565138438
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680587378511321  LUMO = 64.4078766382819
  mo_energy =
[-1.21684652e+02 -1.32896562e+01 -7.62351725e+00 -7.62351725e+00
 -7.62351725e+00 -1.65014573e+00 -6.80587379e-01 -6.80587379e-01
 -6.80587379e-01  6.44078766e+01  4.87842060e+02  2.50812561e+03
  1.24351595e+04  4.54535730e+04  1.32391722e+05]
E1 = -706.6646855995774  E_coul = 198.94640169183927
cycle= 1 E= -507.718283907738  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479335
diis-c [-0.22976247  1.        ]
  HOMO = -0.236402812812011  LUMO = 65.7106020659481
  mo_energy =
[-1.20288157e+02 -1.22616543e+01 -6.65442019e+00 -6.65442019e+00
 -6.65442019e+00 -1.16397774e+00 -2.36402813e-01 -2.36402813e-01
 -2.36402813e-01  6.57106021e+01  4.89226981e+02  2.50943058e+03
  1.24363348e+04  4.54546710e+04  1.32392771e+05]
E1 = -706.6185533808498  E_coul = 198.89962531441523
cycle= 2 E= -507.718928066435  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634352
diis-c [-3.98519747e-05  1.29837695e-03  9.98701623e-01]
  HOMO = -0.236683591119707  LUMO = 65.7062607862974
  mo_energy =
[-1.20300113e+02 -1.22635226e+01 -6.65728432e+00 -6.65728432e+00
 -6.65728432e+00 -1.16408225e+00 -2.36683591e-01 -2.36683591e-01
 -2.36683591e-01  6.57062608e+01  4.89214089e+02  2.50941152e+03
  1.24363116e+04  4.54546462e+04  1.32392745e+05]
E1 = -706.6177916981155  E_coul = 198.89886341777935
cycle= 3 E= -507.718928280336  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193125
diis-c [-9.07172176e-10  2.88395338e-05 -3.07339612e-02  1.03070512e+00]
  HOMO = -0.236688249478918  LUMO = 65.7061839482437
  mo_energy =
[-1.20300325e+02 -1.22635551e+01 -6.65733842e+00 -6.65733842e+00
 -6.65733842e+00 -1.16408371e+00 -2.36688249e-01 -2.36688249e-01
 -2.36688249e-01  6.57061839e+01  4.89213878e+02  2.50941124e+03
  1.24363113e+04  4.54546459e+04  1.32392745e+05]
E1 = -706.6177756216592  E_coul = 198.89884734120716
cycle= 4 E= -507.718928280452  delta_E= -1.16e-10  |g|= 6.75e-07  |ddm|= 7.49e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6177756216592  E_coul = 198.89884734120716
  HOMO = -0.236688210684607  LUMO = 65.7061845136612
  mo_energy =
[-1.20300323e+02 -1.22635549e+01 -6.65733806e+00 -6.65733806e+00
 -6.65733806e+00 -1.16408369e+00 -2.36688211e-01 -2.36688211e-01
 -2.36688211e-01  6.57061845e+01  4.89213880e+02  2.50941125e+03
  1.24363113e+04  4.54546459e+04  1.32392745e+05]
E1 = -706.6177757116155  E_coul = 198.89884743116403
Extra cycle  E= -507.718928280452  delta_E= 5.68e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546484e+04 7.34339969e+03 1.83773239e+04 1.41158319e+03
 3.33532902e+02 9.64680801e+01 3.25793744e+01 4.70565366e+00
 3.90994048e-01 8.59891813e+00 4.90988480e-01]
E = -507.7189282804515
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:40 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.648359         1
[INPUT] 0    0    [1    /1   ]  7343.39969396        1
[INPUT] 0    0    [1    /1   ]  18377.3238983        1
[INPUT] 0    0    [1    /1   ]  1411.58319062        1
[INPUT] 0    0    [1    /1   ]  333.532901512        1
[INPUT] 0    0    [1    /1   ]  96.4680801349        1
[INPUT] 0    0    [1    /1   ]  32.5793744471        1
[INPUT] 0    0    [1    /1   ]  4.7056536561         1
[INPUT] 0    0    [1    /1   ]  0.390994047834       1
[INPUT] 1    0    [1    /1   ]  8.59891813405        1
[INPUT] 1    0    [1    /1   ]  0.490988479888       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64835900525, 1.0]], [0, [7343.3996939625995, 1.0]], [0, [18377.32389830286, 1.0]], [0, [1411.5831906218411, 1.0]], [0, [333.53290151180875, 1.0]], [0, [96.46808013492324, 1.0]], [0, [32.579374447129595, 1.0]], [0, [4.705653656104391, 1.0]], [0, [0.3909940478343383, 1.0]], [1, [8.598918134054541, 1.0]], [1, [0.49098847988781347, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64835901]
bas 1, expnt(s) = [7343.39969396]
bas 2, expnt(s) = [18377.3238983]
bas 3, expnt(s) = [1411.58319062]
bas 4, expnt(s) = [333.53290151]
bas 5, expnt(s) = [96.46808013]
bas 6, expnt(s) = [32.57937445]
bas 7, expnt(s) = [4.70565366]
bas 8, expnt(s) = [0.39099405]
bas 9, expnt(s) = [8.59891813]
bas 10, expnt(s) = [0.49098848]
CPU time:       265.38
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339969e+03 2.00418543e+03
 1.83773239e+04 3.98773901e+03 1.41158319e+03 5.81828355e+02
 3.33532902e+02 1.97182803e+02 9.64680801e+01 7.77683260e+01
 3.25793744e+01 3.44526062e+01 4.70565366e+00 8.07197845e+00
 3.90994048e-01 1.24923066e+00 8.59891813e+00 4.29575160e+01
 4.90988480e-01 1.19901197e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320619562461246
cond(S) = 204.57754175499628
E1 = -689.1803170480995  E_coul = 184.90075190966164
init E= -504.279565138438
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680587378511321  LUMO = 64.4078766382819
  mo_energy =
[-1.21684652e+02 -1.32896562e+01 -7.62351725e+00 -7.62351725e+00
 -7.62351725e+00 -1.65014573e+00 -6.80587379e-01 -6.80587379e-01
 -6.80587379e-01  6.44078766e+01  4.87842060e+02  2.50812561e+03
  1.24351595e+04  4.54535730e+04  1.32391722e+05]
E1 = -706.6646855995774  E_coul = 198.94640169183927
cycle= 1 E= -507.718283907738  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479335
diis-c [-0.22976247  1.        ]
  HOMO = -0.236402812812011  LUMO = 65.7106020659481
  mo_energy =
[-1.20288157e+02 -1.22616543e+01 -6.65442019e+00 -6.65442019e+00
 -6.65442019e+00 -1.16397774e+00 -2.36402813e-01 -2.36402813e-01
 -2.36402813e-01  6.57106021e+01  4.89226981e+02  2.50943058e+03
  1.24363348e+04  4.54546710e+04  1.32392771e+05]
E1 = -706.6185533808498  E_coul = 198.89962531441523
cycle= 2 E= -507.718928066435  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634352
diis-c [-3.98519747e-05  1.29837695e-03  9.98701623e-01]
  HOMO = -0.236683591119707  LUMO = 65.7062607862974
  mo_energy =
[-1.20300113e+02 -1.22635226e+01 -6.65728432e+00 -6.65728432e+00
 -6.65728432e+00 -1.16408225e+00 -2.36683591e-01 -2.36683591e-01
 -2.36683591e-01  6.57062608e+01  4.89214089e+02  2.50941152e+03
  1.24363116e+04  4.54546462e+04  1.32392745e+05]
E1 = -706.6177916981155  E_coul = 198.89886341777935
cycle= 3 E= -507.718928280336  delta_E= -2.14e-07  |g|= 0.000143  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193125
diis-c [-9.07172176e-10  2.88395338e-05 -3.07339612e-02  1.03070512e+00]
  HOMO = -0.236688249478918  LUMO = 65.7061839482437
  mo_energy =
[-1.20300325e+02 -1.22635551e+01 -6.65733842e+00 -6.65733842e+00
 -6.65733842e+00 -1.16408371e+00 -2.36688249e-01 -2.36688249e-01
 -2.36688249e-01  6.57061839e+01  4.89213878e+02  2.50941124e+03
  1.24363113e+04  4.54546459e+04  1.32392745e+05]
E1 = -706.6177756216592  E_coul = 198.89884734120716
cycle= 4 E= -507.718928280452  delta_E= -1.16e-10  |g|= 6.75e-07  |ddm|= 7.49e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6177756216592  E_coul = 198.89884734120716
  HOMO = -0.236688210684607  LUMO = 65.7061845136612
  mo_energy =
[-1.20300323e+02 -1.22635549e+01 -6.65733806e+00 -6.65733806e+00
 -6.65733806e+00 -1.16408369e+00 -2.36688211e-01 -2.36688211e-01
 -2.36688211e-01  6.57061845e+01  4.89213880e+02  2.50941125e+03
  1.24363113e+04  4.54546459e+04  1.32392745e+05]
E1 = -706.6177757116155  E_coul = 198.89884743116403
Extra cycle  E= -507.718928280452  delta_E= 5.68e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.57754175499628
E1 = -706.6177757116155  E_coul = 198.89884743116403
init E= -507.718928280452
    CPU time for initialize scf      2.10 sec, wall time      0.13 sec
  HOMO = -0.236688210155213  LUMO = 65.7061845220551
  mo_energy =
[-1.20300323e+02 -1.22635549e+01 -6.65733805e+00 -6.65733805e+00
 -6.65733805e+00 -1.16408369e+00 -2.36688210e-01 -2.36688210e-01
 -2.36688210e-01  6.57061845e+01  4.89213880e+02  2.50941125e+03
  1.24363113e+04  4.54546459e+04  1.32392745e+05]
E1 = -706.6177757132015  E_coul = 198.89884743274976
cycle= 1 E= -507.718928280452  delta_E= -1.71e-13  |g|= 2.95e-10  |ddm|= 7.32e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6177757132015  E_coul = 198.89884743274976
  HOMO = -0.236688210146821  LUMO = 65.7061845221996
  mo_energy =
[-1.20300323e+02 -1.22635549e+01 -6.65733805e+00 -6.65733805e+00
 -6.65733805e+00 -1.16408369e+00 -2.36688210e-01 -2.36688210e-01
 -2.36688210e-01  6.57061845e+01  4.89213880e+02  2.50941125e+03
  1.24363113e+04  4.54546459e+04  1.32392745e+05]
E1 = -706.6177757132328  E_coul = 198.89884743278122
Extra cycle  E= -507.718928280452  delta_E= 5.68e-14  |g|= 1.86e-11  |ddm|= 1.46e-11
    CPU time for scf_cycle      2.61 sec, wall time      0.34 sec
exp = [3.67546484e+04 7.34339969e+03 1.83773239e+04 1.41158319e+03
 3.33532902e+02 9.64680801e+01 3.25793744e+01 4.70565366e+00
 3.90994048e-01 8.59891813e+00 4.90988480e-01]
grad_E = [-2.02488426e-07  2.28039616e-06  1.26451557e-08  8.57074378e-05
 -1.03814548e-04 -1.20771903e-04 -4.06301902e-05 -3.13999889e-05
 -2.18777912e-04 -2.70433633e-05 -6.49315987e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483528        1
[INPUT] 0    0    [1    /1   ]  7343.39975047        1
[INPUT] 0    0    [1    /1   ]  18377.3238984        1
[INPUT] 0    0    [1    /1   ]  1411.58628527        1
[INPUT] 0    0    [1    /1   ]  333.523365677        1
[INPUT] 0    0    [1    /1   ]  96.479164431         1
[INPUT] 0    0    [1    /1   ]  32.5858652153        1
[INPUT] 0    0    [1    /1   ]  4.70564786035        1
[INPUT] 0    0    [1    /1   ]  0.390987781566       1
[INPUT] 1    0    [1    /1   ]  8.59889873082        1
[INPUT] 1    0    [1    /1   ]  0.490987519795       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64835279177, 1.0]], [0, [7343.399750465743, 1.0]], [0, [18377.323898408675, 1.0]], [0, [1411.586285272304, 1.0]], [0, [333.52336567744584, 1.0]], [0, [96.47916443104036, 1.0]], [0, [32.58586521525164, 1.0]], [0, [4.705647860349767, 1.0]], [0, [0.39098778156625563, 1.0]], [1, [8.598898730821386, 1.0]], [1, [0.4909875197949728, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64835279]
bas 1, expnt(s) = [7343.39975047]
bas 2, expnt(s) = [18377.32389841]
bas 3, expnt(s) = [1411.58628527]
bas 4, expnt(s) = [333.52336568]
bas 5, expnt(s) = [96.47916443]
bas 6, expnt(s) = [32.58586522]
bas 7, expnt(s) = [4.70564786]
bas 8, expnt(s) = [0.39098778]
bas 9, expnt(s) = [8.59889873]
bas 10, expnt(s) = [0.49098752]
CPU time:       275.55
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339975e+03 2.00418544e+03
 1.83773239e+04 3.98773901e+03 1.41158629e+03 5.81829312e+02
 3.33523366e+02 1.97178575e+02 9.64791644e+01 7.77750277e+01
 3.25858652e+01 3.44577541e+01 4.70564786e+00 8.07197099e+00
 3.90987782e-01 1.24921564e+00 8.59889873e+00 4.29573948e+01
 4.90987520e-01 1.19900904e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32062141057952
cond(S) = 204.5820625665496
E1 = -689.1800818203893  E_coul = 184.9005483513296
init E= -504.27953346906
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680591277329419  LUMO = 64.4238724278823
  mo_energy =
[-1.21684675e+02 -1.32896775e+01 -7.62353173e+00 -7.62353173e+00
 -7.62353173e+00 -1.65014752e+00 -6.80591277e-01 -6.80591277e-01
 -6.80591277e-01  6.44238724e+01  4.87887420e+02  2.50816486e+03
  1.24351934e+04  4.54536056e+04  1.32391754e+05]
E1 = -706.6643977207958  E_coul = 198.94611330558632
cycle= 1 E= -507.718284415209  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479346
diis-c [-0.22977238  1.        ]
  HOMO = -0.236408627915559  LUMO = 65.7266232054304
  mo_energy =
[-1.20288191e+02 -1.22616800e+01 -6.65444068e+00 -6.65444068e+00
 -6.65444068e+00 -1.16398320e+00 -2.36408628e-01 -2.36408628e-01
 -2.36408628e-01  6.57266232e+01  4.89272335e+02  2.50946983e+03
  1.24363687e+04  4.54547035e+04  1.32392802e+05]
E1 = -706.6182813517981  E_coul = 198.89935300642466
cycle= 2 E= -507.718928345373  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634216
diis-c [-3.98355827e-05  1.29696708e-03  9.98703033e-01]
  HOMO = -0.236689289440056  LUMO = 65.722282844199
  mo_energy =
[-1.20300143e+02 -1.22635476e+01 -6.65730372e+00 -6.65730372e+00
 -6.65730372e+00 -1.16408766e+00 -2.36689289e-01 -2.36689289e-01
 -2.36689289e-01  6.57222828e+01  4.89259447e+02  2.50945076e+03
  1.24363455e+04  4.54546788e+04  1.32392777e+05]
E1 = -706.6175200248133  E_coul = 198.89859146565806
cycle= 3 E= -507.718928559155  delta_E= -2.14e-07  |g|= 0.000142  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193058
diis-c [-9.06484990e-10  2.88478139e-05 -3.07298216e-02  1.03070097e+00]
  HOMO = -0.236693944915333  LUMO = 65.7222060391561
  mo_energy =
[-1.20300355e+02 -1.22635801e+01 -6.65735779e+00 -6.65735779e+00
 -6.65735779e+00 -1.16408912e+00 -2.36693945e-01 -2.36693945e-01
 -2.36693945e-01  6.57222060e+01  4.89259236e+02  2.50945049e+03
  1.24363452e+04  4.54546785e+04  1.32392776e+05]
E1 = -706.6175039588032  E_coul = 198.89857539953252
cycle= 4 E= -507.718928559271  delta_E= -1.15e-10  |g|= 6.74e-07  |ddm|= 7.49e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6175039588032  E_coul = 198.89857539953252
  HOMO = -0.236693906148903  LUMO = 65.7222066043232
  mo_energy =
[-1.20300354e+02 -1.22635799e+01 -6.65735743e+00 -6.65735743e+00
 -6.65735743e+00 -1.16408910e+00 -2.36693906e-01 -2.36693906e-01
 -2.36693906e-01  6.57222066e+01  4.89259238e+02  2.50945050e+03
  1.24363452e+04  4.54546785e+04  1.32392776e+05]
E1 = -706.6175040486962  E_coul = 198.8985754894258
Extra cycle  E= -507.71892855927  delta_E= 2.84e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546484e+04 7.34339975e+03 1.83773239e+04 1.41158629e+03
 3.33523366e+02 9.64791644e+01 3.25858652e+01 4.70564786e+00
 3.90987782e-01 8.59889873e+00 4.90987520e-01]
E = -507.7189285592704
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:47 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483528        1
[INPUT] 0    0    [1    /1   ]  7343.39975047        1
[INPUT] 0    0    [1    /1   ]  18377.3238984        1
[INPUT] 0    0    [1    /1   ]  1411.58628527        1
[INPUT] 0    0    [1    /1   ]  333.523365677        1
[INPUT] 0    0    [1    /1   ]  96.479164431         1
[INPUT] 0    0    [1    /1   ]  32.5858652153        1
[INPUT] 0    0    [1    /1   ]  4.70564786035        1
[INPUT] 0    0    [1    /1   ]  0.390987781566       1
[INPUT] 1    0    [1    /1   ]  8.59889873082        1
[INPUT] 1    0    [1    /1   ]  0.490987519795       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64835279177, 1.0]], [0, [7343.399750465743, 1.0]], [0, [18377.323898408675, 1.0]], [0, [1411.586285272304, 1.0]], [0, [333.52336567744584, 1.0]], [0, [96.47916443104036, 1.0]], [0, [32.58586521525164, 1.0]], [0, [4.705647860349767, 1.0]], [0, [0.39098778156625563, 1.0]], [1, [8.598898730821386, 1.0]], [1, [0.4909875197949728, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64835279]
bas 1, expnt(s) = [7343.39975047]
bas 2, expnt(s) = [18377.32389841]
bas 3, expnt(s) = [1411.58628527]
bas 4, expnt(s) = [333.52336568]
bas 5, expnt(s) = [96.47916443]
bas 6, expnt(s) = [32.58586522]
bas 7, expnt(s) = [4.70564786]
bas 8, expnt(s) = [0.39098778]
bas 9, expnt(s) = [8.59889873]
bas 10, expnt(s) = [0.49098752]
CPU time:       276.76
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339975e+03 2.00418544e+03
 1.83773239e+04 3.98773901e+03 1.41158629e+03 5.81829312e+02
 3.33523366e+02 1.97178575e+02 9.64791644e+01 7.77750277e+01
 3.25858652e+01 3.44577541e+01 4.70564786e+00 8.07197099e+00
 3.90987782e-01 1.24921564e+00 8.59889873e+00 4.29573948e+01
 4.90987520e-01 1.19900904e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32062141057952
cond(S) = 204.5820625665496
E1 = -689.1800818203893  E_coul = 184.9005483513296
init E= -504.27953346906
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680591277329419  LUMO = 64.4238724278823
  mo_energy =
[-1.21684675e+02 -1.32896775e+01 -7.62353173e+00 -7.62353173e+00
 -7.62353173e+00 -1.65014752e+00 -6.80591277e-01 -6.80591277e-01
 -6.80591277e-01  6.44238724e+01  4.87887420e+02  2.50816486e+03
  1.24351934e+04  4.54536056e+04  1.32391754e+05]
E1 = -706.6643977207958  E_coul = 198.94611330558632
cycle= 1 E= -507.718284415209  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479346
diis-c [-0.22977238  1.        ]
  HOMO = -0.236408627915559  LUMO = 65.7266232054304
  mo_energy =
[-1.20288191e+02 -1.22616800e+01 -6.65444068e+00 -6.65444068e+00
 -6.65444068e+00 -1.16398320e+00 -2.36408628e-01 -2.36408628e-01
 -2.36408628e-01  6.57266232e+01  4.89272335e+02  2.50946983e+03
  1.24363687e+04  4.54547035e+04  1.32392802e+05]
E1 = -706.6182813517981  E_coul = 198.89935300642466
cycle= 2 E= -507.718928345373  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00634216
diis-c [-3.98355827e-05  1.29696708e-03  9.98703033e-01]
  HOMO = -0.236689289440056  LUMO = 65.722282844199
  mo_energy =
[-1.20300143e+02 -1.22635476e+01 -6.65730372e+00 -6.65730372e+00
 -6.65730372e+00 -1.16408766e+00 -2.36689289e-01 -2.36689289e-01
 -2.36689289e-01  6.57222828e+01  4.89259447e+02  2.50945076e+03
  1.24363455e+04  4.54546788e+04  1.32392777e+05]
E1 = -706.6175200248133  E_coul = 198.89859146565806
cycle= 3 E= -507.718928559155  delta_E= -2.14e-07  |g|= 0.000142  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000193058
diis-c [-9.06484990e-10  2.88478139e-05 -3.07298216e-02  1.03070097e+00]
  HOMO = -0.236693944915333  LUMO = 65.7222060391561
  mo_energy =
[-1.20300355e+02 -1.22635801e+01 -6.65735779e+00 -6.65735779e+00
 -6.65735779e+00 -1.16408912e+00 -2.36693945e-01 -2.36693945e-01
 -2.36693945e-01  6.57222060e+01  4.89259236e+02  2.50945049e+03
  1.24363452e+04  4.54546785e+04  1.32392776e+05]
E1 = -706.6175039588032  E_coul = 198.89857539953252
cycle= 4 E= -507.718928559271  delta_E= -1.15e-10  |g|= 6.74e-07  |ddm|= 7.49e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6175039588032  E_coul = 198.89857539953252
  HOMO = -0.236693906148903  LUMO = 65.7222066043232
  mo_energy =
[-1.20300354e+02 -1.22635799e+01 -6.65735743e+00 -6.65735743e+00
 -6.65735743e+00 -1.16408910e+00 -2.36693906e-01 -2.36693906e-01
 -2.36693906e-01  6.57222066e+01  4.89259238e+02  2.50945050e+03
  1.24363452e+04  4.54546785e+04  1.32392776e+05]
E1 = -706.6175040486962  E_coul = 198.8985754894258
Extra cycle  E= -507.71892855927  delta_E= 2.84e-13  |g|= 1.31e-08  |ddm|= 4.23e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.5820625665496
E1 = -706.6175040486962  E_coul = 198.8985754894258
init E= -507.71892855927
    CPU time for initialize scf      2.08 sec, wall time      0.13 sec
  HOMO = -0.236693905619947  LUMO = 65.7222066127133
  mo_energy =
[-1.20300354e+02 -1.22635799e+01 -6.65735742e+00 -6.65735742e+00
 -6.65735742e+00 -1.16408910e+00 -2.36693906e-01 -2.36693906e-01
 -2.36693906e-01  6.57222066e+01  4.89259238e+02  2.50945050e+03
  1.24363452e+04  4.54546785e+04  1.32392776e+05]
E1 = -706.617504050281  E_coul = 198.89857549101018
cycle= 1 E= -507.718928559271  delta_E= -3.98e-13  |g|= 2.93e-10  |ddm|= 7.32e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.617504050281  E_coul = 198.89857549101018
  HOMO = -0.23669390561156  LUMO = 65.7222066128566
  mo_energy =
[-1.20300354e+02 -1.22635799e+01 -6.65735742e+00 -6.65735742e+00
 -6.65735742e+00 -1.16408910e+00 -2.36693906e-01 -2.36693906e-01
 -2.36693906e-01  6.57222066e+01  4.89259238e+02  2.50945050e+03
  1.24363452e+04  4.54546785e+04  1.32392776e+05]
E1 = -706.6175040503126  E_coul = 198.89857549104195
Extra cycle  E= -507.718928559271  delta_E= 1.14e-13  |g|= 1.49e-11  |ddm|= 1.47e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546484e+04 7.34339975e+03 1.83773239e+04 1.41158629e+03
 3.33523366e+02 9.64791644e+01 3.25858652e+01 4.70564786e+00
 3.90987782e-01 8.59889873e+00 4.90987520e-01]
grad_E = [-2.02588133e-07  2.27641854e-06  1.25426810e-08  8.59243290e-05
 -1.06207391e-04 -1.17145282e-04 -3.02488250e-05 -4.72532416e-05
 -3.33413561e-04 -4.23657059e-05 -9.94881294e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:54 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483468        1
[INPUT] 0    0    [1    /1   ]  7343.39979775        1
[INPUT] 0    0    [1    /1   ]  18377.3238984        1
[INPUT] 0    0    [1    /1   ]  1411.58954049        1
[INPUT] 0    0    [1    /1   ]  333.510616493        1
[INPUT] 0    0    [1    /1   ]  96.4980420817        1
[INPUT] 0    0    [1    /1   ]  32.5965831286        1
[INPUT] 0    0    [1    /1   ]  4.70564109722        1
[INPUT] 0    0    [1    /1   ]  0.390977825161       1
[INPUT] 1    0    [1    /1   ]  8.59886769837        1
[INPUT] 1    0    [1    /1   ]  0.490985977004       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64834677206, 1.0]], [0, [7343.399797751023, 1.0]], [0, [18377.323898354985, 1.0]], [0, [1411.5895404944386, 1.0]], [0, [333.5106164933003, 1.0]], [0, [96.49804208169877, 1.0]], [0, [32.596583128562436, 1.0]], [0, [4.705641097221799, 1.0]], [0, [0.39097782516062046, 1.0]], [1, [8.598867698365357, 1.0]], [1, [0.49098597700351, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64834677]
bas 1, expnt(s) = [7343.39979775]
bas 2, expnt(s) = [18377.32389835]
bas 3, expnt(s) = [1411.58954049]
bas 4, expnt(s) = [333.51061649]
bas 5, expnt(s) = [96.49804208]
bas 6, expnt(s) = [32.59658313]
bas 7, expnt(s) = [4.7056411]
bas 8, expnt(s) = [0.39097783]
bas 9, expnt(s) = [8.5988677]
bas 10, expnt(s) = [0.49098598]
CPU time:       286.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546483e+04 6.70655095e+03 7.34339980e+03 2.00418545e+03
 1.83773239e+04 3.98773901e+03 1.41158954e+03 5.81830318e+02
 3.33510616e+02 1.97172922e+02 9.64980421e+01 7.77864408e+01
 3.25965831e+01 3.44662539e+01 4.70564110e+00 8.07196229e+00
 3.90977825e-01 1.24919178e+00 8.59886770e+00 4.29572010e+01
 4.90985977e-01 1.19900433e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320624319397023
cond(S) = 204.589744072023
E1 = -689.1797038082265  E_coul = 184.90022513364218
init E= -504.279478674584
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680597501872208  LUMO = 64.4505084254949
  mo_energy =
[-1.21684710e+02 -1.32897111e+01 -7.62355465e+00 -7.62355465e+00
 -7.62355465e+00 -1.65015043e+00 -6.80597502e-01 -6.80597502e-01
 -6.80597502e-01  6.44505084e+01  4.87965967e+02  2.50823865e+03
  1.24352564e+04  4.54536648e+04  1.32391810e+05]
E1 = -706.6639395590466  E_coul = 198.94565403766137
cycle= 1 E= -507.718285521385  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479362
diis-c [-0.22978834  1.        ]
  HOMO = -0.236417882987047  LUMO = 65.7533017671651
  mo_energy =
[-1.20288246e+02 -1.22617208e+01 -6.65447324e+00 -6.65447324e+00
 -6.65447324e+00 -1.16399190e+00 -2.36417883e-01 -2.36417883e-01
 -2.36417883e-01  6.57533018e+01  4.89350875e+02  2.50954362e+03
  1.24364317e+04  4.54547627e+04  1.32392859e+05]
E1 = -706.6178495390828  E_coul = 198.89892046799835
cycle= 2 E= -507.718929071085  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00633992
diis-c [-3.98085325e-05  1.29463829e-03  9.98705362e-01]
  HOMO = -0.23669835029305  LUMO = 65.7489629286761
  mo_energy =
[-1.20300192e+02 -1.22635871e+01 -6.65733445e+00 -6.65733445e+00
 -6.65733445e+00 -1.16409628e+00 -2.36698350e-01 -2.36698350e-01
 -2.36698350e-01  6.57489629e+01  4.89337993e+02  2.50952456e+03
  1.24364085e+04  4.54547380e+04  1.32392833e+05]
E1 = -706.6170888040471  E_coul = 198.89815951938084
cycle= 3 E= -507.718929284666  delta_E= -2.14e-07  |g|= 0.000142  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192948
diis-c [-9.05348697e-10  2.88611659e-05 -3.07229349e-02  1.03069407e+00]
  HOMO = -0.236703000977199  LUMO = 65.7488861784539
  mo_energy =
[-1.20300404e+02 -1.22636197e+01 -6.65738847e+00 -6.65738847e+00
 -6.65738847e+00 -1.16409773e+00 -2.36703001e-01 -2.36703001e-01
 -2.36703001e-01  6.57488862e+01  4.89337783e+02  2.50952429e+03
  1.24364082e+04  4.54547376e+04  1.32392833e+05]
E1 = -706.617072755404  E_coul = 198.89814347062298
cycle= 4 E= -507.718929284781  delta_E= -1.15e-10  |g|= 6.74e-07  |ddm|= 7.48e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.617072755404  E_coul = 198.89814347062298
  HOMO = -0.236702962257065  LUMO = 65.7488867432045
  mo_energy =
[-1.20300403e+02 -1.22636194e+01 -6.65738811e+00 -6.65738811e+00
 -6.65738811e+00 -1.16409772e+00 -2.36702962e-01 -2.36702962e-01
 -2.36702962e-01  6.57488867e+01  4.89337784e+02  2.50952429e+03
  1.24364082e+04  4.54547376e+04  1.32392833e+05]
E1 = -706.6170728451921  E_coul = 198.89814356041077
Extra cycle  E= -507.718929284781  delta_E= -2.84e-13  |g|= 1.31e-08  |ddm|= 4.22e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546483e+04 7.34339980e+03 1.83773239e+04 1.41158954e+03
 3.33510616e+02 9.64980421e+01 3.25965831e+01 4.70564110e+00
 3.90977825e-01 8.59886770e+00 4.90985977e-01]
E = -507.7189292847813
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:30:54 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483468        1
[INPUT] 0    0    [1    /1   ]  7343.39979775        1
[INPUT] 0    0    [1    /1   ]  18377.3238984        1
[INPUT] 0    0    [1    /1   ]  1411.58954049        1
[INPUT] 0    0    [1    /1   ]  333.510616493        1
[INPUT] 0    0    [1    /1   ]  96.4980420817        1
[INPUT] 0    0    [1    /1   ]  32.5965831286        1
[INPUT] 0    0    [1    /1   ]  4.70564109722        1
[INPUT] 0    0    [1    /1   ]  0.390977825161       1
[INPUT] 1    0    [1    /1   ]  8.59886769837        1
[INPUT] 1    0    [1    /1   ]  0.490985977004       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64834677206, 1.0]], [0, [7343.399797751023, 1.0]], [0, [18377.323898354985, 1.0]], [0, [1411.5895404944386, 1.0]], [0, [333.5106164933003, 1.0]], [0, [96.49804208169877, 1.0]], [0, [32.596583128562436, 1.0]], [0, [4.705641097221799, 1.0]], [0, [0.39097782516062046, 1.0]], [1, [8.598867698365357, 1.0]], [1, [0.49098597700351, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64834677]
bas 1, expnt(s) = [7343.39979775]
bas 2, expnt(s) = [18377.32389835]
bas 3, expnt(s) = [1411.58954049]
bas 4, expnt(s) = [333.51061649]
bas 5, expnt(s) = [96.49804208]
bas 6, expnt(s) = [32.59658313]
bas 7, expnt(s) = [4.7056411]
bas 8, expnt(s) = [0.39097783]
bas 9, expnt(s) = [8.5988677]
bas 10, expnt(s) = [0.49098598]
CPU time:       287.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546483e+04 6.70655095e+03 7.34339980e+03 2.00418545e+03
 1.83773239e+04 3.98773901e+03 1.41158954e+03 5.81830318e+02
 3.33510616e+02 1.97172922e+02 9.64980421e+01 7.77864408e+01
 3.25965831e+01 3.44662539e+01 4.70564110e+00 8.07196229e+00
 3.90977825e-01 1.24919178e+00 8.59886770e+00 4.29572010e+01
 4.90985977e-01 1.19900433e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320624319397023
cond(S) = 204.589744072023
E1 = -689.1797038082265  E_coul = 184.90022513364218
init E= -504.279478674584
    CPU time for initialize scf      1.09 sec, wall time      0.11 sec
  HOMO = -0.680597501872208  LUMO = 64.4505084254949
  mo_energy =
[-1.21684710e+02 -1.32897111e+01 -7.62355465e+00 -7.62355465e+00
 -7.62355465e+00 -1.65015043e+00 -6.80597502e-01 -6.80597502e-01
 -6.80597502e-01  6.44505084e+01  4.87965967e+02  2.50823865e+03
  1.24352564e+04  4.54536648e+04  1.32391810e+05]
E1 = -706.6639395590466  E_coul = 198.94565403766137
cycle= 1 E= -507.718285521385  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479362
diis-c [-0.22978834  1.        ]
  HOMO = -0.236417882987047  LUMO = 65.7533017671651
  mo_energy =
[-1.20288246e+02 -1.22617208e+01 -6.65447324e+00 -6.65447324e+00
 -6.65447324e+00 -1.16399190e+00 -2.36417883e-01 -2.36417883e-01
 -2.36417883e-01  6.57533018e+01  4.89350875e+02  2.50954362e+03
  1.24364317e+04  4.54547627e+04  1.32392859e+05]
E1 = -706.6178495390828  E_coul = 198.89892046799835
cycle= 2 E= -507.718929071085  delta_E= -0.000644  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00633992
diis-c [-3.98085325e-05  1.29463829e-03  9.98705362e-01]
  HOMO = -0.23669835029305  LUMO = 65.7489629286761
  mo_energy =
[-1.20300192e+02 -1.22635871e+01 -6.65733445e+00 -6.65733445e+00
 -6.65733445e+00 -1.16409628e+00 -2.36698350e-01 -2.36698350e-01
 -2.36698350e-01  6.57489629e+01  4.89337993e+02  2.50952456e+03
  1.24364085e+04  4.54547380e+04  1.32392833e+05]
E1 = -706.6170888040471  E_coul = 198.89815951938084
cycle= 3 E= -507.718929284666  delta_E= -2.14e-07  |g|= 0.000142  |ddm|= 0.000353
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192948
diis-c [-9.05348697e-10  2.88611659e-05 -3.07229349e-02  1.03069407e+00]
  HOMO = -0.236703000977199  LUMO = 65.7488861784539
  mo_energy =
[-1.20300404e+02 -1.22636197e+01 -6.65738847e+00 -6.65738847e+00
 -6.65738847e+00 -1.16409773e+00 -2.36703001e-01 -2.36703001e-01
 -2.36703001e-01  6.57488862e+01  4.89337783e+02  2.50952429e+03
  1.24364082e+04  4.54547376e+04  1.32392833e+05]
E1 = -706.617072755404  E_coul = 198.89814347062298
cycle= 4 E= -507.718929284781  delta_E= -1.15e-10  |g|= 6.74e-07  |ddm|= 7.48e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.617072755404  E_coul = 198.89814347062298
  HOMO = -0.236702962257065  LUMO = 65.7488867432045
  mo_energy =
[-1.20300403e+02 -1.22636194e+01 -6.65738811e+00 -6.65738811e+00
 -6.65738811e+00 -1.16409772e+00 -2.36702962e-01 -2.36702962e-01
 -2.36702962e-01  6.57488867e+01  4.89337784e+02  2.50952429e+03
  1.24364082e+04  4.54547376e+04  1.32392833e+05]
E1 = -706.6170728451921  E_coul = 198.89814356041077
Extra cycle  E= -507.718929284781  delta_E= -2.84e-13  |g|= 1.31e-08  |ddm|= 4.22e-08
    CPU time for scf_cycle      1.73 sec, wall time      0.24 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.589744072023
E1 = -706.6170728451921  E_coul = 198.89814356041077
init E= -507.718929284781
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.236702961728847  LUMO = 65.7488867515853
  mo_energy =
[-1.20300403e+02 -1.22636194e+01 -6.65738810e+00 -6.65738810e+00
 -6.65738810e+00 -1.16409772e+00 -2.36702962e-01 -2.36702962e-01
 -2.36702962e-01  6.57488868e+01  4.89337784e+02  2.50952429e+03
  1.24364082e+04  4.54547376e+04  1.32392833e+05]
E1 = -706.617072846774  E_coul = 198.89814356199295
cycle= 1 E= -507.718929284781  delta_E= 2.27e-13  |g|= 2.95e-10  |ddm|= 7.31e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.617072846774  E_coul = 198.89814356199295
  HOMO = -0.236702961720476  LUMO = 65.7488867517305
  mo_energy =
[-1.20300403e+02 -1.22636194e+01 -6.65738810e+00 -6.65738810e+00
 -6.65738810e+00 -1.16409772e+00 -2.36702962e-01 -2.36702962e-01
 -2.36702962e-01  6.57488868e+01  4.89337784e+02  2.50952429e+03
  1.24364082e+04  4.54547376e+04  1.32392833e+05]
E1 = -706.6170728468057  E_coul = 198.89814356202447
Extra cycle  E= -507.718929284781  delta_E= -1.71e-13  |g|= 2.47e-11  |ddm|= 1.46e-11
    CPU time for scf_cycle      2.57 sec, wall time      0.29 sec
exp = [3.67546483e+04 7.34339980e+03 1.83773239e+04 1.41158954e+03
 3.33510616e+02 9.64980421e+01 3.25965831e+01 4.70564110e+00
 3.90977825e-01 8.59886770e+00 4.90985977e-01]
grad_E = [-2.02739252e-07  2.27037553e-06  1.23875035e-08  8.62584913e-05
 -1.10001928e-04 -1.11269668e-04 -1.35450734e-05 -7.24959444e-05
 -5.15950042e-04 -6.68294276e-05 -1.54523859e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:01 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483474        1
[INPUT] 0    0    [1    /1   ]  7343.39976006        1
[INPUT] 0    0    [1    /1   ]  18377.3238977        1
[INPUT] 0    0    [1    /1   ]  1411.59029513        1
[INPUT] 0    0    [1    /1   ]  333.496775436        1
[INPUT] 0    0    [1    /1   ]  96.5313209966        1
[INPUT] 0    0    [1    /1   ]  32.614644471         1
[INPUT] 0    0    [1    /1   ]  4.70563619828        1
[INPUT] 0    0    [1    /1   ]  0.390961806288       1
[INPUT] 1    0    [1    /1   ]  8.59881756948        1
[INPUT] 1    0    [1    /1   ]  0.490983465186       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64834744341, 1.0]], [0, [7343.399760062467, 1.0]], [0, [18377.323897681847, 1.0]], [0, [1411.5902951255746, 1.0]], [0, [333.49677543554566, 1.0]], [0, [96.53132099661018, 1.0]], [0, [32.614644470954886, 1.0]], [0, [4.705636198276563, 1.0]], [0, [0.39096180628810495, 1.0]], [1, [8.598817569476783, 1.0]], [1, [0.49098346518562375, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64834744]
bas 1, expnt(s) = [7343.39976006]
bas 2, expnt(s) = [18377.32389768]
bas 3, expnt(s) = [1411.59029513]
bas 4, expnt(s) = [333.49677544]
bas 5, expnt(s) = [96.531321]
bas 6, expnt(s) = [32.61464447]
bas 7, expnt(s) = [4.7056362]
bas 8, expnt(s) = [0.39096181]
bas 9, expnt(s) = [8.59881757]
bas 10, expnt(s) = [0.49098347]
CPU time:       298.52
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546483e+04 6.70655095e+03 7.34339976e+03 2.00418544e+03
 1.83773239e+04 3.98773901e+03 1.41159030e+03 5.81830552e+02
 3.33496775e+02 1.97166784e+02 9.65313210e+01 7.78065594e+01
 3.26146445e+01 3.44805759e+01 4.70563620e+00 8.07195599e+00
 3.90961806e-01 1.24915340e+00 8.59881757e+00 4.29568880e+01
 4.90983465e-01 1.19899667e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32062892009781
cond(S) = 204.60324052882646
E1 = -689.1790859677523  E_coul = 184.89970678777576
init E= -504.279379179977
    CPU time for initialize scf      0.36 sec, wall time      0.06 sec
  HOMO = -0.680607577519471  LUMO = 64.4959596648624
  mo_energy =
[-1.21684769e+02 -1.32897646e+01 -7.62359127e+00 -7.62359127e+00
 -7.62359127e+00 -1.65015525e+00 -6.80607578e-01 -6.80607578e-01
 -6.80607578e-01  6.44959597e+01  4.88107637e+02  2.50838593e+03
  1.24353804e+04  4.54537782e+04  1.32391918e+05]
E1 = -706.6632021179901  E_coul = 198.94491404939114
cycle= 1 E= -507.718288068599  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479389
diis-c [-0.22981413  1.        ]
  HOMO = -0.236432786972109  LUMO = 65.7988263137494
  mo_energy =
[-1.20288337e+02 -1.22617857e+01 -6.65452553e+00 -6.65452553e+00
 -6.65452553e+00 -1.16400588e+00 -2.36432787e-01 -2.36432787e-01
 -2.36432787e-01  6.57988263e+01  4.89492531e+02  2.50969089e+03
  1.24365557e+04  4.54548761e+04  1.32392966e+05]
E1 = -706.6171569377414  E_coul = 198.8982259680552
cycle= 2 E= -507.718930969686  delta_E= -0.000643  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00633615
diis-c [-3.97630242e-05  1.29071110e-03  9.98709289e-01]
  HOMO = -0.236712923546555  LUMO = 65.7944900560836
  mo_energy =
[-1.20300273e+02 -1.22636499e+01 -6.65738363e+00 -6.65738363e+00
 -6.65738363e+00 -1.16411014e+00 -2.36712924e-01 -2.36712924e-01
 -2.36712924e-01  6.57944901e+01  4.89479659e+02  2.50967185e+03
  1.24365325e+04  4.54548513e+04  1.32392941e+05]
E1 = -706.6163972114252  E_coul = 198.89746602849817
cycle= 3 E= -507.718931182927  delta_E= -2.13e-07  |g|= 0.000142  |ddm|= 0.000352
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192762
diis-c [-9.03429458e-10  2.88831047e-05 -3.07112055e-02  1.03068232e+00]
  HOMO = -0.236717566084271  LUMO = 65.7944133990059
  mo_energy =
[-1.20300484e+02 -1.22636824e+01 -6.65743756e+00 -6.65743756e+00
 -6.65743756e+00 -1.16411159e+00 -2.36717566e-01 -2.36717566e-01
 -2.36717566e-01  6.57944134e+01  4.89479449e+02  2.50967158e+03
  1.24365322e+04  4.54548510e+04  1.32392940e+05]
E1 = -706.6163811923394  E_coul = 198.89745000929761
cycle= 4 E= -507.718931183042  delta_E= -1.15e-10  |g|= 6.73e-07  |ddm|= 7.47e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6163811923394  E_coul = 198.89745000929761
  HOMO = -0.236717527442869  LUMO = 65.7944139630498
  mo_energy =
[-1.20300483e+02 -1.22636821e+01 -6.65743720e+00 -6.65743720e+00
 -6.65743720e+00 -1.16411157e+00 -2.36717527e-01 -2.36717527e-01
 -2.36717527e-01  6.57944140e+01  4.89479451e+02  2.50967158e+03
  1.24365322e+04  4.54548510e+04  1.32392940e+05]
E1 = -706.6163812819473  E_coul = 198.89745009890547
Extra cycle  E= -507.718931183042  delta_E=    0  |g|= 1.3e-08  |ddm|= 4.22e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546483e+04 7.34339976e+03 1.83773239e+04 1.41159030e+03
 3.33496775e+02 9.65313210e+01 3.26146445e+01 4.70563620e+00
 3.90961806e-01 8.59881757e+00 4.90983465e-01]
E = -507.71893118304183
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:02 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483474        1
[INPUT] 0    0    [1    /1   ]  7343.39976006        1
[INPUT] 0    0    [1    /1   ]  18377.3238977        1
[INPUT] 0    0    [1    /1   ]  1411.59029513        1
[INPUT] 0    0    [1    /1   ]  333.496775436        1
[INPUT] 0    0    [1    /1   ]  96.5313209966        1
[INPUT] 0    0    [1    /1   ]  32.614644471         1
[INPUT] 0    0    [1    /1   ]  4.70563619828        1
[INPUT] 0    0    [1    /1   ]  0.390961806288       1
[INPUT] 1    0    [1    /1   ]  8.59881756948        1
[INPUT] 1    0    [1    /1   ]  0.490983465186       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64834744341, 1.0]], [0, [7343.399760062467, 1.0]], [0, [18377.323897681847, 1.0]], [0, [1411.5902951255746, 1.0]], [0, [333.49677543554566, 1.0]], [0, [96.53132099661018, 1.0]], [0, [32.614644470954886, 1.0]], [0, [4.705636198276563, 1.0]], [0, [0.39096180628810495, 1.0]], [1, [8.598817569476783, 1.0]], [1, [0.49098346518562375, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64834744]
bas 1, expnt(s) = [7343.39976006]
bas 2, expnt(s) = [18377.32389768]
bas 3, expnt(s) = [1411.59029513]
bas 4, expnt(s) = [333.49677544]
bas 5, expnt(s) = [96.531321]
bas 6, expnt(s) = [32.61464447]
bas 7, expnt(s) = [4.7056362]
bas 8, expnt(s) = [0.39096181]
bas 9, expnt(s) = [8.59881757]
bas 10, expnt(s) = [0.49098347]
CPU time:       299.75
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546483e+04 6.70655095e+03 7.34339976e+03 2.00418544e+03
 1.83773239e+04 3.98773901e+03 1.41159030e+03 5.81830552e+02
 3.33496775e+02 1.97166784e+02 9.65313210e+01 7.78065594e+01
 3.26146445e+01 3.44805759e+01 4.70563620e+00 8.07195599e+00
 3.90961806e-01 1.24915340e+00 8.59881757e+00 4.29568880e+01
 4.90983465e-01 1.19899667e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32062892009781
cond(S) = 204.60324052882646
E1 = -689.1790859677523  E_coul = 184.89970678777576
init E= -504.279379179977
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680607577519471  LUMO = 64.4959596648624
  mo_energy =
[-1.21684769e+02 -1.32897646e+01 -7.62359127e+00 -7.62359127e+00
 -7.62359127e+00 -1.65015525e+00 -6.80607578e-01 -6.80607578e-01
 -6.80607578e-01  6.44959597e+01  4.88107637e+02  2.50838593e+03
  1.24353804e+04  4.54537782e+04  1.32391918e+05]
E1 = -706.6632021179901  E_coul = 198.94491404939114
cycle= 1 E= -507.718288068599  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479389
diis-c [-0.22981413  1.        ]
  HOMO = -0.236432786972109  LUMO = 65.7988263137494
  mo_energy =
[-1.20288337e+02 -1.22617857e+01 -6.65452553e+00 -6.65452553e+00
 -6.65452553e+00 -1.16400588e+00 -2.36432787e-01 -2.36432787e-01
 -2.36432787e-01  6.57988263e+01  4.89492531e+02  2.50969089e+03
  1.24365557e+04  4.54548761e+04  1.32392966e+05]
E1 = -706.6171569377414  E_coul = 198.8982259680552
cycle= 2 E= -507.718930969686  delta_E= -0.000643  |g|= 0.00587  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00633615
diis-c [-3.97630242e-05  1.29071110e-03  9.98709289e-01]
  HOMO = -0.236712923546555  LUMO = 65.7944900560836
  mo_energy =
[-1.20300273e+02 -1.22636499e+01 -6.65738363e+00 -6.65738363e+00
 -6.65738363e+00 -1.16411014e+00 -2.36712924e-01 -2.36712924e-01
 -2.36712924e-01  6.57944901e+01  4.89479659e+02  2.50967185e+03
  1.24365325e+04  4.54548513e+04  1.32392941e+05]
E1 = -706.6163972114252  E_coul = 198.89746602849817
cycle= 3 E= -507.718931182927  delta_E= -2.13e-07  |g|= 0.000142  |ddm|= 0.000352
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192762
diis-c [-9.03429458e-10  2.88831047e-05 -3.07112055e-02  1.03068232e+00]
  HOMO = -0.236717566084271  LUMO = 65.7944133990059
  mo_energy =
[-1.20300484e+02 -1.22636824e+01 -6.65743756e+00 -6.65743756e+00
 -6.65743756e+00 -1.16411159e+00 -2.36717566e-01 -2.36717566e-01
 -2.36717566e-01  6.57944134e+01  4.89479449e+02  2.50967158e+03
  1.24365322e+04  4.54548510e+04  1.32392940e+05]
E1 = -706.6163811923394  E_coul = 198.89745000929761
cycle= 4 E= -507.718931183042  delta_E= -1.15e-10  |g|= 6.73e-07  |ddm|= 7.47e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6163811923394  E_coul = 198.89745000929761
  HOMO = -0.236717527442869  LUMO = 65.7944139630498
  mo_energy =
[-1.20300483e+02 -1.22636821e+01 -6.65743720e+00 -6.65743720e+00
 -6.65743720e+00 -1.16411157e+00 -2.36717527e-01 -2.36717527e-01
 -2.36717527e-01  6.57944140e+01  4.89479451e+02  2.50967158e+03
  1.24365322e+04  4.54548510e+04  1.32392940e+05]
E1 = -706.6163812819473  E_coul = 198.89745009890547
Extra cycle  E= -507.718931183042  delta_E=    0  |g|= 1.3e-08  |ddm|= 4.22e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.60324052882646
E1 = -706.6163812819473  E_coul = 198.89745009890547
init E= -507.718931183042
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236717526915911  LUMO = 65.7944139714166
  mo_energy =
[-1.20300483e+02 -1.22636821e+01 -6.65743719e+00 -6.65743719e+00
 -6.65743719e+00 -1.16411157e+00 -2.36717527e-01 -2.36717527e-01
 -2.36717527e-01  6.57944140e+01  4.89479451e+02  2.50967158e+03
  1.24365322e+04  4.54548510e+04  1.32392940e+05]
E1 = -706.6163812835263  E_coul = 198.89745010048452
cycle= 1 E= -507.718931183042  delta_E= 1.14e-13  |g|= 2.95e-10  |ddm|= 7.3e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6163812835263  E_coul = 198.89745010048452
  HOMO = -0.23671752690756  LUMO = 65.7944139715619
  mo_energy =
[-1.20300483e+02 -1.22636821e+01 -6.65743719e+00 -6.65743719e+00
 -6.65743719e+00 -1.16411157e+00 -2.36717527e-01 -2.36717527e-01
 -2.36717527e-01  6.57944140e+01  4.89479451e+02  2.50967158e+03
  1.24365322e+04  4.54548510e+04  1.32392940e+05]
E1 = -706.6163812835576  E_coul = 198.8974501005157
Extra cycle  E= -507.718931183042  delta_E= -2.27e-13  |g|= 2.53e-11  |ddm|= 1.45e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546483e+04 7.34339976e+03 1.83773239e+04 1.41159030e+03
 3.33496775e+02 9.65313210e+01 3.26146445e+01 4.70563620e+00
 3.90961806e-01 8.59881757e+00 4.90983465e-01]
grad_E = [-2.02959425e-07  2.26153104e-06  1.21617206e-08  8.67603803e-05
 -1.15995409e-04 -1.01659279e-04  1.34929104e-05 -1.13167692e-04
 -8.10236820e-04 -1.06292109e-04 -2.43251388e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:08 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483757        1
[INPUT] 0    0    [1    /1   ]  7343.3994015         1
[INPUT] 0    0    [1    /1   ]  18377.3238951        1
[INPUT] 0    0    [1    /1   ]  1411.57972921        1
[INPUT] 0    0    [1    /1   ]  333.492270465        1
[INPUT] 0    0    [1    /1   ]  96.5918838441        1
[INPUT] 0    0    [1    /1   ]  32.6455119615        1
[INPUT] 0    0    [1    /1   ]  4.70564395563        1
[INPUT] 0    0    [1    /1   ]  0.390936289471       1
[INPUT] 1    0    [1    /1   ]  8.59873727886        1
[INPUT] 1    0    [1    /1   ]  0.490979390059       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64837569509, 1.0]], [0, [7343.399401498718, 1.0]], [0, [18377.32389507098, 1.0]], [0, [1411.579729209903, 1.0]], [0, [333.49227046534344, 1.0]], [0, [96.59188384412154, 1.0]], [0, [32.645511961504205, 1.0]], [0, [4.70564395563047, 1.0]], [0, [0.3909362894705763, 1.0]], [1, [8.59873727885773, 1.0]], [1, [0.4909793900590384, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6483757]
bas 1, expnt(s) = [7343.3994015]
bas 2, expnt(s) = [18377.32389507]
bas 3, expnt(s) = [1411.57972921]
bas 4, expnt(s) = [333.49227047]
bas 5, expnt(s) = [96.59188384]
bas 6, expnt(s) = [32.64551196]
bas 7, expnt(s) = [4.70564396]
bas 8, expnt(s) = [0.39093629]
bas 9, expnt(s) = [8.59873728]
bas 10, expnt(s) = [0.49097939]
CPU time:       309.63
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339940e+03 2.00418537e+03
 1.83773239e+04 3.98773901e+03 1.41157973e+03 5.81827285e+02
 3.33492270e+02 1.97164787e+02 9.65918838e+01 7.78431679e+01
 3.26455120e+01 3.45050481e+01 4.70564396e+00 8.07196597e+00
 3.90936289e-01 1.24909225e+00 8.59873728e+00 4.29563866e+01
 4.90979390e-01 1.19898423e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320636038818392
cond(S) = 204.62769325010842
E1 = -689.1780769523858  E_coul = 184.89888586858004
init E= -504.279191083806
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680623783186254  LUMO = 64.5750625147577
  mo_energy =
[-1.21684864e+02 -1.32898476e+01 -7.62364889e+00 -7.62364889e+00
 -7.62364889e+00 -1.65016328e+00 -6.80623783e-01 -6.80623783e-01
 -6.80623783e-01  6.45750625e+01  4.88373093e+02  2.50869511e+03
  1.24356370e+04  4.54540063e+04  1.32392132e+05]
E1 = -706.6620273422953  E_coul = 198.94373321196892
cycle= 1 E= -507.718294130326  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479432
diis-c [-0.22985549  1.        ]
  HOMO = -0.236456555388458  LUMO = 65.8780583684838
  mo_energy =
[-1.20288486e+02 -1.22618871e+01 -6.65460851e+00 -6.65460851e+00
 -6.65460851e+00 -1.16402816e+00 -2.36456555e-01 -2.36456555e-01
 -2.36456555e-01  6.58780584e+01  4.89757963e+02  2.51000005e+03
  1.24368123e+04  4.54551042e+04  1.32393180e+05]
E1 = -706.6160598722589  E_coul = 198.89712396773638
cycle= 2 E= -507.718935904523  delta_E= -0.000642  |g|= 0.00586  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00632972
diis-c [-3.96854544e-05  1.28399081e-03  9.98716009e-01]
  HOMO = -0.23673611827978  LUMO = 65.8737265581648
  mo_energy =
[-1.20300404e+02 -1.22637477e+01 -6.65746121e+00 -6.65746121e+00
 -6.65746121e+00 -1.16413218e+00 -2.36736118e-01 -2.36736118e-01
 -2.36736118e-01  6.58737266e+01  4.89745109e+02  2.50998104e+03
  1.24367891e+04  4.54550795e+04  1.32393155e+05]
E1 = -706.6153018973465  E_coul = 198.8963657801755
cycle= 3 E= -507.718936117171  delta_E= -2.13e-07  |g|= 0.000142  |ddm|= 0.000352
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192443
diis-c [-9.00142217e-10  2.89188172e-05 -3.06908390e-02  1.03066192e+00]
  HOMO = -0.236740746718325  LUMO = 65.8736500621627
  mo_energy =
[-1.20300615e+02 -1.22637801e+01 -6.65751499e+00 -6.65751499e+00
 -6.65751499e+00 -1.16413363e+00 -2.36740747e-01 -2.36740747e-01
 -2.36740747e-01  6.58736501e+01  4.89744900e+02  2.50998077e+03
  1.24367888e+04  4.54550791e+04  1.32393155e+05]
E1 = -706.6152859294816  E_coul = 198.89634981219626
cycle= 4 E= -507.718936117285  delta_E= -1.14e-10  |g|= 6.71e-07  |ddm|= 7.45e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6152859294816  E_coul = 198.89634981219626
  HOMO = -0.236740708213133  LUMO = 65.8736506249854
  mo_energy =
[-1.20300614e+02 -1.22637798e+01 -6.65751463e+00 -6.65751463e+00
 -6.65751463e+00 -1.16413362e+00 -2.36740708e-01 -2.36740708e-01
 -2.36740708e-01  6.58736506e+01  4.89744902e+02  2.50998077e+03
  1.24367888e+04  4.54550791e+04  1.32393155e+05]
E1 = -706.6152860187782  E_coul = 198.8963499014933
Extra cycle  E= -507.718936117285  delta_E= 4.55e-13  |g|= 1.3e-08  |ddm|= 4.2e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546484e+04 7.34339940e+03 1.83773239e+04 1.41157973e+03
 3.33492270e+02 9.65918838e+01 3.26455120e+01 4.70564396e+00
 3.90936289e-01 8.59873728e+00 4.90979390e-01]
E = -507.7189361172849
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:09 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6483757        1
[INPUT] 0    0    [1    /1   ]  7343.3994015         1
[INPUT] 0    0    [1    /1   ]  18377.3238951        1
[INPUT] 0    0    [1    /1   ]  1411.57972921        1
[INPUT] 0    0    [1    /1   ]  333.492270465        1
[INPUT] 0    0    [1    /1   ]  96.5918838441        1
[INPUT] 0    0    [1    /1   ]  32.6455119615        1
[INPUT] 0    0    [1    /1   ]  4.70564395563        1
[INPUT] 0    0    [1    /1   ]  0.390936289471       1
[INPUT] 1    0    [1    /1   ]  8.59873727886        1
[INPUT] 1    0    [1    /1   ]  0.490979390059       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.64837569509, 1.0]], [0, [7343.399401498718, 1.0]], [0, [18377.32389507098, 1.0]], [0, [1411.579729209903, 1.0]], [0, [333.49227046534344, 1.0]], [0, [96.59188384412154, 1.0]], [0, [32.645511961504205, 1.0]], [0, [4.70564395563047, 1.0]], [0, [0.3909362894705763, 1.0]], [1, [8.59873727885773, 1.0]], [1, [0.4909793900590384, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6483757]
bas 1, expnt(s) = [7343.3994015]
bas 2, expnt(s) = [18377.32389507]
bas 3, expnt(s) = [1411.57972921]
bas 4, expnt(s) = [333.49227047]
bas 5, expnt(s) = [96.59188384]
bas 6, expnt(s) = [32.64551196]
bas 7, expnt(s) = [4.70564396]
bas 8, expnt(s) = [0.39093629]
bas 9, expnt(s) = [8.59873728]
bas 10, expnt(s) = [0.49097939]
CPU time:       310.85
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546484e+04 6.70655095e+03 7.34339940e+03 2.00418537e+03
 1.83773239e+04 3.98773901e+03 1.41157973e+03 5.81827285e+02
 3.33492270e+02 1.97164787e+02 9.65918838e+01 7.78431679e+01
 3.26455120e+01 3.45050481e+01 4.70564396e+00 8.07196597e+00
 3.90936289e-01 1.24909225e+00 8.59873728e+00 4.29563866e+01
 4.90979390e-01 1.19898423e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320636038818392
cond(S) = 204.62769325010842
E1 = -689.1780769523858  E_coul = 184.89888586858004
init E= -504.279191083806
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680623783186254  LUMO = 64.5750625147577
  mo_energy =
[-1.21684864e+02 -1.32898476e+01 -7.62364889e+00 -7.62364889e+00
 -7.62364889e+00 -1.65016328e+00 -6.80623783e-01 -6.80623783e-01
 -6.80623783e-01  6.45750625e+01  4.88373093e+02  2.50869511e+03
  1.24356370e+04  4.54540063e+04  1.32392132e+05]
E1 = -706.6620273422953  E_coul = 198.94373321196892
cycle= 1 E= -507.718294130326  delta_E= -3.44  |g|= 0.337  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479432
diis-c [-0.22985549  1.        ]
  HOMO = -0.236456555388458  LUMO = 65.8780583684838
  mo_energy =
[-1.20288486e+02 -1.22618871e+01 -6.65460851e+00 -6.65460851e+00
 -6.65460851e+00 -1.16402816e+00 -2.36456555e-01 -2.36456555e-01
 -2.36456555e-01  6.58780584e+01  4.89757963e+02  2.51000005e+03
  1.24368123e+04  4.54551042e+04  1.32393180e+05]
E1 = -706.6160598722589  E_coul = 198.89712396773638
cycle= 2 E= -507.718935904523  delta_E= -0.000642  |g|= 0.00586  |ddm|= 0.0218
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00632972
diis-c [-3.96854544e-05  1.28399081e-03  9.98716009e-01]
  HOMO = -0.23673611827978  LUMO = 65.8737265581648
  mo_energy =
[-1.20300404e+02 -1.22637477e+01 -6.65746121e+00 -6.65746121e+00
 -6.65746121e+00 -1.16413218e+00 -2.36736118e-01 -2.36736118e-01
 -2.36736118e-01  6.58737266e+01  4.89745109e+02  2.50998104e+03
  1.24367891e+04  4.54550795e+04  1.32393155e+05]
E1 = -706.6153018973465  E_coul = 198.8963657801755
cycle= 3 E= -507.718936117171  delta_E= -2.13e-07  |g|= 0.000142  |ddm|= 0.000352
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000192443
diis-c [-9.00142217e-10  2.89188172e-05 -3.06908390e-02  1.03066192e+00]
  HOMO = -0.236740746718325  LUMO = 65.8736500621627
  mo_energy =
[-1.20300615e+02 -1.22637801e+01 -6.65751499e+00 -6.65751499e+00
 -6.65751499e+00 -1.16413363e+00 -2.36740747e-01 -2.36740747e-01
 -2.36740747e-01  6.58736501e+01  4.89744900e+02  2.50998077e+03
  1.24367888e+04  4.54550791e+04  1.32393155e+05]
E1 = -706.6152859294816  E_coul = 198.89634981219626
cycle= 4 E= -507.718936117285  delta_E= -1.14e-10  |g|= 6.71e-07  |ddm|= 7.45e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6152859294816  E_coul = 198.89634981219626
  HOMO = -0.236740708213133  LUMO = 65.8736506249854
  mo_energy =
[-1.20300614e+02 -1.22637798e+01 -6.65751463e+00 -6.65751463e+00
 -6.65751463e+00 -1.16413362e+00 -2.36740708e-01 -2.36740708e-01
 -2.36740708e-01  6.58736506e+01  4.89744902e+02  2.50998077e+03
  1.24367888e+04  4.54550791e+04  1.32393155e+05]
E1 = -706.6152860187782  E_coul = 198.8963499014933
Extra cycle  E= -507.718936117285  delta_E= 4.55e-13  |g|= 1.3e-08  |ddm|= 4.2e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.62769325010842
E1 = -706.6152860187782  E_coul = 198.8963499014933
init E= -507.718936117285
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.236740707688348  LUMO = 65.8736506333297
  mo_energy =
[-1.20300614e+02 -1.22637798e+01 -6.65751462e+00 -6.65751462e+00
 -6.65751462e+00 -1.16413361e+00 -2.36740708e-01 -2.36740708e-01
 -2.36740708e-01  6.58736506e+01  4.89744902e+02  2.50998077e+03
  1.24367888e+04  4.54550791e+04  1.32393155e+05]
E1 = -706.6152860203508  E_coul = 198.8963499030658
cycle= 1 E= -507.718936117285  delta_E= -1.14e-13  |g|= 2.91e-10  |ddm|= 7.27e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6152860203508  E_coul = 198.8963499030658
  HOMO = -0.236740707680031  LUMO = 65.8736506334728
  mo_energy =
[-1.20300614e+02 -1.22637798e+01 -6.65751462e+00 -6.65751462e+00
 -6.65751462e+00 -1.16413361e+00 -2.36740708e-01 -2.36740708e-01
 -2.36740708e-01  6.58736506e+01  4.89744902e+02  2.50998077e+03
  1.24367888e+04  4.54550791e+04  1.32393155e+05]
E1 = -706.6152860203821  E_coul = 198.8963499030972
Extra cycle  E= -507.718936117285  delta_E= 1.14e-13  |g|= 1.17e-11  |ddm|= 1.45e-11
    CPU time for scf_cycle      2.57 sec, wall time      0.29 sec
exp = [3.67546484e+04 7.34339940e+03 1.83773239e+04 1.41157973e+03
 3.33492270e+02 9.65918838e+01 3.26455120e+01 4.70564396e+00
 3.90936289e-01 8.59873728e+00 4.90979390e-01]
grad_E = [-2.03249392e-07  2.24976751e-06  1.18649722e-08  8.74645905e-05
 -1.25230365e-04 -8.59745527e-05  5.69465736e-05 -1.78047121e-04
 -1.28054239e-03 -1.69354625e-04 -3.85027018e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:15 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6484913        1
[INPUT] 0    0    [1    /1   ]  7343.39805668        1
[INPUT] 0    0    [1    /1   ]  18377.3238869        1
[INPUT] 0    0    [1    /1   ]  1411.5322983         1
[INPUT] 0    0    [1    /1   ]  333.53129673         1
[INPUT] 0    0    [1    /1   ]  96.7064409351        1
[INPUT] 0    0    [1    /1   ]  32.6992735612        1
[INPUT] 0    0    [1    /1   ]  4.70569673844        1
[INPUT] 0    0    [1    /1   ]  0.390896394407       1
[INPUT] 1    0    [1    /1   ]  8.59861059306        1
[INPUT] 1    0    [1    /1   ]  0.490972824457       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.648491268694, 1.0]], [0, [7343.3980566825985, 1.0]], [0, [18377.323886946662, 1.0]], [0, [1411.5322983033864, 1.0]], [0, [333.53129672995664, 1.0]], [0, [96.70644093508972, 1.0]], [0, [32.69927356117842, 1.0]], [0, [4.70569673844281, 1.0]], [0, [0.390896394407204, 1.0]], [1, [8.598610593063352, 1.0]], [1, [0.4909728244570242, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64849127]
bas 1, expnt(s) = [7343.39805668]
bas 2, expnt(s) = [18377.32388695]
bas 3, expnt(s) = [1411.5322983]
bas 4, expnt(s) = [333.53129673]
bas 5, expnt(s) = [96.70644094]
bas 6, expnt(s) = [32.69927356]
bas 7, expnt(s) = [4.70569674]
bas 8, expnt(s) = [0.39089639]
bas 9, expnt(s) = [8.59861059]
bas 10, expnt(s) = [0.49097282]
CPU time:       320.77
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546485e+04 6.70655097e+03 7.34339806e+03 2.00418509e+03
 1.83773239e+04 3.98773901e+03 1.41153230e+03 5.81812623e+02
 3.33531297e+02 1.97182091e+02 9.67064409e+01 7.79123986e+01
 3.26992736e+01 3.45476573e+01 4.70569674e+00 8.07203387e+00
 3.90896394e-01 1.24899665e+00 8.59861059e+00 4.29555955e+01
 4.90972824e-01 1.19896419e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320646619869297
cond(S) = 204.67369439965915
E1 = -689.1764342463817  E_coul = 184.89761495536655
init E= -504.278819291015
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680649528803196  LUMO = 64.71636103599
  mo_energy =
[-1.21685017e+02 -1.32899723e+01 -7.62373710e+00 -7.62373710e+00
 -7.62373710e+00 -1.65017677e+00 -6.80649529e-01 -6.80649529e-01
 -6.80649529e-01  6.47163610e+01  4.88892677e+02  2.50937445e+03
  1.24361935e+04  4.54544877e+04  1.32392580e+05]
E1 = -706.6601913176136  E_coul = 198.9418824689515
cycle= 1 E= -507.718308848662  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479501
diis-c [-0.22992084  1.        ]
  HOMO = -0.23649378463974  LUMO = 66.0195914956889
  mo_energy =
[-1.20288731e+02 -1.22620407e+01 -6.65473740e+00 -6.65473740e+00
 -6.65473740e+00 -1.16406298e+00 -2.36493785e-01 -2.36493785e-01
 -2.36493785e-01  6.60195915e+01  4.90277506e+02  2.51067937e+03
  1.24373688e+04  4.54555855e+04  1.32393629e+05]
E1 = -706.6143617603415  E_coul = 198.89541314406662
cycle= 2 E= -507.718948616275  delta_E= -0.00064  |g|= 0.00585  |ddm|= 0.0217
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00631854
diis-c [-3.95509117e-05  1.27226420e-03  9.98727736e-01]
  HOMO = -0.236772328384299  LUMO = 66.0152675201345
  mo_energy =
[-1.20300618e+02 -1.22638948e+01 -6.65758049e+00 -6.65758049e+00
 -6.65758049e+00 -1.16416661e+00 -2.36772328e-01 -2.36772328e-01
 -2.36772328e-01  6.60152675e+01  4.90264683e+02  2.51066040e+03
  1.24373457e+04  4.54555609e+04  1.32393603e+05]
E1 = -706.6136069007472  E_coul = 198.89465807287917
cycle= 3 E= -507.718948827868  delta_E= -2.12e-07  |g|= 0.000142  |ddm|= 0.00035
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000191883
diis-c [-8.94405695e-10  2.89765533e-05 -3.06545765e-02  1.03062560e+00]
  HOMO = -0.236776931857597  LUMO = 66.0151913091689
  mo_energy =
[-1.20300828e+02 -1.22639270e+01 -6.65763400e+00 -6.65763400e+00
 -6.65763400e+00 -1.16416804e+00 -2.36776932e-01 -2.36776932e-01
 -2.36776932e-01  6.60151913e+01  4.90264474e+02  2.51066013e+03
  1.24373454e+04  4.54555606e+04  1.32393603e+05]
E1 = -706.613591023738  E_coul = 198.89464219575643
cycle= 4 E= -507.718948827982  delta_E= -1.14e-10  |g|= 6.69e-07  |ddm|= 7.41e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.613591023738  E_coul = 198.89464219575643
  HOMO = -0.236776893593433  LUMO = 66.015191869845
  mo_energy =
[-1.20300827e+02 -1.22639268e+01 -6.65763365e+00 -6.65763365e+00
 -6.65763365e+00 -1.16416803e+00 -2.36776894e-01 -2.36776894e-01
 -2.36776894e-01  6.60151919e+01  4.90264476e+02  2.51066013e+03
  1.24373454e+04  4.54555606e+04  1.32393603e+05]
E1 = -706.6135911124844  E_coul = 198.89464228450237
Extra cycle  E= -507.718948827982  delta_E= -5.12e-13  |g|= 1.3e-08  |ddm|= 4.18e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546485e+04 7.34339806e+03 1.83773239e+04 1.41153230e+03
 3.33531297e+02 9.67064409e+01 3.26992736e+01 4.70569674e+00
 3.90896394e-01 8.59861059e+00 4.90972824e-01]
E = -507.71894882798205
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:16 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6484913        1
[INPUT] 0    0    [1    /1   ]  7343.39805668        1
[INPUT] 0    0    [1    /1   ]  18377.3238869        1
[INPUT] 0    0    [1    /1   ]  1411.5322983         1
[INPUT] 0    0    [1    /1   ]  333.53129673         1
[INPUT] 0    0    [1    /1   ]  96.7064409351        1
[INPUT] 0    0    [1    /1   ]  32.6992735612        1
[INPUT] 0    0    [1    /1   ]  4.70569673844        1
[INPUT] 0    0    [1    /1   ]  0.390896394407       1
[INPUT] 1    0    [1    /1   ]  8.59861059306        1
[INPUT] 1    0    [1    /1   ]  0.490972824457       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.648491268694, 1.0]], [0, [7343.3980566825985, 1.0]], [0, [18377.323886946662, 1.0]], [0, [1411.5322983033864, 1.0]], [0, [333.53129672995664, 1.0]], [0, [96.70644093508972, 1.0]], [0, [32.69927356117842, 1.0]], [0, [4.70569673844281, 1.0]], [0, [0.390896394407204, 1.0]], [1, [8.598610593063352, 1.0]], [1, [0.4909728244570242, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64849127]
bas 1, expnt(s) = [7343.39805668]
bas 2, expnt(s) = [18377.32388695]
bas 3, expnt(s) = [1411.5322983]
bas 4, expnt(s) = [333.53129673]
bas 5, expnt(s) = [96.70644094]
bas 6, expnt(s) = [32.69927356]
bas 7, expnt(s) = [4.70569674]
bas 8, expnt(s) = [0.39089639]
bas 9, expnt(s) = [8.59861059]
bas 10, expnt(s) = [0.49097282]
CPU time:       322.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546485e+04 6.70655097e+03 7.34339806e+03 2.00418509e+03
 1.83773239e+04 3.98773901e+03 1.41153230e+03 5.81812623e+02
 3.33531297e+02 1.97182091e+02 9.67064409e+01 7.79123986e+01
 3.26992736e+01 3.45476573e+01 4.70569674e+00 8.07203387e+00
 3.90896394e-01 1.24899665e+00 8.59861059e+00 4.29555955e+01
 4.90972824e-01 1.19896419e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320646619869297
cond(S) = 204.67369439965915
E1 = -689.1764342463817  E_coul = 184.89761495536655
init E= -504.278819291015
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680649528803196  LUMO = 64.71636103599
  mo_energy =
[-1.21685017e+02 -1.32899723e+01 -7.62373710e+00 -7.62373710e+00
 -7.62373710e+00 -1.65017677e+00 -6.80649529e-01 -6.80649529e-01
 -6.80649529e-01  6.47163610e+01  4.88892677e+02  2.50937445e+03
  1.24361935e+04  4.54544877e+04  1.32392580e+05]
E1 = -706.6601913176136  E_coul = 198.9418824689515
cycle= 1 E= -507.718308848662  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479501
diis-c [-0.22992084  1.        ]
  HOMO = -0.23649378463974  LUMO = 66.0195914956889
  mo_energy =
[-1.20288731e+02 -1.22620407e+01 -6.65473740e+00 -6.65473740e+00
 -6.65473740e+00 -1.16406298e+00 -2.36493785e-01 -2.36493785e-01
 -2.36493785e-01  6.60195915e+01  4.90277506e+02  2.51067937e+03
  1.24373688e+04  4.54555855e+04  1.32393629e+05]
E1 = -706.6143617603415  E_coul = 198.89541314406662
cycle= 2 E= -507.718948616275  delta_E= -0.00064  |g|= 0.00585  |ddm|= 0.0217
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00631854
diis-c [-3.95509117e-05  1.27226420e-03  9.98727736e-01]
  HOMO = -0.236772328384299  LUMO = 66.0152675201345
  mo_energy =
[-1.20300618e+02 -1.22638948e+01 -6.65758049e+00 -6.65758049e+00
 -6.65758049e+00 -1.16416661e+00 -2.36772328e-01 -2.36772328e-01
 -2.36772328e-01  6.60152675e+01  4.90264683e+02  2.51066040e+03
  1.24373457e+04  4.54555609e+04  1.32393603e+05]
E1 = -706.6136069007472  E_coul = 198.89465807287917
cycle= 3 E= -507.718948827868  delta_E= -2.12e-07  |g|= 0.000142  |ddm|= 0.00035
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000191883
diis-c [-8.94405695e-10  2.89765533e-05 -3.06545765e-02  1.03062560e+00]
  HOMO = -0.236776931857597  LUMO = 66.0151913091689
  mo_energy =
[-1.20300828e+02 -1.22639270e+01 -6.65763400e+00 -6.65763400e+00
 -6.65763400e+00 -1.16416804e+00 -2.36776932e-01 -2.36776932e-01
 -2.36776932e-01  6.60151913e+01  4.90264474e+02  2.51066013e+03
  1.24373454e+04  4.54555606e+04  1.32393603e+05]
E1 = -706.613591023738  E_coul = 198.89464219575643
cycle= 4 E= -507.718948827982  delta_E= -1.14e-10  |g|= 6.69e-07  |ddm|= 7.41e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.613591023738  E_coul = 198.89464219575643
  HOMO = -0.236776893593433  LUMO = 66.015191869845
  mo_energy =
[-1.20300827e+02 -1.22639268e+01 -6.65763365e+00 -6.65763365e+00
 -6.65763365e+00 -1.16416803e+00 -2.36776894e-01 -2.36776894e-01
 -2.36776894e-01  6.60151919e+01  4.90264476e+02  2.51066013e+03
  1.24373454e+04  4.54555606e+04  1.32393603e+05]
E1 = -706.6135911124844  E_coul = 198.89464228450237
Extra cycle  E= -507.718948827982  delta_E= -5.12e-13  |g|= 1.3e-08  |ddm|= 4.18e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.67369439965915
E1 = -706.6135911124844  E_coul = 198.89464228450237
init E= -507.718948827982
    CPU time for initialize scf      2.10 sec, wall time      0.13 sec
  HOMO = -0.236776893072464  LUMO = 66.0151918781471
  mo_energy =
[-1.20300827e+02 -1.22639268e+01 -6.65763364e+00 -6.65763364e+00
 -6.65763364e+00 -1.16416803e+00 -2.36776893e-01 -2.36776893e-01
 -2.36776893e-01  6.60151919e+01  4.90264476e+02  2.51066013e+03
  1.24373454e+04  4.54555606e+04  1.32393603e+05]
E1 = -706.6135911140453  E_coul = 198.89464228606366
cycle= 1 E= -507.718948827982  delta_E= 3.98e-13  |g|= 2.93e-10  |ddm|= 7.22e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6135911140453  E_coul = 198.89464228606366
  HOMO = -0.236776893064229  LUMO = 66.0151918782915
  mo_energy =
[-1.20300827e+02 -1.22639268e+01 -6.65763364e+00 -6.65763364e+00
 -6.65763364e+00 -1.16416803e+00 -2.36776893e-01 -2.36776893e-01
 -2.36776893e-01  6.60151919e+01  4.90264476e+02  2.51066013e+03
  1.24373454e+04  4.54555606e+04  1.32393603e+05]
E1 = -706.613591114076  E_coul = 198.8946422860944
Extra cycle  E= -507.718948827982  delta_E=    0  |g|= 1.18e-11  |ddm|= 1.43e-11
    CPU time for scf_cycle      2.61 sec, wall time      0.30 sec
exp = [3.67546485e+04 7.34339806e+03 1.83773239e+04 1.41153230e+03
 3.33531297e+02 9.67064409e+01 3.26992736e+01 4.70569674e+00
 3.90896394e-01 8.59861059e+00 4.90972824e-01]
grad_E = [-2.03543510e-07  2.23747109e-06  1.15649614e-08  8.83150226e-05
 -1.38834637e-04 -6.05132530e-05  1.26007617e-04 -2.79537009e-04
 -2.01999416e-03 -2.68443047e-04 -6.07837599e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:23 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6488509        1
[INPUT] 0    0    [1    /1   ]  7343.39399502        1
[INPUT] 0    0    [1    /1   ]  18377.3238642        1
[INPUT] 0    0    [1    /1   ]  1411.38049681        1
[INPUT] 0    0    [1    /1   ]  333.710439121        1
[INPUT] 0    0    [1    /1   ]  96.9290830021        1
[INPUT] 0    0    [1    /1   ]  32.7936124577        1
[INPUT] 0    0    [1    /1   ]  4.70588117183        1
[INPUT] 0    0    [1    /1   ]  0.390837122599       1
[INPUT] 1    0    [1    /1   ]  8.59841922819        1
[INPUT] 1    0    [1    /1   ]  0.490962555716       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.648850861406, 1.0]], [0, [7343.393995018478, 1.0]], [0, [18377.323864236645, 1.0]], [0, [1411.3804968147736, 1.0]], [0, [333.71043912061316, 1.0]], [0, [96.92908300209308, 1.0]], [0, [32.79361245768801, 1.0]], [0, [4.705881171834486, 1.0]], [0, [0.3908371225988288, 1.0]], [1, [8.5984192281871, 1.0]], [1, [0.49096255571611785, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64885086]
bas 1, expnt(s) = [7343.39399502]
bas 2, expnt(s) = [18377.32386424]
bas 3, expnt(s) = [1411.38049681]
bas 4, expnt(s) = [333.71043912]
bas 5, expnt(s) = [96.929083]
bas 6, expnt(s) = [32.79361246]
bas 7, expnt(s) = [4.70588117]
bas 8, expnt(s) = [0.39083712]
bas 9, expnt(s) = [8.59841923]
bas 10, expnt(s) = [0.49096256]
CPU time:       332.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546489e+04 6.70655102e+03 7.34339400e+03 2.00418426e+03
 1.83773239e+04 3.98773900e+03 1.41138050e+03 5.81765694e+02
 3.33710439e+02 1.97261517e+02 9.69290830e+01 7.80468900e+01
 3.27936125e+01 3.46223840e+01 4.70588117e+00 8.07227115e+00
 3.90837123e-01 1.24885461e+00 8.59841923e+00 4.29544005e+01
 4.90962556e-01 1.19893284e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3206609119655
cond(S) = 204.76254735344634
E1 = -689.1738223595629  E_coul = 184.8957596212752
init E= -504.278062738288
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680688849307116  LUMO = 64.9727877011065
  mo_energy =
[-1.21685257e+02 -1.32901447e+01 -7.62386323e+00 -7.62386323e+00
 -7.62386323e+00 -1.65019934e+00 -6.80688849e-01 -6.80688849e-01
 -6.80688849e-01  6.49727877e+01  4.89940047e+02  2.51089965e+03
  1.24374294e+04  4.54555316e+04  1.32393544e+05]
E1 = -706.6574682435788  E_coul = 198.9391238806982
cycle= 1 E= -507.718344362881  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479604
diis-c [-0.23001981  1.        ]
  HOMO = -0.236549265787896  LUMO = 66.2764523165117
  mo_energy =
[-1.20289125e+02 -1.22622563e+01 -6.65492642e+00 -6.65492642e+00
 -6.65492642e+00 -1.16411477e+00 -2.36549266e-01 -2.36549266e-01
 -2.36549266e-01  6.62764523e+01  4.91324803e+02  2.51220453e+03
  1.24386046e+04  4.54566294e+04  1.32394592e+05]
E1 = -706.611886465657  E_coul = 198.89290595541834
cycle= 2 E= -507.718980510239  delta_E= -0.000636  |g|= 0.00584  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629901
diis-c [-3.93163315e-05  1.25162574e-03  9.98748374e-01]
  HOMO = -0.236825976858501  LUMO = 66.2721422960211
  mo_energy =
[-1.20300958e+02 -1.22640987e+01 -6.65775222e+00 -6.65775222e+00
 -6.65775222e+00 -1.16421767e+00 -2.36825977e-01 -2.36825977e-01
 -2.36825977e-01  6.62721423e+01  4.91312034e+02  2.51218564e+03
  1.24385816e+04  4.54566049e+04  1.32394566e+05]
E1 = -706.6111372167998  E_coul = 198.89215649686915
cycle= 3 E= -507.718980719931  delta_E= -2.1e-07  |g|= 0.000141  |ddm|= 0.000348
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190893
diis-c [-8.84330668e-10  2.90679876e-05 -3.05890983e-02  1.03056003e+00]
  HOMO = -0.236830535649179  LUMO = 66.2720665953915
  mo_energy =
[-1.20301166e+02 -1.22641306e+01 -6.65780525e+00 -6.65780525e+00
 -6.65780525e+00 -1.16421910e+00 -2.36830536e-01 -2.36830536e-01
 -2.36830536e-01  6.62720666e+01  4.91311827e+02  2.51218537e+03
  1.24385813e+04  4.54566046e+04  1.32394566e+05]
E1 = -706.611121502762  E_coul = 198.8921407827197
cycle= 4 E= -507.718980720042  delta_E= -1.12e-10  |g|= 6.64e-07  |ddm|= 7.35e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.611121502762  E_coul = 198.8921407827197
  HOMO = -0.236830497815961  LUMO = 66.2720671522467
  mo_energy =
[-1.20301164e+02 -1.22641303e+01 -6.65780490e+00 -6.65780490e+00
 -6.65780490e+00 -1.16421908e+00 -2.36830498e-01 -2.36830498e-01
 -2.36830498e-01  6.62720672e+01  4.91311829e+02  2.51218538e+03
  1.24385813e+04  4.54566046e+04  1.32394566e+05]
E1 = -706.6111215905188  E_coul = 198.89214087047682
Extra cycle  E= -507.718980720042  delta_E= 3.41e-13  |g|= 1.28e-08  |ddm|= 4.13e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546489e+04 7.34339400e+03 1.83773239e+04 1.41138050e+03
 3.33710439e+02 9.69290830e+01 3.27936125e+01 4.70588117e+00
 3.90837123e-01 8.59841923e+00 4.90962556e-01]
E = -507.71898072004194
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:23 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6488509        1
[INPUT] 0    0    [1    /1   ]  7343.39399502        1
[INPUT] 0    0    [1    /1   ]  18377.3238642        1
[INPUT] 0    0    [1    /1   ]  1411.38049681        1
[INPUT] 0    0    [1    /1   ]  333.710439121        1
[INPUT] 0    0    [1    /1   ]  96.9290830021        1
[INPUT] 0    0    [1    /1   ]  32.7936124577        1
[INPUT] 0    0    [1    /1   ]  4.70588117183        1
[INPUT] 0    0    [1    /1   ]  0.390837122599       1
[INPUT] 1    0    [1    /1   ]  8.59841922819        1
[INPUT] 1    0    [1    /1   ]  0.490962555716       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.648850861406, 1.0]], [0, [7343.393995018478, 1.0]], [0, [18377.323864236645, 1.0]], [0, [1411.3804968147736, 1.0]], [0, [333.71043912061316, 1.0]], [0, [96.92908300209308, 1.0]], [0, [32.79361245768801, 1.0]], [0, [4.705881171834486, 1.0]], [0, [0.3908371225988288, 1.0]], [1, [8.5984192281871, 1.0]], [1, [0.49096255571611785, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64885086]
bas 1, expnt(s) = [7343.39399502]
bas 2, expnt(s) = [18377.32386424]
bas 3, expnt(s) = [1411.38049681]
bas 4, expnt(s) = [333.71043912]
bas 5, expnt(s) = [96.929083]
bas 6, expnt(s) = [32.79361246]
bas 7, expnt(s) = [4.70588117]
bas 8, expnt(s) = [0.39083712]
bas 9, expnt(s) = [8.59841923]
bas 10, expnt(s) = [0.49096256]
CPU time:       333.25
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546489e+04 6.70655102e+03 7.34339400e+03 2.00418426e+03
 1.83773239e+04 3.98773900e+03 1.41138050e+03 5.81765694e+02
 3.33710439e+02 1.97261517e+02 9.69290830e+01 7.80468900e+01
 3.27936125e+01 3.46223840e+01 4.70588117e+00 8.07227115e+00
 3.90837123e-01 1.24885461e+00 8.59841923e+00 4.29544005e+01
 4.90962556e-01 1.19893284e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3206609119655
cond(S) = 204.76254735344634
E1 = -689.1738223595629  E_coul = 184.8957596212752
init E= -504.278062738288
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680688849307116  LUMO = 64.9727877011065
  mo_energy =
[-1.21685257e+02 -1.32901447e+01 -7.62386323e+00 -7.62386323e+00
 -7.62386323e+00 -1.65019934e+00 -6.80688849e-01 -6.80688849e-01
 -6.80688849e-01  6.49727877e+01  4.89940047e+02  2.51089965e+03
  1.24374294e+04  4.54555316e+04  1.32393544e+05]
E1 = -706.6574682435788  E_coul = 198.9391238806982
cycle= 1 E= -507.718344362881  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479604
diis-c [-0.23001981  1.        ]
  HOMO = -0.236549265787896  LUMO = 66.2764523165117
  mo_energy =
[-1.20289125e+02 -1.22622563e+01 -6.65492642e+00 -6.65492642e+00
 -6.65492642e+00 -1.16411477e+00 -2.36549266e-01 -2.36549266e-01
 -2.36549266e-01  6.62764523e+01  4.91324803e+02  2.51220453e+03
  1.24386046e+04  4.54566294e+04  1.32394592e+05]
E1 = -706.611886465657  E_coul = 198.89290595541834
cycle= 2 E= -507.718980510239  delta_E= -0.000636  |g|= 0.00584  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629901
diis-c [-3.93163315e-05  1.25162574e-03  9.98748374e-01]
  HOMO = -0.236825976858501  LUMO = 66.2721422960211
  mo_energy =
[-1.20300958e+02 -1.22640987e+01 -6.65775222e+00 -6.65775222e+00
 -6.65775222e+00 -1.16421767e+00 -2.36825977e-01 -2.36825977e-01
 -2.36825977e-01  6.62721423e+01  4.91312034e+02  2.51218564e+03
  1.24385816e+04  4.54566049e+04  1.32394566e+05]
E1 = -706.6111372167998  E_coul = 198.89215649686915
cycle= 3 E= -507.718980719931  delta_E= -2.1e-07  |g|= 0.000141  |ddm|= 0.000348
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190893
diis-c [-8.84330668e-10  2.90679876e-05 -3.05890983e-02  1.03056003e+00]
  HOMO = -0.236830535649179  LUMO = 66.2720665953915
  mo_energy =
[-1.20301166e+02 -1.22641306e+01 -6.65780525e+00 -6.65780525e+00
 -6.65780525e+00 -1.16421910e+00 -2.36830536e-01 -2.36830536e-01
 -2.36830536e-01  6.62720666e+01  4.91311827e+02  2.51218537e+03
  1.24385813e+04  4.54566046e+04  1.32394566e+05]
E1 = -706.611121502762  E_coul = 198.8921407827197
cycle= 4 E= -507.718980720042  delta_E= -1.12e-10  |g|= 6.64e-07  |ddm|= 7.35e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.611121502762  E_coul = 198.8921407827197
  HOMO = -0.236830497815961  LUMO = 66.2720671522467
  mo_energy =
[-1.20301164e+02 -1.22641303e+01 -6.65780490e+00 -6.65780490e+00
 -6.65780490e+00 -1.16421908e+00 -2.36830498e-01 -2.36830498e-01
 -2.36830498e-01  6.62720672e+01  4.91311829e+02  2.51218538e+03
  1.24385813e+04  4.54566046e+04  1.32394566e+05]
E1 = -706.6111215905188  E_coul = 198.89214087047682
Extra cycle  E= -507.718980720042  delta_E= 3.41e-13  |g|= 1.28e-08  |ddm|= 4.13e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.76254735344634
E1 = -706.6111215905188  E_coul = 198.89214087047682
init E= -507.718980720042
    CPU time for initialize scf      2.05 sec, wall time      0.13 sec
  HOMO = -0.236830497301876  LUMO = 66.2720671604763
  mo_energy =
[-1.20301164e+02 -1.22641303e+01 -6.65780489e+00 -6.65780489e+00
 -6.65780489e+00 -1.16421908e+00 -2.36830497e-01 -2.36830497e-01
 -2.36830497e-01  6.62720672e+01  4.91311829e+02  2.51218538e+03
  1.24385813e+04  4.54566046e+04  1.32394566e+05]
E1 = -706.6111215920608  E_coul = 198.89214087201802
cycle= 1 E= -507.718980720043  delta_E= -9.09e-13  |g|= 2.86e-10  |ddm|= 7.13e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6111215920608  E_coul = 198.89214087201802
  HOMO = -0.236830497293751  LUMO = 66.2720671606189
  mo_energy =
[-1.20301164e+02 -1.22641303e+01 -6.65780489e+00 -6.65780489e+00
 -6.65780489e+00 -1.16421908e+00 -2.36830497e-01 -2.36830497e-01
 -2.36830497e-01  6.62720672e+01  4.91311829e+02  2.51218538e+03
  1.24385813e+04  4.54566046e+04  1.32394566e+05]
E1 = -706.6111215920903  E_coul = 198.8921408720482
Extra cycle  E= -507.718980720042  delta_E= 7.96e-13  |g|= 2.17e-11  |ddm|= 1.42e-11
    CPU time for scf_cycle      2.56 sec, wall time      0.29 sec
exp = [3.67546489e+04 7.34339400e+03 1.83773239e+04 1.41138050e+03
 3.33710439e+02 9.69290830e+01 3.27936125e+01 4.70588117e+00
 3.90837123e-01 8.59841923e+00 4.90962556e-01]
grad_E = [-2.03563525e-07  2.23516527e-06  1.15463847e-08  8.89207692e-05
 -1.56828266e-04 -2.03539226e-05  2.32026739e-04 -4.29715029e-04
 -3.12997944e-03 -4.16896814e-04 -9.41883033e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6498137        1
[INPUT] 0    0    [1    /1   ]  7343.38327408        1
[INPUT] 0    0    [1    /1   ]  18377.3238067        1
[INPUT] 0    0    [1    /1   ]  1410.96872182        1
[INPUT] 0    0    [1    /1   ]  334.262776471        1
[INPUT] 0    0    [1    /1   ]  97.3568145895        1
[INPUT] 0    0    [1    /1   ]  32.9540397141        1
[INPUT] 0    0    [1    /1   ]  4.70639609719        1
[INPUT] 0    0    [1    /1   ]  0.390760270313       1
[INPUT] 1    0    [1    /1   ]  8.59816235689        1
[INPUT] 1    0    [1    /1   ]  0.490947873601       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.6498136833, 1.0]], [0, [7343.383274080509, 1.0]], [0, [18377.32380666263, 1.0]], [0, [1410.9687218202737, 1.0]], [0, [334.2627764709413, 1.0]], [0, [97.35681458945156, 1.0]], [0, [32.954039714071115, 1.0]], [0, [4.706396097193447, 1.0]], [0, [0.3907602703125814, 1.0]], [1, [8.59816235688857, 1.0]], [1, [0.4909478736011878, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64981368]
bas 1, expnt(s) = [7343.38327408]
bas 2, expnt(s) = [18377.32380666]
bas 3, expnt(s) = [1410.96872182]
bas 4, expnt(s) = [334.26277647]
bas 5, expnt(s) = [97.35681459]
bas 6, expnt(s) = [32.95403971]
bas 7, expnt(s) = [4.7063961]
bas 8, expnt(s) = [0.39076027]
bas 9, expnt(s) = [8.59816236]
bas 10, expnt(s) = [0.49094787]
CPU time:       343.11
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546498e+04 6.70655115e+03 7.34338327e+03 2.00418206e+03
 1.83773238e+04 3.98773899e+03 1.41096872e+03 5.81638391e+02
 3.34262776e+02 1.97506338e+02 9.73568146e+01 7.83050536e+01
 3.29540397e+01 3.47493368e+01 4.70639610e+00 8.07293360e+00
 3.90760270e-01 1.24867042e+00 8.59816236e+00 4.29527965e+01
 4.90947874e-01 1.19888802e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320675751238657
cond(S) = 204.9321447428266
E1 = -689.169983947165  E_coul = 184.893439640006
init E= -504.276544307159
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680742630439264  LUMO = 65.42841050902
  mo_energy =
[-1.21685597e+02 -1.32903359e+01 -7.62401380e+00 -7.62401380e+00
 -7.62401380e+00 -1.65023539e+00 -6.80742630e-01 -6.80742630e-01
 -6.80742630e-01  6.54284105e+01  4.92026569e+02  2.51424087e+03
  1.24401139e+04  4.54577549e+04  1.32395580e+05]
E1 = -706.6539557204391  E_coul = 198.93553004755736
cycle= 1 E= -507.718425672882  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479743
diis-c [-0.23015339  1.        ]
  HOMO = -0.236621643258918  LUMO = 66.7328629677809
  mo_energy =
[-1.20289713e+02 -1.22625039e+01 -6.65516461e+00 -6.65516461e+00
 -6.65516461e+00 -1.16418222e+00 -2.36621643e-01 -2.36621643e-01
 -2.36621643e-01  6.67328630e+01  4.93411203e+02  2.51554569e+03
  1.24412892e+04  4.54588527e+04  1.32396628e+05]
E1 = -706.6088073175923  E_coul = 198.8897518610293
cycle= 2 E= -507.719055456563  delta_E= -0.00063  |g|= 0.00581  |ddm|= 0.0214
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00626599
diis-c [-3.89213321e-05  1.21636215e-03  9.98783638e-01]
  HOMO = -0.236895147732354  LUMO = 66.7285771314331
  mo_energy =
[-1.20301449e+02 -1.22643258e+01 -6.65796007e+00 -6.65796007e+00
 -6.65796007e+00 -1.16428387e+00 -2.36895148e-01 -2.36895148e-01
 -2.36895148e-01  6.67285771e+01  4.93398525e+02  2.51552694e+03
  1.24412663e+04  4.54588283e+04  1.32396603e+05]
E1 = -706.6080679027674  E_coul = 198.88901223984598
cycle= 3 E= -507.719055662921  delta_E= -2.06e-07  |g|= 0.00014  |ddm|= 0.000344
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189193
diis-c [-8.67241659e-10  2.92013820e-05 -3.04735991e-02  1.03044440e+00]
  HOMO = -0.23689962887207  LUMO = 66.728502319961
  mo_energy =
[-1.20301654e+02 -1.22643571e+01 -6.65801227e+00 -6.65801227e+00
 -6.65801227e+00 -1.16428527e+00 -2.36899629e-01 -2.36899629e-01
 -2.36899629e-01  6.67285023e+01  4.93398321e+02  2.51552668e+03
  1.24412660e+04  4.54588280e+04  1.32396603e+05]
E1 = -706.6080524726991  E_coul = 198.8889968096686
cycle= 4 E= -507.719055663031  delta_E= -1.09e-10  |g|= 6.56e-07  |ddm|= 7.23e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6080524726991  E_coul = 198.8889968096686
  HOMO = -0.236899591786356  LUMO = 66.7285028702093
  mo_energy =
[-1.20301653e+02 -1.22643569e+01 -6.65801192e+00 -6.65801192e+00
 -6.65801192e+00 -1.16428525e+00 -2.36899592e-01 -2.36899592e-01
 -2.36899592e-01  6.67285029e+01  4.93398323e+02  2.51552668e+03
  1.24412660e+04  4.54588280e+04  1.32396603e+05]
E1 = -706.6080525587364  E_coul = 198.88899689570576
Extra cycle  E= -507.719055663031  delta_E= -1.14e-13  |g|= 1.27e-08  |ddm|= 4.05e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546498e+04 7.34338327e+03 1.83773238e+04 1.41096872e+03
 3.34262776e+02 9.73568146e+01 3.29540397e+01 4.70639610e+00
 3.90760270e-01 8.59816236e+00 4.90947874e-01]
E = -507.71905566303064
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:30 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6498137        1
[INPUT] 0    0    [1    /1   ]  7343.38327408        1
[INPUT] 0    0    [1    /1   ]  18377.3238067        1
[INPUT] 0    0    [1    /1   ]  1410.96872182        1
[INPUT] 0    0    [1    /1   ]  334.262776471        1
[INPUT] 0    0    [1    /1   ]  97.3568145895        1
[INPUT] 0    0    [1    /1   ]  32.9540397141        1
[INPUT] 0    0    [1    /1   ]  4.70639609719        1
[INPUT] 0    0    [1    /1   ]  0.390760270313       1
[INPUT] 1    0    [1    /1   ]  8.59816235689        1
[INPUT] 1    0    [1    /1   ]  0.490947873601       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.6498136833, 1.0]], [0, [7343.383274080509, 1.0]], [0, [18377.32380666263, 1.0]], [0, [1410.9687218202737, 1.0]], [0, [334.2627764709413, 1.0]], [0, [97.35681458945156, 1.0]], [0, [32.954039714071115, 1.0]], [0, [4.706396097193447, 1.0]], [0, [0.3907602703125814, 1.0]], [1, [8.59816235688857, 1.0]], [1, [0.4909478736011878, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.64981368]
bas 1, expnt(s) = [7343.38327408]
bas 2, expnt(s) = [18377.32380666]
bas 3, expnt(s) = [1410.96872182]
bas 4, expnt(s) = [334.26277647]
bas 5, expnt(s) = [97.35681459]
bas 6, expnt(s) = [32.95403971]
bas 7, expnt(s) = [4.7063961]
bas 8, expnt(s) = [0.39076027]
bas 9, expnt(s) = [8.59816236]
bas 10, expnt(s) = [0.49094787]
CPU time:       344.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546498e+04 6.70655115e+03 7.34338327e+03 2.00418206e+03
 1.83773238e+04 3.98773899e+03 1.41096872e+03 5.81638391e+02
 3.34262776e+02 1.97506338e+02 9.73568146e+01 7.83050536e+01
 3.29540397e+01 3.47493368e+01 4.70639610e+00 8.07293360e+00
 3.90760270e-01 1.24867042e+00 8.59816236e+00 4.29527965e+01
 4.90947874e-01 1.19888802e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320675751238657
cond(S) = 204.9321447428266
E1 = -689.169983947165  E_coul = 184.893439640006
init E= -504.276544307159
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680742630439264  LUMO = 65.42841050902
  mo_energy =
[-1.21685597e+02 -1.32903359e+01 -7.62401380e+00 -7.62401380e+00
 -7.62401380e+00 -1.65023539e+00 -6.80742630e-01 -6.80742630e-01
 -6.80742630e-01  6.54284105e+01  4.92026569e+02  2.51424087e+03
  1.24401139e+04  4.54577549e+04  1.32395580e+05]
E1 = -706.6539557204391  E_coul = 198.93553004755736
cycle= 1 E= -507.718425672882  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479743
diis-c [-0.23015339  1.        ]
  HOMO = -0.236621643258918  LUMO = 66.7328629677809
  mo_energy =
[-1.20289713e+02 -1.22625039e+01 -6.65516461e+00 -6.65516461e+00
 -6.65516461e+00 -1.16418222e+00 -2.36621643e-01 -2.36621643e-01
 -2.36621643e-01  6.67328630e+01  4.93411203e+02  2.51554569e+03
  1.24412892e+04  4.54588527e+04  1.32396628e+05]
E1 = -706.6088073175923  E_coul = 198.8897518610293
cycle= 2 E= -507.719055456563  delta_E= -0.00063  |g|= 0.00581  |ddm|= 0.0214
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00626599
diis-c [-3.89213321e-05  1.21636215e-03  9.98783638e-01]
  HOMO = -0.236895147732354  LUMO = 66.7285771314331
  mo_energy =
[-1.20301449e+02 -1.22643258e+01 -6.65796007e+00 -6.65796007e+00
 -6.65796007e+00 -1.16428387e+00 -2.36895148e-01 -2.36895148e-01
 -2.36895148e-01  6.67285771e+01  4.93398525e+02  2.51552694e+03
  1.24412663e+04  4.54588283e+04  1.32396603e+05]
E1 = -706.6080679027674  E_coul = 198.88901223984598
cycle= 3 E= -507.719055662921  delta_E= -2.06e-07  |g|= 0.00014  |ddm|= 0.000344
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000189193
diis-c [-8.67241659e-10  2.92013820e-05 -3.04735991e-02  1.03044440e+00]
  HOMO = -0.23689962887207  LUMO = 66.728502319961
  mo_energy =
[-1.20301654e+02 -1.22643571e+01 -6.65801227e+00 -6.65801227e+00
 -6.65801227e+00 -1.16428527e+00 -2.36899629e-01 -2.36899629e-01
 -2.36899629e-01  6.67285023e+01  4.93398321e+02  2.51552668e+03
  1.24412660e+04  4.54588280e+04  1.32396603e+05]
E1 = -706.6080524726991  E_coul = 198.8889968096686
cycle= 4 E= -507.719055663031  delta_E= -1.09e-10  |g|= 6.56e-07  |ddm|= 7.23e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6080524726991  E_coul = 198.8889968096686
  HOMO = -0.236899591786356  LUMO = 66.7285028702093
  mo_energy =
[-1.20301653e+02 -1.22643569e+01 -6.65801192e+00 -6.65801192e+00
 -6.65801192e+00 -1.16428525e+00 -2.36899592e-01 -2.36899592e-01
 -2.36899592e-01  6.67285029e+01  4.93398323e+02  2.51552668e+03
  1.24412660e+04  4.54588280e+04  1.32396603e+05]
E1 = -706.6080525587364  E_coul = 198.88899689570576
Extra cycle  E= -507.719055663031  delta_E= -1.14e-13  |g|= 1.27e-08  |ddm|= 4.05e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.9321447428266
E1 = -706.6080525587364  E_coul = 198.88899689570576
init E= -507.719055663031
    CPU time for initialize scf      2.05 sec, wall time      0.13 sec
  HOMO = -0.236899591284167  LUMO = 66.7285028783105
  mo_energy =
[-1.20301653e+02 -1.22643569e+01 -6.65801191e+00 -6.65801191e+00
 -6.65801191e+00 -1.16428525e+00 -2.36899591e-01 -2.36899591e-01
 -2.36899591e-01  6.67285029e+01  4.93398323e+02  2.51552668e+03
  1.24412660e+04  4.54588280e+04  1.32396603e+05]
E1 = -706.6080525602426  E_coul = 198.8889968972121
cycle= 1 E= -507.719055663031  delta_E= 1.14e-13  |g|= 2.86e-10  |ddm|= 6.98e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6080525602426  E_coul = 198.8889968972121
  HOMO = -0.236899591276254  LUMO = 66.7285028784507
  mo_energy =
[-1.20301653e+02 -1.22643569e+01 -6.65801191e+00 -6.65801191e+00
 -6.65801191e+00 -1.16428525e+00 -2.36899591e-01 -2.36899591e-01
 -2.36899591e-01  6.67285029e+01  4.93398323e+02  2.51552668e+03
  1.24412660e+04  4.54588280e+04  1.32396603e+05]
E1 = -706.6080525602721  E_coul = 198.88899689724164
Extra cycle  E= -507.71905566303  delta_E= 1.14e-13  |g|= 2.31e-11  |ddm|= 1.38e-11
    CPU time for scf_cycle      2.56 sec, wall time      0.29 sec
exp = [3.67546498e+04 7.34338327e+03 1.83773238e+04 1.41096872e+03
 3.34262776e+02 9.73568146e+01 3.29540397e+01 4.70639610e+00
 3.90760270e-01 8.59816236e+00 4.90947874e-01]
grad_E = [-2.02496236e-07  2.27401410e-06  1.26447749e-08  8.79873196e-05
 -1.74381242e-04  3.77814773e-05  3.79574323e-04 -6.20806573e-04
 -4.60050841e-03 -6.12631599e-04 -1.38303322e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:37 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6519657        1
[INPUT] 0    0    [1    /1   ]  7343.35951297        1
[INPUT] 0    0    [1    /1   ]  18377.3236822        1
[INPUT] 0    0    [1    /1   ]  1410.04142324        1
[INPUT] 0    0    [1    /1   ]  335.592111335        1
[INPUT] 0    0    [1    /1   ]  98.0933558144        1
[INPUT] 0    0    [1    /1   ]  33.1914449078        1
[INPUT] 0    0    [1    /1   ]  4.70755687212        1
[INPUT] 0    0    [1    /1   ]  0.390695208483       1
[INPUT] 1    0    [1    /1   ]  8.59792051477        1
[INPUT] 1    0    [1    /1   ]  0.490931772719       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65196568516, 1.0]], [0, [7343.359512973975, 1.0]], [0, [18377.323682195205, 1.0]], [0, [1410.0414232388248, 1.0]], [0, [335.5921113353075, 1.0]], [0, [98.09335581435175, 1.0]], [0, [33.1914449078061, 1.0]], [0, [4.7075568721234085, 1.0]], [0, [0.390695208483129, 1.0]], [1, [8.597920514766189, 1.0]], [1, [0.4909317727189408, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65196569]
bas 1, expnt(s) = [7343.35951297]
bas 2, expnt(s) = [18377.3236822]
bas 3, expnt(s) = [1410.04142324]
bas 4, expnt(s) = [335.59211134]
bas 5, expnt(s) = [98.09335581]
bas 6, expnt(s) = [33.19144491]
bas 7, expnt(s) = [4.70755687]
bas 8, expnt(s) = [0.39069521]
bas 9, expnt(s) = [8.59792051]
bas 10, expnt(s) = [0.49093177]
CPU time:       354.29
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546520e+04 6.70655144e+03 7.34335951e+03 2.00417720e+03
 1.83773237e+04 3.98773897e+03 1.41004142e+03 5.81351674e+02
 3.35592111e+02 1.98095145e+02 9.80933558e+01 7.87489403e+01
 3.31914449e+01 3.49369222e+01 4.70755687e+00 8.07442688e+00
 3.90695208e-01 1.24851449e+00 8.59792051e+00 4.29512863e+01
 4.90931773e-01 1.19883888e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320678715522277
cond(S) = 205.2221905581404
E1 = -689.1655253516832  E_coul = 184.89169905192898
init E= -504.273826299754
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680795536422191  LUMO = 66.1445103956319
  mo_energy =
[-1.21685964e+02 -1.32904123e+01 -7.62410708e+00 -7.62410708e+00
 -7.62410708e+00 -1.65028390e+00 -6.80795536e-01 -6.80795536e-01
 -6.80795536e-01  6.61445104e+01  4.95751110e+02  2.52073425e+03
  1.24452978e+04  4.54619778e+04  1.32399423e+05]
E1 = -706.651010708846  E_coul = 198.93242444222741
cycle= 1 E= -507.718586266619  delta_E= -3.44  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479876
diis-c [-0.23028136  1.        ]
  HOMO = -0.23668425970131  LUMO = 67.4502267082263
  mo_energy =
[-1.20290416e+02 -1.22626299e+01 -6.65534912e+00 -6.65534912e+00
 -6.65534912e+00 -1.16424030e+00 -2.36684260e-01 -2.36684260e-01
 -2.36684260e-01  6.74502267e+01  4.97135563e+02  2.52203900e+03
  1.24464732e+04  4.54630757e+04  1.32400472e+05]
E1 = -706.6065270528443  E_coul = 198.88732082206246
cycle= 2 E= -507.719206230782  delta_E= -0.00062  |g|= 0.00576  |ddm|= 0.0211
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00621755
diis-c [-3.83454230e-05  1.16376691e-03  9.98836233e-01]
  HOMO = -0.236952846635317  LUMO = 67.4459775686959
  mo_energy =
[-1.20302004e+02 -1.22644202e+01 -6.65809790e+00 -6.65809790e+00
 -6.65809790e+00 -1.16434005e+00 -2.36952847e-01 -2.36952847e-01
 -2.36952847e-01  6.74459776e+01  4.97123021e+02  2.52202046e+03
  1.24464506e+04  4.54630516e+04  1.32400447e+05]
E1 = -706.6058027492071  E_coul = 198.886596317185
cycle= 3 E= -507.719206432022  delta_E= -2.01e-07  |g|= 0.000138  |ddm|= 0.000338
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000186647
diis-c [-8.42089574e-10  2.93553042e-05 -3.02939839e-02  1.03026463e+00]
  HOMO = -0.236957209848735  LUMO = 67.445904114954
  mo_energy =
[-1.20302205e+02 -1.22644508e+01 -6.65814882e+00 -6.65814882e+00
 -6.65814882e+00 -1.16434141e+00 -2.36957210e-01 -2.36957210e-01
 -2.36957210e-01  6.74459041e+01  4.97122821e+02  2.52202021e+03
  1.24464503e+04  4.54630513e+04  1.32400447e+05]
E1 = -706.6057877518062  E_coul = 198.88658131967915
cycle= 4 E= -507.719206432127  delta_E= -1.05e-10  |g|= 6.43e-07  |ddm|= 7.04e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6057877518062  E_coul = 198.88658131967915
  HOMO = -0.23695717389512  LUMO = 67.4459046552143
  mo_energy =
[-1.20302204e+02 -1.22644505e+01 -6.65814848e+00 -6.65814848e+00
 -6.65814848e+00 -1.16434139e+00 -2.36957174e-01 -2.36957174e-01
 -2.36957174e-01  6.74459047e+01  4.97122822e+02  2.52202021e+03
  1.24464503e+04  4.54630513e+04  1.32400447e+05]
E1 = -706.6057878352268  E_coul = 198.88658140309985
Extra cycle  E= -507.719206432127  delta_E= 1.14e-13  |g|= 1.24e-08  |ddm|= 3.93e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546520e+04 7.34335951e+03 1.83773237e+04 1.41004142e+03
 3.35592111e+02 9.80933558e+01 3.31914449e+01 4.70755687e+00
 3.90695208e-01 8.59792051e+00 4.90931773e-01]
E = -507.71920643212695
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:38 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6519657        1
[INPUT] 0    0    [1    /1   ]  7343.35951297        1
[INPUT] 0    0    [1    /1   ]  18377.3236822        1
[INPUT] 0    0    [1    /1   ]  1410.04142324        1
[INPUT] 0    0    [1    /1   ]  335.592111335        1
[INPUT] 0    0    [1    /1   ]  98.0933558144        1
[INPUT] 0    0    [1    /1   ]  33.1914449078        1
[INPUT] 0    0    [1    /1   ]  4.70755687212        1
[INPUT] 0    0    [1    /1   ]  0.390695208483       1
[INPUT] 1    0    [1    /1   ]  8.59792051477        1
[INPUT] 1    0    [1    /1   ]  0.490931772719       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65196568516, 1.0]], [0, [7343.359512973975, 1.0]], [0, [18377.323682195205, 1.0]], [0, [1410.0414232388248, 1.0]], [0, [335.5921113353075, 1.0]], [0, [98.09335581435175, 1.0]], [0, [33.1914449078061, 1.0]], [0, [4.7075568721234085, 1.0]], [0, [0.390695208483129, 1.0]], [1, [8.597920514766189, 1.0]], [1, [0.4909317727189408, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65196569]
bas 1, expnt(s) = [7343.35951297]
bas 2, expnt(s) = [18377.3236822]
bas 3, expnt(s) = [1410.04142324]
bas 4, expnt(s) = [335.59211134]
bas 5, expnt(s) = [98.09335581]
bas 6, expnt(s) = [33.19144491]
bas 7, expnt(s) = [4.70755687]
bas 8, expnt(s) = [0.39069521]
bas 9, expnt(s) = [8.59792051]
bas 10, expnt(s) = [0.49093177]
CPU time:       355.54
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546520e+04 6.70655144e+03 7.34335951e+03 2.00417720e+03
 1.83773237e+04 3.98773897e+03 1.41004142e+03 5.81351674e+02
 3.35592111e+02 1.98095145e+02 9.80933558e+01 7.87489403e+01
 3.31914449e+01 3.49369222e+01 4.70755687e+00 8.07442688e+00
 3.90695208e-01 1.24851449e+00 8.59792051e+00 4.29512863e+01
 4.90931773e-01 1.19883888e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320678715522277
cond(S) = 205.2221905581404
E1 = -689.1655253516832  E_coul = 184.89169905192898
init E= -504.273826299754
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680795536422191  LUMO = 66.1445103956319
  mo_energy =
[-1.21685964e+02 -1.32904123e+01 -7.62410708e+00 -7.62410708e+00
 -7.62410708e+00 -1.65028390e+00 -6.80795536e-01 -6.80795536e-01
 -6.80795536e-01  6.61445104e+01  4.95751110e+02  2.52073425e+03
  1.24452978e+04  4.54619778e+04  1.32399423e+05]
E1 = -706.651010708846  E_coul = 198.93242444222741
cycle= 1 E= -507.718586266619  delta_E= -3.44  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479876
diis-c [-0.23028136  1.        ]
  HOMO = -0.23668425970131  LUMO = 67.4502267082263
  mo_energy =
[-1.20290416e+02 -1.22626299e+01 -6.65534912e+00 -6.65534912e+00
 -6.65534912e+00 -1.16424030e+00 -2.36684260e-01 -2.36684260e-01
 -2.36684260e-01  6.74502267e+01  4.97135563e+02  2.52203900e+03
  1.24464732e+04  4.54630757e+04  1.32400472e+05]
E1 = -706.6065270528443  E_coul = 198.88732082206246
cycle= 2 E= -507.719206230782  delta_E= -0.00062  |g|= 0.00576  |ddm|= 0.0211
    CPU time for cycle= 2      0.21 sec, wall time      0.03 sec
diis-norm(errvec)=0.00621755
diis-c [-3.83454230e-05  1.16376691e-03  9.98836233e-01]
  HOMO = -0.236952846635317  LUMO = 67.4459775686959
  mo_energy =
[-1.20302004e+02 -1.22644202e+01 -6.65809790e+00 -6.65809790e+00
 -6.65809790e+00 -1.16434005e+00 -2.36952847e-01 -2.36952847e-01
 -2.36952847e-01  6.74459776e+01  4.97123021e+02  2.52202046e+03
  1.24464506e+04  4.54630516e+04  1.32400447e+05]
E1 = -706.6058027492071  E_coul = 198.886596317185
cycle= 3 E= -507.719206432022  delta_E= -2.01e-07  |g|= 0.000138  |ddm|= 0.000338
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000186647
diis-c [-8.42089574e-10  2.93553042e-05 -3.02939839e-02  1.03026463e+00]
  HOMO = -0.236957209848735  LUMO = 67.445904114954
  mo_energy =
[-1.20302205e+02 -1.22644508e+01 -6.65814882e+00 -6.65814882e+00
 -6.65814882e+00 -1.16434141e+00 -2.36957210e-01 -2.36957210e-01
 -2.36957210e-01  6.74459041e+01  4.97122821e+02  2.52202021e+03
  1.24464503e+04  4.54630513e+04  1.32400447e+05]
E1 = -706.6057877518062  E_coul = 198.88658131967915
cycle= 4 E= -507.719206432127  delta_E= -1.05e-10  |g|= 6.43e-07  |ddm|= 7.04e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6057877518062  E_coul = 198.88658131967915
  HOMO = -0.23695717389512  LUMO = 67.4459046552143
  mo_energy =
[-1.20302204e+02 -1.22644505e+01 -6.65814848e+00 -6.65814848e+00
 -6.65814848e+00 -1.16434139e+00 -2.36957174e-01 -2.36957174e-01
 -2.36957174e-01  6.74459047e+01  4.97122822e+02  2.52202021e+03
  1.24464503e+04  4.54630513e+04  1.32400447e+05]
E1 = -706.6057878352268  E_coul = 198.88658140309985
Extra cycle  E= -507.719206432127  delta_E= 1.14e-13  |g|= 1.24e-08  |ddm|= 3.93e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.2221905581404
E1 = -706.6057878352268  E_coul = 198.88658140309985
init E= -507.719206432127
    CPU time for initialize scf      2.05 sec, wall time      0.13 sec
  HOMO = -0.236957173410915  LUMO = 67.4459046631209
  mo_energy =
[-1.20302204e+02 -1.22644505e+01 -6.65814847e+00 -6.65814847e+00
 -6.65814847e+00 -1.16434139e+00 -2.36957173e-01 -2.36957173e-01
 -2.36957173e-01  6.74459047e+01  4.97122822e+02  2.52202021e+03
  1.24464503e+04  4.54630513e+04  1.32400447e+05]
E1 = -706.60578783668  E_coul = 198.886581404553
cycle= 1 E= -507.719206432127  delta_E=    0  |g|= 2.75e-10  |ddm|= 6.74e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.60578783668  E_coul = 198.886581404553
  HOMO = -0.236957173403313  LUMO = 67.4459046632556
  mo_energy =
[-1.20302204e+02 -1.22644505e+01 -6.65814847e+00 -6.65814847e+00
 -6.65814847e+00 -1.16434139e+00 -2.36957173e-01 -2.36957173e-01
 -2.36957173e-01  6.74459047e+01  4.97122822e+02  2.52202021e+03
  1.24464503e+04  4.54630513e+04  1.32400447e+05]
E1 = -706.6057878367089  E_coul = 198.88658140458168
Extra cycle  E= -507.719206432127  delta_E= -3.41e-13  |g|= 8.64e-12  |ddm|= 1.33e-11
    CPU time for scf_cycle      2.56 sec, wall time      0.29 sec
exp = [3.67546520e+04 7.34335951e+03 1.83773237e+04 1.41004142e+03
 3.35592111e+02 9.80933558e+01 3.31914449e+01 4.70755687e+00
 3.90695208e-01 8.59792051e+00 4.90931773e-01]
grad_E = [-1.98677442e-07  2.41831127e-06  1.66268362e-08  8.26875463e-05
 -1.74804449e-04  1.05749058e-04  5.29072834e-04 -7.74777948e-04
 -5.92834417e-03 -7.88217504e-04 -1.77882396e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6554752        1
[INPUT] 0    0    [1    /1   ]  7343.32100809        1
[INPUT] 0    0    [1    /1   ]  18377.3234843        1
[INPUT] 0    0    [1    /1   ]  1408.5207156         1
[INPUT] 0    0    [1    /1   ]  337.875541555        1
[INPUT] 0    0    [1    /1   ]  99.0272108164        1
[INPUT] 0    0    [1    /1   ]  33.4299788313        1
[INPUT] 0    0    [1    /1   ]  4.70941429534        1
[INPUT] 0    0    [1    /1   ]  0.390715698168       1
[INPUT] 1    0    [1    /1   ]  8.59792229415        1
[INPUT] 1    0    [1    /1   ]  0.490925580018       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.655475201704, 1.0]], [0, [7343.321008092258, 1.0]], [0, [18377.3234843461, 1.0]], [0, [1408.5207155970681, 1.0]], [0, [337.8755415549011, 1.0]], [0, [99.02721081636912, 1.0]], [0, [33.429978831277666, 1.0]], [0, [4.709414295344273, 1.0]], [0, [0.3907156981675835, 1.0]], [1, [8.59792229414582, 1.0]], [1, [0.4909255800184187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6554752]
bas 1, expnt(s) = [7343.32100809]
bas 2, expnt(s) = [18377.32348435]
bas 3, expnt(s) = [1408.5207156]
bas 4, expnt(s) = [337.87554155]
bas 5, expnt(s) = [99.02721082]
bas 6, expnt(s) = [33.42997883]
bas 7, expnt(s) = [4.7094143]
bas 8, expnt(s) = [0.3907157]
bas 9, expnt(s) = [8.59792229]
bas 10, expnt(s) = [0.49092558]
CPU time:       365.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546555e+04 6.70655192e+03 7.34332101e+03 2.00416932e+03
 1.83773235e+04 3.98773894e+03 1.40852072e+03 5.80881377e+02
 3.37875542e+02 1.99105194e+02 9.90272108e+01 7.93105450e+01
 3.34299788e+01 3.51250621e+01 4.70941430e+00 8.07681616e+00
 3.90715698e-01 1.24856360e+00 8.59792229e+00 4.29512974e+01
 4.90925580e-01 1.19881997e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320648525239005
cond(S) = 205.58659510430823
E1 = -689.1631722580643  E_coul = 184.89291638250432
init E= -504.27025587556
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680801527859038  LUMO = 66.9418672789015
  mo_energy =
[-1.21686116e+02 -1.32901042e+01 -7.62397470e+00 -7.62397470e+00
 -7.62397470e+00 -1.65032149e+00 -6.80801528e-01 -6.80801528e-01
 -6.80801528e-01  6.69418673e+01  5.00678983e+02  2.53012466e+03
  1.24527548e+04  4.54679552e+04  1.32404830e+05]
E1 = -706.6518373943258  E_coul = 198.93301947886258
cycle= 1 E= -507.718817915463  delta_E= -3.45  |g|= 0.334  |ddm|= 0.302
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479879
diis-c [-0.23028394  1.        ]
  HOMO = -0.236669709166259  LUMO = 68.249018960278
  mo_energy =
[-1.20290892e+02 -1.22623203e+01 -6.65525123e+00 -6.65525123e+00
 -6.65525123e+00 -1.16422350e+00 -2.36669709e-01 -2.36669709e-01
 -2.36669709e-01  6.82490190e+01  5.02063202e+02  2.53142931e+03
  1.24539303e+04  4.54690533e+04  1.32405878e+05]
E1 = -706.6080684583522  E_coul = 198.88864122682816
cycle= 2 E= -507.719427231524  delta_E= -0.000609  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00616963
diis-c [-3.77799728e-05  1.11018557e-03  9.98889814e-01]
  HOMO = -0.236932999199432  LUMO = 68.2448083296477
  mo_energy =
[-1.20302323e+02 -1.22640766e+01 -6.65794954e+00 -6.65794954e+00
 -6.65794954e+00 -1.16432122e+00 -2.36932999e-01 -2.36932999e-01
 -2.36932999e-01  6.82448083e+01  5.02050795e+02  2.53141099e+03
  1.24539080e+04  4.54690294e+04  1.32405853e+05]
E1 = -706.6073604847209  E_coul = 198.88793305748587
cycle= 3 E= -507.719427427235  delta_E= -1.96e-07  |g|= 0.000135  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184022
diis-c [-8.16645698e-10  2.94303799e-05 -3.00967821e-02  1.03006735e+00]
  HOMO = -0.236937237109433  LUMO = 68.2447363237423
  mo_energy =
[-1.20302519e+02 -1.22641064e+01 -6.65799909e+00 -6.65799909e+00
 -6.65799909e+00 -1.16432254e+00 -2.36937237e-01 -2.36937237e-01
 -2.36937237e-01  6.82447363e+01  5.02050599e+02  2.53141074e+03
  1.24539077e+04  4.54690291e+04  1.32405853e+05]
E1 = -706.6073459494598  E_coul = 198.887918522124
cycle= 4 E= -507.719427427336  delta_E= -1.01e-10  |g|= 6.3e-07  |ddm|= 6.84e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6073459494598  E_coul = 198.887918522124
  HOMO = -0.236937202355514  LUMO = 68.2447368535163
  mo_energy =
[-1.20302518e+02 -1.22641061e+01 -6.65799876e+00 -6.65799876e+00
 -6.65799876e+00 -1.16432252e+00 -2.36937202e-01 -2.36937202e-01
 -2.36937202e-01  6.82447369e+01  5.02050601e+02  2.53141074e+03
  1.24539077e+04  4.54690291e+04  1.32405853e+05]
E1 = -706.6073460300883  E_coul = 198.88791860275293
Extra cycle  E= -507.719427427335  delta_E= 5.68e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546555e+04 7.34332101e+03 1.83773235e+04 1.40852072e+03
 3.37875542e+02 9.90272108e+01 3.34299788e+01 4.70941430e+00
 3.90715698e-01 8.59792229e+00 4.90925580e-01]
E = -507.7194274273353
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:45 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6554752        1
[INPUT] 0    0    [1    /1   ]  7343.32100809        1
[INPUT] 0    0    [1    /1   ]  18377.3234843        1
[INPUT] 0    0    [1    /1   ]  1408.5207156         1
[INPUT] 0    0    [1    /1   ]  337.875541555        1
[INPUT] 0    0    [1    /1   ]  99.0272108164        1
[INPUT] 0    0    [1    /1   ]  33.4299788313        1
[INPUT] 0    0    [1    /1   ]  4.70941429534        1
[INPUT] 0    0    [1    /1   ]  0.390715698168       1
[INPUT] 1    0    [1    /1   ]  8.59792229415        1
[INPUT] 1    0    [1    /1   ]  0.490925580018       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.655475201704, 1.0]], [0, [7343.321008092258, 1.0]], [0, [18377.3234843461, 1.0]], [0, [1408.5207155970681, 1.0]], [0, [337.8755415549011, 1.0]], [0, [99.02721081636912, 1.0]], [0, [33.429978831277666, 1.0]], [0, [4.709414295344273, 1.0]], [0, [0.3907156981675835, 1.0]], [1, [8.59792229414582, 1.0]], [1, [0.4909255800184187, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.6554752]
bas 1, expnt(s) = [7343.32100809]
bas 2, expnt(s) = [18377.32348435]
bas 3, expnt(s) = [1408.5207156]
bas 4, expnt(s) = [337.87554155]
bas 5, expnt(s) = [99.02721082]
bas 6, expnt(s) = [33.42997883]
bas 7, expnt(s) = [4.7094143]
bas 8, expnt(s) = [0.3907157]
bas 9, expnt(s) = [8.59792229]
bas 10, expnt(s) = [0.49092558]
CPU time:       366.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546555e+04 6.70655192e+03 7.34332101e+03 2.00416932e+03
 1.83773235e+04 3.98773894e+03 1.40852072e+03 5.80881377e+02
 3.37875542e+02 1.99105194e+02 9.90272108e+01 7.93105450e+01
 3.34299788e+01 3.51250621e+01 4.70941430e+00 8.07681616e+00
 3.90715698e-01 1.24856360e+00 8.59792229e+00 4.29512974e+01
 4.90925580e-01 1.19881997e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320648525239005
cond(S) = 205.58659510430823
E1 = -689.1631722580643  E_coul = 184.89291638250432
init E= -504.27025587556
    CPU time for initialize scf      0.38 sec, wall time      0.06 sec
  HOMO = -0.680801527859038  LUMO = 66.9418672789015
  mo_energy =
[-1.21686116e+02 -1.32901042e+01 -7.62397470e+00 -7.62397470e+00
 -7.62397470e+00 -1.65032149e+00 -6.80801528e-01 -6.80801528e-01
 -6.80801528e-01  6.69418673e+01  5.00678983e+02  2.53012466e+03
  1.24527548e+04  4.54679552e+04  1.32404830e+05]
E1 = -706.6518373943258  E_coul = 198.93301947886258
cycle= 1 E= -507.718817915463  delta_E= -3.45  |g|= 0.334  |ddm|= 0.302
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479879
diis-c [-0.23028394  1.        ]
  HOMO = -0.236669709166259  LUMO = 68.249018960278
  mo_energy =
[-1.20290892e+02 -1.22623203e+01 -6.65525123e+00 -6.65525123e+00
 -6.65525123e+00 -1.16422350e+00 -2.36669709e-01 -2.36669709e-01
 -2.36669709e-01  6.82490190e+01  5.02063202e+02  2.53142931e+03
  1.24539303e+04  4.54690533e+04  1.32405878e+05]
E1 = -706.6080684583522  E_coul = 198.88864122682816
cycle= 2 E= -507.719427231524  delta_E= -0.000609  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00616963
diis-c [-3.77799728e-05  1.11018557e-03  9.98889814e-01]
  HOMO = -0.236932999199432  LUMO = 68.2448083296477
  mo_energy =
[-1.20302323e+02 -1.22640766e+01 -6.65794954e+00 -6.65794954e+00
 -6.65794954e+00 -1.16432122e+00 -2.36932999e-01 -2.36932999e-01
 -2.36932999e-01  6.82448083e+01  5.02050795e+02  2.53141099e+03
  1.24539080e+04  4.54690294e+04  1.32405853e+05]
E1 = -706.6073604847209  E_coul = 198.88793305748587
cycle= 3 E= -507.719427427235  delta_E= -1.96e-07  |g|= 0.000135  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184022
diis-c [-8.16645698e-10  2.94303799e-05 -3.00967821e-02  1.03006735e+00]
  HOMO = -0.236937237109433  LUMO = 68.2447363237423
  mo_energy =
[-1.20302519e+02 -1.22641064e+01 -6.65799909e+00 -6.65799909e+00
 -6.65799909e+00 -1.16432254e+00 -2.36937237e-01 -2.36937237e-01
 -2.36937237e-01  6.82447363e+01  5.02050599e+02  2.53141074e+03
  1.24539077e+04  4.54690291e+04  1.32405853e+05]
E1 = -706.6073459494598  E_coul = 198.887918522124
cycle= 4 E= -507.719427427336  delta_E= -1.01e-10  |g|= 6.3e-07  |ddm|= 6.84e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6073459494598  E_coul = 198.887918522124
  HOMO = -0.236937202355514  LUMO = 68.2447368535163
  mo_energy =
[-1.20302518e+02 -1.22641061e+01 -6.65799876e+00 -6.65799876e+00
 -6.65799876e+00 -1.16432252e+00 -2.36937202e-01 -2.36937202e-01
 -2.36937202e-01  6.82447369e+01  5.02050601e+02  2.53141074e+03
  1.24539077e+04  4.54690291e+04  1.32405853e+05]
E1 = -706.6073460300883  E_coul = 198.88791860275293
Extra cycle  E= -507.719427427335  delta_E= 5.68e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.03 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.58659510430823
E1 = -706.6073460300883  E_coul = 198.88791860275293
init E= -507.719427427335
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.236937201890339  LUMO = 68.2447368612119
  mo_energy =
[-1.20302518e+02 -1.22641061e+01 -6.65799876e+00 -6.65799876e+00
 -6.65799876e+00 -1.16432252e+00 -2.36937202e-01 -2.36937202e-01
 -2.36937202e-01  6.82447369e+01  5.02050601e+02  2.53141074e+03
  1.24539077e+04  4.54690291e+04  1.32405853e+05]
E1 = -706.607346031486  E_coul = 198.88791860415031
cycle= 1 E= -507.719427427336  delta_E= -4.55e-13  |g|= 2.7e-10  |ddm|= 6.48e-10
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.607346031486  E_coul = 198.88791860415031
  HOMO = -0.236937201883065  LUMO = 68.2447368613433
  mo_energy =
[-1.20302518e+02 -1.22641061e+01 -6.65799876e+00 -6.65799876e+00
 -6.65799876e+00 -1.16432252e+00 -2.36937202e-01 -2.36937202e-01
 -2.36937202e-01  6.82447369e+01  5.02050601e+02  2.53141074e+03
  1.24539077e+04  4.54690291e+04  1.32405853e+05]
E1 = -706.607346031513  E_coul = 198.8879186041774
Extra cycle  E= -507.719427427336  delta_E= 1.71e-13  |g|= 2.15e-11  |ddm|= 1.27e-11
    CPU time for scf_cycle      2.57 sec, wall time      0.29 sec
exp = [3.67546555e+04 7.34332101e+03 1.83773235e+04 1.40852072e+03
 3.37875542e+02 9.90272108e+01 3.34299788e+01 4.70941430e+00
 3.90715698e-01 8.59792229e+00 4.90925580e-01]
grad_E = [-1.90773629e-07  2.72033864e-06  2.51474521e-08  7.05390769e-05
 -1.33361004e-04  1.55707164e-04  5.29973386e-04 -7.43376280e-04
 -5.74569294e-03 -7.69983138e-04 -1.72716946e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6587785        1
[INPUT] 0    0    [1    /1   ]  7343.28502236        1
[INPUT] 0    0    [1    /1   ]  18377.3233035        1
[INPUT] 0    0    [1    /1   ]  1407.08048288        1
[INPUT] 0    0    [1    /1   ]  340.146206061        1
[INPUT] 0    0    [1    /1   ]  99.6240845535        1
[INPUT] 0    0    [1    /1   ]  33.5024546736        1
[INPUT] 0    0    [1    /1   ]  4.71109057528        1
[INPUT] 0    0    [1    /1   ]  0.390855078623       1
[INPUT] 1    0    [1    /1   ]  8.59831663985        1
[INPUT] 1    0    [1    /1   ]  0.490939703338       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65877852477, 1.0]], [0, [7343.285022364334, 1.0]], [0, [18377.3233035012, 1.0]], [0, [1407.0804828849898, 1.0]], [0, [340.1462060605993, 1.0]], [0, [99.62408455347399, 1.0]], [0, [33.502454673646945, 1.0]], [0, [4.7110905752769066, 1.0]], [0, [0.39085507862288144, 1.0]], [1, [8.598316639846276, 1.0]], [1, [0.4909397033384756, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65877852]
bas 1, expnt(s) = [7343.28502236]
bas 2, expnt(s) = [18377.3233035]
bas 3, expnt(s) = [1407.08048288]
bas 4, expnt(s) = [340.14620606]
bas 5, expnt(s) = [99.62408455]
bas 6, expnt(s) = [33.50245467]
bas 7, expnt(s) = [4.71109058]
bas 8, expnt(s) = [0.39085508]
bas 9, expnt(s) = [8.59831664]
bas 10, expnt(s) = [0.4909397]
CPU time:       376.65
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546588e+04 6.70655238e+03 7.34328502e+03 2.00416195e+03
 1.83773233e+04 3.98773891e+03 1.40708048e+03 5.80435850e+02
 3.40146206e+02 2.00107906e+02 9.96240846e+01 7.96688012e+01
 3.35024547e+01 3.51821597e+01 4.71109058e+00 8.07897222e+00
 3.90855079e-01 1.24889764e+00 8.59831664e+00 4.29537599e+01
 4.90939703e-01 1.19886308e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32058685417777
cond(S) = 205.81559169545162
E1 = -689.1656778426704  E_coul = 184.89792041487527
init E= -504.267757427795
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680730152775884  LUMO = 67.306276785732
  mo_energy =
[-1.21685868e+02 -1.32893636e+01 -7.62358311e+00 -7.62358311e+00
 -7.62358311e+00 -1.65031085e+00 -6.80730153e-01 -6.80730153e-01
 -6.80730153e-01  6.73062768e+01  5.04126363e+02  2.53771080e+03
  1.24587316e+04  4.54726314e+04  1.32409017e+05]
E1 = -706.6577482859249  E_coul = 198.93874012272119
cycle= 1 E= -507.719008163204  delta_E= -3.45  |g|= 0.334  |ddm|= 0.302
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479659
diis-c [-0.23007292  1.        ]
  HOMO = -0.236545512834166  LUMO = 68.6141257963461
  mo_energy =
[-1.20290795e+02 -1.22615124e+01 -6.65479689e+00 -6.65479689e+00
 -6.65479689e+00 -1.16409718e+00 -2.36545513e-01 -2.36545513e-01
 -2.36545513e-01  6.86141258e+01  5.05510342e+02  2.53901524e+03
  1.24599072e+04  4.54737295e+04  1.32410066e+05]
E1 = -706.6142861238322  E_coul = 198.89467334566476
cycle= 2 E= -507.719612778168  delta_E= -0.000605  |g|= 0.00569  |ddm|= 0.0206
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00615612
diis-c [-3.76224969e-05  1.09292733e-03  9.98907073e-01]
  HOMO = -0.236806479210129  LUMO = 68.6099296138003
  mo_energy =
[-1.20302160e+02 -1.22632537e+01 -6.65747295e+00 -6.65747295e+00
 -6.65747295e+00 -1.16419404e+00 -2.36806479e-01 -2.36806479e-01
 -2.36806479e-01  6.86099296e+01  5.05497976e+02  2.53899700e+03
  1.24598849e+04  4.54737057e+04  1.32410041e+05]
E1 = -706.6135854092034  E_coul = 198.8939724378053
cycle= 3 E= -507.719612971398  delta_E= -1.93e-07  |g|= 0.000135  |ddm|= 0.000326
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000183081
diis-c [-8.07597110e-10  2.93183827e-05 -3.00087241e-02  1.02997941e+00]
  HOMO = -0.236810663661514  LUMO = 68.609858206649
  mo_energy =
[-1.20302354e+02 -1.22632831e+01 -6.65752191e+00 -6.65752191e+00
 -6.65752191e+00 -1.16419533e+00 -2.36810664e-01 -2.36810664e-01
 -2.36810664e-01  6.86098582e+01  5.05497782e+02  2.53899675e+03
  1.24598846e+04  4.54737054e+04  1.32410041e+05]
E1 = -706.6135710748755  E_coul = 198.8939581033788
cycle= 4 E= -507.719612971497  delta_E= -9.86e-11  |g|= 6.24e-07  |ddm|= 6.74e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6135710748755  E_coul = 198.8939581033788
  HOMO = -0.236810629420469  LUMO = 68.609858732326
  mo_energy =
[-1.20302353e+02 -1.22632828e+01 -6.65752159e+00 -6.65752159e+00
 -6.65752159e+00 -1.16419532e+00 -2.36810629e-01 -2.36810629e-01
 -2.36810629e-01  6.86098587e+01  5.05497784e+02  2.53899675e+03
  1.24598846e+04  4.54737054e+04  1.32410041e+05]
E1 = -706.6135711542872  E_coul = 198.89395818279067
Extra cycle  E= -507.719612971497  delta_E= 1.71e-13  |g|= 1.19e-08  |ddm|= 3.73e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546588e+04 7.34328502e+03 1.83773233e+04 1.40708048e+03
 3.40146206e+02 9.96240846e+01 3.35024547e+01 4.71109058e+00
 3.90855079e-01 8.59831664e+00 4.90939703e-01]
E = -507.71961297149653
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6587785        1
[INPUT] 0    0    [1    /1   ]  7343.28502236        1
[INPUT] 0    0    [1    /1   ]  18377.3233035        1
[INPUT] 0    0    [1    /1   ]  1407.08048288        1
[INPUT] 0    0    [1    /1   ]  340.146206061        1
[INPUT] 0    0    [1    /1   ]  99.6240845535        1
[INPUT] 0    0    [1    /1   ]  33.5024546736        1
[INPUT] 0    0    [1    /1   ]  4.71109057528        1
[INPUT] 0    0    [1    /1   ]  0.390855078623       1
[INPUT] 1    0    [1    /1   ]  8.59831663985        1
[INPUT] 1    0    [1    /1   ]  0.490939703338       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65877852477, 1.0]], [0, [7343.285022364334, 1.0]], [0, [18377.3233035012, 1.0]], [0, [1407.0804828849898, 1.0]], [0, [340.1462060605993, 1.0]], [0, [99.62408455347399, 1.0]], [0, [33.502454673646945, 1.0]], [0, [4.7110905752769066, 1.0]], [0, [0.39085507862288144, 1.0]], [1, [8.598316639846276, 1.0]], [1, [0.4909397033384756, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65877852]
bas 1, expnt(s) = [7343.28502236]
bas 2, expnt(s) = [18377.3233035]
bas 3, expnt(s) = [1407.08048288]
bas 4, expnt(s) = [340.14620606]
bas 5, expnt(s) = [99.62408455]
bas 6, expnt(s) = [33.50245467]
bas 7, expnt(s) = [4.71109058]
bas 8, expnt(s) = [0.39085508]
bas 9, expnt(s) = [8.59831664]
bas 10, expnt(s) = [0.4909397]
CPU time:       377.91
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546588e+04 6.70655238e+03 7.34328502e+03 2.00416195e+03
 1.83773233e+04 3.98773891e+03 1.40708048e+03 5.80435850e+02
 3.40146206e+02 2.00107906e+02 9.96240846e+01 7.96688012e+01
 3.35024547e+01 3.51821597e+01 4.71109058e+00 8.07897222e+00
 3.90855079e-01 1.24889764e+00 8.59831664e+00 4.29537599e+01
 4.90939703e-01 1.19886308e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32058685417777
cond(S) = 205.81559169545162
E1 = -689.1656778426704  E_coul = 184.89792041487527
init E= -504.267757427795
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680730152775884  LUMO = 67.306276785732
  mo_energy =
[-1.21685868e+02 -1.32893636e+01 -7.62358311e+00 -7.62358311e+00
 -7.62358311e+00 -1.65031085e+00 -6.80730153e-01 -6.80730153e-01
 -6.80730153e-01  6.73062768e+01  5.04126363e+02  2.53771080e+03
  1.24587316e+04  4.54726314e+04  1.32409017e+05]
E1 = -706.6577482859249  E_coul = 198.93874012272119
cycle= 1 E= -507.719008163204  delta_E= -3.45  |g|= 0.334  |ddm|= 0.302
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479659
diis-c [-0.23007292  1.        ]
  HOMO = -0.236545512834166  LUMO = 68.6141257963461
  mo_energy =
[-1.20290795e+02 -1.22615124e+01 -6.65479689e+00 -6.65479689e+00
 -6.65479689e+00 -1.16409718e+00 -2.36545513e-01 -2.36545513e-01
 -2.36545513e-01  6.86141258e+01  5.05510342e+02  2.53901524e+03
  1.24599072e+04  4.54737295e+04  1.32410066e+05]
E1 = -706.6142861238322  E_coul = 198.89467334566476
cycle= 2 E= -507.719612778168  delta_E= -0.000605  |g|= 0.00569  |ddm|= 0.0206
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00615612
diis-c [-3.76224969e-05  1.09292733e-03  9.98907073e-01]
  HOMO = -0.236806479210129  LUMO = 68.6099296138003
  mo_energy =
[-1.20302160e+02 -1.22632537e+01 -6.65747295e+00 -6.65747295e+00
 -6.65747295e+00 -1.16419404e+00 -2.36806479e-01 -2.36806479e-01
 -2.36806479e-01  6.86099296e+01  5.05497976e+02  2.53899700e+03
  1.24598849e+04  4.54737057e+04  1.32410041e+05]
E1 = -706.6135854092034  E_coul = 198.8939724378053
cycle= 3 E= -507.719612971398  delta_E= -1.93e-07  |g|= 0.000135  |ddm|= 0.000326
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000183081
diis-c [-8.07597110e-10  2.93183827e-05 -3.00087241e-02  1.02997941e+00]
  HOMO = -0.236810663661514  LUMO = 68.609858206649
  mo_energy =
[-1.20302354e+02 -1.22632831e+01 -6.65752191e+00 -6.65752191e+00
 -6.65752191e+00 -1.16419533e+00 -2.36810664e-01 -2.36810664e-01
 -2.36810664e-01  6.86098582e+01  5.05497782e+02  2.53899675e+03
  1.24598846e+04  4.54737054e+04  1.32410041e+05]
E1 = -706.6135710748755  E_coul = 198.8939581033788
cycle= 4 E= -507.719612971497  delta_E= -9.86e-11  |g|= 6.24e-07  |ddm|= 6.74e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6135710748755  E_coul = 198.8939581033788
  HOMO = -0.236810629420469  LUMO = 68.609858732326
  mo_energy =
[-1.20302353e+02 -1.22632828e+01 -6.65752159e+00 -6.65752159e+00
 -6.65752159e+00 -1.16419532e+00 -2.36810629e-01 -2.36810629e-01
 -2.36810629e-01  6.86098587e+01  5.05497784e+02  2.53899675e+03
  1.24598846e+04  4.54737054e+04  1.32410041e+05]
E1 = -706.6135711542872  E_coul = 198.89395818279067
Extra cycle  E= -507.719612971497  delta_E= 1.71e-13  |g|= 1.19e-08  |ddm|= 3.73e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.81559169545162
E1 = -706.6135711542872  E_coul = 198.89395818279067
init E= -507.719612971497
    CPU time for initialize scf      2.11 sec, wall time      0.13 sec
  HOMO = -0.236810628963543  LUMO = 68.6098587399342
  mo_energy =
[-1.20302353e+02 -1.22632828e+01 -6.65752158e+00 -6.65752158e+00
 -6.65752158e+00 -1.16419532e+00 -2.36810629e-01 -2.36810629e-01
 -2.36810629e-01  6.86098587e+01  5.05497784e+02  2.53899675e+03
  1.24598846e+04  4.54737054e+04  1.32410041e+05]
E1 = -706.613571155659  E_coul = 198.89395818416222
cycle= 1 E= -507.719612971497  delta_E= -2.27e-13  |g|= 2.64e-10  |ddm|= 6.36e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.613571155659  E_coul = 198.89395818416222
  HOMO = -0.236810628956421  LUMO = 68.6098587400637
  mo_energy =
[-1.20302353e+02 -1.22632828e+01 -6.65752158e+00 -6.65752158e+00
 -6.65752158e+00 -1.16419532e+00 -2.36810629e-01 -2.36810629e-01
 -2.36810629e-01  6.86098587e+01  5.05497784e+02  2.53899675e+03
  1.24598846e+04  4.54737054e+04  1.32410041e+05]
E1 = -706.6135711556859  E_coul = 198.89395818418913
Extra cycle  E= -507.719612971497  delta_E=    0  |g|= 1.3e-11  |ddm|= 1.25e-11
    CPU time for scf_cycle      2.61 sec, wall time      0.30 sec
exp = [3.67546588e+04 7.34328502e+03 1.83773233e+04 1.40708048e+03
 3.40146206e+02 9.96240846e+01 3.35024547e+01 4.71109058e+00
 3.90855079e-01 8.59831664e+00 4.90939703e-01]
grad_E = [-1.81563268e-07  3.07458167e-06  3.55366358e-08  5.56669652e-05
 -5.45064984e-05  1.50705739e-04  2.56466012e-04 -5.11351769e-04
 -3.29797124e-03 -4.63458988e-04 -1.01328608e-03]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6598304        1
[INPUT] 0    0    [1    /1   ]  7343.27377005        1
[INPUT] 0    0    [1    /1   ]  18377.3232502        1
[INPUT] 0    0    [1    /1   ]  1406.61470866        1
[INPUT] 0    0    [1    /1   ]  340.967536641        1
[INPUT] 0    0    [1    /1   ]  99.5828261698        1
[INPUT] 0    0    [1    /1   ]  33.4127537949        1
[INPUT] 0    0    [1    /1   ]  4.71164782316        1
[INPUT] 0    0    [1    /1   ]  0.39098605823        1
[INPUT] 1    0    [1    /1   ]  8.59874665355        1
[INPUT] 1    0    [1    /1   ]  0.490959363542       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65983041608, 1.0]], [0, [7343.2737700476255, 1.0]], [0, [18377.323250241523, 1.0]], [0, [1406.6147086563674, 1.0]], [0, [340.96753664147565, 1.0]], [0, [99.58282616981244, 1.0]], [0, [33.412753794894684, 1.0]], [0, [4.711647823163126, 1.0]], [0, [0.3909860582295729, 1.0]], [1, [8.598746653551709, 1.0]], [1, [0.4909593635415807, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65983042]
bas 1, expnt(s) = [7343.27377005]
bas 2, expnt(s) = [18377.32325024]
bas 3, expnt(s) = [1406.61470866]
bas 4, expnt(s) = [340.96753664]
bas 5, expnt(s) = [99.58282617]
bas 6, expnt(s) = [33.41275379]
bas 7, expnt(s) = [4.71164782]
bas 8, expnt(s) = [0.39098606]
bas 9, expnt(s) = [8.59874665]
bas 10, expnt(s) = [0.49095936]
CPU time:       387.94
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546598e+04 6.70655252e+03 7.34327377e+03 2.00415965e+03
 1.83773233e+04 3.98773890e+03 1.40661471e+03 5.80291742e+02
 3.40967537e+02 2.00470188e+02 9.95828262e+01 7.96440543e+01
 3.34127538e+01 3.51114874e+01 4.71164782e+00 8.07968892e+00
 3.90986058e-01 1.24921151e+00 8.59874665e+00 4.29564452e+01
 4.90959364e-01 1.19892310e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320541153961102
cond(S) = 205.79896139146703
E1 = -689.1699027145835  E_coul = 184.90248644800764
init E= -504.267416266576
    CPU time for initialize scf      0.37 sec, wall time      0.06 sec
  HOMO = -0.680650970864321  LUMO = 67.1254976358594
  mo_energy =
[-1.21685463e+02 -1.32888096e+01 -7.62325045e+00 -7.62325045e+00
 -7.62325045e+00 -1.65027685e+00 -6.80650971e-01 -6.80650971e-01
 -6.80650971e-01  6.71254976e+01  5.04290329e+02  2.53914809e+03
  1.24598119e+04  4.54733677e+04  1.32409637e+05]
E1 = -706.6638060961606  E_coul = 198.94473986151561
cycle= 1 E= -507.719066234645  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479425
diis-c [-0.22984824  1.        ]
  HOMO = -0.236422226817592  LUMO = 68.4331138664857
  mo_energy =
[-1.20290269e+02 -1.22608755e+01 -6.65435784e+00 -6.65435784e+00
 -6.65435784e+00 -1.16397656e+00 -2.36422227e-01 -2.36422227e-01
 -2.36422227e-01  6.84331139e+01  5.05674282e+02  2.54045245e+03
  1.24609875e+04  4.54744658e+04  1.32410685e+05]
E1 = -706.6201732666576  E_coul = 198.90050004081326
cycle= 2 E= -507.719673225844  delta_E= -0.000607  |g|= 0.0057  |ddm|= 0.0207
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00617485
diis-c [-3.78438858e-05  1.11206947e-03  9.98887931e-01]
  HOMO = -0.236684402362609  LUMO = 68.4289063615609
  mo_energy =
[-1.20301674e+02 -1.22626246e+01 -6.65704531e+00 -6.65704531e+00
 -6.65704531e+00 -1.16407391e+00 -2.36684402e-01 -2.36684402e-01
 -2.36684402e-01  6.84289064e+01  5.05661867e+02  2.54043415e+03
  1.24609651e+04  4.54744419e+04  1.32410661e+05]
E1 = -706.6194689355982  E_coul = 198.8997955153383
cycle= 3 E= -507.71967342026  delta_E= -1.94e-07  |g|= 0.000135  |ddm|= 0.000328
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000183909
diis-c [-8.15555801e-10  2.91513813e-05 -3.00552180e-02  1.03002607e+00]
  HOMO = -0.236688616586496  LUMO = 68.4288345840513
  mo_energy =
[-1.20301870e+02 -1.22626541e+01 -6.65709459e+00 -6.65709459e+00
 -6.65709459e+00 -1.16407522e+00 -2.36688617e-01 -2.36688617e-01
 -2.36688617e-01  6.84288346e+01  5.05661671e+02  2.54043390e+03
  1.24609649e+04  4.54744416e+04  1.32410660e+05]
E1 = -706.6194544955423  E_coul = 198.8997810751826
cycle= 4 E= -507.71967342036  delta_E= -9.98e-11  |g|= 6.28e-07  |ddm|= 6.78e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6194544955423  E_coul = 198.8997810751826
  HOMO = -0.236688582061088  LUMO = 68.4288351126814
  mo_energy =
[-1.20301869e+02 -1.22626539e+01 -6.65709426e+00 -6.65709426e+00
 -6.65709426e+00 -1.16407521e+00 -2.36688582e-01 -2.36688582e-01
 -2.36688582e-01  6.84288351e+01  5.05661673e+02  2.54043390e+03
  1.24609649e+04  4.54744417e+04  1.32410660e+05]
E1 = -706.6194545755939  E_coul = 198.89978115523414
Extra cycle  E= -507.71967342036  delta_E= -5.68e-14  |g|= 1.2e-08  |ddm|= 3.75e-08
    CPU time for scf_cycle      1.03 sec, wall time      0.20 sec
exp = [3.67546598e+04 7.34327377e+03 1.83773233e+04 1.40661471e+03
 3.40967537e+02 9.95828262e+01 3.34127538e+01 4.71164782e+00
 3.90986058e-01 8.59874665e+00 4.90959364e-01]
E = -507.71967342035975
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:31:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6598304        1
[INPUT] 0    0    [1    /1   ]  7343.27377005        1
[INPUT] 0    0    [1    /1   ]  18377.3232502        1
[INPUT] 0    0    [1    /1   ]  1406.61470866        1
[INPUT] 0    0    [1    /1   ]  340.967536641        1
[INPUT] 0    0    [1    /1   ]  99.5828261698        1
[INPUT] 0    0    [1    /1   ]  33.4127537949        1
[INPUT] 0    0    [1    /1   ]  4.71164782316        1
[INPUT] 0    0    [1    /1   ]  0.39098605823        1
[INPUT] 1    0    [1    /1   ]  8.59874665355        1
[INPUT] 1    0    [1    /1   ]  0.490959363542       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65983041608, 1.0]], [0, [7343.2737700476255, 1.0]], [0, [18377.323250241523, 1.0]], [0, [1406.6147086563674, 1.0]], [0, [340.96753664147565, 1.0]], [0, [99.58282616981244, 1.0]], [0, [33.412753794894684, 1.0]], [0, [4.711647823163126, 1.0]], [0, [0.3909860582295729, 1.0]], [1, [8.598746653551709, 1.0]], [1, [0.4909593635415807, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65983042]
bas 1, expnt(s) = [7343.27377005]
bas 2, expnt(s) = [18377.32325024]
bas 3, expnt(s) = [1406.61470866]
bas 4, expnt(s) = [340.96753664]
bas 5, expnt(s) = [99.58282617]
bas 6, expnt(s) = [33.41275379]
bas 7, expnt(s) = [4.71164782]
bas 8, expnt(s) = [0.39098606]
bas 9, expnt(s) = [8.59874665]
bas 10, expnt(s) = [0.49095936]
CPU time:       389.24
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546598e+04 6.70655252e+03 7.34327377e+03 2.00415965e+03
 1.83773233e+04 3.98773890e+03 1.40661471e+03 5.80291742e+02
 3.40967537e+02 2.00470188e+02 9.95828262e+01 7.96440543e+01
 3.34127538e+01 3.51114874e+01 4.71164782e+00 8.07968892e+00
 3.90986058e-01 1.24921151e+00 8.59874665e+00 4.29564452e+01
 4.90959364e-01 1.19892310e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320541153961102
cond(S) = 205.79896139146703
E1 = -689.1699027145835  E_coul = 184.90248644800764
init E= -504.267416266576
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680650970864321  LUMO = 67.1254976358594
  mo_energy =
[-1.21685463e+02 -1.32888096e+01 -7.62325045e+00 -7.62325045e+00
 -7.62325045e+00 -1.65027685e+00 -6.80650971e-01 -6.80650971e-01
 -6.80650971e-01  6.71254976e+01  5.04290329e+02  2.53914809e+03
  1.24598119e+04  4.54733677e+04  1.32409637e+05]
E1 = -706.6638060961606  E_coul = 198.94473986151561
cycle= 1 E= -507.719066234645  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479425
diis-c [-0.22984824  1.        ]
  HOMO = -0.236422226817592  LUMO = 68.4331138664857
  mo_energy =
[-1.20290269e+02 -1.22608755e+01 -6.65435784e+00 -6.65435784e+00
 -6.65435784e+00 -1.16397656e+00 -2.36422227e-01 -2.36422227e-01
 -2.36422227e-01  6.84331139e+01  5.05674282e+02  2.54045245e+03
  1.24609875e+04  4.54744658e+04  1.32410685e+05]
E1 = -706.6201732666576  E_coul = 198.90050004081326
cycle= 2 E= -507.719673225844  delta_E= -0.000607  |g|= 0.0057  |ddm|= 0.0207
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00617485
diis-c [-3.78438858e-05  1.11206947e-03  9.98887931e-01]
  HOMO = -0.236684402362609  LUMO = 68.4289063615609
  mo_energy =
[-1.20301674e+02 -1.22626246e+01 -6.65704531e+00 -6.65704531e+00
 -6.65704531e+00 -1.16407391e+00 -2.36684402e-01 -2.36684402e-01
 -2.36684402e-01  6.84289064e+01  5.05661867e+02  2.54043415e+03
  1.24609651e+04  4.54744419e+04  1.32410661e+05]
E1 = -706.6194689355982  E_coul = 198.8997955153383
cycle= 3 E= -507.71967342026  delta_E= -1.94e-07  |g|= 0.000135  |ddm|= 0.000328
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000183909
diis-c [-8.15555801e-10  2.91513813e-05 -3.00552180e-02  1.03002607e+00]
  HOMO = -0.236688616586496  LUMO = 68.4288345840513
  mo_energy =
[-1.20301870e+02 -1.22626541e+01 -6.65709459e+00 -6.65709459e+00
 -6.65709459e+00 -1.16407522e+00 -2.36688617e-01 -2.36688617e-01
 -2.36688617e-01  6.84288346e+01  5.05661671e+02  2.54043390e+03
  1.24609649e+04  4.54744416e+04  1.32410660e+05]
E1 = -706.6194544955423  E_coul = 198.8997810751826
cycle= 4 E= -507.71967342036  delta_E= -9.98e-11  |g|= 6.28e-07  |ddm|= 6.78e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6194544955423  E_coul = 198.8997810751826
  HOMO = -0.236688582061088  LUMO = 68.4288351126814
  mo_energy =
[-1.20301869e+02 -1.22626539e+01 -6.65709426e+00 -6.65709426e+00
 -6.65709426e+00 -1.16407521e+00 -2.36688582e-01 -2.36688582e-01
 -2.36688582e-01  6.84288351e+01  5.05661673e+02  2.54043390e+03
  1.24609649e+04  4.54744417e+04  1.32410660e+05]
E1 = -706.6194545755939  E_coul = 198.89978115523414
Extra cycle  E= -507.71967342036  delta_E= -5.68e-14  |g|= 1.2e-08  |ddm|= 3.75e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.79896139146703
E1 = -706.6194545755939  E_coul = 198.89978115523414
init E= -507.71967342036
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.236688581599829  LUMO = 68.4288351203414
  mo_energy =
[-1.20301868e+02 -1.22626539e+01 -6.65709426e+00 -6.65709426e+00
 -6.65709426e+00 -1.16407521e+00 -2.36688582e-01 -2.36688582e-01
 -2.36688582e-01  6.84288351e+01  5.05661673e+02  2.54043390e+03
  1.24609649e+04  4.54744417e+04  1.32410660e+05]
E1 = -706.6194545769781  E_coul = 198.8997811566184
cycle= 1 E= -507.71967342036  delta_E=    0  |g|= 2.65e-10  |ddm|= 6.41e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6194545769781  E_coul = 198.8997811566184
  HOMO = -0.236688581592626  LUMO = 68.4288351204707
  mo_energy =
[-1.20301868e+02 -1.22626539e+01 -6.65709426e+00 -6.65709426e+00
 -6.65709426e+00 -1.16407521e+00 -2.36688582e-01 -2.36688582e-01
 -2.36688582e-01  6.84288351e+01  5.05661673e+02  2.54043390e+03
  1.24609649e+04  4.54744417e+04  1.32410660e+05]
E1 = -706.6194545770051  E_coul = 198.89978115664528
Extra cycle  E= -507.71967342036  delta_E=    0  |g|= 7.92e-12  |ddm|= 1.26e-11
    CPU time for scf_cycle      2.57 sec, wall time      0.29 sec
exp = [3.67546598e+04 7.34327377e+03 1.83773233e+04 1.40661471e+03
 3.40967537e+02 9.95828262e+01 3.34127538e+01 4.71164782e+00
 3.90986058e-01 8.59874665e+00 4.90959364e-01]
grad_E = [-1.77014963e-07  3.25158193e-06  4.08411462e-08  4.76201051e-05
  9.18129377e-06  7.44334678e-05  2.19109774e-05 -2.05254189e-04
 -8.88014597e-04 -1.29604395e-04 -2.83952153e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6595928        1
[INPUT] 0    0    [1    /1   ]  7343.27646955        1
[INPUT] 0    0    [1    /1   ]  18377.3232656        1
[INPUT] 0    0    [1    /1   ]  1406.71446805        1
[INPUT] 0    0    [1    /1   ]  340.85729496         1
[INPUT] 0    0    [1    /1   ]  99.4137578892        1
[INPUT] 0    0    [1    /1   ]  33.3496791634        1
[INPUT] 0    0    [1    /1   ]  4.71159750509        1
[INPUT] 0    0    [1    /1   ]  0.391028073287       1
[INPUT] 1    0    [1    /1   ]  8.5988874283         1
[INPUT] 1    0    [1    /1   ]  0.490966680316       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.659592784046, 1.0]], [0, [7343.2764695511905, 1.0]], [0, [18377.323265566818, 1.0]], [0, [1406.7144680453302, 1.0]], [0, [340.85729495999135, 1.0]], [0, [99.41375788920901, 1.0]], [0, [33.34967916342469, 1.0]], [0, [4.711597505092964, 1.0]], [0, [0.3910280732874722, 1.0]], [1, [8.598887428300875, 1.0]], [1, [0.4909666803158298, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65959278]
bas 1, expnt(s) = [7343.27646955]
bas 2, expnt(s) = [18377.32326557]
bas 3, expnt(s) = [1406.71446805]
bas 4, expnt(s) = [340.85729496]
bas 5, expnt(s) = [99.41375789]
bas 6, expnt(s) = [33.34967916]
bas 7, expnt(s) = [4.71159751]
bas 8, expnt(s) = [0.39102807]
bas 9, expnt(s) = [8.59888743]
bas 10, expnt(s) = [0.49096668]
CPU time:       399.33
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546596e+04 6.70655249e+03 7.34327647e+03 2.00416020e+03
 1.83773233e+04 3.98773890e+03 1.40671447e+03 5.80322608e+02
 3.40857295e+02 2.00421574e+02 9.94137579e+01 7.95426201e+01
 3.33496792e+01 3.50617646e+01 4.71159751e+00 8.07962421e+00
 3.91028073e-01 1.24931219e+00 8.59888743e+00 4.29573242e+01
 4.90966680e-01 1.19894543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529794457794
cond(S) = 205.73519315361736
E1 = -689.1717095813062  E_coul = 184.90391550273299
init E= -504.267794078573
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680622821678594  LUMO = 66.9445040274529
  mo_energy =
[-1.21685273e+02 -1.32886985e+01 -7.62314995e+00 -7.62314995e+00
 -7.62314995e+00 -1.65026444e+00 -6.80622822e-01 -6.80622822e-01
 -6.80622822e-01  6.69445040e+01  5.03546348e+02  2.53808377e+03
  1.24589434e+04  4.54726294e+04  1.32408954e+05]
E1 = -706.6660495304858  E_coul = 198.94697979413485
cycle= 1 E= -507.719069736351  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479359
diis-c [-0.2297847  1.       ]
  HOMO = -0.236380730419272  LUMO = 68.2518576460211
  mo_energy =
[-1.20289932e+02 -1.22607248e+01 -6.65420169e+00 -6.65420169e+00
 -6.65420169e+00 -1.16394081e+00 -2.36380730e-01 -2.36380730e-01
 -2.36380730e-01  6.82518576e+01  5.04930402e+02  2.53938820e+03
  1.24601191e+04  4.54737276e+04  1.32410003e+05]
E1 = -706.6222560369273  E_coul = 198.90257699118385
cycle= 2 E= -507.719679045743  delta_E= -0.000609  |g|= 0.00571  |ddm|= 0.0207
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00618737
diis-c [-3.79916903e-05  1.12592188e-03  9.98874078e-01]
  HOMO = -0.236644088178927  LUMO = 68.2476410806825
  mo_energy =
[-1.20301373e+02 -1.22624814e+01 -6.65690034e+00 -6.65690034e+00
 -6.65690034e+00 -1.16403863e+00 -2.36644088e-01 -2.36644088e-01
 -2.36644088e-01  6.82476411e+01  5.04917951e+02  2.53936984e+03
  1.24600967e+04  4.54737037e+04  1.32409978e+05]
E1 = -706.6215480975565  E_coul = 198.90186885619352
cycle= 3 E= -507.719679241363  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.000329
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184556
diis-c [-8.21854341e-10  2.90956627e-05 -3.01008703e-02  1.03007177e+00]
  HOMO = -0.236648330703687  LUMO = 68.2475689710767
  mo_energy =
[-1.20301569e+02 -1.22625111e+01 -6.65694992e+00 -6.65694992e+00
 -6.65694992e+00 -1.16403995e+00 -2.36648331e-01 -2.36648331e-01
 -2.36648331e-01  6.82475690e+01  5.04917755e+02  2.53936959e+03
  1.24600964e+04  4.54737034e+04  1.32409978e+05]
E1 = -706.6215335543891  E_coul = 198.90185431292488
cycle= 4 E= -507.719679241464  delta_E= -1.01e-10  |g|= 6.31e-07  |ddm|= 6.82e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6215335543891  E_coul = 198.90185431292488
  HOMO = -0.236648295905813  LUMO = 68.2475695022071
  mo_energy =
[-1.20301568e+02 -1.22625109e+01 -6.65694959e+00 -6.65694959e+00
 -6.65694959e+00 -1.16403993e+00 -2.36648296e-01 -2.36648296e-01
 -2.36648296e-01  6.82475695e+01  5.04917756e+02  2.53936960e+03
  1.24600964e+04  4.54737034e+04  1.32409978e+05]
E1 = -706.6215336350692  E_coul = 198.9018543936051
Extra cycle  E= -507.719679241464  delta_E= 5.68e-14  |g|= 1.21e-08  |ddm|= 3.78e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546596e+04 7.34327647e+03 1.83773233e+04 1.40671447e+03
 3.40857295e+02 9.94137579e+01 3.33496792e+01 4.71159751e+00
 3.91028073e-01 8.59888743e+00 4.90966680e-01]
E = -507.7196792414641
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:07 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6595928        1
[INPUT] 0    0    [1    /1   ]  7343.27646955        1
[INPUT] 0    0    [1    /1   ]  18377.3232656        1
[INPUT] 0    0    [1    /1   ]  1406.71446805        1
[INPUT] 0    0    [1    /1   ]  340.85729496         1
[INPUT] 0    0    [1    /1   ]  99.4137578892        1
[INPUT] 0    0    [1    /1   ]  33.3496791634        1
[INPUT] 0    0    [1    /1   ]  4.71159750509        1
[INPUT] 0    0    [1    /1   ]  0.391028073287       1
[INPUT] 1    0    [1    /1   ]  8.5988874283         1
[INPUT] 1    0    [1    /1   ]  0.490966680316       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.659592784046, 1.0]], [0, [7343.2764695511905, 1.0]], [0, [18377.323265566818, 1.0]], [0, [1406.7144680453302, 1.0]], [0, [340.85729495999135, 1.0]], [0, [99.41375788920901, 1.0]], [0, [33.34967916342469, 1.0]], [0, [4.711597505092964, 1.0]], [0, [0.3910280732874722, 1.0]], [1, [8.598887428300875, 1.0]], [1, [0.4909666803158298, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65959278]
bas 1, expnt(s) = [7343.27646955]
bas 2, expnt(s) = [18377.32326557]
bas 3, expnt(s) = [1406.71446805]
bas 4, expnt(s) = [340.85729496]
bas 5, expnt(s) = [99.41375789]
bas 6, expnt(s) = [33.34967916]
bas 7, expnt(s) = [4.71159751]
bas 8, expnt(s) = [0.39102807]
bas 9, expnt(s) = [8.59888743]
bas 10, expnt(s) = [0.49096668]
CPU time:       400.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546596e+04 6.70655249e+03 7.34327647e+03 2.00416020e+03
 1.83773233e+04 3.98773890e+03 1.40671447e+03 5.80322608e+02
 3.40857295e+02 2.00421574e+02 9.94137579e+01 7.95426201e+01
 3.33496792e+01 3.50617646e+01 4.71159751e+00 8.07962421e+00
 3.91028073e-01 1.24931219e+00 8.59888743e+00 4.29573242e+01
 4.90966680e-01 1.19894543e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529794457794
cond(S) = 205.73519315361736
E1 = -689.1717095813062  E_coul = 184.90391550273299
init E= -504.267794078573
    CPU time for initialize scf      0.47 sec, wall time      0.07 sec
  HOMO = -0.680622821678594  LUMO = 66.9445040274529
  mo_energy =
[-1.21685273e+02 -1.32886985e+01 -7.62314995e+00 -7.62314995e+00
 -7.62314995e+00 -1.65026444e+00 -6.80622822e-01 -6.80622822e-01
 -6.80622822e-01  6.69445040e+01  5.03546348e+02  2.53808377e+03
  1.24589434e+04  4.54726294e+04  1.32408954e+05]
E1 = -706.6660495304858  E_coul = 198.94697979413485
cycle= 1 E= -507.719069736351  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479359
diis-c [-0.2297847  1.       ]
  HOMO = -0.236380730419272  LUMO = 68.2518576460211
  mo_energy =
[-1.20289932e+02 -1.22607248e+01 -6.65420169e+00 -6.65420169e+00
 -6.65420169e+00 -1.16394081e+00 -2.36380730e-01 -2.36380730e-01
 -2.36380730e-01  6.82518576e+01  5.04930402e+02  2.53938820e+03
  1.24601191e+04  4.54737276e+04  1.32410003e+05]
E1 = -706.6222560369273  E_coul = 198.90257699118385
cycle= 2 E= -507.719679045743  delta_E= -0.000609  |g|= 0.00571  |ddm|= 0.0207
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00618737
diis-c [-3.79916903e-05  1.12592188e-03  9.98874078e-01]
  HOMO = -0.236644088178927  LUMO = 68.2476410806825
  mo_energy =
[-1.20301373e+02 -1.22624814e+01 -6.65690034e+00 -6.65690034e+00
 -6.65690034e+00 -1.16403863e+00 -2.36644088e-01 -2.36644088e-01
 -2.36644088e-01  6.82476411e+01  5.04917951e+02  2.53936984e+03
  1.24600967e+04  4.54737037e+04  1.32409978e+05]
E1 = -706.6215480975565  E_coul = 198.90186885619352
cycle= 3 E= -507.719679241363  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.000329
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184556
diis-c [-8.21854341e-10  2.90956627e-05 -3.01008703e-02  1.03007177e+00]
  HOMO = -0.236648330703687  LUMO = 68.2475689710767
  mo_energy =
[-1.20301569e+02 -1.22625111e+01 -6.65694992e+00 -6.65694992e+00
 -6.65694992e+00 -1.16403995e+00 -2.36648331e-01 -2.36648331e-01
 -2.36648331e-01  6.82475690e+01  5.04917755e+02  2.53936959e+03
  1.24600964e+04  4.54737034e+04  1.32409978e+05]
E1 = -706.6215335543891  E_coul = 198.90185431292488
cycle= 4 E= -507.719679241464  delta_E= -1.01e-10  |g|= 6.31e-07  |ddm|= 6.82e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6215335543891  E_coul = 198.90185431292488
  HOMO = -0.236648295905813  LUMO = 68.2475695022071
  mo_energy =
[-1.20301568e+02 -1.22625109e+01 -6.65694959e+00 -6.65694959e+00
 -6.65694959e+00 -1.16403993e+00 -2.36648296e-01 -2.36648296e-01
 -2.36648296e-01  6.82475695e+01  5.04917756e+02  2.53936960e+03
  1.24600964e+04  4.54737034e+04  1.32409978e+05]
E1 = -706.6215336350692  E_coul = 198.9018543936051
Extra cycle  E= -507.719679241464  delta_E= 5.68e-14  |g|= 1.21e-08  |ddm|= 3.78e-08
    CPU time for scf_cycle      1.12 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.73519315361736
E1 = -706.6215336350692  E_coul = 198.9018543936051
init E= -507.719679241464
    CPU time for initialize scf      2.39 sec, wall time      0.15 sec
  HOMO = -0.236648295440275  LUMO = 68.2475695099153
  mo_energy =
[-1.20301568e+02 -1.22625109e+01 -6.65694959e+00 -6.65694959e+00
 -6.65694959e+00 -1.16403993e+00 -2.36648295e-01 -2.36648295e-01
 -2.36648295e-01  6.82475695e+01  5.04917756e+02  2.53936960e+03
  1.24600964e+04  4.54737034e+04  1.32409978e+05]
E1 = -706.621533636466  E_coul = 198.90185439500192
cycle= 1 E= -507.719679241464  delta_E= 5.68e-14  |g|= 2.68e-10  |ddm|= 6.46e-10
    CPU time for cycle= 1      0.35 sec, wall time      0.02 sec
E1 = -706.621533636466  E_coul = 198.90185439500192
  HOMO = -0.236648295433002  LUMO = 68.2475695100466
  mo_energy =
[-1.20301568e+02 -1.22625109e+01 -6.65694959e+00 -6.65694959e+00
 -6.65694959e+00 -1.16403993e+00 -2.36648295e-01 -2.36648295e-01
 -2.36648295e-01  6.82475695e+01  5.04917756e+02  2.53936960e+03
  1.24600964e+04  4.54737034e+04  1.32409978e+05]
E1 = -706.6215336364927  E_coul = 198.90185439502886
Extra cycle  E= -507.719679241464  delta_E= 2.27e-13  |g|= 2.16e-11  |ddm|= 1.27e-11
    CPU time for scf_cycle      2.88 sec, wall time      0.31 sec
exp = [3.67546596e+04 7.34327647e+03 1.83773233e+04 1.40671447e+03
 3.40857295e+02 9.94137579e+01 3.33496792e+01 4.71159751e+00
 3.91028073e-01 8.59888743e+00 4.90966680e-01]
grad_E = [-1.76746895e-07  3.26329866e-06  4.11557605e-08  4.66793009e-05
  2.74532860e-05  1.87893201e-05 -2.86690871e-06 -2.93201432e-05
 -1.16832960e-04 -1.08556031e-05 -3.57844361e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6594257        1
[INPUT] 0    0    [1    /1   ]  7343.27830867        1
[INPUT] 0    0    [1    /1   ]  18377.3232751        1
[INPUT] 0    0    [1    /1   ]  1406.78660546        1
[INPUT] 0    0    [1    /1   ]  340.752252564        1
[INPUT] 0    0    [1    /1   ]  99.360030895         1
[INPUT] 0    0    [1    /1   ]  33.3349827912        1
[INPUT] 0    0    [1    /1   ]  4.71153211911        1
[INPUT] 0    0    [1    /1   ]  0.391034751472       1
[INPUT] 1    0    [1    /1   ]  8.59890061307        1
[INPUT] 1    0    [1    /1   ]  0.490967678585       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.659425746446, 1.0]], [0, [7343.2783086678, 1.0]], [0, [18377.32327511464, 1.0]], [0, [1406.786605457632, 1.0]], [0, [340.7522525640534, 1.0]], [0, [99.36003089498867, 1.0]], [0, [33.33498279120634, 1.0]], [0, [4.7115321191092905, 1.0]], [0, [0.39103475147151334, 1.0]], [1, [8.598900613072484, 1.0]], [1, [0.4909676785851677, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65942575]
bas 1, expnt(s) = [7343.27830867]
bas 2, expnt(s) = [18377.32327511]
bas 3, expnt(s) = [1406.78660546]
bas 4, expnt(s) = [340.75225256]
bas 5, expnt(s) = [99.36003089]
bas 6, expnt(s) = [33.33498279]
bas 7, expnt(s) = [4.71153212]
bas 8, expnt(s) = [0.39103475]
bas 9, expnt(s) = [8.59890061]
bas 10, expnt(s) = [0.49096768]
CPU time:       411.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327831e+03 2.00416058e+03
 1.83773233e+04 3.98773891e+03 1.40678661e+03 5.80344927e+02
 3.40752253e+02 2.00375249e+02 9.93600309e+01 7.95103770e+01
 3.33349828e+01 3.50501758e+01 4.71153212e+00 8.07954011e+00
 3.91034751e-01 1.24932819e+00 8.59890061e+00 4.29574066e+01
 4.90967679e-01 1.19894848e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529240917466
cond(S) = 205.71463810580843
E1 = -689.172055206491  E_coul = 184.9040738786222
init E= -504.267981327869
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618178566904  LUMO = 66.8968470169174
  mo_energy =
[-1.21685242e+02 -1.32886993e+01 -7.62313954e+00 -7.62313954e+00
 -7.62313954e+00 -1.65026247e+00 -6.80618179e-01 -6.80618179e-01
 -6.80618179e-01  6.68968470e+01  5.03278545e+02  2.53760262e+03
  1.24585582e+04  4.54723168e+04  1.32408670e+05]
E1 = -706.6663634287735  E_coul = 198.9472940429333
cycle= 1 E= -507.71906938584  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479354
diis-c [-0.2297802  1.       ]
  HOMO = -0.236374876554448  LUMO = 68.2041269529768
  mo_energy =
[-1.20289864e+02 -1.22607189e+01 -6.65418125e+00 -6.65418125e+00
 -6.65418125e+00 -1.16393668e+00 -2.36374877e-01 -2.36374877e-01
 -2.36374877e-01  6.82041270e+01  5.04662631e+02  2.53890709e+03
  1.24597339e+04  4.54734151e+04  1.32409719e+05]
E1 = -706.6225280864378  E_coul = 198.90284877980787
cycle= 2 E= -507.71967930663  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619025
diis-c [-3.80255549e-05  1.12920850e-03  9.98870792e-01]
  HOMO = -0.236638545006281  LUMO = 68.1999081374072
  mo_energy =
[-1.20301314e+02 -1.22624775e+01 -6.65688284e+00 -6.65688284e+00
 -6.65688284e+00 -1.16403461e+00 -2.36638545e-01 -2.36638545e-01
 -2.36638545e-01  6.81999081e+01  5.04650171e+02  2.53888872e+03
  1.24597115e+04  4.54733911e+04  1.32409694e+05]
E1 = -706.6218191927221  E_coul = 198.9021396901527
cycle= 3 E= -507.719679502569  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.000329
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184714
diis-c [-8.23391295e-10  2.90889279e-05 -3.01127946e-02  1.03008371e+00]
  HOMO = -0.236642794910573  LUMO = 68.1998359425275
  mo_energy =
[-1.20301511e+02 -1.22625073e+01 -6.65693250e+00 -6.65693250e+00
 -6.65693250e+00 -1.16403593e+00 -2.36642795e-01 -2.36642795e-01
 -2.36642795e-01  6.81998359e+01  5.04649975e+02  2.53888847e+03
  1.24597112e+04  4.54733908e+04  1.32409694e+05]
E1 = -706.6218046224691  E_coul = 198.902125119798
cycle= 4 E= -507.719679502671  delta_E= -1.02e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6218046224691  E_coul = 198.902125119798
  HOMO = -0.236642760041681  LUMO = 68.1998364742841
  mo_energy =
[-1.20301509e+02 -1.22625071e+01 -6.65693217e+00 -6.65693217e+00
 -6.65693217e+00 -1.16403592e+00 -2.36642760e-01 -2.36642760e-01
 -2.36642760e-01  6.81998365e+01  5.04649976e+02  2.53888847e+03
  1.24597112e+04  4.54733908e+04  1.32409694e+05]
E1 = -706.6218047033143  E_coul = 198.9021252006433
Extra cycle  E= -507.719679502671  delta_E= 5.68e-14  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546594e+04 7.34327831e+03 1.83773233e+04 1.40678661e+03
 3.40752253e+02 9.93600309e+01 3.33349828e+01 4.71153212e+00
 3.91034751e-01 8.59890061e+00 4.90967679e-01]
E = -507.719679502671
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6594257        1
[INPUT] 0    0    [1    /1   ]  7343.27830867        1
[INPUT] 0    0    [1    /1   ]  18377.3232751        1
[INPUT] 0    0    [1    /1   ]  1406.78660546        1
[INPUT] 0    0    [1    /1   ]  340.752252564        1
[INPUT] 0    0    [1    /1   ]  99.360030895         1
[INPUT] 0    0    [1    /1   ]  33.3349827912        1
[INPUT] 0    0    [1    /1   ]  4.71153211911        1
[INPUT] 0    0    [1    /1   ]  0.391034751472       1
[INPUT] 1    0    [1    /1   ]  8.59890061307        1
[INPUT] 1    0    [1    /1   ]  0.490967678585       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.659425746446, 1.0]], [0, [7343.2783086678, 1.0]], [0, [18377.32327511464, 1.0]], [0, [1406.786605457632, 1.0]], [0, [340.7522525640534, 1.0]], [0, [99.36003089498867, 1.0]], [0, [33.33498279120634, 1.0]], [0, [4.7115321191092905, 1.0]], [0, [0.39103475147151334, 1.0]], [1, [8.598900613072484, 1.0]], [1, [0.4909676785851677, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65942575]
bas 1, expnt(s) = [7343.27830867]
bas 2, expnt(s) = [18377.32327511]
bas 3, expnt(s) = [1406.78660546]
bas 4, expnt(s) = [340.75225256]
bas 5, expnt(s) = [99.36003089]
bas 6, expnt(s) = [33.33498279]
bas 7, expnt(s) = [4.71153212]
bas 8, expnt(s) = [0.39103475]
bas 9, expnt(s) = [8.59890061]
bas 10, expnt(s) = [0.49096768]
CPU time:       412.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327831e+03 2.00416058e+03
 1.83773233e+04 3.98773891e+03 1.40678661e+03 5.80344927e+02
 3.40752253e+02 2.00375249e+02 9.93600309e+01 7.95103770e+01
 3.33349828e+01 3.50501758e+01 4.71153212e+00 8.07954011e+00
 3.91034751e-01 1.24932819e+00 8.59890061e+00 4.29574066e+01
 4.90967679e-01 1.19894848e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529240917466
cond(S) = 205.71463810580843
E1 = -689.172055206491  E_coul = 184.9040738786222
init E= -504.267981327869
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618178566904  LUMO = 66.8968470169174
  mo_energy =
[-1.21685242e+02 -1.32886993e+01 -7.62313954e+00 -7.62313954e+00
 -7.62313954e+00 -1.65026247e+00 -6.80618179e-01 -6.80618179e-01
 -6.80618179e-01  6.68968470e+01  5.03278545e+02  2.53760262e+03
  1.24585582e+04  4.54723168e+04  1.32408670e+05]
E1 = -706.6663634287735  E_coul = 198.9472940429333
cycle= 1 E= -507.71906938584  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479354
diis-c [-0.2297802  1.       ]
  HOMO = -0.236374876554448  LUMO = 68.2041269529768
  mo_energy =
[-1.20289864e+02 -1.22607189e+01 -6.65418125e+00 -6.65418125e+00
 -6.65418125e+00 -1.16393668e+00 -2.36374877e-01 -2.36374877e-01
 -2.36374877e-01  6.82041270e+01  5.04662631e+02  2.53890709e+03
  1.24597339e+04  4.54734151e+04  1.32409719e+05]
E1 = -706.6225280864378  E_coul = 198.90284877980787
cycle= 2 E= -507.71967930663  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619025
diis-c [-3.80255549e-05  1.12920850e-03  9.98870792e-01]
  HOMO = -0.236638545006281  LUMO = 68.1999081374072
  mo_energy =
[-1.20301314e+02 -1.22624775e+01 -6.65688284e+00 -6.65688284e+00
 -6.65688284e+00 -1.16403461e+00 -2.36638545e-01 -2.36638545e-01
 -2.36638545e-01  6.81999081e+01  5.04650171e+02  2.53888872e+03
  1.24597115e+04  4.54733911e+04  1.32409694e+05]
E1 = -706.6218191927221  E_coul = 198.9021396901527
cycle= 3 E= -507.719679502569  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.000329
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184714
diis-c [-8.23391295e-10  2.90889279e-05 -3.01127946e-02  1.03008371e+00]
  HOMO = -0.236642794910573  LUMO = 68.1998359425275
  mo_energy =
[-1.20301511e+02 -1.22625073e+01 -6.65693250e+00 -6.65693250e+00
 -6.65693250e+00 -1.16403593e+00 -2.36642795e-01 -2.36642795e-01
 -2.36642795e-01  6.81998359e+01  5.04649975e+02  2.53888847e+03
  1.24597112e+04  4.54733908e+04  1.32409694e+05]
E1 = -706.6218046224691  E_coul = 198.902125119798
cycle= 4 E= -507.719679502671  delta_E= -1.02e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6218046224691  E_coul = 198.902125119798
  HOMO = -0.236642760041681  LUMO = 68.1998364742841
  mo_energy =
[-1.20301509e+02 -1.22625071e+01 -6.65693217e+00 -6.65693217e+00
 -6.65693217e+00 -1.16403592e+00 -2.36642760e-01 -2.36642760e-01
 -2.36642760e-01  6.81998365e+01  5.04649976e+02  2.53888847e+03
  1.24597112e+04  4.54733908e+04  1.32409694e+05]
E1 = -706.6218047033143  E_coul = 198.9021252006433
Extra cycle  E= -507.719679502671  delta_E= 5.68e-14  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.71463810580843
E1 = -706.6218047033143  E_coul = 198.9021252006433
init E= -507.719679502671
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.236642759575019  LUMO = 68.199836482005
  mo_energy =
[-1.20301509e+02 -1.22625071e+01 -6.65693217e+00 -6.65693217e+00
 -6.65693217e+00 -1.16403592e+00 -2.36642760e-01 -2.36642760e-01
 -2.36642760e-01  6.81998365e+01  5.04649976e+02  2.53888847e+03
  1.24597112e+04  4.54733908e+04  1.32409694e+05]
E1 = -706.6218047047141  E_coul = 198.90212520204338
cycle= 1 E= -507.719679502671  delta_E= 2.84e-13  |g|= 2.68e-10  |ddm|= 6.48e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6218047047141  E_coul = 198.90212520204338
  HOMO = -0.236642759567726  LUMO = 68.1998364821354
  mo_energy =
[-1.20301509e+02 -1.22625071e+01 -6.65693217e+00 -6.65693217e+00
 -6.65693217e+00 -1.16403592e+00 -2.36642760e-01 -2.36642760e-01
 -2.36642760e-01  6.81998365e+01  5.04649976e+02  2.53888847e+03
  1.24597112e+04  4.54733908e+04  1.32409694e+05]
E1 = -706.6218047047416  E_coul = 198.90212520207092
Extra cycle  E= -507.719679502671  delta_E=    0  |g|= 1.53e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.29 sec
exp = [3.67546594e+04 7.34327831e+03 1.83773233e+04 1.40678661e+03
 3.40752253e+02 9.93600309e+01 3.33349828e+01 4.71153212e+00
 3.91034751e-01 8.59890061e+00 4.90967679e-01]
grad_E = [-1.77041899e-07  3.25224547e-06  4.08072540e-08  4.70438538e-05
  2.80477074e-05  8.77885324e-06  1.85475072e-06 -2.72966613e-07
  1.84649390e-06  1.68116023e-06  7.07935897e-07]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593993        1
[INPUT] 0    0    [1    /1   ]  7343.27859641        1
[INPUT] 0    0    [1    /1   ]  18377.3232765        1
[INPUT] 0    0    [1    /1   ]  1406.79814764        1
[INPUT] 0    0    [1    /1   ]  340.734314906        1
[INPUT] 0    0    [1    /1   ]  99.3542439025        1
[INPUT] 0    0    [1    /1   ]  33.3337726561        1
[INPUT] 0    0    [1    /1   ]  4.71152135372        1
[INPUT] 0    0    [1    /1   ]  0.391034814367       1
[INPUT] 1    0    [1    /1   ]  8.59889892463        1
[INPUT] 1    0    [1    /1   ]  0.490967663796       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65939927943, 1.0]], [0, [7343.278596413075, 1.0]], [0, [18377.32327654765, 1.0]], [0, [1406.798147642266, 1.0]], [0, [340.7343149061589, 1.0]], [0, [99.35424390254637, 1.0]], [0, [33.33377265614336, 1.0]], [0, [4.711521353718164, 1.0]], [0, [0.3910348143669255, 1.0]], [1, [8.598898924632854, 1.0]], [1, [0.49096766379636986, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65939928]
bas 1, expnt(s) = [7343.27859641]
bas 2, expnt(s) = [18377.32327655]
bas 3, expnt(s) = [1406.79814764]
bas 4, expnt(s) = [340.73431491]
bas 5, expnt(s) = [99.3542439]
bas 6, expnt(s) = [33.33377266]
bas 7, expnt(s) = [4.71152135]
bas 8, expnt(s) = [0.39103481]
bas 9, expnt(s) = [8.59889892]
bas 10, expnt(s) = [0.49096766]
CPU time:       422.31
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327860e+03 2.00416064e+03
 1.83773233e+04 3.98773891e+03 1.40679815e+03 5.80348498e+02
 3.40734315e+02 2.00367338e+02 9.93542439e+01 7.95069038e+01
 3.33337727e+01 3.50492215e+01 4.71152135e+00 8.07952626e+00
 3.91034814e-01 1.24932834e+00 8.59889892e+00 4.29573960e+01
 4.90967664e-01 1.19894843e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529462689368
cond(S) = 205.71232979047522
E1 = -689.1720738994717  E_coul = 184.90406204579838
init E= -504.268011853673
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618092356668  LUMO = 66.892402683234
  mo_energy =
[-1.21685242e+02 -1.32887022e+01 -7.62314055e+00 -7.62314055e+00
 -7.62314055e+00 -1.65026240e+00 -6.80618092e-01 -6.80618092e-01
 -6.80618092e-01  6.68924027e+01  5.03246244e+02  2.53753674e+03
  1.24585058e+04  4.54722752e+04  1.32408632e+05]
E1 = -706.6663568908382  E_coul = 198.9472875545708
cycle= 1 E= -507.719069336267  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479355
diis-c [-0.22978095  1.        ]
  HOMO = -0.236374951934091  LUMO = 68.1996748527861
  mo_energy =
[-1.20289861e+02 -1.22607218e+01 -6.65418200e+00 -6.65418200e+00
 -6.65418200e+00 -1.16393687e+00 -2.36374952e-01 -2.36374952e-01
 -2.36374952e-01  6.81996749e+01  5.04630332e+02  2.53884121e+03
  1.24596815e+04  4.54733734e+04  1.32409681e+05]
E1 = -706.6225176756335  E_coul = 198.90283836119553
cycle= 2 E= -507.719679314438  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619048
diis-c [-3.80282669e-05  1.12948995e-03  9.98870510e-01]
  HOMO = -0.236638649255707  LUMO = 68.195455836016
  mo_energy =
[-1.20301313e+02 -1.22624806e+01 -6.65688386e+00 -6.65688386e+00
 -6.65688386e+00 -1.16403482e+00 -2.36638649e-01 -2.36638649e-01
 -2.36638649e-01  6.81954558e+01  5.04617872e+02  2.53882284e+03
  1.24596591e+04  4.54733495e+04  1.32409656e+05]
E1 = -706.6218086927054  E_coul = 198.9021291822981
cycle= 3 E= -507.719679510407  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184727
diis-c [-8.23523094e-10  2.90888932e-05 -3.01138871e-02  1.03008480e+00]
  HOMO = -0.236642899840064  LUMO = 68.195383633326
  mo_energy =
[-1.20301509e+02 -1.22625103e+01 -6.65693353e+00 -6.65693353e+00
 -6.65693353e+00 -1.16403614e+00 -2.36642900e-01 -2.36642900e-01
 -2.36642900e-01  6.81953836e+01  5.04617676e+02  2.53882259e+03
  1.24596588e+04  4.54733492e+04  1.32409656e+05]
E1 = -706.6217941199379  E_coul = 198.90211460942967
cycle= 4 E= -507.719679510508  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6217941199379  E_coul = 198.90211460942967
  HOMO = -0.236642864964666  LUMO = 68.1953841651391
  mo_energy =
[-1.20301508e+02 -1.22625101e+01 -6.65693320e+00 -6.65693320e+00
 -6.65693320e+00 -1.16403613e+00 -2.36642865e-01 -2.36642865e-01
 -2.36642865e-01  6.81953842e+01  5.04617677e+02  2.53882259e+03
  1.24596588e+04  4.54733492e+04  1.32409656e+05]
E1 = -706.6217942007987  E_coul = 198.90211469028992
Extra cycle  E= -507.719679510509  delta_E= -5.12e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546594e+04 7.34327860e+03 1.83773233e+04 1.40679815e+03
 3.40734315e+02 9.93542439e+01 3.33337727e+01 4.71152135e+00
 3.91034814e-01 8.59889892e+00 4.90967664e-01]
E = -507.7196795105088
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:22 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593993        1
[INPUT] 0    0    [1    /1   ]  7343.27859641        1
[INPUT] 0    0    [1    /1   ]  18377.3232765        1
[INPUT] 0    0    [1    /1   ]  1406.79814764        1
[INPUT] 0    0    [1    /1   ]  340.734314906        1
[INPUT] 0    0    [1    /1   ]  99.3542439025        1
[INPUT] 0    0    [1    /1   ]  33.3337726561        1
[INPUT] 0    0    [1    /1   ]  4.71152135372        1
[INPUT] 0    0    [1    /1   ]  0.391034814367       1
[INPUT] 1    0    [1    /1   ]  8.59889892463        1
[INPUT] 1    0    [1    /1   ]  0.490967663796       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65939927943, 1.0]], [0, [7343.278596413075, 1.0]], [0, [18377.32327654765, 1.0]], [0, [1406.798147642266, 1.0]], [0, [340.7343149061589, 1.0]], [0, [99.35424390254637, 1.0]], [0, [33.33377265614336, 1.0]], [0, [4.711521353718164, 1.0]], [0, [0.3910348143669255, 1.0]], [1, [8.598898924632854, 1.0]], [1, [0.49096766379636986, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65939928]
bas 1, expnt(s) = [7343.27859641]
bas 2, expnt(s) = [18377.32327655]
bas 3, expnt(s) = [1406.79814764]
bas 4, expnt(s) = [340.73431491]
bas 5, expnt(s) = [99.3542439]
bas 6, expnt(s) = [33.33377266]
bas 7, expnt(s) = [4.71152135]
bas 8, expnt(s) = [0.39103481]
bas 9, expnt(s) = [8.59889892]
bas 10, expnt(s) = [0.49096766]
CPU time:       423.60
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327860e+03 2.00416064e+03
 1.83773233e+04 3.98773891e+03 1.40679815e+03 5.80348498e+02
 3.40734315e+02 2.00367338e+02 9.93542439e+01 7.95069038e+01
 3.33337727e+01 3.50492215e+01 4.71152135e+00 8.07952626e+00
 3.91034814e-01 1.24932834e+00 8.59889892e+00 4.29573960e+01
 4.90967664e-01 1.19894843e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529462689368
cond(S) = 205.71232979047522
E1 = -689.1720738994717  E_coul = 184.90406204579838
init E= -504.268011853673
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618092356668  LUMO = 66.892402683234
  mo_energy =
[-1.21685242e+02 -1.32887022e+01 -7.62314055e+00 -7.62314055e+00
 -7.62314055e+00 -1.65026240e+00 -6.80618092e-01 -6.80618092e-01
 -6.80618092e-01  6.68924027e+01  5.03246244e+02  2.53753674e+03
  1.24585058e+04  4.54722752e+04  1.32408632e+05]
E1 = -706.6663568908382  E_coul = 198.9472875545708
cycle= 1 E= -507.719069336267  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479355
diis-c [-0.22978095  1.        ]
  HOMO = -0.236374951934091  LUMO = 68.1996748527861
  mo_energy =
[-1.20289861e+02 -1.22607218e+01 -6.65418200e+00 -6.65418200e+00
 -6.65418200e+00 -1.16393687e+00 -2.36374952e-01 -2.36374952e-01
 -2.36374952e-01  6.81996749e+01  5.04630332e+02  2.53884121e+03
  1.24596815e+04  4.54733734e+04  1.32409681e+05]
E1 = -706.6225176756335  E_coul = 198.90283836119553
cycle= 2 E= -507.719679314438  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619048
diis-c [-3.80282669e-05  1.12948995e-03  9.98870510e-01]
  HOMO = -0.236638649255707  LUMO = 68.195455836016
  mo_energy =
[-1.20301313e+02 -1.22624806e+01 -6.65688386e+00 -6.65688386e+00
 -6.65688386e+00 -1.16403482e+00 -2.36638649e-01 -2.36638649e-01
 -2.36638649e-01  6.81954558e+01  5.04617872e+02  2.53882284e+03
  1.24596591e+04  4.54733495e+04  1.32409656e+05]
E1 = -706.6218086927054  E_coul = 198.9021291822981
cycle= 3 E= -507.719679510407  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184727
diis-c [-8.23523094e-10  2.90888932e-05 -3.01138871e-02  1.03008480e+00]
  HOMO = -0.236642899840064  LUMO = 68.195383633326
  mo_energy =
[-1.20301509e+02 -1.22625103e+01 -6.65693353e+00 -6.65693353e+00
 -6.65693353e+00 -1.16403614e+00 -2.36642900e-01 -2.36642900e-01
 -2.36642900e-01  6.81953836e+01  5.04617676e+02  2.53882259e+03
  1.24596588e+04  4.54733492e+04  1.32409656e+05]
E1 = -706.6217941199379  E_coul = 198.90211460942967
cycle= 4 E= -507.719679510508  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6217941199379  E_coul = 198.90211460942967
  HOMO = -0.236642864964666  LUMO = 68.1953841651391
  mo_energy =
[-1.20301508e+02 -1.22625101e+01 -6.65693320e+00 -6.65693320e+00
 -6.65693320e+00 -1.16403613e+00 -2.36642865e-01 -2.36642865e-01
 -2.36642865e-01  6.81953842e+01  5.04617677e+02  2.53882259e+03
  1.24596588e+04  4.54733492e+04  1.32409656e+05]
E1 = -706.6217942007987  E_coul = 198.90211469028992
Extra cycle  E= -507.719679510509  delta_E= -5.12e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.71232979047522
E1 = -706.6217942007987  E_coul = 198.90211469028992
init E= -507.719679510509
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236642864497899  LUMO = 68.1953841728594
  mo_energy =
[-1.20301508e+02 -1.22625101e+01 -6.65693320e+00 -6.65693320e+00
 -6.65693320e+00 -1.16403613e+00 -2.36642864e-01 -2.36642864e-01
 -2.36642864e-01  6.81953842e+01  5.04617677e+02  2.53882259e+03
  1.24596588e+04  4.54733492e+04  1.32409656e+05]
E1 = -706.6217942021997  E_coul = 198.90211469169083
cycle= 1 E= -507.719679510509  delta_E= -5.68e-14  |g|= 2.73e-10  |ddm|= 6.48e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6217942021997  E_coul = 198.90211469169083
  HOMO = -0.236642864490601  LUMO = 68.1953841729922
  mo_energy =
[-1.20301508e+02 -1.22625101e+01 -6.65693320e+00 -6.65693320e+00
 -6.65693320e+00 -1.16403613e+00 -2.36642864e-01 -2.36642864e-01
 -2.36642864e-01  6.81953842e+01  5.04617677e+02  2.53882259e+03
  1.24596588e+04  4.54733492e+04  1.32409656e+05]
E1 = -706.6217942022267  E_coul = 198.9021146917178
Extra cycle  E= -507.719679510509  delta_E= -1.14e-13  |g|= 1.29e-11  |ddm|= 1.27e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546594e+04 7.34327860e+03 1.83773233e+04 1.40679815e+03
 3.40734315e+02 9.93542439e+01 3.33337727e+01 4.71152135e+00
 3.91034814e-01 8.59889892e+00 4.90967664e-01]
grad_E = [-1.77111119e-07  3.24959643e-06  4.07256052e-08  4.71495875e-05
  2.75527908e-05  8.89199102e-06  2.39806904e-06  3.54494645e-07
  2.82465768e-06  3.98839433e-07  8.09373660e-07]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:28 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593895        1
[INPUT] 0    0    [1    /1   ]  7343.27870093        1
[INPUT] 0    0    [1    /1   ]  18377.323277         1
[INPUT] 0    0    [1    /1   ]  1406.80246703        1
[INPUT] 0    0    [1    /1   ]  340.727387366        1
[INPUT] 0    0    [1    /1   ]  99.3522497682        1
[INPUT] 0    0    [1    /1   ]  33.3333853232        1
[INPUT] 0    0    [1    /1   ]  4.71151754717        1
[INPUT] 0    0    [1    /1   ]  0.391034716601       1
[INPUT] 1    0    [1    /1   ]  8.59889795356        1
[INPUT] 1    0    [1    /1   ]  0.490967643149       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65938948314, 1.0]], [0, [7343.2787009331805, 1.0]], [0, [18377.323277031883, 1.0]], [0, [1406.8024670311472, 1.0]], [0, [340.7273873656272, 1.0]], [0, [99.35224976823902, 1.0]], [0, [33.33338532320874, 1.0]], [0, [4.71151754717029, 1.0]], [0, [0.3910347166005881, 1.0]], [1, [8.598897953563737, 1.0]], [1, [0.49096764314891544, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65938948]
bas 1, expnt(s) = [7343.27870093]
bas 2, expnt(s) = [18377.32327703]
bas 3, expnt(s) = [1406.80246703]
bas 4, expnt(s) = [340.72738737]
bas 5, expnt(s) = [99.35224977]
bas 6, expnt(s) = [33.33338532]
bas 7, expnt(s) = [4.71151755]
bas 8, expnt(s) = [0.39103472]
bas 9, expnt(s) = [8.59889795]
bas 10, expnt(s) = [0.49096764]
CPU time:       433.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327870e+03 2.00416066e+03
 1.83773233e+04 3.98773891e+03 1.40680247e+03 5.80349835e+02
 3.40727387e+02 2.00364283e+02 9.93522498e+01 7.95057070e+01
 3.33333853e+01 3.50489161e+01 4.71151755e+00 8.07952137e+00
 3.91034717e-01 1.24932811e+00 8.59889795e+00 4.29573900e+01
 4.90967643e-01 1.19894837e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529574405302
cond(S) = 205.7115138187307
E1 = -689.1720778571142  E_coul = 184.90405400709764
init E= -504.268023850017
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680618131342412  LUMO = 66.8909270665689
  mo_energy =
[-1.21685243e+02 -1.32887035e+01 -7.62314119e+00 -7.62314119e+00
 -7.62314119e+00 -1.65026240e+00 -6.80618131e-01 -6.80618131e-01
 -6.80618131e-01  6.68909271e+01  5.03234679e+02  2.53751234e+03
  1.24584863e+04  4.54722596e+04  1.32408618e+05]
E1 = -706.6663493237536  E_coul = 198.9472800016848
cycle= 1 E= -507.719069322069  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479355
diis-c [-0.22978133  1.        ]
  HOMO = -0.236375082497015  LUMO = 68.1981965262897
  mo_energy =
[-1.20289861e+02 -1.22607231e+01 -6.65418264e+00 -6.65418264e+00
 -6.65418264e+00 -1.16393703e+00 -2.36375082e-01 -2.36375082e-01
 -2.36375082e-01  6.81981965e+01  5.04618768e+02  2.53881680e+03
  1.24596620e+04  4.54733578e+04  1.32409667e+05]
E1 = -706.6225088274405  E_coul = 198.9028295081674
cycle= 2 E= -507.719679319273  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.18 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619055
diis-c [-3.80291135e-05  1.12958193e-03  9.98870418e-01]
  HOMO = -0.23663878937638  LUMO = 68.1939774435942
  mo_energy =
[-1.20301313e+02 -1.22624820e+01 -6.65688460e+00 -6.65688460e+00
 -6.65688460e+00 -1.16403498e+00 -2.36638789e-01 -2.36638789e-01
 -2.36638789e-01  6.81939774e+01  5.04606307e+02  2.53879843e+03
  1.24596395e+04  4.54733339e+04  1.32409642e+05]
E1 = -706.6217998149359  E_coul = 198.90212029968328
cycle= 3 E= -507.719679515253  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184731
diis-c [-8.23565316e-10  2.90890241e-05 -3.01142518e-02  1.03008516e+00]
  HOMO = -0.236643040185414  LUMO = 68.1939052383231
  mo_energy =
[-1.20301510e+02 -1.22625118e+01 -6.65693427e+00 -6.65693427e+00
 -6.65693427e+00 -1.16403630e+00 -2.36643040e-01 -2.36643040e-01
 -2.36643040e-01  6.81939052e+01  5.04606111e+02  2.53879818e+03
  1.24596393e+04  4.54733336e+04  1.32409642e+05]
E1 = -706.6217852413363  E_coul = 198.90210572598247
cycle= 4 E= -507.719679515354  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6217852413363  E_coul = 198.90210572598247
  HOMO = -0.236643005307881  LUMO = 68.1939057701536
  mo_energy =
[-1.20301508e+02 -1.22625116e+01 -6.65693394e+00 -6.65693394e+00
 -6.65693394e+00 -1.16403629e+00 -2.36643005e-01 -2.36643005e-01
 -2.36643005e-01  6.81939058e+01  5.04606113e+02  2.53879818e+03
  1.24596393e+04  4.54733336e+04  1.32409642e+05]
E1 = -706.6217853222017  E_coul = 198.90210580684825
Extra cycle  E= -507.719679515354  delta_E= 3.41e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546594e+04 7.34327870e+03 1.83773233e+04 1.40680247e+03
 3.40727387e+02 9.93522498e+01 3.33333853e+01 4.71151755e+00
 3.91034717e-01 8.59889795e+00 4.90967643e-01]
E = -507.7196795153535
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593895        1
[INPUT] 0    0    [1    /1   ]  7343.27870093        1
[INPUT] 0    0    [1    /1   ]  18377.323277         1
[INPUT] 0    0    [1    /1   ]  1406.80246703        1
[INPUT] 0    0    [1    /1   ]  340.727387366        1
[INPUT] 0    0    [1    /1   ]  99.3522497682        1
[INPUT] 0    0    [1    /1   ]  33.3333853232        1
[INPUT] 0    0    [1    /1   ]  4.71151754717        1
[INPUT] 0    0    [1    /1   ]  0.391034716601       1
[INPUT] 1    0    [1    /1   ]  8.59889795356        1
[INPUT] 1    0    [1    /1   ]  0.490967643149       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65938948314, 1.0]], [0, [7343.2787009331805, 1.0]], [0, [18377.323277031883, 1.0]], [0, [1406.8024670311472, 1.0]], [0, [340.7273873656272, 1.0]], [0, [99.35224976823902, 1.0]], [0, [33.33338532320874, 1.0]], [0, [4.71151754717029, 1.0]], [0, [0.3910347166005881, 1.0]], [1, [8.598897953563737, 1.0]], [1, [0.49096764314891544, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65938948]
bas 1, expnt(s) = [7343.27870093]
bas 2, expnt(s) = [18377.32327703]
bas 3, expnt(s) = [1406.80246703]
bas 4, expnt(s) = [340.72738737]
bas 5, expnt(s) = [99.35224977]
bas 6, expnt(s) = [33.33338532]
bas 7, expnt(s) = [4.71151755]
bas 8, expnt(s) = [0.39103472]
bas 9, expnt(s) = [8.59889795]
bas 10, expnt(s) = [0.49096764]
CPU time:       434.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327870e+03 2.00416066e+03
 1.83773233e+04 3.98773891e+03 1.40680247e+03 5.80349835e+02
 3.40727387e+02 2.00364283e+02 9.93522498e+01 7.95057070e+01
 3.33333853e+01 3.50489161e+01 4.71151755e+00 8.07952137e+00
 3.91034717e-01 1.24932811e+00 8.59889795e+00 4.29573900e+01
 4.90967643e-01 1.19894837e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529574405302
cond(S) = 205.7115138187307
E1 = -689.1720778571142  E_coul = 184.90405400709764
init E= -504.268023850017
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618131342412  LUMO = 66.8909270665689
  mo_energy =
[-1.21685243e+02 -1.32887035e+01 -7.62314119e+00 -7.62314119e+00
 -7.62314119e+00 -1.65026240e+00 -6.80618131e-01 -6.80618131e-01
 -6.80618131e-01  6.68909271e+01  5.03234679e+02  2.53751234e+03
  1.24584863e+04  4.54722596e+04  1.32408618e+05]
E1 = -706.6663493237536  E_coul = 198.9472800016848
cycle= 1 E= -507.719069322069  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479355
diis-c [-0.22978133  1.        ]
  HOMO = -0.236375082497015  LUMO = 68.1981965262897
  mo_energy =
[-1.20289861e+02 -1.22607231e+01 -6.65418264e+00 -6.65418264e+00
 -6.65418264e+00 -1.16393703e+00 -2.36375082e-01 -2.36375082e-01
 -2.36375082e-01  6.81981965e+01  5.04618768e+02  2.53881680e+03
  1.24596620e+04  4.54733578e+04  1.32409667e+05]
E1 = -706.6225088274405  E_coul = 198.9028295081674
cycle= 2 E= -507.719679319273  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619055
diis-c [-3.80291135e-05  1.12958193e-03  9.98870418e-01]
  HOMO = -0.23663878937638  LUMO = 68.1939774435942
  mo_energy =
[-1.20301313e+02 -1.22624820e+01 -6.65688460e+00 -6.65688460e+00
 -6.65688460e+00 -1.16403498e+00 -2.36638789e-01 -2.36638789e-01
 -2.36638789e-01  6.81939774e+01  5.04606307e+02  2.53879843e+03
  1.24596395e+04  4.54733339e+04  1.32409642e+05]
E1 = -706.6217998149359  E_coul = 198.90212029968328
cycle= 3 E= -507.719679515253  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184731
diis-c [-8.23565316e-10  2.90890241e-05 -3.01142518e-02  1.03008516e+00]
  HOMO = -0.236643040185414  LUMO = 68.1939052383231
  mo_energy =
[-1.20301510e+02 -1.22625118e+01 -6.65693427e+00 -6.65693427e+00
 -6.65693427e+00 -1.16403630e+00 -2.36643040e-01 -2.36643040e-01
 -2.36643040e-01  6.81939052e+01  5.04606111e+02  2.53879818e+03
  1.24596393e+04  4.54733336e+04  1.32409642e+05]
E1 = -706.6217852413363  E_coul = 198.90210572598247
cycle= 4 E= -507.719679515354  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6217852413363  E_coul = 198.90210572598247
  HOMO = -0.236643005307881  LUMO = 68.1939057701536
  mo_energy =
[-1.20301508e+02 -1.22625116e+01 -6.65693394e+00 -6.65693394e+00
 -6.65693394e+00 -1.16403629e+00 -2.36643005e-01 -2.36643005e-01
 -2.36643005e-01  6.81939058e+01  5.04606113e+02  2.53879818e+03
  1.24596393e+04  4.54733336e+04  1.32409642e+05]
E1 = -706.6217853222017  E_coul = 198.90210580684825
Extra cycle  E= -507.719679515354  delta_E= 3.41e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.7115138187307
E1 = -706.6217853222017  E_coul = 198.90210580684825
init E= -507.719679515354
    CPU time for initialize scf      2.11 sec, wall time      0.13 sec
  HOMO = -0.236643004841083  LUMO = 68.193905777878
  mo_energy =
[-1.20301508e+02 -1.22625115e+01 -6.65693394e+00 -6.65693394e+00
 -6.65693394e+00 -1.16403629e+00 -2.36643005e-01 -2.36643005e-01
 -2.36643005e-01  6.81939058e+01  5.04606113e+02  2.53879818e+03
  1.24596393e+04  4.54733336e+04  1.32409642e+05]
E1 = -706.6217853236018  E_coul = 198.90210580824836
cycle= 1 E= -507.719679515353  delta_E= 1.14e-13  |g|= 2.66e-10  |ddm|= 6.48e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6217853236018  E_coul = 198.90210580824836
  HOMO = -0.236643004833783  LUMO = 68.1939057780084
  mo_energy =
[-1.20301508e+02 -1.22625115e+01 -6.65693394e+00 -6.65693394e+00
 -6.65693394e+00 -1.16403629e+00 -2.36643005e-01 -2.36643005e-01
 -2.36643005e-01  6.81939058e+01  5.04606113e+02  2.53879818e+03
  1.24596393e+04  4.54733336e+04  1.32409642e+05]
E1 = -706.6217853236288  E_coul = 198.90210580827562
Extra cycle  E= -507.719679515353  delta_E= 1.71e-13  |g|= 1.02e-11  |ddm|= 1.27e-11
    CPU time for scf_cycle      2.61 sec, wall time      0.30 sec
exp = [3.67546594e+04 7.34327870e+03 1.83773233e+04 1.40680247e+03
 3.40727387e+02 9.93522498e+01 3.33333853e+01 4.71151755e+00
 3.91034717e-01 8.59889795e+00 4.90967643e-01]
grad_E = [-1.77139190e-07  3.24851873e-06  4.06925020e-08  4.71936944e-05
  2.73144610e-05  9.10391260e-06  2.48776464e-06  4.84256157e-07
  1.12899419e-06 -3.73985550e-07  2.92022662e-07]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593613        1
[INPUT] 0    0    [1    /1   ]  7343.27899455        1
[INPUT] 0    0    [1    /1   ]  18377.3232783        1
[INPUT] 0    0    [1    /1   ]  1406.81507673        1
[INPUT] 0    0    [1    /1   ]  340.706587006        1
[INPUT] 0    0    [1    /1   ]  99.3463097137        1
[INPUT] 0    0    [1    /1   ]  33.3322328785        1
[INPUT] 0    0    [1    /1   ]  4.71150625847        1
[INPUT] 0    0    [1    /1   ]  0.391034389687       1
[INPUT] 1    0    [1    /1   ]  8.59889496825        1
[INPUT] 1    0    [1    /1   ]  0.490967577977       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.659361268394, 1.0]], [0, [7343.278994549543, 1.0]], [0, [18377.323278252286, 1.0]], [0, [1406.8150767336174, 1.0]], [0, [340.70658700610505, 1.0]], [0, [99.34630971374851, 1.0]], [0, [33.332232878518816, 1.0]], [0, [4.711506258470587, 1.0]], [0, [0.3910343896868652, 1.0]], [1, [8.59889496824908, 1.0]], [1, [0.490967577977322, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65936127]
bas 1, expnt(s) = [7343.27899455]
bas 2, expnt(s) = [18377.32327825]
bas 3, expnt(s) = [1406.81507673]
bas 4, expnt(s) = [340.70658701]
bas 5, expnt(s) = [99.34630971]
bas 6, expnt(s) = [33.33223288]
bas 7, expnt(s) = [4.71150626]
bas 8, expnt(s) = [0.39103439]
bas 9, expnt(s) = [8.59889497]
bas 10, expnt(s) = [0.49096758]
CPU time:       445.00
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327899e+03 2.00416072e+03
 1.83773233e+04 3.98773891e+03 1.40681508e+03 5.80353736e+02
 3.40706587e+02 2.00355109e+02 9.93463097e+01 7.95021418e+01
 3.33322329e+01 3.50480072e+01 4.71150626e+00 8.07950685e+00
 3.91034390e-01 1.24932733e+00 8.59889497e+00 4.29573713e+01
 4.90967578e-01 1.19894817e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529915572372
cond(S) = 205.7090593426281
E1 = -689.1720889530914  E_coul = 184.90402904140907
init E= -504.268059911682
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618267047601  LUMO = 66.8865341545475
  mo_energy =
[-1.21685245e+02 -1.32887075e+01 -7.62314316e+00 -7.62314316e+00
 -7.62314316e+00 -1.65026239e+00 -6.80618267e-01 -6.80618267e-01
 -6.80618267e-01  6.68865342e+01  5.03200111e+02  2.53743892e+03
  1.24584266e+04  4.54722117e+04  1.32408575e+05]
E1 = -706.6663254360978  E_coul = 198.94725614791022
cycle= 1 E= -507.719069288188  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479356
diis-c [-0.22978247  1.        ]
  HOMO = -0.236375499536185  LUMO = 68.1937955100927
  mo_energy =
[-1.20289861e+02 -1.22607273e+01 -6.65418467e+00 -6.65418467e+00
 -6.65418467e+00 -1.16393753e+00 -2.36375500e-01 -2.36375500e-01
 -2.36375500e-01  6.81937955e+01  5.04584202e+02  2.53874339e+03
  1.24596023e+04  4.54733099e+04  1.32409624e+05]
E1 = -706.6224811260499  E_coul = 198.90280178399283
cycle= 2 E= -507.719679342057  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619077
diis-c [-3.80316282e-05  1.12985587e-03  9.98870144e-01]
  HOMO = -0.236639234865541  LUMO = 68.1895762311321
  mo_energy =
[-1.20301314e+02 -1.22624863e+01 -6.65688689e+00 -6.65688689e+00
 -6.65688689e+00 -1.16403549e+00 -2.36639235e-01 -2.36639235e-01
 -2.36639235e-01  6.81895762e+01  5.04571741e+02  2.53872502e+03
  1.24595799e+04  4.54732860e+04  1.32409599e+05]
E1 = -706.6217720255045  E_coul = 198.90209248743844
cycle= 3 E= -507.719679538066  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184744
diis-c [-8.23691129e-10  2.90892710e-05 -3.01153279e-02  1.03008624e+00]
  HOMO = -0.23664348634331  LUMO = 68.189504018182
  mo_energy =
[-1.20301510e+02 -1.22625161e+01 -6.65693657e+00 -6.65693657e+00
 -6.65693657e+00 -1.16403681e+00 -2.36643486e-01 -2.36643486e-01
 -2.36643486e-01  6.81895040e+01  5.04571545e+02  2.53872477e+03
  1.24595796e+04  4.54732857e+04  1.32409599e+05]
E1 = -706.6217574494272  E_coul = 198.90207791126005
cycle= 4 E= -507.719679538167  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6217574494272  E_coul = 198.90207791126005
  HOMO = -0.236643451459419  LUMO = 68.1895045500677
  mo_energy =
[-1.20301509e+02 -1.22625159e+01 -6.65693624e+00 -6.65693624e+00
 -6.65693624e+00 -1.16403680e+00 -2.36643451e-01 -2.36643451e-01
 -2.36643451e-01  6.81895046e+01  5.04571546e+02  2.53872477e+03
  1.24595796e+04  4.54732857e+04  1.32409599e+05]
E1 = -706.6217575303078  E_coul = 198.90207799214033
Extra cycle  E= -507.719679538167  delta_E= -3.98e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546594e+04 7.34327899e+03 1.83773233e+04 1.40681508e+03
 3.40706587e+02 9.93463097e+01 3.33322329e+01 4.71150626e+00
 3.91034390e-01 8.59889497e+00 4.90967578e-01]
E = -507.7196795381675
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593613        1
[INPUT] 0    0    [1    /1   ]  7343.27899455        1
[INPUT] 0    0    [1    /1   ]  18377.3232783        1
[INPUT] 0    0    [1    /1   ]  1406.81507673        1
[INPUT] 0    0    [1    /1   ]  340.706587006        1
[INPUT] 0    0    [1    /1   ]  99.3463097137        1
[INPUT] 0    0    [1    /1   ]  33.3322328785        1
[INPUT] 0    0    [1    /1   ]  4.71150625847        1
[INPUT] 0    0    [1    /1   ]  0.391034389687       1
[INPUT] 1    0    [1    /1   ]  8.59889496825        1
[INPUT] 1    0    [1    /1   ]  0.490967577977       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.659361268394, 1.0]], [0, [7343.278994549543, 1.0]], [0, [18377.323278252286, 1.0]], [0, [1406.8150767336174, 1.0]], [0, [340.70658700610505, 1.0]], [0, [99.34630971374851, 1.0]], [0, [33.332232878518816, 1.0]], [0, [4.711506258470587, 1.0]], [0, [0.3910343896868652, 1.0]], [1, [8.59889496824908, 1.0]], [1, [0.490967577977322, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65936127]
bas 1, expnt(s) = [7343.27899455]
bas 2, expnt(s) = [18377.32327825]
bas 3, expnt(s) = [1406.81507673]
bas 4, expnt(s) = [340.70658701]
bas 5, expnt(s) = [99.34630971]
bas 6, expnt(s) = [33.33223288]
bas 7, expnt(s) = [4.71150626]
bas 8, expnt(s) = [0.39103439]
bas 9, expnt(s) = [8.59889497]
bas 10, expnt(s) = [0.49096758]
CPU time:       446.28
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546594e+04 6.70655246e+03 7.34327899e+03 2.00416072e+03
 1.83773233e+04 3.98773891e+03 1.40681508e+03 5.80353736e+02
 3.40706587e+02 2.00355109e+02 9.93463097e+01 7.95021418e+01
 3.33322329e+01 3.50480072e+01 4.71150626e+00 8.07950685e+00
 3.91034390e-01 1.24932733e+00 8.59889497e+00 4.29573713e+01
 4.90967578e-01 1.19894817e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320529915572372
cond(S) = 205.7090593426281
E1 = -689.1720889530914  E_coul = 184.90402904140907
init E= -504.268059911682
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618267047601  LUMO = 66.8865341545475
  mo_energy =
[-1.21685245e+02 -1.32887075e+01 -7.62314316e+00 -7.62314316e+00
 -7.62314316e+00 -1.65026239e+00 -6.80618267e-01 -6.80618267e-01
 -6.80618267e-01  6.68865342e+01  5.03200111e+02  2.53743892e+03
  1.24584266e+04  4.54722117e+04  1.32408575e+05]
E1 = -706.6663254360978  E_coul = 198.94725614791022
cycle= 1 E= -507.719069288188  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479356
diis-c [-0.22978247  1.        ]
  HOMO = -0.236375499536185  LUMO = 68.1937955100927
  mo_energy =
[-1.20289861e+02 -1.22607273e+01 -6.65418467e+00 -6.65418467e+00
 -6.65418467e+00 -1.16393753e+00 -2.36375500e-01 -2.36375500e-01
 -2.36375500e-01  6.81937955e+01  5.04584202e+02  2.53874339e+03
  1.24596023e+04  4.54733099e+04  1.32409624e+05]
E1 = -706.6224811260499  E_coul = 198.90280178399283
cycle= 2 E= -507.719679342057  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619077
diis-c [-3.80316282e-05  1.12985587e-03  9.98870144e-01]
  HOMO = -0.236639234865541  LUMO = 68.1895762311321
  mo_energy =
[-1.20301314e+02 -1.22624863e+01 -6.65688689e+00 -6.65688689e+00
 -6.65688689e+00 -1.16403549e+00 -2.36639235e-01 -2.36639235e-01
 -2.36639235e-01  6.81895762e+01  5.04571741e+02  2.53872502e+03
  1.24595799e+04  4.54732860e+04  1.32409599e+05]
E1 = -706.6217720255045  E_coul = 198.90209248743844
cycle= 3 E= -507.719679538066  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184744
diis-c [-8.23691129e-10  2.90892710e-05 -3.01153279e-02  1.03008624e+00]
  HOMO = -0.23664348634331  LUMO = 68.189504018182
  mo_energy =
[-1.20301510e+02 -1.22625161e+01 -6.65693657e+00 -6.65693657e+00
 -6.65693657e+00 -1.16403681e+00 -2.36643486e-01 -2.36643486e-01
 -2.36643486e-01  6.81895040e+01  5.04571545e+02  2.53872477e+03
  1.24595796e+04  4.54732857e+04  1.32409599e+05]
E1 = -706.6217574494272  E_coul = 198.90207791126005
cycle= 4 E= -507.719679538167  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6217574494272  E_coul = 198.90207791126005
  HOMO = -0.236643451459419  LUMO = 68.1895045500677
  mo_energy =
[-1.20301509e+02 -1.22625159e+01 -6.65693624e+00 -6.65693624e+00
 -6.65693624e+00 -1.16403680e+00 -2.36643451e-01 -2.36643451e-01
 -2.36643451e-01  6.81895046e+01  5.04571546e+02  2.53872477e+03
  1.24595796e+04  4.54732857e+04  1.32409599e+05]
E1 = -706.6217575303078  E_coul = 198.90207799214033
Extra cycle  E= -507.719679538167  delta_E= -3.98e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.7090593426281
E1 = -706.6217575303078  E_coul = 198.90207799214033
init E= -507.719679538167
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.236643450992515  LUMO = 68.1895045577902
  mo_energy =
[-1.20301509e+02 -1.22625159e+01 -6.65693624e+00 -6.65693624e+00
 -6.65693624e+00 -1.16403680e+00 -2.36643451e-01 -2.36643451e-01
 -2.36643451e-01  6.81895046e+01  5.04571546e+02  2.53872477e+03
  1.24595796e+04  4.54732857e+04  1.32409599e+05]
E1 = -706.621757531708  E_coul = 198.9020779935411
cycle= 1 E= -507.719679538167  delta_E= 5.68e-13  |g|= 2.68e-10  |ddm|= 6.48e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.621757531708  E_coul = 198.9020779935411
  HOMO = -0.23664345098522  LUMO = 68.1895045579212
  mo_energy =
[-1.20301509e+02 -1.22625159e+01 -6.65693624e+00 -6.65693624e+00
 -6.65693624e+00 -1.16403680e+00 -2.36643451e-01 -2.36643451e-01
 -2.36643451e-01  6.81895046e+01  5.04571546e+02  2.53872477e+03
  1.24595796e+04  4.54732857e+04  1.32409599e+05]
E1 = -706.6217575317359  E_coul = 198.90207799356864
Extra cycle  E= -507.719679538167  delta_E= -2.84e-13  |g|= 1.13e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.59 sec, wall time      0.29 sec
exp = [3.67546594e+04 7.34327899e+03 1.83773233e+04 1.40681508e+03
 3.40706587e+02 9.93463097e+01 3.33322329e+01 4.71150626e+00
 3.91034390e-01 8.59889497e+00 4.90967578e-01]
grad_E = [-1.77223247e-07  3.24528972e-06  4.05933957e-08  4.73263625e-05
  2.65904484e-05  9.78304067e-06  2.69828441e-06  8.88736597e-07
 -4.50598010e-06 -2.75738194e-06 -1.39313101e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593262        1
[INPUT] 0    0    [1    /1   ]  7343.27934142        1
[INPUT] 0    0    [1    /1   ]  18377.3232793        1
[INPUT] 0    0    [1    /1   ]  1406.83114576        1
[INPUT] 0    0    [1    /1   ]  340.678737459        1
[INPUT] 0    0    [1    /1   ]  99.3383697417        1
[INPUT] 0    0    [1    /1   ]  33.3306906776        1
[INPUT] 0    0    [1    /1   ]  4.71149117999        1
[INPUT] 0    0    [1    /1   ]  0.391033948292       1
[INPUT] 1    0    [1    /1   ]  8.59889097966        1
[INPUT] 1    0    [1    /1   ]  0.490967490898       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65932622193, 1.0]], [0, [7343.2793414243015, 1.0]], [0, [18377.323279348948, 1.0]], [0, [1406.8311457630853, 1.0]], [0, [340.67873745880854, 1.0]], [0, [99.33836974174083, 1.0]], [0, [33.33069067761703, 1.0]], [0, [4.711491179985735, 1.0]], [0, [0.39103394829156474, 1.0]], [1, [8.598890979661647, 1.0]], [1, [0.49096749089759184, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65932622]
bas 1, expnt(s) = [7343.27934142]
bas 2, expnt(s) = [18377.32327935]
bas 3, expnt(s) = [1406.83114576]
bas 4, expnt(s) = [340.67873746]
bas 5, expnt(s) = [99.33836974]
bas 6, expnt(s) = [33.33069068]
bas 7, expnt(s) = [4.71149118]
bas 8, expnt(s) = [0.39103395]
bas 9, expnt(s) = [8.59889098]
bas 10, expnt(s) = [0.49096749]
CPU time:       456.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546593e+04 6.70655245e+03 7.34327934e+03 2.00416079e+03
 1.83773233e+04 3.98773891e+03 1.40683115e+03 5.80358708e+02
 3.40678737e+02 2.00342826e+02 9.93383697e+01 7.94973763e+01
 3.33306907e+01 3.50467910e+01 4.71149118e+00 8.07948746e+00
 3.91033948e-01 1.24932627e+00 8.59889098e+00 4.29573464e+01
 4.90967491e-01 1.19894791e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320530371989356
cond(S) = 205.705734435045
E1 = -689.1721035889983  E_coul = 184.9039956164346
init E= -504.268107972564
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618450416531  LUMO = 66.8806583126697
  mo_energy =
[-1.21685248e+02 -1.32887128e+01 -7.62314581e+00 -7.62314581e+00
 -7.62314581e+00 -1.65026238e+00 -6.80618450e-01 -6.80618450e-01
 -6.80618450e-01  6.68806583e+01  5.03153859e+02  2.53733992e+03
  1.24583444e+04  4.54721446e+04  1.32408514e+05]
E1 = -706.6662934433273  E_coul = 198.94722418128364
cycle= 1 E= -507.719069262044  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479358
diis-c [-0.22978401  1.        ]
  HOMO = -0.236376059344621  LUMO = 68.1879088230484
  mo_energy =
[-1.20289861e+02 -1.22607329e+01 -6.65418737e+00 -6.65418737e+00
 -6.65418737e+00 -1.16393819e+00 -2.36376059e-01 -2.36376059e-01
 -2.36376059e-01  6.81879088e+01  5.04537953e+02  2.53864440e+03
  1.24595201e+04  4.54732428e+04  1.32409563e+05]
E1 = -706.6224440308281  E_coul = 198.90276463910217
cycle= 2 E= -507.719679391726  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619105
diis-c [-3.80349978e-05  1.13022216e-03  9.98869778e-01]
  HOMO = -0.236639832737151  LUMO = 68.1836892814637
  mo_energy =
[-1.20301315e+02 -1.22624922e+01 -6.65688996e+00 -6.65688996e+00
 -6.65688996e+00 -1.16403617e+00 -2.36639833e-01 -2.36639833e-01
 -2.36639833e-01  6.81836893e+01  5.04525492e+02  2.53862602e+03
  1.24594977e+04  4.54732189e+04  1.32409538e+05]
E1 = -706.621734812496  E_coul = 198.90205522472195
cycle= 3 E= -507.719679587774  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184762
diis-c [-8.23860125e-10  2.90896184e-05 -3.01167724e-02  1.03008768e+00]
  HOMO = -0.236644085109592  LUMO = 68.1836170582366
  mo_energy =
[-1.20301512e+02 -1.22625219e+01 -6.65693965e+00 -6.65693965e+00
 -6.65693965e+00 -1.16403749e+00 -2.36644085e-01 -2.36644085e-01
 -2.36644085e-01  6.81836171e+01  5.04525295e+02  2.53862577e+03
  1.24594974e+04  4.54732186e+04  1.32409538e+05]
E1 = -706.621720233105  E_coul = 198.9020406452294
cycle= 4 E= -507.719679587876  delta_E= -1.02e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.621720233105  E_coul = 198.9020406452294
  HOMO = -0.236644050217178  LUMO = 68.1836175901947
  mo_energy =
[-1.20301510e+02 -1.22625217e+01 -6.65693932e+00 -6.65693932e+00
 -6.65693932e+00 -1.16403748e+00 -2.36644050e-01 -2.36644050e-01
 -2.36644050e-01  6.81836176e+01  5.04525297e+02  2.53862577e+03
  1.24594974e+04  4.54732186e+04  1.32409538e+05]
E1 = -706.6217203140046  E_coul = 198.9020407261294
Extra cycle  E= -507.719679587875  delta_E= 3.41e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546593e+04 7.34327934e+03 1.83773233e+04 1.40683115e+03
 3.40678737e+02 9.93383697e+01 3.33306907e+01 4.71149118e+00
 3.91033948e-01 8.59889098e+00 4.90967491e-01]
E = -507.71967958787525
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6593262        1
[INPUT] 0    0    [1    /1   ]  7343.27934142        1
[INPUT] 0    0    [1    /1   ]  18377.3232793        1
[INPUT] 0    0    [1    /1   ]  1406.83114576        1
[INPUT] 0    0    [1    /1   ]  340.678737459        1
[INPUT] 0    0    [1    /1   ]  99.3383697417        1
[INPUT] 0    0    [1    /1   ]  33.3306906776        1
[INPUT] 0    0    [1    /1   ]  4.71149117999        1
[INPUT] 0    0    [1    /1   ]  0.391033948292       1
[INPUT] 1    0    [1    /1   ]  8.59889097966        1
[INPUT] 1    0    [1    /1   ]  0.490967490898       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65932622193, 1.0]], [0, [7343.2793414243015, 1.0]], [0, [18377.323279348948, 1.0]], [0, [1406.8311457630853, 1.0]], [0, [340.67873745880854, 1.0]], [0, [99.33836974174083, 1.0]], [0, [33.33069067761703, 1.0]], [0, [4.711491179985735, 1.0]], [0, [0.39103394829156474, 1.0]], [1, [8.598890979661647, 1.0]], [1, [0.49096749089759184, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65932622]
bas 1, expnt(s) = [7343.27934142]
bas 2, expnt(s) = [18377.32327935]
bas 3, expnt(s) = [1406.83114576]
bas 4, expnt(s) = [340.67873746]
bas 5, expnt(s) = [99.33836974]
bas 6, expnt(s) = [33.33069068]
bas 7, expnt(s) = [4.71149118]
bas 8, expnt(s) = [0.39103395]
bas 9, expnt(s) = [8.59889098]
bas 10, expnt(s) = [0.49096749]
CPU time:       457.67
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546593e+04 6.70655245e+03 7.34327934e+03 2.00416079e+03
 1.83773233e+04 3.98773891e+03 1.40683115e+03 5.80358708e+02
 3.40678737e+02 2.00342826e+02 9.93383697e+01 7.94973763e+01
 3.33306907e+01 3.50467910e+01 4.71149118e+00 8.07948746e+00
 3.91033948e-01 1.24932627e+00 8.59889098e+00 4.29573464e+01
 4.90967491e-01 1.19894791e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320530371989356
cond(S) = 205.705734435045
E1 = -689.1721035889983  E_coul = 184.9039956164346
init E= -504.268107972564
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618450416531  LUMO = 66.8806583126697
  mo_energy =
[-1.21685248e+02 -1.32887128e+01 -7.62314581e+00 -7.62314581e+00
 -7.62314581e+00 -1.65026238e+00 -6.80618450e-01 -6.80618450e-01
 -6.80618450e-01  6.68806583e+01  5.03153859e+02  2.53733992e+03
  1.24583444e+04  4.54721446e+04  1.32408514e+05]
E1 = -706.6662934433273  E_coul = 198.94722418128364
cycle= 1 E= -507.719069262044  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479358
diis-c [-0.22978401  1.        ]
  HOMO = -0.236376059344621  LUMO = 68.1879088230484
  mo_energy =
[-1.20289861e+02 -1.22607329e+01 -6.65418737e+00 -6.65418737e+00
 -6.65418737e+00 -1.16393819e+00 -2.36376059e-01 -2.36376059e-01
 -2.36376059e-01  6.81879088e+01  5.04537953e+02  2.53864440e+03
  1.24595201e+04  4.54732428e+04  1.32409563e+05]
E1 = -706.6224440308281  E_coul = 198.90276463910217
cycle= 2 E= -507.719679391726  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619105
diis-c [-3.80349978e-05  1.13022216e-03  9.98869778e-01]
  HOMO = -0.236639832737151  LUMO = 68.1836892814637
  mo_energy =
[-1.20301315e+02 -1.22624922e+01 -6.65688996e+00 -6.65688996e+00
 -6.65688996e+00 -1.16403617e+00 -2.36639833e-01 -2.36639833e-01
 -2.36639833e-01  6.81836893e+01  5.04525492e+02  2.53862602e+03
  1.24594977e+04  4.54732189e+04  1.32409538e+05]
E1 = -706.621734812496  E_coul = 198.90205522472195
cycle= 3 E= -507.719679587774  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184762
diis-c [-8.23860125e-10  2.90896184e-05 -3.01167724e-02  1.03008768e+00]
  HOMO = -0.236644085109592  LUMO = 68.1836170582366
  mo_energy =
[-1.20301512e+02 -1.22625219e+01 -6.65693965e+00 -6.65693965e+00
 -6.65693965e+00 -1.16403749e+00 -2.36644085e-01 -2.36644085e-01
 -2.36644085e-01  6.81836171e+01  5.04525295e+02  2.53862577e+03
  1.24594974e+04  4.54732186e+04  1.32409538e+05]
E1 = -706.621720233105  E_coul = 198.9020406452294
cycle= 4 E= -507.719679587876  delta_E= -1.02e-10  |g|= 6.32e-07  |ddm|= 6.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.621720233105  E_coul = 198.9020406452294
  HOMO = -0.236644050217178  LUMO = 68.1836175901947
  mo_energy =
[-1.20301510e+02 -1.22625217e+01 -6.65693932e+00 -6.65693932e+00
 -6.65693932e+00 -1.16403748e+00 -2.36644050e-01 -2.36644050e-01
 -2.36644050e-01  6.81836176e+01  5.04525297e+02  2.53862577e+03
  1.24594974e+04  4.54732186e+04  1.32409538e+05]
E1 = -706.6217203140046  E_coul = 198.9020407261294
Extra cycle  E= -507.719679587875  delta_E= 3.41e-13  |g|= 1.21e-08  |ddm|= 3.79e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.705734435045
E1 = -706.6217203140046  E_coul = 198.9020407261294
init E= -507.719679587875
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.236644049750141  LUMO = 68.1836175979187
  mo_energy =
[-1.20301510e+02 -1.22625217e+01 -6.65693932e+00 -6.65693932e+00
 -6.65693932e+00 -1.16403748e+00 -2.36644050e-01 -2.36644050e-01
 -2.36644050e-01  6.81836176e+01  5.04525297e+02  2.53862577e+03
  1.24594974e+04  4.54732186e+04  1.32409538e+05]
E1 = -706.6217203154065  E_coul = 198.9020407275309
cycle= 1 E= -507.719679587876  delta_E= -3.41e-13  |g|= 2.69e-10  |ddm|= 6.48e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6217203154065  E_coul = 198.9020407275309
  HOMO = -0.23664404974284  LUMO = 68.1836175980499
  mo_energy =
[-1.20301510e+02 -1.22625217e+01 -6.65693932e+00 -6.65693932e+00
 -6.65693932e+00 -1.16403748e+00 -2.36644050e-01 -2.36644050e-01
 -2.36644050e-01  6.81836176e+01  5.04525297e+02  2.53862577e+03
  1.24594974e+04  4.54732186e+04  1.32409538e+05]
E1 = -706.6217203154338  E_coul = 198.9020407275582
Extra cycle  E= -507.719679587876  delta_E=    0  |g|= 1.41e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.30 sec
exp = [3.67546593e+04 7.34327934e+03 1.83773233e+04 1.40683115e+03
 3.40678737e+02 9.93383697e+01 3.33306907e+01 4.71149118e+00
 3.91033948e-01 8.59889098e+00 4.90967491e-01]
grad_E = [-1.77334573e-07  3.24101018e-06  4.04621849e-08  4.75029388e-05
  2.56247551e-05  1.06950919e-05  2.96470724e-06  1.43566298e-06
 -1.21032996e-05 -5.94342426e-06 -3.65831522e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6592717        1
[INPUT] 0    0    [1    /1   ]  7343.27982809        1
[INPUT] 0    0    [1    /1   ]  18377.3232798        1
[INPUT] 0    0    [1    /1   ]  1406.85732262        1
[INPUT] 0    0    [1    /1   ]  340.62951517         1
[INPUT] 0    0    [1    /1   ]  99.3243600969        1
[INPUT] 0    0    [1    /1   ]  33.3279664381        1
[INPUT] 0    0    [1    /1   ]  4.71146455584        1
[INPUT] 0    0    [1    /1   ]  0.391033173059       1
[INPUT] 1    0    [1    /1   ]  8.59888398742        1
[INPUT] 1    0    [1    /1   ]  0.490967338865       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65927174055, 1.0]], [0, [7343.279828090364, 1.0]], [0, [18377.323279818123, 1.0]], [0, [1406.8573226194612, 1.0]], [0, [340.62951517011237, 1.0]], [0, [99.3243600968612, 1.0]], [0, [33.32796643812781, 1.0]], [0, [4.711464555837073, 1.0]], [0, [0.3910331730588978, 1.0]], [1, [8.598883987417679, 1.0]], [1, [0.49096733886533006, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65927174]
bas 1, expnt(s) = [7343.27982809]
bas 2, expnt(s) = [18377.32327982]
bas 3, expnt(s) = [1406.85732262]
bas 4, expnt(s) = [340.62951517]
bas 5, expnt(s) = [99.3243601]
bas 6, expnt(s) = [33.32796644]
bas 7, expnt(s) = [4.71146456]
bas 8, expnt(s) = [0.39103317]
bas 9, expnt(s) = [8.59888399]
bas 10, expnt(s) = [0.49096734]
CPU time:       467.73
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546593e+04 6.70655244e+03 7.34327983e+03 2.00416089e+03
 1.83773233e+04 3.98773891e+03 1.40685732e+03 5.80366807e+02
 3.40629515e+02 2.00321116e+02 9.93243601e+01 7.94889675e+01
 3.33279664e+01 3.50446426e+01 4.71146456e+00 8.07945321e+00
 3.91033173e-01 1.24932441e+00 8.59888399e+00 4.29573028e+01
 4.90967339e-01 1.19894744e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320531175087538
cond(S) = 205.69974975969436
E1 = -689.1721291388361  E_coul = 184.90393692749396
init E= -504.268192211342
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618770877978  LUMO = 66.8702828605936
  mo_energy =
[-1.21685253e+02 -1.32887222e+01 -7.62315045e+00 -7.62315045e+00
 -7.62315045e+00 -1.65026236e+00 -6.80618771e-01 -6.80618771e-01
 -6.80618771e-01  6.68702829e+01  5.03072163e+02  2.53716296e+03
  1.24581926e+04  4.54720180e+04  1.32408398e+05]
E1 = -706.6662373932596  E_coul = 198.94716812494312
cycle= 1 E= -507.719069268317  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479361
diis-c [-0.22978675  1.        ]
  HOMO = -0.236377041680063  LUMO = 68.1775142221472
  mo_energy =
[-1.20289861e+02 -1.22607427e+01 -6.65419213e+00 -6.65419213e+00
 -6.65419213e+00 -1.16393936e+00 -2.36377042e-01 -2.36377042e-01
 -2.36377042e-01  6.81775142e+01  5.04456262e+02  2.53846744e+03
  1.24593683e+04  4.54731163e+04  1.32409446e+05]
E1 = -706.6223789673872  E_coul = 198.9026994354592
cycle= 2 E= -507.719679531928  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619156
diis-c [-3.80409639e-05  1.13086782e-03  9.98869132e-01]
  HOMO = -0.236640882312616  LUMO = 68.1732942166103
  mo_energy =
[-1.20301317e+02 -1.22625024e+01 -6.65689536e+00 -6.65689536e+00
 -6.65689536e+00 -1.16403736e+00 -2.36640882e-01 -2.36640882e-01
 -2.36640882e-01  6.81732942e+01  5.04443799e+02  2.53844906e+03
  1.24593459e+04  4.54730923e+04  1.32409422e+05]
E1 = -706.6216695409904  E_coul = 198.90198981294395
cycle= 3 E= -507.719679728046  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184792
diis-c [-8.24159101e-10  2.90900707e-05 -3.01193122e-02  1.03009022e+00]
  HOMO = -0.236645136265246  LUMO = 68.1732219752389
  mo_energy =
[-1.20301514e+02 -1.22625322e+01 -6.65694507e+00 -6.65694507e+00
 -6.65694507e+00 -1.16403868e+00 -2.36645136e-01 -2.36645136e-01
 -2.36645136e-01  6.81732220e+01  5.04443602e+02  2.53844881e+03
  1.24593456e+04  4.54730920e+04  1.32409421e+05]
E1 = -706.6216549557446  E_coul = 198.90197522759684
cycle= 4 E= -507.719679728148  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.84e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6216549557446  E_coul = 198.90197522759684
  HOMO = -0.236645101357785  LUMO = 68.1732225073253
  mo_energy =
[-1.20301512e+02 -1.22625320e+01 -6.65694474e+00 -6.65694474e+00
 -6.65694474e+00 -1.16403867e+00 -2.36645101e-01 -2.36645101e-01
 -2.36645101e-01  6.81732225e+01  5.04443604e+02  2.53844881e+03
  1.24593456e+04  4.54730920e+04  1.32409421e+05]
E1 = -706.6216550366795  E_coul = 198.90197530853214
Extra cycle  E= -507.719679728147  delta_E= 3.98e-13  |g|= 1.21e-08  |ddm|= 3.8e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546593e+04 7.34327983e+03 1.83773233e+04 1.40685732e+03
 3.40629515e+02 9.93243601e+01 3.33279664e+01 4.71146456e+00
 3.91033173e-01 8.59888399e+00 4.90967339e-01]
E = -507.71967972814736
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6592717        1
[INPUT] 0    0    [1    /1   ]  7343.27982809        1
[INPUT] 0    0    [1    /1   ]  18377.3232798        1
[INPUT] 0    0    [1    /1   ]  1406.85732262        1
[INPUT] 0    0    [1    /1   ]  340.62951517         1
[INPUT] 0    0    [1    /1   ]  99.3243600969        1
[INPUT] 0    0    [1    /1   ]  33.3279664381        1
[INPUT] 0    0    [1    /1   ]  4.71146455584        1
[INPUT] 0    0    [1    /1   ]  0.391033173059       1
[INPUT] 1    0    [1    /1   ]  8.59888398742        1
[INPUT] 1    0    [1    /1   ]  0.490967338865       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65927174055, 1.0]], [0, [7343.279828090364, 1.0]], [0, [18377.323279818123, 1.0]], [0, [1406.8573226194612, 1.0]], [0, [340.62951517011237, 1.0]], [0, [99.3243600968612, 1.0]], [0, [33.32796643812781, 1.0]], [0, [4.711464555837073, 1.0]], [0, [0.3910331730588978, 1.0]], [1, [8.598883987417679, 1.0]], [1, [0.49096733886533006, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65927174]
bas 1, expnt(s) = [7343.27982809]
bas 2, expnt(s) = [18377.32327982]
bas 3, expnt(s) = [1406.85732262]
bas 4, expnt(s) = [340.62951517]
bas 5, expnt(s) = [99.3243601]
bas 6, expnt(s) = [33.32796644]
bas 7, expnt(s) = [4.71146456]
bas 8, expnt(s) = [0.39103317]
bas 9, expnt(s) = [8.59888399]
bas 10, expnt(s) = [0.49096734]
CPU time:       469.03
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546593e+04 6.70655244e+03 7.34327983e+03 2.00416089e+03
 1.83773233e+04 3.98773891e+03 1.40685732e+03 5.80366807e+02
 3.40629515e+02 2.00321116e+02 9.93243601e+01 7.94889675e+01
 3.33279664e+01 3.50446426e+01 4.71146456e+00 8.07945321e+00
 3.91033173e-01 1.24932441e+00 8.59888399e+00 4.29573028e+01
 4.90967339e-01 1.19894744e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320531175087538
cond(S) = 205.69974975969436
E1 = -689.1721291388361  E_coul = 184.90393692749396
init E= -504.268192211342
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680618770877978  LUMO = 66.8702828605936
  mo_energy =
[-1.21685253e+02 -1.32887222e+01 -7.62315045e+00 -7.62315045e+00
 -7.62315045e+00 -1.65026236e+00 -6.80618771e-01 -6.80618771e-01
 -6.80618771e-01  6.68702829e+01  5.03072163e+02  2.53716296e+03
  1.24581926e+04  4.54720180e+04  1.32408398e+05]
E1 = -706.6662373932596  E_coul = 198.94716812494312
cycle= 1 E= -507.719069268317  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479361
diis-c [-0.22978675  1.        ]
  HOMO = -0.236377041680063  LUMO = 68.1775142221472
  mo_energy =
[-1.20289861e+02 -1.22607427e+01 -6.65419213e+00 -6.65419213e+00
 -6.65419213e+00 -1.16393936e+00 -2.36377042e-01 -2.36377042e-01
 -2.36377042e-01  6.81775142e+01  5.04456262e+02  2.53846744e+03
  1.24593683e+04  4.54731163e+04  1.32409446e+05]
E1 = -706.6223789673872  E_coul = 198.9026994354592
cycle= 2 E= -507.719679531928  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619156
diis-c [-3.80409639e-05  1.13086782e-03  9.98869132e-01]
  HOMO = -0.236640882312616  LUMO = 68.1732942166103
  mo_energy =
[-1.20301317e+02 -1.22625024e+01 -6.65689536e+00 -6.65689536e+00
 -6.65689536e+00 -1.16403736e+00 -2.36640882e-01 -2.36640882e-01
 -2.36640882e-01  6.81732942e+01  5.04443799e+02  2.53844906e+03
  1.24593459e+04  4.54730923e+04  1.32409422e+05]
E1 = -706.6216695409904  E_coul = 198.90198981294395
cycle= 3 E= -507.719679728046  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184792
diis-c [-8.24159101e-10  2.90900707e-05 -3.01193122e-02  1.03009022e+00]
  HOMO = -0.236645136265246  LUMO = 68.1732219752389
  mo_energy =
[-1.20301514e+02 -1.22625322e+01 -6.65694507e+00 -6.65694507e+00
 -6.65694507e+00 -1.16403868e+00 -2.36645136e-01 -2.36645136e-01
 -2.36645136e-01  6.81732220e+01  5.04443602e+02  2.53844881e+03
  1.24593456e+04  4.54730920e+04  1.32409421e+05]
E1 = -706.6216549557446  E_coul = 198.90197522759684
cycle= 4 E= -507.719679728148  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.84e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6216549557446  E_coul = 198.90197522759684
  HOMO = -0.236645101357785  LUMO = 68.1732225073253
  mo_energy =
[-1.20301512e+02 -1.22625320e+01 -6.65694474e+00 -6.65694474e+00
 -6.65694474e+00 -1.16403867e+00 -2.36645101e-01 -2.36645101e-01
 -2.36645101e-01  6.81732225e+01  5.04443604e+02  2.53844881e+03
  1.24593456e+04  4.54730920e+04  1.32409421e+05]
E1 = -706.6216550366795  E_coul = 198.90197530853214
Extra cycle  E= -507.719679728147  delta_E= 3.98e-13  |g|= 1.21e-08  |ddm|= 3.8e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.69974975969436
E1 = -706.6216550366795  E_coul = 198.90197530853214
init E= -507.719679728147
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.23664510089051  LUMO = 68.1732225150525
  mo_energy =
[-1.20301512e+02 -1.22625320e+01 -6.65694473e+00 -6.65694473e+00
 -6.65694473e+00 -1.16403867e+00 -2.36645101e-01 -2.36645101e-01
 -2.36645101e-01  6.81732225e+01  5.04443604e+02  2.53844881e+03
  1.24593456e+04  4.54730920e+04  1.32409421e+05]
E1 = -706.621655038082  E_coul = 198.90197530993422
cycle= 1 E= -507.719679728148  delta_E= -5.12e-13  |g|= 2.68e-10  |ddm|= 6.49e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.621655038082  E_coul = 198.90197530993422
  HOMO = -0.236645100883198  LUMO = 68.1732225151841
  mo_energy =
[-1.20301512e+02 -1.22625320e+01 -6.65694473e+00 -6.65694473e+00
 -6.65694473e+00 -1.16403867e+00 -2.36645101e-01 -2.36645101e-01
 -2.36645101e-01  6.81732225e+01  5.04443604e+02  2.53844881e+03
  1.24593456e+04  4.54730920e+04  1.32409421e+05]
E1 = -706.6216550381095  E_coul = 198.9019753099614
Extra cycle  E= -507.719679728148  delta_E= -2.27e-13  |g|= 1.14e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546593e+04 7.34327983e+03 1.83773233e+04 1.40685732e+03
 3.40629515e+02 9.93243601e+01 3.33279664e+01 4.71146456e+00
 3.91033173e-01 8.59888399e+00 4.90967339e-01]
grad_E = [-1.77527889e-07  3.23357061e-06  4.02344598e-08  4.78118892e-05
  2.39319745e-05  1.22949937e-05  3.42778953e-06  2.39702854e-06
 -2.54366209e-05 -1.15295307e-05 -7.63195703e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6592039        1
[INPUT] 0    0    [1    /1   ]  7343.28028201        1
[INPUT] 0    0    [1    /1   ]  18377.3232768        1
[INPUT] 0    0    [1    /1   ]  1406.89339648        1
[INPUT] 0    0    [1    /1   ]  340.551026561        1
[INPUT] 0    0    [1    /1   ]  99.302079553         1
[INPUT] 0    0    [1    /1   ]  33.3236266584        1
[INPUT] 0    0    [1    /1   ]  4.71142215004        1
[INPUT] 0    0    [1    /1   ]  0.391031952496       1
[INPUT] 1    0    [1    /1   ]  8.59887299191        1
[INPUT] 1    0    [1    /1   ]  0.490967101514       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65920387686, 1.0]], [0, [7343.280282006536, 1.0]], [0, [18377.323276822823, 1.0]], [0, [1406.8933964762214, 1.0]], [0, [340.5510265605858, 1.0]], [0, [99.30207955298208, 1.0]], [0, [33.323626658422334, 1.0]], [0, [4.711422150035569, 1.0]], [0, [0.39103195249556144, 1.0]], [1, [8.598872991911172, 1.0]], [1, [0.49096710151430784, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65920388]
bas 1, expnt(s) = [7343.28028201]
bas 2, expnt(s) = [18377.32327682]
bas 3, expnt(s) = [1406.89339648]
bas 4, expnt(s) = [340.55102656]
bas 5, expnt(s) = [99.30207955]
bas 6, expnt(s) = [33.32362666]
bas 7, expnt(s) = [4.71142215]
bas 8, expnt(s) = [0.39103195]
bas 9, expnt(s) = [8.59887299]
bas 10, expnt(s) = [0.4909671]
CPU time:       479.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546592e+04 6.70655243e+03 7.34328028e+03 2.00416098e+03
 1.83773233e+04 3.98773891e+03 1.40689340e+03 5.80377968e+02
 3.40551027e+02 2.00286496e+02 9.93020796e+01 7.94755939e+01
 3.33236267e+01 3.50412201e+01 4.71142215e+00 8.07939868e+00
 3.91031952e-01 1.24932149e+00 8.59887299e+00 4.29572341e+01
 4.90967102e-01 1.19894672e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320532446012216
cond(S) = 205.68993118399322
E1 = -689.1721691289985  E_coul = 184.90384441441407
init E= -504.268324714584
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680619270935038  LUMO = 66.8537633010097
  mo_energy =
[-1.21685261e+02 -1.32887371e+01 -7.62315779e+00 -7.62315779e+00
 -7.62315779e+00 -1.65026233e+00 -6.80619271e-01 -6.80619271e-01
 -6.80619271e-01  6.68537633e+01  5.02942018e+02  2.53687571e+03
  1.24579339e+04  4.54717957e+04  1.32408192e+05]
E1 = -706.6661493899778  E_coul = 198.94707997789845
cycle= 1 E= -507.719069412079  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479365
diis-c [-0.22979115  1.        ]
  HOMO = -0.236378587748114  LUMO = 68.1609641807103
  mo_energy =
[-1.20289861e+02 -1.22607582e+01 -6.65419962e+00 -6.65419962e+00
 -6.65419962e+00 -1.16394120e+00 -2.36378588e-01 -2.36378588e-01
 -2.36378588e-01  6.81609642e+01  5.04326126e+02  2.53818019e+03
  1.24591096e+04  4.54728940e+04  1.32409240e+05]
E1 = -706.622276604003  E_coul = 198.90259671491438
cycle= 2 E= -507.719679889089  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619238
diis-c [-3.80505046e-05  1.13189313e-03  9.98868107e-01]
  HOMO = -0.236642535514414  LUMO = 68.1567434359662
  mo_energy =
[-1.20301319e+02 -1.22625186e+01 -6.65690387e+00 -6.65690387e+00
 -6.65690387e+00 -1.16403924e+00 -2.36642536e-01 -2.36642536e-01
 -2.36642536e-01  6.81567434e+01  5.04313661e+02  2.53816181e+03
  1.24590872e+04  4.54728700e+04  1.32409216e+05]
E1 = -706.6215668461136  E_coul = 198.90188676079555
cycle= 3 E= -507.719680085318  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184841
diis-c [-8.24635999e-10  2.90908285e-05 -3.01233574e-02  1.03009427e+00]
  HOMO = -0.23664679198414  LUMO = 68.1566711657054
  mo_energy =
[-1.20301517e+02 -1.22625484e+01 -6.65695361e+00 -6.65695361e+00
 -6.65695361e+00 -1.16404057e+00 -2.36646792e-01 -2.36646792e-01
 -2.36646792e-01  6.81566712e+01  5.04313464e+02  2.53816156e+03
  1.24590869e+04  4.54728697e+04  1.32409215e+05]
E1 = -706.6215522515415  E_coul = 198.90187216612233
cycle= 4 E= -507.719680085419  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.84e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6215522515415  E_coul = 198.90187216612233
  HOMO = -0.23664675705268  LUMO = 68.1566716979947
  mo_energy =
[-1.20301515e+02 -1.22625482e+01 -6.65695328e+00 -6.65695328e+00
 -6.65695328e+00 -1.16404055e+00 -2.36646757e-01 -2.36646757e-01
 -2.36646757e-01  6.81566717e+01  5.04313466e+02  2.53816156e+03
  1.24590869e+04  4.54728697e+04  1.32409215e+05]
E1 = -706.6215523325327  E_coul = 198.90187224711343
Extra cycle  E= -507.719680085419  delta_E= -5.68e-14  |g|= 1.21e-08  |ddm|= 3.8e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67546592e+04 7.34328028e+03 1.83773233e+04 1.40689340e+03
 3.40551027e+02 9.93020796e+01 3.33236267e+01 4.71142215e+00
 3.91031952e-01 8.59887299e+00 4.90967102e-01]
E = -507.71968008541927
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:32:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6592039        1
[INPUT] 0    0    [1    /1   ]  7343.28028201        1
[INPUT] 0    0    [1    /1   ]  18377.3232768        1
[INPUT] 0    0    [1    /1   ]  1406.89339648        1
[INPUT] 0    0    [1    /1   ]  340.551026561        1
[INPUT] 0    0    [1    /1   ]  99.302079553         1
[INPUT] 0    0    [1    /1   ]  33.3236266584        1
[INPUT] 0    0    [1    /1   ]  4.71142215004        1
[INPUT] 0    0    [1    /1   ]  0.391031952496       1
[INPUT] 1    0    [1    /1   ]  8.59887299191        1
[INPUT] 1    0    [1    /1   ]  0.490967101514       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65920387686, 1.0]], [0, [7343.280282006536, 1.0]], [0, [18377.323276822823, 1.0]], [0, [1406.8933964762214, 1.0]], [0, [340.5510265605858, 1.0]], [0, [99.30207955298208, 1.0]], [0, [33.323626658422334, 1.0]], [0, [4.711422150035569, 1.0]], [0, [0.39103195249556144, 1.0]], [1, [8.598872991911172, 1.0]], [1, [0.49096710151430784, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65920388]
bas 1, expnt(s) = [7343.28028201]
bas 2, expnt(s) = [18377.32327682]
bas 3, expnt(s) = [1406.89339648]
bas 4, expnt(s) = [340.55102656]
bas 5, expnt(s) = [99.30207955]
bas 6, expnt(s) = [33.32362666]
bas 7, expnt(s) = [4.71142215]
bas 8, expnt(s) = [0.39103195]
bas 9, expnt(s) = [8.59887299]
bas 10, expnt(s) = [0.4909671]
CPU time:       480.35
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546592e+04 6.70655243e+03 7.34328028e+03 2.00416098e+03
 1.83773233e+04 3.98773891e+03 1.40689340e+03 5.80377968e+02
 3.40551027e+02 2.00286496e+02 9.93020796e+01 7.94755939e+01
 3.33236267e+01 3.50412201e+01 4.71142215e+00 8.07939868e+00
 3.91031952e-01 1.24932149e+00 8.59887299e+00 4.29572341e+01
 4.90967102e-01 1.19894672e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320532446012216
cond(S) = 205.68993118399322
E1 = -689.1721691289985  E_coul = 184.90384441441407
init E= -504.268324714584
    CPU time for initialize scf      0.33 sec, wall time      0.06 sec
  HOMO = -0.680619270935038  LUMO = 66.8537633010097
  mo_energy =
[-1.21685261e+02 -1.32887371e+01 -7.62315779e+00 -7.62315779e+00
 -7.62315779e+00 -1.65026233e+00 -6.80619271e-01 -6.80619271e-01
 -6.80619271e-01  6.68537633e+01  5.02942018e+02  2.53687571e+03
  1.24579339e+04  4.54717957e+04  1.32408192e+05]
E1 = -706.6661493899778  E_coul = 198.94707997789845
cycle= 1 E= -507.719069412079  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479365
diis-c [-0.22979115  1.        ]
  HOMO = -0.236378587748114  LUMO = 68.1609641807103
  mo_energy =
[-1.20289861e+02 -1.22607582e+01 -6.65419962e+00 -6.65419962e+00
 -6.65419962e+00 -1.16394120e+00 -2.36378588e-01 -2.36378588e-01
 -2.36378588e-01  6.81609642e+01  5.04326126e+02  2.53818019e+03
  1.24591096e+04  4.54728940e+04  1.32409240e+05]
E1 = -706.622276604003  E_coul = 198.90259671491438
cycle= 2 E= -507.719679889089  delta_E= -0.00061  |g|= 0.00571  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619238
diis-c [-3.80505046e-05  1.13189313e-03  9.98868107e-01]
  HOMO = -0.236642535514414  LUMO = 68.1567434359662
  mo_energy =
[-1.20301319e+02 -1.22625186e+01 -6.65690387e+00 -6.65690387e+00
 -6.65690387e+00 -1.16403924e+00 -2.36642536e-01 -2.36642536e-01
 -2.36642536e-01  6.81567434e+01  5.04313661e+02  2.53816181e+03
  1.24590872e+04  4.54728700e+04  1.32409216e+05]
E1 = -706.6215668461136  E_coul = 198.90188676079555
cycle= 3 E= -507.719680085318  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184841
diis-c [-8.24635999e-10  2.90908285e-05 -3.01233574e-02  1.03009427e+00]
  HOMO = -0.23664679198414  LUMO = 68.1566711657054
  mo_energy =
[-1.20301517e+02 -1.22625484e+01 -6.65695361e+00 -6.65695361e+00
 -6.65695361e+00 -1.16404057e+00 -2.36646792e-01 -2.36646792e-01
 -2.36646792e-01  6.81566712e+01  5.04313464e+02  2.53816156e+03
  1.24590869e+04  4.54728697e+04  1.32409215e+05]
E1 = -706.6215522515415  E_coul = 198.90187216612233
cycle= 4 E= -507.719680085419  delta_E= -1.01e-10  |g|= 6.32e-07  |ddm|= 6.84e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6215522515415  E_coul = 198.90187216612233
  HOMO = -0.23664675705268  LUMO = 68.1566716979947
  mo_energy =
[-1.20301515e+02 -1.22625482e+01 -6.65695328e+00 -6.65695328e+00
 -6.65695328e+00 -1.16404055e+00 -2.36646757e-01 -2.36646757e-01
 -2.36646757e-01  6.81566717e+01  5.04313466e+02  2.53816156e+03
  1.24590869e+04  4.54728697e+04  1.32409215e+05]
E1 = -706.6215523325327  E_coul = 198.90187224711343
Extra cycle  E= -507.719680085419  delta_E= -5.68e-14  |g|= 1.21e-08  |ddm|= 3.8e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.68993118399322
E1 = -706.6215523325327  E_coul = 198.90187224711343
init E= -507.719680085419
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236646756585025  LUMO = 68.1566717057266
  mo_energy =
[-1.20301515e+02 -1.22625482e+01 -6.65695327e+00 -6.65695327e+00
 -6.65695327e+00 -1.16404055e+00 -2.36646757e-01 -2.36646757e-01
 -2.36646757e-01  6.81566717e+01  5.04313466e+02  2.53816156e+03
  1.24590869e+04  4.54728697e+04  1.32409215e+05]
E1 = -706.621552333936  E_coul = 198.9018722485169
cycle= 1 E= -507.719680085419  delta_E= 1.14e-13  |g|= 2.69e-10  |ddm|= 6.49e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.621552333936  E_coul = 198.9018722485169
  HOMO = -0.236646756577704  LUMO = 68.156671705857
  mo_energy =
[-1.20301515e+02 -1.22625482e+01 -6.65695327e+00 -6.65695327e+00
 -6.65695327e+00 -1.16404055e+00 -2.36646757e-01 -2.36646757e-01
 -2.36646757e-01  6.81566717e+01  5.04313466e+02  2.53816156e+03
  1.24590869e+04  4.54728697e+04  1.32409215e+05]
E1 = -706.6215523339637  E_coul = 198.9018722485442
Extra cycle  E= -507.719680085419  delta_E= -2.84e-13  |g|= 1.55e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546592e+04 7.34328028e+03 1.83773233e+04 1.40689340e+03
 3.40551027e+02 9.93020796e+01 3.33236267e+01 4.71142215e+00
 3.91031952e-01 8.59887299e+00 4.90967102e-01]
grad_E = [-1.77827358e-07  3.22202476e-06  3.98819924e-08  4.82965063e-05
  2.12691086e-05  1.48112308e-05  4.15503350e-06  3.91044274e-06
 -4.64086199e-05 -2.03149143e-05 -1.38815613e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6591396        1
[INPUT] 0    0    [1    /1   ]  7343.28020537        1
[INPUT] 0    0    [1    /1   ]  18377.3232621        1
[INPUT] 0    0    [1    /1   ]  1406.93910542        1
[INPUT] 0    0    [1    /1   ]  340.419529927        1
[INPUT] 0    0    [1    /1   ]  99.2649041089        1
[INPUT] 0    0    [1    /1   ]  33.3163669959        1
[INPUT] 0    0    [1    /1   ]  4.71135122329        1
[INPUT] 0    0    [1    /1   ]  0.391029948802       1
[INPUT] 1    0    [1    /1   ]  8.59885497296        1
[INPUT] 1    0    [1    /1   ]  0.490966717125       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65913958677, 1.0]], [0, [7343.280205373803, 1.0]], [0, [18377.323262076054, 1.0]], [0, [1406.9391054244463, 1.0]], [0, [340.41952992710156, 1.0]], [0, [99.2649041089444, 1.0]], [0, [33.31636699592543, 1.0]], [0, [4.71135122328795, 1.0]], [0, [0.3910299488021865, 1.0]], [1, [8.598854972962025, 1.0]], [1, [0.4909667171250781, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65913959]
bas 1, expnt(s) = [7343.28020537]
bas 2, expnt(s) = [18377.32326208]
bas 3, expnt(s) = [1406.93910542]
bas 4, expnt(s) = [340.41952993]
bas 5, expnt(s) = [99.26490411]
bas 6, expnt(s) = [33.316367]
bas 7, expnt(s) = [4.71135122]
bas 8, expnt(s) = [0.39102995]
bas 9, expnt(s) = [8.59885497]
bas 10, expnt(s) = [0.49096672]
CPU time:       490.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546591e+04 6.70655243e+03 7.34328021e+03 2.00416097e+03
 1.83773233e+04 3.98773890e+03 1.40693911e+03 5.80392110e+02
 3.40419530e+02 2.00228491e+02 9.92649041e+01 7.94532780e+01
 3.33163670e+01 3.50354946e+01 4.71135122e+00 8.07930745e+00
 3.91029949e-01 1.24931668e+00 8.59885497e+00 4.29571216e+01
 4.90966717e-01 1.19894554e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320534550046133
cond(S) = 205.67276548662142
E1 = -689.1722341979555  E_coul = 184.90369222274387
init E= -504.268541975212
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680620079905745  LUMO = 66.8261518287681
  mo_energy =
[-1.21685274e+02 -1.32887617e+01 -7.62316988e+00 -7.62316988e+00
 -7.62316988e+00 -1.65026225e+00 -6.80620080e-01 -6.80620080e-01
 -6.80620080e-01  6.68261518e+01  5.02724308e+02  2.53638128e+03
  1.24574573e+04  4.54713702e+04  1.32407792e+05]
E1 = -706.6660055489488  E_coul = 198.94693554825625
cycle= 1 E= -507.719070000693  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479373
diis-c [-0.22979865  1.        ]
  HOMO = -0.236381124623738  LUMO = 68.1333017762569
  mo_energy =
[-1.20289860e+02 -1.22607838e+01 -6.65421193e+00 -6.65421193e+00
 -6.65421193e+00 -1.16394423e+00 -2.36381125e-01 -2.36381125e-01
 -2.36381125e-01  6.81333018e+01  5.04108430e+02  2.53768578e+03
  1.24586330e+04  4.54724684e+04  1.32408840e+05]
E1 = -706.6221087361085  E_coul = 198.90242790130318
cycle= 2 E= -507.719680834805  delta_E= -0.000611  |g|= 0.00572  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619375
diis-c [-3.80665593e-05  1.13359971e-03  9.98866400e-01]
  HOMO = -0.236645251662607  LUMO = 68.1290797946154
  mo_energy =
[-1.20301324e+02 -1.22625454e+01 -6.65691789e+00 -6.65691789e+00
 -6.65691789e+00 -1.16404234e+00 -2.36645252e-01 -2.36645252e-01
 -2.36645252e-01  6.81290798e+01  5.04095961e+02  2.53766739e+03
  1.24586106e+04  4.54724445e+04  1.32408815e+05]
E1 = -706.6213984235634  E_coul = 198.9017173923426
cycle= 3 E= -507.719681031221  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184923
diis-c [-8.25435028e-10  2.90921717e-05 -3.01301145e-02  1.03010102e+00]
  HOMO = -0.236649512342657  LUMO = 68.1290074760561
  mo_energy =
[-1.20301521e+02 -1.22625753e+01 -6.65696768e+00 -6.65696768e+00
 -6.65696768e+00 -1.16404366e+00 -2.36649512e-01 -2.36649512e-01
 -2.36649512e-01  6.81290075e+01  5.04095764e+02  2.53766714e+03
  1.24586103e+04  4.54724442e+04  1.32408815e+05]
E1 = -706.6213838133913  E_coul = 198.90170278206918
cycle= 4 E= -507.719681031322  delta_E= -1.01e-10  |g|= 6.33e-07  |ddm|= 6.85e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6213838133913  E_coul = 198.90170278206918
  HOMO = -0.236649477371048  LUMO = 68.1290080086861
  mo_energy =
[-1.20301520e+02 -1.22625750e+01 -6.65696735e+00 -6.65696735e+00
 -6.65696735e+00 -1.16404365e+00 -2.36649477e-01 -2.36649477e-01
 -2.36649477e-01  6.81290080e+01  5.04095766e+02  2.53766714e+03
  1.24586103e+04  4.54724442e+04  1.32408815e+05]
E1 = -706.6213838944766  E_coul = 198.90170286315427
Extra cycle  E= -507.719681031322  delta_E= -2.27e-13  |g|= 1.21e-08  |ddm|= 3.8e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67546591e+04 7.34328021e+03 1.83773233e+04 1.40693911e+03
 3.40419530e+02 9.92649041e+01 3.33163670e+01 4.71135122e+00
 3.91029949e-01 8.59885497e+00 4.90966717e-01]
E = -507.71968103132235
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6591396        1
[INPUT] 0    0    [1    /1   ]  7343.28020537        1
[INPUT] 0    0    [1    /1   ]  18377.3232621        1
[INPUT] 0    0    [1    /1   ]  1406.93910542        1
[INPUT] 0    0    [1    /1   ]  340.419529927        1
[INPUT] 0    0    [1    /1   ]  99.2649041089        1
[INPUT] 0    0    [1    /1   ]  33.3163669959        1
[INPUT] 0    0    [1    /1   ]  4.71135122329        1
[INPUT] 0    0    [1    /1   ]  0.391029948802       1
[INPUT] 1    0    [1    /1   ]  8.59885497296        1
[INPUT] 1    0    [1    /1   ]  0.490966717125       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65913958677, 1.0]], [0, [7343.280205373803, 1.0]], [0, [18377.323262076054, 1.0]], [0, [1406.9391054244463, 1.0]], [0, [340.41952992710156, 1.0]], [0, [99.2649041089444, 1.0]], [0, [33.31636699592543, 1.0]], [0, [4.71135122328795, 1.0]], [0, [0.3910299488021865, 1.0]], [1, [8.598854972962025, 1.0]], [1, [0.4909667171250781, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65913959]
bas 1, expnt(s) = [7343.28020537]
bas 2, expnt(s) = [18377.32326208]
bas 3, expnt(s) = [1406.93910542]
bas 4, expnt(s) = [340.41952993]
bas 5, expnt(s) = [99.26490411]
bas 6, expnt(s) = [33.316367]
bas 7, expnt(s) = [4.71135122]
bas 8, expnt(s) = [0.39102995]
bas 9, expnt(s) = [8.59885497]
bas 10, expnt(s) = [0.49096672]
CPU time:       491.72
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546591e+04 6.70655243e+03 7.34328021e+03 2.00416097e+03
 1.83773233e+04 3.98773890e+03 1.40693911e+03 5.80392110e+02
 3.40419530e+02 2.00228491e+02 9.92649041e+01 7.94532780e+01
 3.33163670e+01 3.50354946e+01 4.71135122e+00 8.07930745e+00
 3.91029949e-01 1.24931668e+00 8.59885497e+00 4.29571216e+01
 4.90966717e-01 1.19894554e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320534550046133
cond(S) = 205.67276548662142
E1 = -689.1722341979555  E_coul = 184.90369222274387
init E= -504.268541975212
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680620079905745  LUMO = 66.8261518287681
  mo_energy =
[-1.21685274e+02 -1.32887617e+01 -7.62316988e+00 -7.62316988e+00
 -7.62316988e+00 -1.65026225e+00 -6.80620080e-01 -6.80620080e-01
 -6.80620080e-01  6.68261518e+01  5.02724308e+02  2.53638128e+03
  1.24574573e+04  4.54713702e+04  1.32407792e+05]
E1 = -706.6660055489488  E_coul = 198.94693554825625
cycle= 1 E= -507.719070000693  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479373
diis-c [-0.22979865  1.        ]
  HOMO = -0.236381124623738  LUMO = 68.1333017762569
  mo_energy =
[-1.20289860e+02 -1.22607838e+01 -6.65421193e+00 -6.65421193e+00
 -6.65421193e+00 -1.16394423e+00 -2.36381125e-01 -2.36381125e-01
 -2.36381125e-01  6.81333018e+01  5.04108430e+02  2.53768578e+03
  1.24586330e+04  4.54724684e+04  1.32408840e+05]
E1 = -706.6221087361085  E_coul = 198.90242790130318
cycle= 2 E= -507.719680834805  delta_E= -0.000611  |g|= 0.00572  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619375
diis-c [-3.80665593e-05  1.13359971e-03  9.98866400e-01]
  HOMO = -0.236645251662607  LUMO = 68.1290797946154
  mo_energy =
[-1.20301324e+02 -1.22625454e+01 -6.65691789e+00 -6.65691789e+00
 -6.65691789e+00 -1.16404234e+00 -2.36645252e-01 -2.36645252e-01
 -2.36645252e-01  6.81290798e+01  5.04095961e+02  2.53766739e+03
  1.24586106e+04  4.54724445e+04  1.32408815e+05]
E1 = -706.6213984235634  E_coul = 198.9017173923426
cycle= 3 E= -507.719681031221  delta_E= -1.96e-07  |g|= 0.000136  |ddm|= 0.00033
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000184923
diis-c [-8.25435028e-10  2.90921717e-05 -3.01301145e-02  1.03010102e+00]
  HOMO = -0.236649512342657  LUMO = 68.1290074760561
  mo_energy =
[-1.20301521e+02 -1.22625753e+01 -6.65696768e+00 -6.65696768e+00
 -6.65696768e+00 -1.16404366e+00 -2.36649512e-01 -2.36649512e-01
 -2.36649512e-01  6.81290075e+01  5.04095764e+02  2.53766714e+03
  1.24586103e+04  4.54724442e+04  1.32408815e+05]
E1 = -706.6213838133913  E_coul = 198.90170278206918
cycle= 4 E= -507.719681031322  delta_E= -1.01e-10  |g|= 6.33e-07  |ddm|= 6.85e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6213838133913  E_coul = 198.90170278206918
  HOMO = -0.236649477371048  LUMO = 68.1290080086861
  mo_energy =
[-1.20301520e+02 -1.22625750e+01 -6.65696735e+00 -6.65696735e+00
 -6.65696735e+00 -1.16404365e+00 -2.36649477e-01 -2.36649477e-01
 -2.36649477e-01  6.81290080e+01  5.04095766e+02  2.53766714e+03
  1.24586103e+04  4.54724442e+04  1.32408815e+05]
E1 = -706.6213838944766  E_coul = 198.90170286315427
Extra cycle  E= -507.719681031322  delta_E= -2.27e-13  |g|= 1.21e-08  |ddm|= 3.8e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.67276548662142
E1 = -706.6213838944766  E_coul = 198.90170286315427
init E= -507.719681031322
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.236649476902757  LUMO = 68.1290080164244
  mo_energy =
[-1.20301520e+02 -1.22625750e+01 -6.65696734e+00 -6.65696734e+00
 -6.65696734e+00 -1.16404365e+00 -2.36649477e-01 -2.36649477e-01
 -2.36649477e-01  6.81290080e+01  5.04095766e+02  2.53766714e+03
  1.24586103e+04  4.54724442e+04  1.32408815e+05]
E1 = -706.6213838958818  E_coul = 198.90170286455947
cycle= 1 E= -507.719681031322  delta_E= 5.68e-14  |g|= 2.7e-10  |ddm|= 6.5e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6213838958818  E_coul = 198.90170286455947
  HOMO = -0.236649476895432  LUMO = 68.1290080165555
  mo_energy =
[-1.20301520e+02 -1.22625750e+01 -6.65696734e+00 -6.65696734e+00
 -6.65696734e+00 -1.16404365e+00 -2.36649477e-01 -2.36649477e-01
 -2.36649477e-01  6.81290080e+01  5.04095766e+02  2.53766714e+03
  1.24586103e+04  4.54724442e+04  1.32408815e+05]
E1 = -706.6213838959093  E_coul = 198.90170286458678
Extra cycle  E= -507.719681031322  delta_E= -1.71e-13  |g|= 1.01e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.30 sec
exp = [3.67546591e+04 7.34328021e+03 1.83773233e+04 1.40693911e+03
 3.40419530e+02 9.92649041e+01 3.33163670e+01 4.71135122e+00
 3.91029949e-01 8.59885497e+00 4.90966717e-01]
grad_E = [-1.78306260e-07  3.20350450e-06  3.93190899e-08  4.90875972e-05
  1.69023309e-05  1.89354204e-05  5.34666047e-06  6.39482661e-06
 -8.07841157e-05 -3.47144423e-05 -2.41246889e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6591583        1
[INPUT] 0    0    [1    /1   ]  7343.2779408         1
[INPUT] 0    0    [1    /1   ]  18377.3232126        1
[INPUT] 0    0    [1    /1   ]  1406.97789898        1
[INPUT] 0    0    [1    /1   ]  340.19979105         1
[INPUT] 0    0    [1    /1   ]  99.2031694485        1
[INPUT] 0    0    [1    /1   ]  33.3042633337        1
[INPUT] 0    0    [1    /1   ]  4.71123298758        1
[INPUT] 0    0    [1    /1   ]  0.39102670561        1
[INPUT] 1    0    [1    /1   ]  8.59882588762        1
[INPUT] 1    0    [1    /1   ]  0.490966108593       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65915825091, 1.0]], [0, [7343.277940802401, 1.0]], [0, [18377.323212603373, 1.0]], [0, [1406.9778989767005, 1.0]], [0, [340.19979105001687, 1.0]], [0, [99.20316944845753, 1.0]], [0, [33.304263333688176, 1.0]], [0, [4.711232987576835, 1.0]], [0, [0.3910267056097047, 1.0]], [1, [8.598825887622306, 1.0]], [1, [0.4909661085930465, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65915825]
bas 1, expnt(s) = [7343.2779408]
bas 2, expnt(s) = [18377.3232126]
bas 3, expnt(s) = [1406.97789898]
bas 4, expnt(s) = [340.19979105]
bas 5, expnt(s) = [99.20316945]
bas 6, expnt(s) = [33.30426333]
bas 7, expnt(s) = [4.71123299]
bas 8, expnt(s) = [0.39102671]
bas 9, expnt(s) = [8.59882589]
bas 10, expnt(s) = [0.49096611]
CPU time:       501.87
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546592e+04 6.70655243e+03 7.34327794e+03 2.00416050e+03
 1.83773232e+04 3.98773890e+03 1.40697790e+03 5.80404112e+02
 3.40199791e+02 2.00131549e+02 9.92031694e+01 7.94162151e+01
 3.33042633e+01 3.50259480e+01 4.71123299e+00 8.07915538e+00
 3.91026706e-01 1.24930891e+00 8.59882589e+00 4.29569399e+01
 4.90966109e-01 1.19894369e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320538001858324
cond(S) = 205.64225332489715
E1 = -689.1723380452421  E_coul = 184.9034450409167
init E= -504.268893004325
    CPU time for initialize scf      0.36 sec, wall time      0.06 sec
  HOMO = -0.680621358194935  LUMO = 66.7801760877459
  mo_energy =
[-1.21685295e+02 -1.32888021e+01 -7.62318958e+00 -7.62318958e+00
 -7.62318958e+00 -1.65026206e+00 -6.80621358e-01 -6.80621358e-01
 -6.80621358e-01  6.67801761e+01  5.02361337e+02  2.53552142e+03
  1.24565509e+04  4.54705234e+04  1.32406984e+05]
E1 = -706.6657743708828  E_coul = 198.9467024984712
cycle= 1 E= -507.719071872412  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.39 sec, wall time      0.02 sec
diis-norm(errvec)=0.479387
diis-c [-0.22981148  1.        ]
  HOMO = -0.236385227803747  LUMO = 68.0872412651195
  mo_energy =
[-1.20289859e+02 -1.22608260e+01 -6.65423190e+00 -6.65423190e+00
 -6.65423190e+00 -1.16394915e+00 -2.36385228e-01 -2.36385228e-01
 -2.36385228e-01  6.80872413e+01  5.03745482e+02  2.53682594e+03
  1.24577266e+04  4.54716217e+04  1.32408032e+05]
E1 = -706.6218374840587  E_coul = 198.90215418178582
cycle= 2 E= -507.719683302273  delta_E= -0.000611  |g|= 0.00572  |ddm|= 0.0208
    CPU time for cycle= 2      0.17 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619605
diis-c [-3.80935694e-05  1.13642299e-03  9.98863577e-01]
  HOMO = -0.236649653904832  LUMO = 68.0830172203735
  mo_energy =
[-1.20301331e+02 -1.22625895e+01 -6.65694072e+00 -6.65694072e+00
 -6.65694072e+00 -1.16404738e+00 -2.36649654e-01 -2.36649654e-01
 -2.36649654e-01  6.80830172e+01  5.03733006e+02  2.53680754e+03
  1.24577042e+04  4.54715977e+04  1.32408008e+05]
E1 = -706.6211262463563  E_coul = 198.90144274735823
cycle= 3 E= -507.719683498998  delta_E= -1.97e-07  |g|= 0.000136  |ddm|= 0.000331
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000185061
diis-c [-8.26772772e-10  2.90943155e-05 -3.01413523e-02  1.03011226e+00]
  HOMO = -0.236653921604514  LUMO = 68.0829448213603
  mo_energy =
[-1.20301529e+02 -1.22626194e+01 -6.65699058e+00 -6.65699058e+00
 -6.65699058e+00 -1.16404870e+00 -2.36653922e-01 -2.36653922e-01
 -2.36653922e-01  6.80829448e+01  5.03732809e+02  2.53680729e+03
  1.24577039e+04  4.54715974e+04  1.32408007e+05]
E1 = -706.6211116101737  E_coul = 198.90142811107376
cycle= 4 E= -507.7196834991  delta_E= -1.02e-10  |g|= 6.33e-07  |ddm|= 6.86e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6211116101737  E_coul = 198.90142811107376
  HOMO = -0.23665388656588  LUMO = 68.0829453545579
  mo_energy =
[-1.20301527e+02 -1.22626192e+01 -6.65699025e+00 -6.65699025e+00
 -6.65699025e+00 -1.16404869e+00 -2.36653887e-01 -2.36653887e-01
 -2.36653887e-01  6.80829454e+01  5.03732811e+02  2.53680729e+03
  1.24577039e+04  4.54715974e+04  1.32408007e+05]
E1 = -706.6211116914156  E_coul = 198.90142819231562
Extra cycle  E= -507.7196834991  delta_E= -1.14e-13  |g|= 1.21e-08  |ddm|= 3.81e-08
    CPU time for scf_cycle      1.01 sec, wall time      0.20 sec
exp = [3.67546592e+04 7.34327794e+03 1.83773232e+04 1.40697790e+03
 3.40199791e+02 9.92031694e+01 3.33042633e+01 4.71123299e+00
 3.91026706e-01 8.59882589e+00 4.90966109e-01]
E = -507.71968349910003
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6591583        1
[INPUT] 0    0    [1    /1   ]  7343.2779408         1
[INPUT] 0    0    [1    /1   ]  18377.3232126        1
[INPUT] 0    0    [1    /1   ]  1406.97789898        1
[INPUT] 0    0    [1    /1   ]  340.19979105         1
[INPUT] 0    0    [1    /1   ]  99.2031694485        1
[INPUT] 0    0    [1    /1   ]  33.3042633337        1
[INPUT] 0    0    [1    /1   ]  4.71123298758        1
[INPUT] 0    0    [1    /1   ]  0.39102670561        1
[INPUT] 1    0    [1    /1   ]  8.59882588762        1
[INPUT] 1    0    [1    /1   ]  0.490966108593       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65915825091, 1.0]], [0, [7343.277940802401, 1.0]], [0, [18377.323212603373, 1.0]], [0, [1406.9778989767005, 1.0]], [0, [340.19979105001687, 1.0]], [0, [99.20316944845753, 1.0]], [0, [33.304263333688176, 1.0]], [0, [4.711232987576835, 1.0]], [0, [0.3910267056097047, 1.0]], [1, [8.598825887622306, 1.0]], [1, [0.4909661085930465, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65915825]
bas 1, expnt(s) = [7343.2779408]
bas 2, expnt(s) = [18377.3232126]
bas 3, expnt(s) = [1406.97789898]
bas 4, expnt(s) = [340.19979105]
bas 5, expnt(s) = [99.20316945]
bas 6, expnt(s) = [33.30426333]
bas 7, expnt(s) = [4.71123299]
bas 8, expnt(s) = [0.39102671]
bas 9, expnt(s) = [8.59882589]
bas 10, expnt(s) = [0.49096611]
CPU time:       503.21
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546592e+04 6.70655243e+03 7.34327794e+03 2.00416050e+03
 1.83773232e+04 3.98773890e+03 1.40697790e+03 5.80404112e+02
 3.40199791e+02 2.00131549e+02 9.92031694e+01 7.94162151e+01
 3.33042633e+01 3.50259480e+01 4.71123299e+00 8.07915538e+00
 3.91026706e-01 1.24930891e+00 8.59882589e+00 4.29569399e+01
 4.90966109e-01 1.19894369e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320538001858324
cond(S) = 205.64225332489715
E1 = -689.1723380452421  E_coul = 184.9034450409167
init E= -504.268893004325
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680621358194935  LUMO = 66.7801760877459
  mo_energy =
[-1.21685295e+02 -1.32888021e+01 -7.62318958e+00 -7.62318958e+00
 -7.62318958e+00 -1.65026206e+00 -6.80621358e-01 -6.80621358e-01
 -6.80621358e-01  6.67801761e+01  5.02361337e+02  2.53552142e+03
  1.24565509e+04  4.54705234e+04  1.32406984e+05]
E1 = -706.6657743708828  E_coul = 198.9467024984712
cycle= 1 E= -507.719071872412  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479387
diis-c [-0.22981148  1.        ]
  HOMO = -0.236385227803747  LUMO = 68.0872412651195
  mo_energy =
[-1.20289859e+02 -1.22608260e+01 -6.65423190e+00 -6.65423190e+00
 -6.65423190e+00 -1.16394915e+00 -2.36385228e-01 -2.36385228e-01
 -2.36385228e-01  6.80872413e+01  5.03745482e+02  2.53682594e+03
  1.24577266e+04  4.54716217e+04  1.32408032e+05]
E1 = -706.6218374840587  E_coul = 198.90215418178582
cycle= 2 E= -507.719683302273  delta_E= -0.000611  |g|= 0.00572  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00619605
diis-c [-3.80935694e-05  1.13642299e-03  9.98863577e-01]
  HOMO = -0.236649653904832  LUMO = 68.0830172203735
  mo_energy =
[-1.20301331e+02 -1.22625895e+01 -6.65694072e+00 -6.65694072e+00
 -6.65694072e+00 -1.16404738e+00 -2.36649654e-01 -2.36649654e-01
 -2.36649654e-01  6.80830172e+01  5.03733006e+02  2.53680754e+03
  1.24577042e+04  4.54715977e+04  1.32408008e+05]
E1 = -706.6211262463563  E_coul = 198.90144274735823
cycle= 3 E= -507.719683498998  delta_E= -1.97e-07  |g|= 0.000136  |ddm|= 0.000331
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000185061
diis-c [-8.26772772e-10  2.90943155e-05 -3.01413523e-02  1.03011226e+00]
  HOMO = -0.236653921604514  LUMO = 68.0829448213603
  mo_energy =
[-1.20301529e+02 -1.22626194e+01 -6.65699058e+00 -6.65699058e+00
 -6.65699058e+00 -1.16404870e+00 -2.36653922e-01 -2.36653922e-01
 -2.36653922e-01  6.80829448e+01  5.03732809e+02  2.53680729e+03
  1.24577039e+04  4.54715974e+04  1.32408007e+05]
E1 = -706.6211116101737  E_coul = 198.90142811107376
cycle= 4 E= -507.7196834991  delta_E= -1.02e-10  |g|= 6.33e-07  |ddm|= 6.86e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6211116101737  E_coul = 198.90142811107376
  HOMO = -0.23665388656588  LUMO = 68.0829453545579
  mo_energy =
[-1.20301527e+02 -1.22626192e+01 -6.65699025e+00 -6.65699025e+00
 -6.65699025e+00 -1.16404869e+00 -2.36653887e-01 -2.36653887e-01
 -2.36653887e-01  6.80829454e+01  5.03732811e+02  2.53680729e+03
  1.24577039e+04  4.54715974e+04  1.32408007e+05]
E1 = -706.6211116914156  E_coul = 198.90142819231562
Extra cycle  E= -507.7196834991  delta_E= -1.14e-13  |g|= 1.21e-08  |ddm|= 3.81e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.64225332489715
E1 = -706.6211116914156  E_coul = 198.90142819231562
init E= -507.7196834991
    CPU time for initialize scf      2.28 sec, wall time      0.15 sec
  HOMO = -0.236653886096516  LUMO = 68.0829453623084
  mo_energy =
[-1.20301527e+02 -1.22626192e+01 -6.65699025e+00 -6.65699025e+00
 -6.65699025e+00 -1.16404869e+00 -2.36653886e-01 -2.36653886e-01
 -2.36653886e-01  6.80829454e+01  5.03732811e+02  2.53680729e+03
  1.24577039e+04  4.54715974e+04  1.32408007e+05]
E1 = -706.6211116928238  E_coul = 198.90142819372377
cycle= 1 E= -507.7196834991  delta_E=    0  |g|= 2.69e-10  |ddm|= 6.52e-10
    CPU time for cycle= 1      0.23 sec, wall time      0.02 sec
E1 = -706.6211116928238  E_coul = 198.90142819372377
  HOMO = -0.236653886089175  LUMO = 68.0829453624403
  mo_energy =
[-1.20301527e+02 -1.22626192e+01 -6.65699025e+00 -6.65699025e+00
 -6.65699025e+00 -1.16404869e+00 -2.36653886e-01 -2.36653886e-01
 -2.36653886e-01  6.80829454e+01  5.03732811e+02  2.53680729e+03
  1.24577039e+04  4.54715974e+04  1.32408007e+05]
E1 = -706.6211116928512  E_coul = 198.90142819375117
Extra cycle  E= -507.7196834991  delta_E=    0  |g|= 2.18e-11  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.65 sec, wall time      0.31 sec
exp = [3.67546592e+04 7.34327794e+03 1.83773232e+04 1.40697790e+03
 3.40199791e+02 9.92031694e+01 3.33042633e+01 4.71123299e+00
 3.91026706e-01 8.59882589e+00 4.90966109e-01]
grad_E = [-1.79048408e-07  3.17465255e-06  3.84485249e-08  5.03566509e-05
  9.84521919e-06  2.55950359e-05  7.27049529e-06  1.04218670e-05
 -1.36291328e-04 -5.79630472e-05 -4.06620359e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6595091        1
[INPUT] 0    0    [1    /1   ]  7343.26865755        1
[INPUT] 0    0    [1    /1   ]  18377.323065         1
[INPUT] 0    0    [1    /1   ]  1406.9493312         1
[INPUT] 0    0    [1    /1   ]  339.823225952        1
[INPUT] 0    0    [1    /1   ]  99.098349836         1
[INPUT] 0    0    [1    /1   ]  33.2835890798        1
[INPUT] 0    0    [1    /1   ]  4.71103103627        1
[INPUT] 0    0    [1    /1   ]  0.391021412901       1
[INPUT] 1    0    [1    /1   ]  8.59877862634        1
[INPUT] 1    0    [1    /1   ]  0.490965150996       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65950908746, 1.0]], [0, [7343.268657553221, 1.0]], [0, [18377.32306503622, 1.0]], [0, [1406.9493312030545, 1.0]], [0, [339.8232259523201, 1.0]], [0, [99.09834983603724, 1.0]], [0, [33.283589079759444, 1.0]], [0, [4.7110310362731616, 1.0]], [0, [0.3910214129007505, 1.0]], [1, [8.598778626335195, 1.0]], [1, [0.4909651509964868, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65950909]
bas 1, expnt(s) = [7343.26865755]
bas 2, expnt(s) = [18377.32306504]
bas 3, expnt(s) = [1406.9493312]
bas 4, expnt(s) = [339.82322595]
bas 5, expnt(s) = [99.09834984]
bas 6, expnt(s) = [33.28358908]
bas 7, expnt(s) = [4.71103104]
bas 8, expnt(s) = [0.39102141]
bas 9, expnt(s) = [8.59877863]
bas 10, expnt(s) = [0.49096515]
CPU time:       513.36
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546595e+04 6.70655248e+03 7.34326866e+03 2.00415860e+03
 1.83773231e+04 3.98773887e+03 1.40694933e+03 5.80395274e+02
 3.39823226e+02 1.99965382e+02 9.90983498e+01 7.93532724e+01
 3.32835891e+01 3.50096394e+01 4.71103104e+00 8.07889564e+00
 3.91021413e-01 1.24929623e+00 8.59877863e+00 4.29566448e+01
 4.90965151e-01 1.19894076e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320543756037733
cond(S) = 205.58534633131927
E1 = -689.1725037857346  E_coul = 184.903039440049
init E= -504.269464345686
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680623362974382  LUMO = 66.7018018066437
  mo_energy =
[-1.21685330e+02 -1.32888697e+01 -7.62322207e+00 -7.62322207e+00
 -7.62322207e+00 -1.65026160e+00 -6.80623363e-01 -6.80623363e-01
 -6.80623363e-01  6.67018018e+01  5.01741413e+02  2.53396280e+03
  1.24547192e+04  4.54687294e+04  1.32405247e+05]
E1 = -706.66540146107  E_coul = 198.9463241333198
cycle= 1 E= -507.71907732775  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.47941
diis-c [-0.22983418  1.        ]
  HOMO = -0.23639191593984  LUMO = 68.0087225482633
  mo_energy =
[-1.20289855e+02 -1.22608963e+01 -6.65426461e+00 -6.65426461e+00
 -6.65426461e+00 -1.16395723e+00 -2.36391916e-01 -2.36391916e-01
 -2.36391916e-01  6.80087225e+01  5.03125600e+02  2.53526738e+03
  1.24558949e+04  4.54698276e+04  1.32406296e+05]
E1 = -706.6213960752918  E_coul = 198.90170629899197
cycle= 2 E= -507.7196897763  delta_E= -0.000612  |g|= 0.00572  |ddm|= 0.0208
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00620002
diis-c [-3.81403250e-05  1.14118978e-03  9.98858810e-01]
  HOMO = -0.236656853401269  LUMO = 68.0044949771385
  mo_energy =
[-1.20301342e+02 -1.22626631e+01 -6.65697831e+00 -6.65697831e+00
 -6.65697831e+00 -1.16405565e+00 -2.36656853e-01 -2.36656853e-01
 -2.36656853e-01  6.80044950e+01  5.03113113e+02  2.53524896e+03
  1.24558725e+04  4.54698037e+04  1.32406271e+05]
E1 = -706.6206832559744  E_coul = 198.90099328241863
cycle= 3 E= -507.719689973556  delta_E= -1.97e-07  |g|= 0.000136  |ddm|= 0.000331
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000185296
diis-c [-8.29072620e-10  2.90975060e-05 -3.01604626e-02  1.03013137e+00]
  HOMO = -0.236661133094284  LUMO = 68.0044224408814
  mo_energy =
[-1.20301540e+02 -1.22626931e+01 -6.65702830e+00 -6.65702830e+00
 -6.65702830e+00 -1.16405698e+00 -2.36661133e-01 -2.36661133e-01
 -2.36661133e-01  6.80044224e+01  5.03112915e+02  2.53524871e+03
  1.24558722e+04  4.54698034e+04  1.32406271e+05]
E1 = -706.6206685753443  E_coul = 198.90097860168643
cycle= 4 E= -507.719689973658  delta_E= -1.02e-10  |g|= 6.35e-07  |ddm|= 6.88e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6206685753443  E_coul = 198.90097860168643
  HOMO = -0.236661097940895  LUMO = 68.0044229750528
  mo_energy =
[-1.20301539e+02 -1.22626928e+01 -6.65702797e+00 -6.65702797e+00
 -6.65702797e+00 -1.16405697e+00 -2.36661098e-01 -2.36661098e-01
 -2.36661098e-01  6.80044230e+01  5.03112917e+02  2.53524871e+03
  1.24558722e+04  4.54698034e+04  1.32406271e+05]
E1 = -706.6206686568546  E_coul = 198.9009786831963
Extra cycle  E= -507.719689973658  delta_E= -4.55e-13  |g|= 1.22e-08  |ddm|= 3.82e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546595e+04 7.34326866e+03 1.83773231e+04 1.40694933e+03
 3.39823226e+02 9.90983498e+01 3.32835891e+01 4.71103104e+00
 3.91021413e-01 8.59877863e+00 4.90965151e-01]
E = -507.7196899736583
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6595091        1
[INPUT] 0    0    [1    /1   ]  7343.26865755        1
[INPUT] 0    0    [1    /1   ]  18377.323065         1
[INPUT] 0    0    [1    /1   ]  1406.9493312         1
[INPUT] 0    0    [1    /1   ]  339.823225952        1
[INPUT] 0    0    [1    /1   ]  99.098349836         1
[INPUT] 0    0    [1    /1   ]  33.2835890798        1
[INPUT] 0    0    [1    /1   ]  4.71103103627        1
[INPUT] 0    0    [1    /1   ]  0.391021412901       1
[INPUT] 1    0    [1    /1   ]  8.59877862634        1
[INPUT] 1    0    [1    /1   ]  0.490965150996       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.65950908746, 1.0]], [0, [7343.268657553221, 1.0]], [0, [18377.32306503622, 1.0]], [0, [1406.9493312030545, 1.0]], [0, [339.8232259523201, 1.0]], [0, [99.09834983603724, 1.0]], [0, [33.283589079759444, 1.0]], [0, [4.7110310362731616, 1.0]], [0, [0.3910214129007505, 1.0]], [1, [8.598778626335195, 1.0]], [1, [0.4909651509964868, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.65950909]
bas 1, expnt(s) = [7343.26865755]
bas 2, expnt(s) = [18377.32306504]
bas 3, expnt(s) = [1406.9493312]
bas 4, expnt(s) = [339.82322595]
bas 5, expnt(s) = [99.09834984]
bas 6, expnt(s) = [33.28358908]
bas 7, expnt(s) = [4.71103104]
bas 8, expnt(s) = [0.39102141]
bas 9, expnt(s) = [8.59877863]
bas 10, expnt(s) = [0.49096515]
CPU time:       514.69
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546595e+04 6.70655248e+03 7.34326866e+03 2.00415860e+03
 1.83773231e+04 3.98773887e+03 1.40694933e+03 5.80395274e+02
 3.39823226e+02 1.99965382e+02 9.90983498e+01 7.93532724e+01
 3.32835891e+01 3.50096394e+01 4.71103104e+00 8.07889564e+00
 3.91021413e-01 1.24929623e+00 8.59877863e+00 4.29566448e+01
 4.90965151e-01 1.19894076e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320543756037733
cond(S) = 205.58534633131927
E1 = -689.1725037857346  E_coul = 184.903039440049
init E= -504.269464345686
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680623362974382  LUMO = 66.7018018066437
  mo_energy =
[-1.21685330e+02 -1.32888697e+01 -7.62322207e+00 -7.62322207e+00
 -7.62322207e+00 -1.65026160e+00 -6.80623363e-01 -6.80623363e-01
 -6.80623363e-01  6.67018018e+01  5.01741413e+02  2.53396280e+03
  1.24547192e+04  4.54687294e+04  1.32405247e+05]
E1 = -706.66540146107  E_coul = 198.9463241333198
cycle= 1 E= -507.71907732775  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.47941
diis-c [-0.22983418  1.        ]
  HOMO = -0.23639191593984  LUMO = 68.0087225482633
  mo_energy =
[-1.20289855e+02 -1.22608963e+01 -6.65426461e+00 -6.65426461e+00
 -6.65426461e+00 -1.16395723e+00 -2.36391916e-01 -2.36391916e-01
 -2.36391916e-01  6.80087225e+01  5.03125600e+02  2.53526738e+03
  1.24558949e+04  4.54698276e+04  1.32406296e+05]
E1 = -706.6213960752918  E_coul = 198.90170629899197
cycle= 2 E= -507.7196897763  delta_E= -0.000612  |g|= 0.00572  |ddm|= 0.0208
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00620002
diis-c [-3.81403250e-05  1.14118978e-03  9.98858810e-01]
  HOMO = -0.236656853401269  LUMO = 68.0044949771385
  mo_energy =
[-1.20301342e+02 -1.22626631e+01 -6.65697831e+00 -6.65697831e+00
 -6.65697831e+00 -1.16405565e+00 -2.36656853e-01 -2.36656853e-01
 -2.36656853e-01  6.80044950e+01  5.03113113e+02  2.53524896e+03
  1.24558725e+04  4.54698037e+04  1.32406271e+05]
E1 = -706.6206832559744  E_coul = 198.90099328241863
cycle= 3 E= -507.719689973556  delta_E= -1.97e-07  |g|= 0.000136  |ddm|= 0.000331
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000185296
diis-c [-8.29072620e-10  2.90975060e-05 -3.01604626e-02  1.03013137e+00]
  HOMO = -0.236661133094284  LUMO = 68.0044224408814
  mo_energy =
[-1.20301540e+02 -1.22626931e+01 -6.65702830e+00 -6.65702830e+00
 -6.65702830e+00 -1.16405698e+00 -2.36661133e-01 -2.36661133e-01
 -2.36661133e-01  6.80044224e+01  5.03112915e+02  2.53524871e+03
  1.24558722e+04  4.54698034e+04  1.32406271e+05]
E1 = -706.6206685753443  E_coul = 198.90097860168643
cycle= 4 E= -507.719689973658  delta_E= -1.02e-10  |g|= 6.35e-07  |ddm|= 6.88e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6206685753443  E_coul = 198.90097860168643
  HOMO = -0.236661097940895  LUMO = 68.0044229750528
  mo_energy =
[-1.20301539e+02 -1.22626928e+01 -6.65702797e+00 -6.65702797e+00
 -6.65702797e+00 -1.16405697e+00 -2.36661098e-01 -2.36661098e-01
 -2.36661098e-01  6.80044230e+01  5.03112917e+02  2.53524871e+03
  1.24558722e+04  4.54698034e+04  1.32406271e+05]
E1 = -706.6206686568546  E_coul = 198.9009786831963
Extra cycle  E= -507.719689973658  delta_E= -4.55e-13  |g|= 1.22e-08  |ddm|= 3.82e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.58534633131927
E1 = -706.6206686568546  E_coul = 198.9009786831963
init E= -507.719689973658
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236661097469706  LUMO = 68.0044229828213
  mo_energy =
[-1.20301539e+02 -1.22626928e+01 -6.65702797e+00 -6.65702797e+00
 -6.65702797e+00 -1.16405697e+00 -2.36661097e-01 -2.36661097e-01
 -2.36661097e-01  6.80044230e+01  5.03112917e+02  2.53524871e+03
  1.24558722e+04  4.54698034e+04  1.32406271e+05]
E1 = -706.6206686582681  E_coul = 198.9009786846101
cycle= 1 E= -507.719689973658  delta_E= 3.41e-13  |g|= 2.73e-10  |ddm|= 6.54e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6206686582681  E_coul = 198.9009786846101
  HOMO = -0.236661097462333  LUMO = 68.0044229829548
  mo_energy =
[-1.20301539e+02 -1.22626928e+01 -6.65702797e+00 -6.65702797e+00
 -6.65702797e+00 -1.16405697e+00 -2.36661097e-01 -2.36661097e-01
 -2.36661097e-01  6.80044230e+01  5.03112917e+02  2.53524871e+03
  1.24558722e+04  4.54698034e+04  1.32406271e+05]
E1 = -706.6206686582951  E_coul = 198.90097868463738
Extra cycle  E= -507.719689973658  delta_E= 2.27e-13  |g|= 8.64e-12  |ddm|= 1.28e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546595e+04 7.34326866e+03 1.83773231e+04 1.40694933e+03
 3.39823226e+02 9.90983498e+01 3.32835891e+01 4.71103104e+00
 3.91021413e-01 8.59877863e+00 4.90965151e-01]
grad_E = [-1.80173673e-07  3.13049296e-06  3.71323028e-08  5.23985641e-05
 -1.64625161e-06  3.64262559e-05  1.03985966e-05  1.70371272e-05
 -2.26541989e-04 -9.57514181e-05 -6.75394174e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:28 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6609147        1
[INPUT] 0    0    [1    /1   ]  7343.23897846        1
[INPUT] 0    0    [1    /1   ]  18377.3226504        1
[INPUT] 0    0    [1    /1   ]  1406.66378428        1
[INPUT] 0    0    [1    /1   ]  339.162046154        1
[INPUT] 0    0    [1    /1   ]  98.9166938078        1
[INPUT] 0    0    [1    /1   ]  33.2474463815        1
[INPUT] 0    0    [1    /1   ]  4.71067785081        1
[INPUT] 0    0    [1    /1   ]  0.391012773911       1
[INPUT] 1    0    [1    /1   ]  8.59870199256        1
[INPUT] 1    0    [1    /1   ]  0.490963679733       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.66091473578, 1.0]], [0, [7343.238978461282, 1.0]], [0, [18377.322650442125, 1.0]], [0, [1406.66378427883, 1.0]], [0, [339.16204615363074, 1.0]], [0, [98.9166938078268, 1.0]], [0, [33.247446381522835, 1.0]], [0, [4.710677850805694, 1.0]], [0, [0.3910127739110106, 1.0]], [1, [8.598701992556313, 1.0]], [1, [0.49096367973272836, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.66091474]
bas 1, expnt(s) = [7343.23897846]
bas 2, expnt(s) = [18377.32265044]
bas 3, expnt(s) = [1406.66378428]
bas 4, expnt(s) = [339.16204615]
bas 5, expnt(s) = [98.91669381]
bas 6, expnt(s) = [33.24744638]
bas 7, expnt(s) = [4.71067785]
bas 8, expnt(s) = [0.39101277]
bas 9, expnt(s) = [8.59870199]
bas 10, expnt(s) = [0.49096368]
CPU time:       524.74
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546609e+04 6.70655267e+03 7.34323898e+03 2.00415253e+03
 1.83773227e+04 3.98773880e+03 1.40666378e+03 5.80306926e+02
 3.39162046e+02 1.99673513e+02 9.89166938e+01 7.92441513e+01
 3.32474464e+01 3.49811228e+01 4.71067785e+00 8.07844138e+00
 3.91012774e-01 1.24927553e+00 8.59870199e+00 4.29561663e+01
 4.90963680e-01 1.19893627e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320553464708475
cond(S) = 205.47400235093534
E1 = -689.1727650773043  E_coul = 184.9023715870593
init E= -504.270393490245
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.68062642337327  LUMO = 66.5652051592399
  mo_energy =
[-1.21685386e+02 -1.32889842e+01 -7.62327599e+00 -7.62327599e+00
 -7.62327599e+00 -1.65026047e+00 -6.80626423e-01 -6.80626423e-01
 -6.80626423e-01  6.65652052e+01  5.00658082e+02  2.53101531e+03
  1.24508136e+04  4.54647301e+04  1.32401327e+05]
E1 = -706.6648044253351  E_coul = 198.9457119446082
cycle= 1 E= -507.719092480727  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479454
diis-c [-0.22987579  1.        ]
  HOMO = -0.236402811114012  LUMO = 67.8718742439222
  mo_energy =
[-1.20289843e+02 -1.22610151e+01 -6.65431828e+00 -6.65431828e+00
 -6.65431828e+00 -1.16397056e+00 -2.36402811e-01 -2.36402811e-01
 -2.36402811e-01  6.78718742e+01  5.02042340e+02  2.53231997e+03
  1.24519893e+04  4.54658284e+04  1.32402375e+05]
E1 = -706.6206791248642  E_coul = 198.90097241129766
cycle= 2 E= -507.719706713567  delta_E= -0.000614  |g|= 0.00573  |ddm|= 0.0209
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00620709
diis-c [-3.82236185e-05  1.14938483e-03  9.98850615e-01]
  HOMO = -0.236668644302989  LUMO = 67.8676405015289
  mo_energy =
[-1.20301357e+02 -1.22627876e+01 -6.65704051e+00 -6.65704051e+00
 -6.65704051e+00 -1.16406933e+00 -2.36668644e-01 -2.36668644e-01
 -2.36668644e-01  6.78676405e+01  5.02029833e+02  2.53230152e+03
  1.24519668e+04  4.54658043e+04  1.32402351e+05]
E1 = -706.6199635357634  E_coul = 198.9002566240104
cycle= 3 E= -507.719706911753  delta_E= -1.98e-07  |g|= 0.000137  |ddm|= 0.000333
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000185709
diis-c [-8.33131969e-10  2.91022691e-05 -3.01936789e-02  1.03016458e+00]
  HOMO = -0.236672944984437  LUMO = 67.8675677257074
  mo_energy =
[-1.20301556e+02 -1.22628178e+01 -6.65709073e+00 -6.65709073e+00
 -6.65709073e+00 -1.16407067e+00 -2.36672945e-01 -2.36672945e-01
 -2.36672945e-01  6.78675677e+01  5.02029634e+02  2.53230127e+03
  1.24519665e+04  4.54658040e+04  1.32402350e+05]
E1 = -706.6199487773338  E_coul = 198.90024186547836
cycle= 4 E= -507.719706911855  delta_E= -1.02e-10  |g|= 6.37e-07  |ddm|= 6.92e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6199487773338  E_coul = 198.90024186547836
  HOMO = -0.236672909629647  LUMO = 67.8675682615867
  mo_energy =
[-1.20301554e+02 -1.22628176e+01 -6.65709040e+00 -6.65709040e+00
 -6.65709040e+00 -1.16407065e+00 -2.36672910e-01 -2.36672910e-01
 -2.36672910e-01  6.78675683e+01  5.02029636e+02  2.53230127e+03
  1.24519665e+04  4.54658040e+04  1.32402350e+05]
E1 = -706.619948859314  E_coul = 198.90024194745843
Extra cycle  E= -507.719706911856  delta_E= -2.27e-13  |g|= 1.22e-08  |ddm|= 3.85e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546609e+04 7.34323898e+03 1.83773227e+04 1.40666378e+03
 3.39162046e+02 9.89166938e+01 3.32474464e+01 4.71067785e+00
 3.91012774e-01 8.59870199e+00 4.90963680e-01]
E = -507.7197069118556
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6609147        1
[INPUT] 0    0    [1    /1   ]  7343.23897846        1
[INPUT] 0    0    [1    /1   ]  18377.3226504        1
[INPUT] 0    0    [1    /1   ]  1406.66378428        1
[INPUT] 0    0    [1    /1   ]  339.162046154        1
[INPUT] 0    0    [1    /1   ]  98.9166938078        1
[INPUT] 0    0    [1    /1   ]  33.2474463815        1
[INPUT] 0    0    [1    /1   ]  4.71067785081        1
[INPUT] 0    0    [1    /1   ]  0.391012773911       1
[INPUT] 1    0    [1    /1   ]  8.59870199256        1
[INPUT] 1    0    [1    /1   ]  0.490963679733       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.66091473578, 1.0]], [0, [7343.238978461282, 1.0]], [0, [18377.322650442125, 1.0]], [0, [1406.66378427883, 1.0]], [0, [339.16204615363074, 1.0]], [0, [98.9166938078268, 1.0]], [0, [33.247446381522835, 1.0]], [0, [4.710677850805694, 1.0]], [0, [0.3910127739110106, 1.0]], [1, [8.598701992556313, 1.0]], [1, [0.49096367973272836, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.66091474]
bas 1, expnt(s) = [7343.23897846]
bas 2, expnt(s) = [18377.32265044]
bas 3, expnt(s) = [1406.66378428]
bas 4, expnt(s) = [339.16204615]
bas 5, expnt(s) = [98.91669381]
bas 6, expnt(s) = [33.24744638]
bas 7, expnt(s) = [4.71067785]
bas 8, expnt(s) = [0.39101277]
bas 9, expnt(s) = [8.59870199]
bas 10, expnt(s) = [0.49096368]
CPU time:       526.07
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546609e+04 6.70655267e+03 7.34323898e+03 2.00415253e+03
 1.83773227e+04 3.98773880e+03 1.40666378e+03 5.80306926e+02
 3.39162046e+02 1.99673513e+02 9.89166938e+01 7.92441513e+01
 3.32474464e+01 3.49811228e+01 4.71067785e+00 8.07844138e+00
 3.91012774e-01 1.24927553e+00 8.59870199e+00 4.29561663e+01
 4.90963680e-01 1.19893627e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320553464708475
cond(S) = 205.47400235093534
E1 = -689.1727650773043  E_coul = 184.9023715870593
init E= -504.270393490245
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.68062642337327  LUMO = 66.5652051592399
  mo_energy =
[-1.21685386e+02 -1.32889842e+01 -7.62327599e+00 -7.62327599e+00
 -7.62327599e+00 -1.65026047e+00 -6.80626423e-01 -6.80626423e-01
 -6.80626423e-01  6.65652052e+01  5.00658082e+02  2.53101531e+03
  1.24508136e+04  4.54647301e+04  1.32401327e+05]
E1 = -706.6648044253351  E_coul = 198.9457119446082
cycle= 1 E= -507.719092480727  delta_E= -3.45  |g|= 0.334  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479454
diis-c [-0.22987579  1.        ]
  HOMO = -0.236402811114012  LUMO = 67.8718742439222
  mo_energy =
[-1.20289843e+02 -1.22610151e+01 -6.65431828e+00 -6.65431828e+00
 -6.65431828e+00 -1.16397056e+00 -2.36402811e-01 -2.36402811e-01
 -2.36402811e-01  6.78718742e+01  5.02042340e+02  2.53231997e+03
  1.24519893e+04  4.54658284e+04  1.32402375e+05]
E1 = -706.6206791248642  E_coul = 198.90097241129766
cycle= 2 E= -507.719706713567  delta_E= -0.000614  |g|= 0.00573  |ddm|= 0.0209
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00620709
diis-c [-3.82236185e-05  1.14938483e-03  9.98850615e-01]
  HOMO = -0.236668644302989  LUMO = 67.8676405015289
  mo_energy =
[-1.20301357e+02 -1.22627876e+01 -6.65704051e+00 -6.65704051e+00
 -6.65704051e+00 -1.16406933e+00 -2.36668644e-01 -2.36668644e-01
 -2.36668644e-01  6.78676405e+01  5.02029833e+02  2.53230152e+03
  1.24519668e+04  4.54658043e+04  1.32402351e+05]
E1 = -706.6199635357634  E_coul = 198.9002566240104
cycle= 3 E= -507.719706911753  delta_E= -1.98e-07  |g|= 0.000137  |ddm|= 0.000333
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000185709
diis-c [-8.33131969e-10  2.91022691e-05 -3.01936789e-02  1.03016458e+00]
  HOMO = -0.236672944984437  LUMO = 67.8675677257074
  mo_energy =
[-1.20301556e+02 -1.22628178e+01 -6.65709073e+00 -6.65709073e+00
 -6.65709073e+00 -1.16407067e+00 -2.36672945e-01 -2.36672945e-01
 -2.36672945e-01  6.78675677e+01  5.02029634e+02  2.53230127e+03
  1.24519665e+04  4.54658040e+04  1.32402350e+05]
E1 = -706.6199487773338  E_coul = 198.90024186547836
cycle= 4 E= -507.719706911855  delta_E= -1.02e-10  |g|= 6.37e-07  |ddm|= 6.92e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6199487773338  E_coul = 198.90024186547836
  HOMO = -0.236672909629647  LUMO = 67.8675682615867
  mo_energy =
[-1.20301554e+02 -1.22628176e+01 -6.65709040e+00 -6.65709040e+00
 -6.65709040e+00 -1.16407065e+00 -2.36672910e-01 -2.36672910e-01
 -2.36672910e-01  6.78675683e+01  5.02029636e+02  2.53230127e+03
  1.24519665e+04  4.54658040e+04  1.32402350e+05]
E1 = -706.619948859314  E_coul = 198.90024194745843
Extra cycle  E= -507.719706911856  delta_E= -2.27e-13  |g|= 1.22e-08  |ddm|= 3.85e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.47400235093534
E1 = -706.619948859314  E_coul = 198.90024194745843
init E= -507.719706911856
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236672909155252  LUMO = 67.8675682693904
  mo_energy =
[-1.20301554e+02 -1.22628175e+01 -6.65709039e+00 -6.65709039e+00
 -6.65709039e+00 -1.16407065e+00 -2.36672909e-01 -2.36672909e-01
 -2.36672909e-01  6.78675683e+01  5.02029636e+02  2.53230127e+03
  1.24519665e+04  4.54658040e+04  1.32402350e+05]
E1 = -706.6199488607375  E_coul = 198.90024194888178
cycle= 1 E= -507.719706911856  delta_E= -1.14e-13  |g|= 2.71e-10  |ddm|= 6.59e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6199488607375  E_coul = 198.90024194888178
  HOMO = -0.236672909147818  LUMO = 67.8675682695231
  mo_energy =
[-1.20301554e+02 -1.22628175e+01 -6.65709039e+00 -6.65709039e+00
 -6.65709039e+00 -1.16407065e+00 -2.36672909e-01 -2.36672909e-01
 -2.36672909e-01  6.78675683e+01  5.02029636e+02  2.53230127e+03
  1.24519665e+04  4.54658040e+04  1.32402350e+05]
E1 = -706.619948860765  E_coul = 198.90024194890947
Extra cycle  E= -507.719706911856  delta_E= 1.71e-13  |g|= 1.65e-11  |ddm|= 1.3e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546609e+04 7.34323898e+03 1.83773227e+04 1.40666378e+03
 3.39162046e+02 9.89166938e+01 3.32474464e+01 4.71067785e+00
 3.91012774e-01 8.59870199e+00 4.90963680e-01]
grad_E = [-1.81788081e-07  3.06597737e-06  3.52503038e-08  5.56584900e-05
 -2.03509151e-05  5.40276710e-05  1.54819343e-05  2.80756918e-05
 -3.73045211e-04 -1.57039742e-04 -1.11119831e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6653714        1
[INPUT] 0    0    [1    /1   ]  7343.15281323        1
[INPUT] 0    0    [1    /1   ]  18377.3215224        1
[INPUT] 0    0    [1    /1   ]  1405.57779779        1
[INPUT] 0    0    [1    /1   ]  337.960632058        1
[INPUT] 0    0    [1    /1   ]  98.592250487         1
[INPUT] 0    0    [1    /1   ]  33.182105648         1
[INPUT] 0    0    [1    /1   ]  4.71003835871        1
[INPUT] 0    0    [1    /1   ]  0.390998642756       1
[INPUT] 1    0    [1    /1   ]  8.59857785192        1
[INPUT] 1    0    [1    /1   ]  0.490961508738       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.66537143794, 1.0]], [0, [7343.15281323458, 1.0]], [0, [18377.32152244706, 1.0]], [0, [1405.5777977925688, 1.0]], [0, [337.96063205802756, 1.0]], [0, [98.59225048696894, 1.0]], [0, [33.18210564804971, 1.0]], [0, [4.710038358709835, 1.0]], [0, [0.39099864275567536, 1.0]], [1, [8.598577851917097, 1.0]], [1, [0.4909615087382584, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.66537144]
bas 1, expnt(s) = [7343.15281323]
bas 2, expnt(s) = [18377.32152245]
bas 3, expnt(s) = [1405.57779779]
bas 4, expnt(s) = [337.96063206]
bas 5, expnt(s) = [98.59225049]
bas 6, expnt(s) = [33.18210565]
bas 7, expnt(s) = [4.71003836]
bas 8, expnt(s) = [0.39099864]
bas 9, expnt(s) = [8.59857785]
bas 10, expnt(s) = [0.49096151]
CPU time:       536.22
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546654e+04 6.70655328e+03 7.34315281e+03 2.00413489e+03
 1.83773215e+04 3.98773862e+03 1.40557780e+03 5.79970883e+02
 3.37960632e+02 1.99142800e+02 9.85922505e+01 7.90491327e+01
 3.31821056e+01 3.49295492e+01 4.71003836e+00 8.07761886e+00
 3.90998643e-01 1.24924167e+00 8.59857785e+00 4.29553911e+01
 4.90961509e-01 1.19892964e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320570174226464
cond(S) = 205.24423242230597
E1 = -689.1731704593625  E_coul = 184.90126382868985
init E= -504.271906630673
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680630877781945  LUMO = 66.3193914977637
  mo_energy =
[-1.21685480e+02 -1.32891830e+01 -7.62336649e+00 -7.62336649e+00
 -7.62336649e+00 -1.65025766e+00 -6.80630878e-01 -6.80630878e-01
 -6.80630878e-01  6.63193915e+01  4.98701726e+02  2.52515077e+03
  1.24420548e+04  4.54554167e+04  1.32392102e+05]
E1 = -706.6638594416484  E_coul = 198.94472597053078
cycle= 1 E= -507.719133471118  delta_E= -3.45  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479537
diis-c [-0.22995549  1.        ]
  HOMO = -0.23642057381164  LUMO = 67.6256074572488
  mo_energy =
[-1.20289813e+02 -1.22612202e+01 -6.65440665e+00 -6.65440665e+00
 -6.65440665e+00 -1.16399276e+00 -2.36420574e-01 -2.36420574e-01
 -2.36420574e-01  6.76256075e+01  5.00086111e+02  2.52645563e+03
  1.24432305e+04  4.54565150e+04  1.32393150e+05]
E1 = -706.6195167558692  E_coul = 198.8997658147331
cycle= 2 E= -507.719750941136  delta_E= -0.000617  |g|= 0.00575  |ddm|= 0.021
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00622014
diis-c [-3.83780351e-05  1.16386274e-03  9.98836137e-01]
  HOMO = -0.23668803262929  LUMO = 67.621362540214
  mo_energy =
[-1.20301374e+02 -1.22630032e+01 -6.65714438e+00 -6.65714438e+00
 -6.65714438e+00 -1.16409215e+00 -2.36688033e-01 -2.36688033e-01
 -2.36688033e-01  6.76213625e+01  5.00073569e+02  2.52643712e+03
  1.24432080e+04  4.54564909e+04  1.32393126e+05]
E1 = -706.6187961413051  E_coul = 198.8990450002928
cycle= 3 E= -507.719751141012  delta_E= -2e-07  |g|= 0.000137  |ddm|= 0.000335
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000186463
diis-c [-8.40575185e-10  2.91090506e-05 -3.02532588e-02  1.03022415e+00]
  HOMO = -0.2366923713694  LUMO = 67.6212893318879
  mo_energy =
[-1.20301574e+02 -1.22630336e+01 -6.65719501e+00 -6.65719501e+00
 -6.65719501e+00 -1.16409350e+00 -2.36692371e-01 -2.36692371e-01
 -2.36692371e-01  6.76212893e+01  5.00073369e+02  2.52643686e+03
  1.24432077e+04  4.54564906e+04  1.32393125e+05]
E1 = -706.6187812417586  E_coul = 198.8990301006423
cycle= 4 E= -507.719751141116  delta_E= -1.04e-10  |g|= 6.41e-07  |ddm|= 6.98e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6187812417586  E_coul = 198.8990301006423
  HOMO = -0.236692335647899  LUMO = 67.6212898708636
  mo_energy =
[-1.20301573e+02 -1.22630334e+01 -6.65719467e+00 -6.65719467e+00
 -6.65719467e+00 -1.16409349e+00 -2.36692336e-01 -2.36692336e-01
 -2.36692336e-01  6.76212899e+01  5.00073371e+02  2.52643687e+03
  1.24432077e+04  4.54564906e+04  1.32393125e+05]
E1 = -706.6187813245953  E_coul = 198.89903018347897
Extra cycle  E= -507.719751141116  delta_E=    0  |g|= 1.23e-08  |ddm|= 3.89e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67546654e+04 7.34315281e+03 1.83773215e+04 1.40557780e+03
 3.37960632e+02 9.85922505e+01 3.31821056e+01 4.71003836e+00
 3.90998643e-01 8.59857785e+00 4.90961509e-01]
E = -507.71975114111626
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.6653714        1
[INPUT] 0    0    [1    /1   ]  7343.15281323        1
[INPUT] 0    0    [1    /1   ]  18377.3215224        1
[INPUT] 0    0    [1    /1   ]  1405.57779779        1
[INPUT] 0    0    [1    /1   ]  337.960632058        1
[INPUT] 0    0    [1    /1   ]  98.592250487         1
[INPUT] 0    0    [1    /1   ]  33.182105648         1
[INPUT] 0    0    [1    /1   ]  4.71003835871        1
[INPUT] 0    0    [1    /1   ]  0.390998642756       1
[INPUT] 1    0    [1    /1   ]  8.59857785192        1
[INPUT] 1    0    [1    /1   ]  0.490961508738       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.66537143794, 1.0]], [0, [7343.15281323458, 1.0]], [0, [18377.32152244706, 1.0]], [0, [1405.5777977925688, 1.0]], [0, [337.96063205802756, 1.0]], [0, [98.59225048696894, 1.0]], [0, [33.18210564804971, 1.0]], [0, [4.710038358709835, 1.0]], [0, [0.39099864275567536, 1.0]], [1, [8.598577851917097, 1.0]], [1, [0.4909615087382584, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.66537144]
bas 1, expnt(s) = [7343.15281323]
bas 2, expnt(s) = [18377.32152245]
bas 3, expnt(s) = [1405.57779779]
bas 4, expnt(s) = [337.96063206]
bas 5, expnt(s) = [98.59225049]
bas 6, expnt(s) = [33.18210565]
bas 7, expnt(s) = [4.71003836]
bas 8, expnt(s) = [0.39099864]
bas 9, expnt(s) = [8.59857785]
bas 10, expnt(s) = [0.49096151]
CPU time:       537.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546654e+04 6.70655328e+03 7.34315281e+03 2.00413489e+03
 1.83773215e+04 3.98773862e+03 1.40557780e+03 5.79970883e+02
 3.37960632e+02 1.99142800e+02 9.85922505e+01 7.90491327e+01
 3.31821056e+01 3.49295492e+01 4.71003836e+00 8.07761886e+00
 3.90998643e-01 1.24924167e+00 8.59857785e+00 4.29553911e+01
 4.90961509e-01 1.19892964e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320570174226464
cond(S) = 205.24423242230597
E1 = -689.1731704593625  E_coul = 184.90126382868985
init E= -504.271906630673
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680630877781945  LUMO = 66.3193914977637
  mo_energy =
[-1.21685480e+02 -1.32891830e+01 -7.62336649e+00 -7.62336649e+00
 -7.62336649e+00 -1.65025766e+00 -6.80630878e-01 -6.80630878e-01
 -6.80630878e-01  6.63193915e+01  4.98701726e+02  2.52515077e+03
  1.24420548e+04  4.54554167e+04  1.32392102e+05]
E1 = -706.6638594416484  E_coul = 198.94472597053078
cycle= 1 E= -507.719133471118  delta_E= -3.45  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.479537
diis-c [-0.22995549  1.        ]
  HOMO = -0.23642057381164  LUMO = 67.6256074572488
  mo_energy =
[-1.20289813e+02 -1.22612202e+01 -6.65440665e+00 -6.65440665e+00
 -6.65440665e+00 -1.16399276e+00 -2.36420574e-01 -2.36420574e-01
 -2.36420574e-01  6.76256075e+01  5.00086111e+02  2.52645563e+03
  1.24432305e+04  4.54565150e+04  1.32393150e+05]
E1 = -706.6195167558692  E_coul = 198.8997658147331
cycle= 2 E= -507.719750941136  delta_E= -0.000617  |g|= 0.00575  |ddm|= 0.021
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00622014
diis-c [-3.83780351e-05  1.16386274e-03  9.98836137e-01]
  HOMO = -0.23668803262929  LUMO = 67.621362540214
  mo_energy =
[-1.20301374e+02 -1.22630032e+01 -6.65714438e+00 -6.65714438e+00
 -6.65714438e+00 -1.16409215e+00 -2.36688033e-01 -2.36688033e-01
 -2.36688033e-01  6.76213625e+01  5.00073569e+02  2.52643712e+03
  1.24432080e+04  4.54564909e+04  1.32393126e+05]
E1 = -706.6187961413051  E_coul = 198.8990450002928
cycle= 3 E= -507.719751141012  delta_E= -2e-07  |g|= 0.000137  |ddm|= 0.000335
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000186463
diis-c [-8.40575185e-10  2.91090506e-05 -3.02532588e-02  1.03022415e+00]
  HOMO = -0.2366923713694  LUMO = 67.6212893318879
  mo_energy =
[-1.20301574e+02 -1.22630336e+01 -6.65719501e+00 -6.65719501e+00
 -6.65719501e+00 -1.16409350e+00 -2.36692371e-01 -2.36692371e-01
 -2.36692371e-01  6.76212893e+01  5.00073369e+02  2.52643686e+03
  1.24432077e+04  4.54564906e+04  1.32393125e+05]
E1 = -706.6187812417586  E_coul = 198.8990301006423
cycle= 4 E= -507.719751141116  delta_E= -1.04e-10  |g|= 6.41e-07  |ddm|= 6.98e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6187812417586  E_coul = 198.8990301006423
  HOMO = -0.236692335647899  LUMO = 67.6212898708636
  mo_energy =
[-1.20301573e+02 -1.22630334e+01 -6.65719467e+00 -6.65719467e+00
 -6.65719467e+00 -1.16409349e+00 -2.36692336e-01 -2.36692336e-01
 -2.36692336e-01  6.76212899e+01  5.00073371e+02  2.52643687e+03
  1.24432077e+04  4.54564906e+04  1.32393125e+05]
E1 = -706.6187813245953  E_coul = 198.89903018347897
Extra cycle  E= -507.719751141116  delta_E=    0  |g|= 1.23e-08  |ddm|= 3.89e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 205.24423242230597
E1 = -706.6187813245953  E_coul = 198.89903018347897
init E= -507.719751141116
    CPU time for initialize scf      2.14 sec, wall time      0.14 sec
  HOMO = -0.236692335167654  LUMO = 67.6212898787296
  mo_energy =
[-1.20301573e+02 -1.22630334e+01 -6.65719467e+00 -6.65719467e+00
 -6.65719467e+00 -1.16409349e+00 -2.36692335e-01 -2.36692335e-01
 -2.36692335e-01  6.76212899e+01  5.00073371e+02  2.52643687e+03
  1.24432077e+04  4.54564906e+04  1.32393125e+05]
E1 = -706.6187813260364  E_coul = 198.89903018492012
cycle= 1 E= -507.719751141116  delta_E=    0  |g|= 2.77e-10  |ddm|= 6.67e-10
    CPU time for cycle= 1      0.32 sec, wall time      0.02 sec
E1 = -706.6187813260364  E_coul = 198.89903018492012
  HOMO = -0.236692335160125  LUMO = 67.6212898788646
  mo_energy =
[-1.20301573e+02 -1.22630334e+01 -6.65719467e+00 -6.65719467e+00
 -6.65719467e+00 -1.16409349e+00 -2.36692335e-01 -2.36692335e-01
 -2.36692335e-01  6.76212899e+01  5.00073371e+02  2.52643687e+03
  1.24432077e+04  4.54564906e+04  1.32393125e+05]
E1 = -706.6187813260645  E_coul = 198.89903018494795
Extra cycle  E= -507.719751141117  delta_E= -3.41e-13  |g|= 8.86e-12  |ddm|= 1.31e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.30 sec
exp = [3.67546654e+04 7.34315281e+03 1.83773215e+04 1.40557780e+03
 3.37960632e+02 9.85922505e+01 3.31821056e+01 4.71003836e+00
 3.90998643e-01 8.59857785e+00 4.90961509e-01]
grad_E = [-1.83855923e-07  2.97991158e-06  3.28430353e-08  6.08124908e-05
 -5.08672476e-05  8.26901117e-05  2.37835986e-05  4.73525558e-05
 -6.10866695e-04 -2.56292333e-04 -1.81640586e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.678169         1
[INPUT] 0    0    [1    /1   ]  7342.91592424        1
[INPUT] 0    0    [1    /1   ]  18377.3185311        1
[INPUT] 0    0    [1    /1   ]  1402.21942323        1
[INPUT] 0    0    [1    /1   ]  335.699428785        1
[INPUT] 0    0    [1    /1   ]  97.9941636042        1
[INPUT] 0    0    [1    /1   ]  33.0596839908        1
[INPUT] 0    0    [1    /1   ]  4.70883504604        1
[INPUT] 0    0    [1    /1   ]  0.390975648498       1
[INPUT] 1    0    [1    /1   ]  8.59837849785        1
[INPUT] 1    0    [1    /1   ]  0.490958574084       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.67816903332, 1.0]], [0, [7342.915924239935, 1.0]], [0, [18377.31853106485, 1.0]], [0, [1402.219423232972, 1.0]], [0, [335.69942878483397, 1.0]], [0, [97.9941636041852, 1.0]], [0, [33.05968399075494, 1.0]], [0, [4.708835046035952, 1.0]], [0, [0.3909756484978998, 1.0]], [1, [8.598378497847131, 1.0]], [1, [0.4909585740838682, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.67816903]
bas 1, expnt(s) = [7342.91592424]
bas 2, expnt(s) = [18377.31853106]
bas 3, expnt(s) = [1402.21942323]
bas 4, expnt(s) = [335.69942878]
bas 5, expnt(s) = [97.9941636]
bas 6, expnt(s) = [33.05968399]
bas 7, expnt(s) = [4.70883505]
bas 8, expnt(s) = [0.39097565]
bas 9, expnt(s) = [8.5983785]
bas 10, expnt(s) = [0.49095857]
CPU time:       547.64
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546782e+04 6.70655503e+03 7.34291592e+03 2.00408640e+03
 1.83773185e+04 3.98773813e+03 1.40221942e+03 5.78931270e+02
 3.35699429e+02 1.98142654e+02 9.79941636e+01 7.86892094e+01
 3.30596840e+01 3.48328531e+01 4.70883505e+00 8.07607107e+00
 3.90975648e-01 1.24918657e+00 8.59837850e+00 4.29541462e+01
 4.90958574e-01 1.19892069e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320599541699252
cond(S) = 204.74866766377696
E1 = -689.1737807769107  E_coul = 184.8994205719597
init E= -504.274360204951
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680636690551824  LUMO = 65.8620421256468
  mo_energy =
[-1.21685631e+02 -1.32895376e+01 -7.62351974e+00 -7.62351974e+00
 -7.62351974e+00 -1.65025070e+00 -6.80636691e-01 -6.80636691e-01
 -6.80636691e-01  6.58620421e+01  4.95046675e+02  2.51293053e+03
  1.24217130e+04  4.54331445e+04  1.32369872e+05]
E1 = -706.6624099871342  E_coul = 198.94316810626248
cycle= 1 E= -507.719241880872  delta_E= -3.44  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479703
diis-c [-0.23011455  1.        ]
  HOMO = -0.236449308185955  LUMO = 67.1674124742224
  mo_energy =
[-1.20289728e+02 -1.22615829e+01 -6.65455150e+00 -6.65455150e+00
 -6.65455150e+00 -1.16403002e+00 -2.36449308e-01 -2.36449308e-01
 -2.36449308e-01  6.71674125e+01  4.96431302e+02  2.51423582e+03
  1.24228888e+04  4.54342428e+04  1.32370920e+05]
E1 = -706.6176577237939  E_coul = 198.89779226674764
cycle= 2 E= -507.719865457046  delta_E= -0.000624  |g|= 0.00578  |ddm|= 0.0212
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00624526
diis-c [-3.86766318e-05  1.19018778e-03  9.98809812e-01]
  HOMO = -0.2367198365326  LUMO = 67.1631465690755
  mo_energy =
[-1.20301379e+02 -1.22633857e+01 -6.65731844e+00 -6.65731844e+00
 -6.65731844e+00 -1.16413058e+00 -2.36719837e-01 -2.36719837e-01
 -2.36719837e-01  6.71631466e+01  4.96418694e+02  2.51421720e+03
  1.24228661e+04  4.54342186e+04  1.32370895e+05]
E1 = -706.6169276220169  E_coul = 198.89706196189715
cycle= 3 E= -507.71986566012  delta_E= -2.03e-07  |g|= 0.000138  |ddm|= 0.00034
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000187892
diis-c [-8.54821545e-10  2.91176784e-05 -3.03637909e-02  1.03033467e+00]
  HOMO = -0.236724247129634  LUMO = 67.1630725504564
  mo_energy =
[-1.20301581e+02 -1.22634165e+01 -6.65736986e+00 -6.65736986e+00
 -6.65736986e+00 -1.16413195e+00 -2.36724247e-01 -2.36724247e-01
 -2.36724247e-01  6.71630726e+01  4.96418492e+02  2.51421694e+03
  1.24228658e+04  4.54342183e+04  1.32370895e+05]
E1 = -706.6169124559215  E_coul = 198.89704679569513
cycle= 4 E= -507.719865660226  delta_E= -1.07e-10  |g|= 6.49e-07  |ddm|= 7.1e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6169124559215  E_coul = 198.89704679569513
  HOMO = -0.236724210711846  LUMO = 67.1630730952754
  mo_energy =
[-1.20301580e+02 -1.22634163e+01 -6.65736952e+00 -6.65736952e+00
 -6.65736952e+00 -1.16413194e+00 -2.36724211e-01 -2.36724211e-01
 -2.36724211e-01  6.71630731e+01  4.96418493e+02  2.51421694e+03
  1.24228658e+04  4.54342183e+04  1.32370895e+05]
E1 = -706.6169125403834  E_coul = 198.8970468801572
Extra cycle  E= -507.719865660226  delta_E= 1.14e-13  |g|= 1.25e-08  |ddm|= 3.97e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.20 sec
exp = [3.67546782e+04 7.34291592e+03 1.83773185e+04 1.40221942e+03
 3.35699429e+02 9.79941636e+01 3.30596840e+01 4.70883505e+00
 3.90975648e-01 8.59837850e+00 4.90958574e-01]
E = -507.7198656602262
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.678169         1
[INPUT] 0    0    [1    /1   ]  7342.91592424        1
[INPUT] 0    0    [1    /1   ]  18377.3185311        1
[INPUT] 0    0    [1    /1   ]  1402.21942323        1
[INPUT] 0    0    [1    /1   ]  335.699428785        1
[INPUT] 0    0    [1    /1   ]  97.9941636042        1
[INPUT] 0    0    [1    /1   ]  33.0596839908        1
[INPUT] 0    0    [1    /1   ]  4.70883504604        1
[INPUT] 0    0    [1    /1   ]  0.390975648498       1
[INPUT] 1    0    [1    /1   ]  8.59837849785        1
[INPUT] 1    0    [1    /1   ]  0.490958574084       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.67816903332, 1.0]], [0, [7342.915924239935, 1.0]], [0, [18377.31853106485, 1.0]], [0, [1402.219423232972, 1.0]], [0, [335.69942878483397, 1.0]], [0, [97.9941636041852, 1.0]], [0, [33.05968399075494, 1.0]], [0, [4.708835046035952, 1.0]], [0, [0.3909756484978998, 1.0]], [1, [8.598378497847131, 1.0]], [1, [0.4909585740838682, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.67816903]
bas 1, expnt(s) = [7342.91592424]
bas 2, expnt(s) = [18377.31853106]
bas 3, expnt(s) = [1402.21942323]
bas 4, expnt(s) = [335.69942878]
bas 5, expnt(s) = [97.9941636]
bas 6, expnt(s) = [33.05968399]
bas 7, expnt(s) = [4.70883505]
bas 8, expnt(s) = [0.39097565]
bas 9, expnt(s) = [8.5983785]
bas 10, expnt(s) = [0.49095857]
CPU time:       548.99
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67546782e+04 6.70655503e+03 7.34291592e+03 2.00408640e+03
 1.83773185e+04 3.98773813e+03 1.40221942e+03 5.78931270e+02
 3.35699429e+02 1.98142654e+02 9.79941636e+01 7.86892094e+01
 3.30596840e+01 3.48328531e+01 4.70883505e+00 8.07607107e+00
 3.90975648e-01 1.24918657e+00 8.59837850e+00 4.29541462e+01
 4.90958574e-01 1.19892069e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320599541699252
cond(S) = 204.74866766377696
E1 = -689.1737807769107  E_coul = 184.8994205719597
init E= -504.274360204951
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680636690551824  LUMO = 65.8620421256468
  mo_energy =
[-1.21685631e+02 -1.32895376e+01 -7.62351974e+00 -7.62351974e+00
 -7.62351974e+00 -1.65025070e+00 -6.80636691e-01 -6.80636691e-01
 -6.80636691e-01  6.58620421e+01  4.95046675e+02  2.51293053e+03
  1.24217130e+04  4.54331445e+04  1.32369872e+05]
E1 = -706.6624099871342  E_coul = 198.94316810626248
cycle= 1 E= -507.719241880872  delta_E= -3.44  |g|= 0.335  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.479703
diis-c [-0.23011455  1.        ]
  HOMO = -0.236449308185955  LUMO = 67.1674124742224
  mo_energy =
[-1.20289728e+02 -1.22615829e+01 -6.65455150e+00 -6.65455150e+00
 -6.65455150e+00 -1.16403002e+00 -2.36449308e-01 -2.36449308e-01
 -2.36449308e-01  6.71674125e+01  4.96431302e+02  2.51423582e+03
  1.24228888e+04  4.54342428e+04  1.32370920e+05]
E1 = -706.6176577237939  E_coul = 198.89779226674764
cycle= 2 E= -507.719865457046  delta_E= -0.000624  |g|= 0.00578  |ddm|= 0.0212
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00624526
diis-c [-3.86766318e-05  1.19018778e-03  9.98809812e-01]
  HOMO = -0.2367198365326  LUMO = 67.1631465690755
  mo_energy =
[-1.20301379e+02 -1.22633857e+01 -6.65731844e+00 -6.65731844e+00
 -6.65731844e+00 -1.16413058e+00 -2.36719837e-01 -2.36719837e-01
 -2.36719837e-01  6.71631466e+01  4.96418694e+02  2.51421720e+03
  1.24228661e+04  4.54342186e+04  1.32370895e+05]
E1 = -706.6169276220169  E_coul = 198.89706196189715
cycle= 3 E= -507.71986566012  delta_E= -2.03e-07  |g|= 0.000138  |ddm|= 0.00034
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000187892
diis-c [-8.54821545e-10  2.91176784e-05 -3.03637909e-02  1.03033467e+00]
  HOMO = -0.236724247129634  LUMO = 67.1630725504564
  mo_energy =
[-1.20301581e+02 -1.22634165e+01 -6.65736986e+00 -6.65736986e+00
 -6.65736986e+00 -1.16413195e+00 -2.36724247e-01 -2.36724247e-01
 -2.36724247e-01  6.71630726e+01  4.96418492e+02  2.51421694e+03
  1.24228658e+04  4.54342183e+04  1.32370895e+05]
E1 = -706.6169124559215  E_coul = 198.89704679569513
cycle= 4 E= -507.719865660226  delta_E= -1.07e-10  |g|= 6.49e-07  |ddm|= 7.1e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6169124559215  E_coul = 198.89704679569513
  HOMO = -0.236724210711846  LUMO = 67.1630730952754
  mo_energy =
[-1.20301580e+02 -1.22634163e+01 -6.65736952e+00 -6.65736952e+00
 -6.65736952e+00 -1.16413194e+00 -2.36724211e-01 -2.36724211e-01
 -2.36724211e-01  6.71630731e+01  4.96418493e+02  2.51421694e+03
  1.24228658e+04  4.54342183e+04  1.32370895e+05]
E1 = -706.6169125403834  E_coul = 198.8970468801572
Extra cycle  E= -507.719865660226  delta_E= 1.14e-13  |g|= 1.25e-08  |ddm|= 3.97e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 204.74866766377696
E1 = -706.6169125403834  E_coul = 198.8970468801572
init E= -507.719865660226
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236724210220473  LUMO = 67.1630731032638
  mo_energy =
[-1.20301580e+02 -1.22634163e+01 -6.65736951e+00 -6.65736951e+00
 -6.65736951e+00 -1.16413194e+00 -2.36724210e-01 -2.36724210e-01
 -2.36724210e-01  6.71630731e+01  4.96418493e+02  2.51421694e+03
  1.24228658e+04  4.54342183e+04  1.32370895e+05]
E1 = -706.6169125418575  E_coul = 198.89704688163079
cycle= 1 E= -507.719865660227  delta_E= -4.55e-13  |g|= 2.77e-10  |ddm|= 6.82e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6169125418575  E_coul = 198.89704688163079
  HOMO = -0.236724210212748  LUMO = 67.1630731033988
  mo_energy =
[-1.20301580e+02 -1.22634163e+01 -6.65736951e+00 -6.65736951e+00
 -6.65736951e+00 -1.16413194e+00 -2.36724210e-01 -2.36724210e-01
 -2.36724210e-01  6.71630731e+01  4.96418493e+02  2.51421694e+03
  1.24228658e+04  4.54342183e+04  1.32370895e+05]
E1 = -706.6169125418868  E_coul = 198.89704688166015
Extra cycle  E= -507.719865660227  delta_E=    0  |g|= 1.36e-11  |ddm|= 1.35e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67546782e+04 7.34291592e+03 1.83773185e+04 1.40221942e+03
 3.35699429e+02 9.79941636e+01 3.30596840e+01 4.70883505e+00
 3.90975648e-01 8.59837850e+00 4.90958574e-01]
grad_E = [-1.85750361e-07  2.88975432e-06  3.05984431e-08  6.87781485e-05
 -1.00531437e-04  1.29263857e-04  3.75370434e-05  8.46733378e-05
 -9.94405800e-04 -4.15282036e-04 -2.94338491e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:50 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.7125859        1
[INPUT] 0    0    [1    /1   ]  7342.29406588        1
[INPUT] 0    0    [1    /1   ]  18377.3108439        1
[INPUT] 0    0    [1    /1   ]  1392.84127297        1
[INPUT] 0    0    [1    /1   ]  331.335098469        1
[INPUT] 0    0    [1    /1   ]  96.8651171213        1
[INPUT] 0    0    [1    /1   ]  32.823612859         1
[INPUT] 0    0    [1    /1   ]  4.70649072898        1
[INPUT] 0    0    [1    /1   ]  0.390939156458       1
[INPUT] 1    0    [1    /1   ]  8.59806673019        1
[INPUT] 1    0    [1    /1   ]  0.49095541347        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.71258592066, 1.0]], [0, [7342.294065882264, 1.0]], [0, [18377.310843855816, 1.0]], [0, [1392.8412729677723, 1.0]], [0, [331.3350984693488, 1.0]], [0, [96.8651171212924, 1.0]], [0, [32.8236128590198, 1.0]], [0, [4.70649072897646, 1.0]], [0, [0.39093915645825583, 1.0]], [1, [8.598066730189554, 1.0]], [1, [0.4909554134698225, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.71258592]
bas 1, expnt(s) = [7342.29406588]
bas 2, expnt(s) = [18377.31084386]
bas 3, expnt(s) = [1392.84127297]
bas 4, expnt(s) = [331.33509847]
bas 5, expnt(s) = [96.86511712]
bas 6, expnt(s) = [32.82361286]
bas 7, expnt(s) = [4.70649073]
bas 8, expnt(s) = [0.39093916]
bas 9, expnt(s) = [8.59806673]
bas 10, expnt(s) = [0.49095541]
CPU time:       559.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67547126e+04 6.70655974e+03 7.34229407e+03 2.00395911e+03
 1.83773108e+04 3.98773688e+03 1.39284127e+03 5.76024884e+02
 3.31335098e+02 1.96207501e+02 9.68651171e+01 7.80082581e+01
 3.28236129e+01 3.46461364e+01 4.70649073e+00 8.07305535e+00
 3.90939156e-01 1.24909912e+00 8.59806673e+00 4.29521994e+01
 4.90955413e-01 1.19891104e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3206519479163
cond(S) = 203.65626451514376
E1 = -689.1746477055707  E_coul = 184.89638457796426
init E= -504.278263127606
    CPU time for initialize scf      0.36 sec, wall time      0.06 sec
  HOMO = -0.68064215776279  LUMO = 64.9897658232114
  mo_energy =
[-1.21685865e+02 -1.32901881e+01 -7.62377856e+00 -7.62377856e+00
 -7.62377856e+00 -1.65023400e+00 -6.80642158e-01 -6.80642158e-01
 -6.80642158e-01  6.49897658e+01  4.88046821e+02  2.48672114e+03
  1.23739221e+04  4.53797036e+04  1.32316248e+05]
E1 = -706.6603666170074  E_coul = 198.94084644129197
cycle= 1 E= -507.719520175715  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.480044
diis-c [-0.23044186  1.        ]
  HOMO = -0.236494394376415  LUMO = 66.2935091354295
  mo_energy =
[-1.20289489e+02 -1.22622391e+01 -6.65478189e+00 -6.65478189e+00
 -6.65478189e+00 -1.16409265e+00 -2.36494394e-01 -2.36494394e-01
 -2.36494394e-01  6.62935091e+01  4.89431921e+02  2.48802743e+03
  1.23750982e+04  4.53808021e+04  1.32317297e+05]
E1 = -706.6148154778541  E_coul = 198.89465979603833
cycle= 2 E= -507.720155681816  delta_E= -0.000636  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629518
diis-c [-3.92747218e-05  1.23907559e-03  9.98760924e-01]
  HOMO = -0.236770935691639  LUMO = 66.2892026038835
  mo_energy =
[-1.20301313e+02 -1.22640804e+01 -6.65760592e+00 -6.65760592e+00
 -6.65760592e+00 -1.16419551e+00 -2.36770936e-01 -2.36770936e-01
 -2.36770936e-01  6.62892026e+01  4.89419186e+02  2.48800859e+03
  1.23750752e+04  4.53807775e+04  1.32317272e+05]
E1 = -706.6140667905075  E_coul = 198.89391089932712
cycle= 3 E= -507.72015589118  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000348
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190688
diis-c [-8.83210480e-10  2.91282208e-05 -3.05745033e-02  1.03054538e+00]
  HOMO = -0.236775487349399  LUMO = 66.2891270171755
  mo_energy =
[-1.20301521e+02 -1.22641122e+01 -6.65765887e+00 -6.65765887e+00
 -6.65765887e+00 -1.16419693e+00 -2.36775487e-01 -2.36775487e-01
 -2.36775487e-01  6.62891270e+01  4.89418980e+02  2.48800833e+03
  1.23750749e+04  4.53807772e+04  1.32317272e+05]
E1 = -706.6140511008541  E_coul = 198.89389520956217
cycle= 4 E= -507.720155891292  delta_E= -1.12e-10  |g|= 6.64e-07  |ddm|= 7.35e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6140511008541  E_coul = 198.89389520956217
  HOMO = -0.236775449554153  LUMO = 66.2891275734044
  mo_energy =
[-1.20301520e+02 -1.22641120e+01 -6.65765852e+00 -6.65765852e+00
 -6.65765852e+00 -1.16419692e+00 -2.36775450e-01 -2.36775450e-01
 -2.36775450e-01  6.62891276e+01  4.89418981e+02  2.48800833e+03
  1.23750749e+04  4.53807772e+04  1.32317272e+05]
E1 = -706.6140511885286  E_coul = 198.89389529723687
Extra cycle  E= -507.720155891292  delta_E= 2.27e-13  |g|= 1.28e-08  |ddm|= 4.14e-08
    CPU time for scf_cycle      1.01 sec, wall time      0.19 sec
exp = [3.67547126e+04 7.34229407e+03 1.83773108e+04 1.39284127e+03
 3.31335098e+02 9.68651171e+01 3.28236129e+01 4.70649073e+00
 3.90939156e-01 8.59806673e+00 4.90955413e-01]
E = -507.7201558912917
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.7125859        1
[INPUT] 0    0    [1    /1   ]  7342.29406588        1
[INPUT] 0    0    [1    /1   ]  18377.3108439        1
[INPUT] 0    0    [1    /1   ]  1392.84127297        1
[INPUT] 0    0    [1    /1   ]  331.335098469        1
[INPUT] 0    0    [1    /1   ]  96.8651171213        1
[INPUT] 0    0    [1    /1   ]  32.823612859         1
[INPUT] 0    0    [1    /1   ]  4.70649072898        1
[INPUT] 0    0    [1    /1   ]  0.390939156458       1
[INPUT] 1    0    [1    /1   ]  8.59806673019        1
[INPUT] 1    0    [1    /1   ]  0.49095541347        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.71258592066, 1.0]], [0, [7342.294065882264, 1.0]], [0, [18377.310843855816, 1.0]], [0, [1392.8412729677723, 1.0]], [0, [331.3350984693488, 1.0]], [0, [96.8651171212924, 1.0]], [0, [32.8236128590198, 1.0]], [0, [4.70649072897646, 1.0]], [0, [0.39093915645825583, 1.0]], [1, [8.598066730189554, 1.0]], [1, [0.4909554134698225, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.71258592]
bas 1, expnt(s) = [7342.29406588]
bas 2, expnt(s) = [18377.31084386]
bas 3, expnt(s) = [1392.84127297]
bas 4, expnt(s) = [331.33509847]
bas 5, expnt(s) = [96.86511712]
bas 6, expnt(s) = [32.82361286]
bas 7, expnt(s) = [4.70649073]
bas 8, expnt(s) = [0.39093916]
bas 9, expnt(s) = [8.59806673]
bas 10, expnt(s) = [0.49095541]
CPU time:       560.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67547126e+04 6.70655974e+03 7.34229407e+03 2.00395911e+03
 1.83773108e+04 3.98773688e+03 1.39284127e+03 5.76024884e+02
 3.31335098e+02 1.96207501e+02 9.68651171e+01 7.80082581e+01
 3.28236129e+01 3.46461364e+01 4.70649073e+00 8.07305535e+00
 3.90939156e-01 1.24909912e+00 8.59806673e+00 4.29521994e+01
 4.90955413e-01 1.19891104e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.3206519479163
cond(S) = 203.65626451514376
E1 = -689.1746477055707  E_coul = 184.89638457796426
init E= -504.278263127606
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.68064215776279  LUMO = 64.9897658232114
  mo_energy =
[-1.21685865e+02 -1.32901881e+01 -7.62377856e+00 -7.62377856e+00
 -7.62377856e+00 -1.65023400e+00 -6.80642158e-01 -6.80642158e-01
 -6.80642158e-01  6.49897658e+01  4.88046821e+02  2.48672114e+03
  1.23739221e+04  4.53797036e+04  1.32316248e+05]
E1 = -706.6603666170074  E_coul = 198.94084644129197
cycle= 1 E= -507.719520175715  delta_E= -3.44  |g|= 0.336  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.480044
diis-c [-0.23044186  1.        ]
  HOMO = -0.236494394376415  LUMO = 66.2935091354295
  mo_energy =
[-1.20289489e+02 -1.22622391e+01 -6.65478189e+00 -6.65478189e+00
 -6.65478189e+00 -1.16409265e+00 -2.36494394e-01 -2.36494394e-01
 -2.36494394e-01  6.62935091e+01  4.89431921e+02  2.48802743e+03
  1.23750982e+04  4.53808021e+04  1.32317297e+05]
E1 = -706.6148154778541  E_coul = 198.89465979603833
cycle= 2 E= -507.720155681816  delta_E= -0.000636  |g|= 0.00583  |ddm|= 0.0216
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00629518
diis-c [-3.92747218e-05  1.23907559e-03  9.98760924e-01]
  HOMO = -0.236770935691639  LUMO = 66.2892026038835
  mo_energy =
[-1.20301313e+02 -1.22640804e+01 -6.65760592e+00 -6.65760592e+00
 -6.65760592e+00 -1.16419551e+00 -2.36770936e-01 -2.36770936e-01
 -2.36770936e-01  6.62892026e+01  4.89419186e+02  2.48800859e+03
  1.23750752e+04  4.53807775e+04  1.32317272e+05]
E1 = -706.6140667905075  E_coul = 198.89391089932712
cycle= 3 E= -507.72015589118  delta_E= -2.09e-07  |g|= 0.000141  |ddm|= 0.000348
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000190688
diis-c [-8.83210480e-10  2.91282208e-05 -3.05745033e-02  1.03054538e+00]
  HOMO = -0.236775487349399  LUMO = 66.2891270171755
  mo_energy =
[-1.20301521e+02 -1.22641122e+01 -6.65765887e+00 -6.65765887e+00
 -6.65765887e+00 -1.16419693e+00 -2.36775487e-01 -2.36775487e-01
 -2.36775487e-01  6.62891270e+01  4.89418980e+02  2.48800833e+03
  1.23750749e+04  4.53807772e+04  1.32317272e+05]
E1 = -706.6140511008541  E_coul = 198.89389520956217
cycle= 4 E= -507.720155891292  delta_E= -1.12e-10  |g|= 6.64e-07  |ddm|= 7.35e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6140511008541  E_coul = 198.89389520956217
  HOMO = -0.236775449554153  LUMO = 66.2891275734044
  mo_energy =
[-1.20301520e+02 -1.22641120e+01 -6.65765852e+00 -6.65765852e+00
 -6.65765852e+00 -1.16419692e+00 -2.36775450e-01 -2.36775450e-01
 -2.36775450e-01  6.62891276e+01  4.89418981e+02  2.48800833e+03
  1.23750749e+04  4.53807772e+04  1.32317272e+05]
E1 = -706.6140511885286  E_coul = 198.89389529723687
Extra cycle  E= -507.720155891292  delta_E= 2.27e-13  |g|= 1.28e-08  |ddm|= 4.14e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 203.65626451514376
E1 = -706.6140511885286  E_coul = 198.89389529723687
init E= -507.720155891292
    CPU time for initialize scf      2.10 sec, wall time      0.13 sec
  HOMO = -0.236775449040624  LUMO = 66.2891275816263
  mo_energy =
[-1.20301519e+02 -1.22641120e+01 -6.65765851e+00 -6.65765851e+00
 -6.65765851e+00 -1.16419692e+00 -2.36775449e-01 -2.36775449e-01
 -2.36775449e-01  6.62891276e+01  4.89418981e+02  2.48800833e+03
  1.23750749e+04  4.53807772e+04  1.32317272e+05]
E1 = -706.6140511900679  E_coul = 198.89389529877636
cycle= 1 E= -507.720155891292  delta_E= 1.14e-13  |g|= 2.88e-10  |ddm|= 7.14e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6140511900679  E_coul = 198.89389529877636
  HOMO = -0.23677544903251  LUMO = 66.2891275817672
  mo_energy =
[-1.20301519e+02 -1.22641120e+01 -6.65765851e+00 -6.65765851e+00
 -6.65765851e+00 -1.16419692e+00 -2.36775449e-01 -2.36775449e-01
 -2.36775449e-01  6.62891276e+01  4.89418981e+02  2.48800833e+03
  1.23750749e+04  4.53807772e+04  1.32317272e+05]
E1 = -706.6140511900983  E_coul = 198.8938952988067
Extra cycle  E= -507.720155891292  delta_E=    0  |g|= 1.94e-11  |ddm|= 1.42e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.29 sec
exp = [3.67547126e+04 7.34229407e+03 1.83773108e+04 1.39284127e+03
 3.31335098e+02 9.68651171e+01 3.28236129e+01 4.70649073e+00
 3.90939156e-01 8.59806673e+00 4.90955413e-01]
grad_E = [-1.84960108e-07  2.87559026e-06  3.12595975e-08  8.04503744e-05
 -1.80059209e-04  2.03762760e-04  6.17052464e-05  1.72111173e-04
 -1.59981453e-03 -6.61423738e-04 -4.67491108e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:58 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.798346         1
[INPUT] 0    0    [1    /1   ]  7340.76702466        1
[INPUT] 0    0    [1    /1   ]  18377.2922179        1
[INPUT] 0    0    [1    /1   ]  1368.96018424        1
[INPUT] 0    0    [1    /1   ]  323.003019166        1
[INPUT] 0    0    [1    /1   ]  94.7515567126        1
[INPUT] 0    0    [1    /1   ]  32.3686750153        1
[INPUT] 0    0    [1    /1   ]  4.70187122569        1
[INPUT] 0    0    [1    /1   ]  0.390886027156       1
[INPUT] 1    0    [1    /1   ]  8.59761509084        1
[INPUT] 1    0    [1    /1   ]  0.490954546411       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.79834602392, 1.0]], [0, [7340.767024657473, 1.0]], [0, [18377.29221786634, 1.0]], [0, [1368.9601842444442, 1.0]], [0, [323.0030191657103, 1.0]], [0, [94.751556712554, 1.0]], [0, [32.368675015254404, 1.0]], [0, [4.701871225694162, 1.0]], [0, [0.3908860271563299, 1.0]], [1, [8.597615090836223, 1.0]], [1, [0.4909545464110023, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.79834602]
bas 1, expnt(s) = [7340.76702466]
bas 2, expnt(s) = [18377.29221787]
bas 3, expnt(s) = [1368.96018424]
bas 4, expnt(s) = [323.00301917]
bas 5, expnt(s) = [94.75155671]
bas 6, expnt(s) = [32.36867502]
bas 7, expnt(s) = [4.70187123]
bas 8, expnt(s) = [0.39088603]
bas 9, expnt(s) = [8.59761509]
bas 10, expnt(s) = [0.49095455]
CPU time:       570.59
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67547983e+04 6.70657148e+03 7.34076702e+03 2.00364651e+03
 1.83772922e+04 3.98773385e+03 1.36896018e+03 5.68601678e+02
 3.23003019e+02 1.92495225e+02 9.47515567e+01 7.67281611e+01
 3.23686750e+01 3.42853602e+01 4.70187123e+00 8.06711173e+00
 3.90886027e-01 1.24897180e+00 8.59761509e+00 4.29493791e+01
 4.90954546e-01 1.19890839e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320744328425636
cond(S) = 201.30733589678712
E1 = -689.1756907553203  E_coul = 184.89164109366146
init E= -504.284049661659
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680640027683363  LUMO = 63.3396198436548
  mo_energy =
[-1.21686163e+02 -1.32913973e+01 -7.62419800e+00 -7.62419800e+00
 -7.62419800e+00 -1.65019684e+00 -6.80640028e-01 -6.80640028e-01
 -6.80640028e-01  6.33396198e+01  4.74773928e+02  2.43118371e+03
  1.22648966e+04  4.52560938e+04  1.32191808e+05]
E1 = -706.6581714368357  E_coul = 198.93797747724204
cycle= 1 E= -507.720193959594  delta_E= -3.44  |g|= 0.338  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.480751
diis-c [-0.23112159  1.        ]
  HOMO = -0.236558430389252  LUMO = 64.6402201921346
  mo_energy =
[-1.20288801e+02 -1.22634296e+01 -6.65511036e+00 -6.65511036e+00
 -6.65511036e+00 -1.16419546e+00 -2.36558430e-01 -2.36558430e-01
 -2.36558430e-01  6.46402202e+01  4.76159982e+02  2.43249227e+03
  1.22660735e+04  4.52571927e+04  1.32192857e+05]
E1 = -706.6110454887036  E_coul = 198.89019244423193
cycle= 2 E= -507.720853044472  delta_E= -0.000659  |g|= 0.00594  |ddm|= 0.0225
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.0063946
diis-c [-4.04818401e-05  1.32874861e-03  9.98671251e-01]
  HOMO = -0.236846926750404  LUMO = 64.6358349059255
  mo_energy =
[-1.20300965e+02 -1.22653475e+01 -6.65804736e+00 -6.65804736e+00
 -6.65804736e+00 -1.16430293e+00 -2.36846927e-01 -2.36846927e-01
 -2.36846927e-01  6.46358349e+01  4.76147002e+02  2.43247304e+03
  1.22660500e+04  4.52571676e+04  1.32192832e+05]
E1 = -706.6102598278302  E_coul = 198.88940656137802
cycle= 3 E= -507.720853266452  delta_E= -2.22e-07  |g|= 0.000145  |ddm|= 0.000366
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000196192
diis-c [-9.40927029e-10  2.91438708e-05 -3.09749999e-02  1.03094586e+00]
  HOMO = -0.236851760777815  LUMO = 64.6357562644911
  mo_energy =
[-1.20301184e+02 -1.22653813e+01 -6.65810336e+00 -6.65810336e+00
 -6.65810336e+00 -1.16430444e+00 -2.36851761e-01 -2.36851761e-01
 -2.36851761e-01  6.46357563e+01  4.76146786e+02  2.43247276e+03
  1.22660497e+04  4.52571673e+04  1.32192831e+05]
E1 = -706.6102430893577  E_coul = 198.88938982278418
cycle= 4 E= -507.720853266573  delta_E= -1.21e-10  |g|= 6.94e-07  |ddm|= 7.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6102430893577  E_coul = 198.88938982278418
  HOMO = -0.236851720194167  LUMO = 64.6357568431714
  mo_energy =
[-1.20301182e+02 -1.22653810e+01 -6.65810299e+00 -6.65810299e+00
 -6.65810299e+00 -1.16430443e+00 -2.36851720e-01 -2.36851720e-01
 -2.36851720e-01  6.46357568e+01  4.76146788e+02  2.43247276e+03
  1.22660497e+04  4.52571673e+04  1.32192831e+05]
E1 = -706.610243183523  E_coul = 198.88938991694954
Extra cycle  E= -507.720853266573  delta_E=    0  |g|= 1.35e-08  |ddm|= 4.47e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67547983e+04 7.34076702e+03 1.83772922e+04 1.36896018e+03
 3.23003019e+02 9.47515567e+01 3.23686750e+01 4.70187123e+00
 3.90886027e-01 8.59761509e+00 4.90954546e-01]
E = -507.7208532665735
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:33:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.798346         1
[INPUT] 0    0    [1    /1   ]  7340.76702466        1
[INPUT] 0    0    [1    /1   ]  18377.2922179        1
[INPUT] 0    0    [1    /1   ]  1368.96018424        1
[INPUT] 0    0    [1    /1   ]  323.003019166        1
[INPUT] 0    0    [1    /1   ]  94.7515567126        1
[INPUT] 0    0    [1    /1   ]  32.3686750153        1
[INPUT] 0    0    [1    /1   ]  4.70187122569        1
[INPUT] 0    0    [1    /1   ]  0.390886027156       1
[INPUT] 1    0    [1    /1   ]  8.59761509084        1
[INPUT] 1    0    [1    /1   ]  0.490954546411       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.79834602392, 1.0]], [0, [7340.767024657473, 1.0]], [0, [18377.29221786634, 1.0]], [0, [1368.9601842444442, 1.0]], [0, [323.0030191657103, 1.0]], [0, [94.751556712554, 1.0]], [0, [32.368675015254404, 1.0]], [0, [4.701871225694162, 1.0]], [0, [0.3908860271563299, 1.0]], [1, [8.597615090836223, 1.0]], [1, [0.4909545464110023, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.79834602]
bas 1, expnt(s) = [7340.76702466]
bas 2, expnt(s) = [18377.29221787]
bas 3, expnt(s) = [1368.96018424]
bas 4, expnt(s) = [323.00301917]
bas 5, expnt(s) = [94.75155671]
bas 6, expnt(s) = [32.36867502]
bas 7, expnt(s) = [4.70187123]
bas 8, expnt(s) = [0.39088603]
bas 9, expnt(s) = [8.59761509]
bas 10, expnt(s) = [0.49095455]
CPU time:       571.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67547983e+04 6.70657148e+03 7.34076702e+03 2.00364651e+03
 1.83772922e+04 3.98773385e+03 1.36896018e+03 5.68601678e+02
 3.23003019e+02 1.92495225e+02 9.47515567e+01 7.67281611e+01
 3.23686750e+01 3.42853602e+01 4.70187123e+00 8.06711173e+00
 3.90886027e-01 1.24897180e+00 8.59761509e+00 4.29493791e+01
 4.90954546e-01 1.19890839e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320744328425636
cond(S) = 201.30733589678712
E1 = -689.1756907553203  E_coul = 184.89164109366146
init E= -504.284049661659
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680640027683363  LUMO = 63.3396198436548
  mo_energy =
[-1.21686163e+02 -1.32913973e+01 -7.62419800e+00 -7.62419800e+00
 -7.62419800e+00 -1.65019684e+00 -6.80640028e-01 -6.80640028e-01
 -6.80640028e-01  6.33396198e+01  4.74773928e+02  2.43118371e+03
  1.22648966e+04  4.52560938e+04  1.32191808e+05]
E1 = -706.6581714368357  E_coul = 198.93797747724204
cycle= 1 E= -507.720193959594  delta_E= -3.44  |g|= 0.338  |ddm|= 0.301
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.480751
diis-c [-0.23112159  1.        ]
  HOMO = -0.236558430389252  LUMO = 64.6402201921346
  mo_energy =
[-1.20288801e+02 -1.22634296e+01 -6.65511036e+00 -6.65511036e+00
 -6.65511036e+00 -1.16419546e+00 -2.36558430e-01 -2.36558430e-01
 -2.36558430e-01  6.46402202e+01  4.76159982e+02  2.43249227e+03
  1.22660735e+04  4.52571927e+04  1.32192857e+05]
E1 = -706.6110454887036  E_coul = 198.89019244423193
cycle= 2 E= -507.720853044472  delta_E= -0.000659  |g|= 0.00594  |ddm|= 0.0225
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.0063946
diis-c [-4.04818401e-05  1.32874861e-03  9.98671251e-01]
  HOMO = -0.236846926750404  LUMO = 64.6358349059255
  mo_energy =
[-1.20300965e+02 -1.22653475e+01 -6.65804736e+00 -6.65804736e+00
 -6.65804736e+00 -1.16430293e+00 -2.36846927e-01 -2.36846927e-01
 -2.36846927e-01  6.46358349e+01  4.76147002e+02  2.43247304e+03
  1.22660500e+04  4.52571676e+04  1.32192832e+05]
E1 = -706.6102598278302  E_coul = 198.88940656137802
cycle= 3 E= -507.720853266452  delta_E= -2.22e-07  |g|= 0.000145  |ddm|= 0.000366
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000196192
diis-c [-9.40927029e-10  2.91438708e-05 -3.09749999e-02  1.03094586e+00]
  HOMO = -0.236851760777815  LUMO = 64.6357562644911
  mo_energy =
[-1.20301184e+02 -1.22653813e+01 -6.65810336e+00 -6.65810336e+00
 -6.65810336e+00 -1.16430444e+00 -2.36851761e-01 -2.36851761e-01
 -2.36851761e-01  6.46357563e+01  4.76146786e+02  2.43247276e+03
  1.22660497e+04  4.52571673e+04  1.32192831e+05]
E1 = -706.6102430893577  E_coul = 198.88938982278418
cycle= 4 E= -507.720853266573  delta_E= -1.21e-10  |g|= 6.94e-07  |ddm|= 7.83e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6102430893577  E_coul = 198.88938982278418
  HOMO = -0.236851720194167  LUMO = 64.6357568431714
  mo_energy =
[-1.20301182e+02 -1.22653810e+01 -6.65810299e+00 -6.65810299e+00
 -6.65810299e+00 -1.16430443e+00 -2.36851720e-01 -2.36851720e-01
 -2.36851720e-01  6.46357568e+01  4.76146788e+02  2.43247276e+03
  1.22660497e+04  4.52571673e+04  1.32192831e+05]
E1 = -706.610243183523  E_coul = 198.88938991694954
Extra cycle  E= -507.720853266573  delta_E=    0  |g|= 1.35e-08  |ddm|= 4.47e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 201.30733589678712
E1 = -706.610243183523  E_coul = 198.88938991694954
init E= -507.720853266573
    CPU time for initialize scf      2.08 sec, wall time      0.13 sec
  HOMO = -0.236851719635276  LUMO = 64.6357568518581
  mo_energy =
[-1.20301182e+02 -1.22653810e+01 -6.65810298e+00 -6.65810298e+00
 -6.65810298e+00 -1.16430442e+00 -2.36851720e-01 -2.36851720e-01
 -2.36851720e-01  6.46357569e+01  4.76146788e+02  2.43247276e+03
  1.22660497e+04  4.52571673e+04  1.32192831e+05]
E1 = -706.6102431851967  E_coul = 198.88938991862307
cycle= 1 E= -507.720853266574  delta_E= -1.71e-13  |g|= 3.05e-10  |ddm|= 7.77e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6102431851967  E_coul = 198.88938991862307
  HOMO = -0.23685171962636  LUMO = 64.6357568520093
  mo_energy =
[-1.20301182e+02 -1.22653810e+01 -6.65810298e+00 -6.65810298e+00
 -6.65810298e+00 -1.16430442e+00 -2.36851720e-01 -2.36851720e-01
 -2.36851720e-01  6.46357569e+01  4.76146788e+02  2.43247276e+03
  1.22660497e+04  4.52571673e+04  1.32192831e+05]
E1 = -706.6102431852299  E_coul = 198.88938991865646
Extra cycle  E= -507.720853266573  delta_E= 1.71e-13  |g|= 1.62e-11  |ddm|= 1.56e-11
    CPU time for scf_cycle      2.59 sec, wall time      0.29 sec
exp = [3.67547983e+04 7.34076702e+03 1.83772922e+04 1.36896018e+03
 3.23003019e+02 9.47515567e+01 3.23686750e+01 4.70187123e+00
 3.90886027e-01 8.59761509e+00 4.90954546e-01]
grad_E = [-1.73574601e-07  3.20530072e-06  4.40494904e-08  9.49887619e-05
 -2.98727531e-04  3.13805516e-04  1.12631334e-04  4.24841897e-04
 -2.49518789e-03 -1.00554070e-03 -7.03059868e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.9835447        1
[INPUT] 0    0    [1    /1   ]  7337.50167725        1
[INPUT] 0    0    [1    /1   ]  18377.2527541        1
[INPUT] 0    0    [1    /1   ]  1316.6531555         1
[INPUT] 0    0    [1    /1   ]  308.670592659        1
[INPUT] 0    0    [1    /1   ]  91.1541759467        1
[INPUT] 0    0    [1    /1   ]  31.5583629468        1
[INPUT] 0    0    [1    /1   ]  4.69325687478        1
[INPUT] 0    0    [1    /1   ]  0.390829309868       1
[INPUT] 1    0    [1    /1   ]  8.59710259448        1
[INPUT] 1    0    [1    /1   ]  0.49096358025        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.98354473131, 1.0]], [0, [7337.50167725223, 1.0]], [0, [18377.252754055564, 1.0]], [0, [1316.6531554989408, 1.0]], [0, [308.67059265855937, 1.0]], [0, [91.15417594674169, 1.0]], [0, [31.55836294683868, 1.0]], [0, [4.693256874780712, 1.0]], [0, [0.3908293098677273, 1.0]], [1, [8.597102594484976, 1.0]], [1, [0.490963580250188, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.98354473]
bas 1, expnt(s) = [7337.50167725]
bas 2, expnt(s) = [18377.25275406]
bas 3, expnt(s) = [1316.6531555]
bas 4, expnt(s) = [308.67059266]
bas 5, expnt(s) = [91.15417595]
bas 6, expnt(s) = [31.55836295]
bas 7, expnt(s) = [4.69325687]
bas 8, expnt(s) = [0.39082931]
bas 9, expnt(s) = [8.59710259]
bas 10, expnt(s) = [0.49096358]
CPU time:       582.02
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67549835e+04 6.70659682e+03 7.33750168e+03 2.00297802e+03
 1.83772528e+04 3.98772743e+03 1.31665316e+03 5.52228177e+02
 3.08670593e+02 1.86052910e+02 9.11541759e+01 7.45328025e+01
 3.15583629e+01 3.36396040e+01 4.69325687e+00 8.05602431e+00
 3.90829310e-01 1.24883588e+00 8.59710259e+00 4.29461789e+01
 4.90963580e-01 1.19893597e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32089241601866
cond(S) = 196.8386781720519
E1 = -689.175880198293  E_coul = 184.88544994937703
init E= -504.290430248916
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680608555788107  LUMO = 60.4958506175287
  mo_energy =
[-1.21686289e+02 -1.32935303e+01 -7.62478190e+00 -7.62478190e+00
 -7.62478190e+00 -1.65012469e+00 -6.80608556e-01 -6.80608556e-01
 -6.80608556e-01  6.04958506e+01  4.52007613e+02  2.32496606e+03
  1.20431076e+04  4.50028596e+04  1.31936519e+05]
E1 = -706.6581182842392  E_coul = 198.93651555591524
cycle= 1 E= -507.721602728324  delta_E= -3.43  |g|= 0.341  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.482186
diis-c [-0.23250346  1.        ]
  HOMO = -0.236622912258432  LUMO = 61.7907962317757
  mo_energy =
[-1.20286933e+02 -1.22654478e+01 -6.65543118e+00 -6.65543118e+00
 -6.65543118e+00 -1.16434569e+00 -2.36622912e-01 -2.36622912e-01
 -2.36622912e-01  6.17907962e+01  4.53395469e+02  2.32627951e+03
  1.20442867e+04  4.50039599e+04  1.31937570e+05]
E1 = -706.6080707698826  E_coul = 198.88576501746118
cycle= 2 E= -507.722305752421  delta_E= -0.000703  |g|= 0.00613  |ddm|= 0.024
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00657859
diis-c [-4.27696359e-05  1.47649772e-03  9.98523502e-01]
  HOMO = -0.236933940367462  LUMO = 61.7862694681955
  mo_energy =
[-1.20299722e+02 -1.22675095e+01 -6.65857924e+00 -6.65857924e+00
 -6.65857924e+00 -1.16446190e+00 -2.36933940e-01 -2.36933940e-01
 -2.36933940e-01  6.17862695e+01  4.53382049e+02  2.32625958e+03
  1.20442622e+04  4.50039338e+04  1.31937543e+05]
E1 = -706.6072153289715  E_coul = 198.88490933039785
cycle= 3 E= -507.722305998574  delta_E= -2.46e-07  |g|= 0.000153  |ddm|= 0.0004
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000206287
diis-c [-1.05321102e-09  2.91758146e-05 -3.16732564e-02  1.03164408e+00]
  HOMO = -0.236939314241994  LUMO = 61.7861852717075
  mo_energy =
[-1.20299960e+02 -1.22675469e+01 -6.65864104e+00 -6.65864104e+00
 -6.65864104e+00 -1.16446359e+00 -2.36939314e-01 -2.36939314e-01
 -2.36939314e-01  6.17861853e+01  4.53381817e+02  2.32625928e+03
  1.20442619e+04  4.50039335e+04  1.31937543e+05]
E1 = -706.607196583838  E_coul = 198.88489058512388
cycle= 4 E= -507.722305998714  delta_E= -1.4e-10  |g|= 7.49e-07  |ddm|= 8.75e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.607196583838  E_coul = 198.88489058512388
  HOMO = -0.236939268233544  LUMO = 61.7861858917826
  mo_energy =
[-1.20299958e+02 -1.22675467e+01 -6.65864061e+00 -6.65864061e+00
 -6.65864061e+00 -1.16446357e+00 -2.36939268e-01 -2.36939268e-01
 -2.36939268e-01  6.17861859e+01  4.53381819e+02  2.32625928e+03
  1.20442619e+04  4.50039335e+04  1.31937543e+05]
E1 = -706.6071966905815  E_coul = 198.8848906918672
Extra cycle  E= -507.722305998714  delta_E= -2.27e-13  |g|= 1.48e-08  |ddm|= 5.11e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
exp = [3.67549835e+04 7.33750168e+03 1.83772528e+04 1.31665316e+03
 3.08670593e+02 9.11541759e+01 3.15583629e+01 4.69325687e+00
 3.90829310e-01 8.59710259e+00 4.90963580e-01]
E = -507.7223059987143
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:06 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36754.9835447        1
[INPUT] 0    0    [1    /1   ]  7337.50167725        1
[INPUT] 0    0    [1    /1   ]  18377.2527541        1
[INPUT] 0    0    [1    /1   ]  1316.6531555         1
[INPUT] 0    0    [1    /1   ]  308.670592659        1
[INPUT] 0    0    [1    /1   ]  91.1541759467        1
[INPUT] 0    0    [1    /1   ]  31.5583629468        1
[INPUT] 0    0    [1    /1   ]  4.69325687478        1
[INPUT] 0    0    [1    /1   ]  0.390829309868       1
[INPUT] 1    0    [1    /1   ]  8.59710259448        1
[INPUT] 1    0    [1    /1   ]  0.49096358025        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36754.98354473131, 1.0]], [0, [7337.50167725223, 1.0]], [0, [18377.252754055564, 1.0]], [0, [1316.6531554989408, 1.0]], [0, [308.67059265855937, 1.0]], [0, [91.15417594674169, 1.0]], [0, [31.55836294683868, 1.0]], [0, [4.693256874780712, 1.0]], [0, [0.3908293098677273, 1.0]], [1, [8.597102594484976, 1.0]], [1, [0.490963580250188, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36754.98354473]
bas 1, expnt(s) = [7337.50167725]
bas 2, expnt(s) = [18377.25275406]
bas 3, expnt(s) = [1316.6531555]
bas 4, expnt(s) = [308.67059266]
bas 5, expnt(s) = [91.15417595]
bas 6, expnt(s) = [31.55836295]
bas 7, expnt(s) = [4.69325687]
bas 8, expnt(s) = [0.39082931]
bas 9, expnt(s) = [8.59710259]
bas 10, expnt(s) = [0.49096358]
CPU time:       583.39
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67549835e+04 6.70659682e+03 7.33750168e+03 2.00297802e+03
 1.83772528e+04 3.98772743e+03 1.31665316e+03 5.52228177e+02
 3.08670593e+02 1.86052910e+02 9.11541759e+01 7.45328025e+01
 3.15583629e+01 3.36396040e+01 4.69325687e+00 8.05602431e+00
 3.90829310e-01 1.24883588e+00 8.59710259e+00 4.29461789e+01
 4.90963580e-01 1.19893597e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32089241601866
cond(S) = 196.8386781720519
E1 = -689.175880198293  E_coul = 184.88544994937703
init E= -504.290430248916
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680608555788107  LUMO = 60.4958506175287
  mo_energy =
[-1.21686289e+02 -1.32935303e+01 -7.62478190e+00 -7.62478190e+00
 -7.62478190e+00 -1.65012469e+00 -6.80608556e-01 -6.80608556e-01
 -6.80608556e-01  6.04958506e+01  4.52007613e+02  2.32496606e+03
  1.20431076e+04  4.50028596e+04  1.31936519e+05]
E1 = -706.6581182842392  E_coul = 198.93651555591524
cycle= 1 E= -507.721602728324  delta_E= -3.43  |g|= 0.341  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.482186
diis-c [-0.23250346  1.        ]
  HOMO = -0.236622912258432  LUMO = 61.7907962317757
  mo_energy =
[-1.20286933e+02 -1.22654478e+01 -6.65543118e+00 -6.65543118e+00
 -6.65543118e+00 -1.16434569e+00 -2.36622912e-01 -2.36622912e-01
 -2.36622912e-01  6.17907962e+01  4.53395469e+02  2.32627951e+03
  1.20442867e+04  4.50039599e+04  1.31937570e+05]
E1 = -706.6080707698826  E_coul = 198.88576501746118
cycle= 2 E= -507.722305752421  delta_E= -0.000703  |g|= 0.00613  |ddm|= 0.024
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00657859
diis-c [-4.27696359e-05  1.47649772e-03  9.98523502e-01]
  HOMO = -0.236933940367462  LUMO = 61.7862694681955
  mo_energy =
[-1.20299722e+02 -1.22675095e+01 -6.65857924e+00 -6.65857924e+00
 -6.65857924e+00 -1.16446190e+00 -2.36933940e-01 -2.36933940e-01
 -2.36933940e-01  6.17862695e+01  4.53382049e+02  2.32625958e+03
  1.20442622e+04  4.50039338e+04  1.31937543e+05]
E1 = -706.6072153289715  E_coul = 198.88490933039785
cycle= 3 E= -507.722305998574  delta_E= -2.46e-07  |g|= 0.000153  |ddm|= 0.0004
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000206287
diis-c [-1.05321102e-09  2.91758146e-05 -3.16732564e-02  1.03164408e+00]
  HOMO = -0.236939314241994  LUMO = 61.7861852717075
  mo_energy =
[-1.20299960e+02 -1.22675469e+01 -6.65864104e+00 -6.65864104e+00
 -6.65864104e+00 -1.16446359e+00 -2.36939314e-01 -2.36939314e-01
 -2.36939314e-01  6.17861853e+01  4.53381817e+02  2.32625928e+03
  1.20442619e+04  4.50039335e+04  1.31937543e+05]
E1 = -706.607196583838  E_coul = 198.88489058512388
cycle= 4 E= -507.722305998714  delta_E= -1.4e-10  |g|= 7.49e-07  |ddm|= 8.75e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.607196583838  E_coul = 198.88489058512388
  HOMO = -0.236939268233544  LUMO = 61.7861858917826
  mo_energy =
[-1.20299958e+02 -1.22675467e+01 -6.65864061e+00 -6.65864061e+00
 -6.65864061e+00 -1.16446357e+00 -2.36939268e-01 -2.36939268e-01
 -2.36939268e-01  6.17861859e+01  4.53381819e+02  2.32625928e+03
  1.20442619e+04  4.50039335e+04  1.31937543e+05]
E1 = -706.6071966905815  E_coul = 198.8848906918672
Extra cycle  E= -507.722305998714  delta_E= -2.27e-13  |g|= 1.48e-08  |ddm|= 5.11e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 196.8386781720519
E1 = -706.6071966905815  E_coul = 198.8848906918672
init E= -507.722305998714
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.236939267584515  LUMO = 61.7861859013443
  mo_energy =
[-1.20299958e+02 -1.22675466e+01 -6.65864061e+00 -6.65864061e+00
 -6.65864061e+00 -1.16446357e+00 -2.36939268e-01 -2.36939268e-01
 -2.36939268e-01  6.17861859e+01  4.53381819e+02  2.32625928e+03
  1.20442619e+04  4.50039335e+04  1.31937543e+05]
E1 = -706.6071966925181  E_coul = 198.8848906938037
cycle= 1 E= -507.722305998714  delta_E= -5.68e-14  |g|= 3.42e-10  |ddm|= 9.03e-10
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6071966925181  E_coul = 198.8848906938037
  HOMO = -0.236939267573997  LUMO = 61.786185901516
  mo_energy =
[-1.20299958e+02 -1.22675466e+01 -6.65864061e+00 -6.65864061e+00
 -6.65864061e+00 -1.16446357e+00 -2.36939268e-01 -2.36939268e-01
 -2.36939268e-01  6.17861859e+01  4.53381819e+02  2.32625928e+03
  1.20442619e+04  4.50039335e+04  1.31937543e+05]
E1 = -706.6071966925572  E_coul = 198.8848906938428
Extra cycle  E= -507.722305998714  delta_E=    0  |g|= 1.21e-11  |ddm|= 1.83e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.29 sec
exp = [3.67549835e+04 7.33750168e+03 1.83772528e+04 1.31665316e+03
 3.08670593e+02 9.11541759e+01 3.15583629e+01 4.69325687e+00
 3.90829310e-01 8.59710259e+00 4.90963580e-01]
grad_E = [-1.30321602e-07  4.64313476e-06  1.00043691e-07  1.01377027e-04
 -4.24459692e-04  4.15207566e-04  2.53076821e-04  1.15961402e-03
 -3.54956445e-03 -1.34822804e-03 -9.07934145e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:13 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2452613        1
[INPUT] 0    0    [1    /1   ]  7332.92647791        1
[INPUT] 0    0    [1    /1   ]  18377.197908         1
[INPUT] 0    0    [1    /1   ]  1241.83839516        1
[INPUT] 0    0    [1    /1   ]  292.903479702        1
[INPUT] 0    0    [1    /1   ]  87.1403603934        1
[INPUT] 0    0    [1    /1   ]  30.5608551769        1
[INPUT] 0    0    [1    /1   ]  4.68155267446        1
[INPUT] 0    0    [1    /1   ]  0.39084354279        1
[INPUT] 1    0    [1    /1   ]  8.59704684554        1
[INPUT] 1    0    [1    /1   ]  0.490996270184       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.24526126542, 1.0]], [0, [7332.926477914878, 1.0]], [0, [18377.197907992744, 1.0]], [0, [1241.8383951648632, 1.0]], [0, [292.90347970165567, 1.0]], [0, [87.14036039341482, 1.0]], [0, [30.56085517685858, 1.0]], [0, [4.681552674462468, 1.0]], [0, [0.39084354279048256, 1.0]], [1, [8.597046845538035, 1.0]], [1, [0.49099627018423275, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.24526127]
bas 1, expnt(s) = [7332.92647791]
bas 2, expnt(s) = [18377.19790799]
bas 3, expnt(s) = [1241.83839516]
bas 4, expnt(s) = [292.9034797]
bas 5, expnt(s) = [87.14036039]
bas 6, expnt(s) = [30.56085518]
bas 7, expnt(s) = [4.68155267]
bas 8, expnt(s) = [0.39084354]
bas 9, expnt(s) = [8.59704685]
bas 10, expnt(s) = [0.49099627]
CPU time:       593.48
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552453e+04 6.70663264e+03 7.33292648e+03 2.00204125e+03
 1.83771979e+04 3.98771850e+03 1.24183840e+03 5.28522933e+02
 2.92903480e+02 1.78878615e+02 8.71403604e+01 7.20575577e+01
 3.05608552e+01 3.28389416e+01 4.68155267e+00 8.04095182e+00
 3.90843543e-01 1.24886999e+00 8.59704685e+00 4.29458308e+01
 4.90996270e-01 1.19903575e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321045037013125
cond(S) = 191.30742050443553
E1 = -689.1698327701266  E_coul = 184.88179329655497
init E= -504.288039473572
    CPU time for initialize scf      0.40 sec, wall time      0.07 sec
  HOMO = -0.680514066160703  LUMO = 57.2029842372262
  mo_energy =
[-1.21685652e+02 -1.32960115e+01 -7.62523148e+00 -7.62523148e+00
 -7.62523148e+00 -1.65000156e+00 -6.80514066e-01 -6.80514066e-01
 -6.80514066e-01  5.72029842e+01  4.26577009e+02  2.19087804e+03
  1.17447451e+04  4.46613938e+04  1.31592280e+05]
E1 = -706.6634749716559  E_coul = 198.94011033194676
cycle= 1 E= -507.723364639709  delta_E= -3.44  |g|= 0.345  |ddm|= 0.299
    CPU time for cycle= 1      0.41 sec, wall time      0.03 sec
diis-norm(errvec)=0.484483
diis-c [-0.23472377  1.        ]
  HOMO = -0.236611817769224  LUMO = 58.49089525512
  mo_energy =
[-1.20283697e+02 -1.22676961e+01 -6.65543975e+00 -6.65543975e+00
 -6.65543975e+00 -1.16445304e+00 -2.36611818e-01 -2.36611818e-01
 -2.36611818e-01  5.84908953e+01  4.27966952e+02  2.19219835e+03
  1.17459277e+04  4.46624965e+04  1.31593333e+05]
E1 = -706.6096552940662  E_coul = 198.88553038332148
cycle= 2 E= -507.724124910745  delta_E= -0.00076  |g|= 0.00638  |ddm|= 0.026
    CPU time for cycle= 2      0.12 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682009
diis-c [-4.58860371e-05  1.63263653e-03  9.98367363e-01]
  HOMO = -0.236952526243059  LUMO = 58.4861924286137
  mo_energy =
[-1.20297280e+02 -1.22699465e+01 -6.65886263e+00 -6.65886263e+00
 -6.65886263e+00 -1.16458086e+00 -2.36952526e-01 -2.36952526e-01
 -2.36952526e-01  5.84861924e+01  4.27952976e+02  2.19217757e+03
  1.17459021e+04  4.46624691e+04  1.31593305e+05]
E1 = -706.608707742752  E_coul = 198.88458255315706
cycle= 3 E= -507.724125189595  delta_E= -2.79e-07  |g|= 0.000164  |ddm|= 0.000444
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000219199
diis-c [-1.20939829e-09  2.91106205e-05 -3.24874004e-02  1.03245829e+00]
  HOMO = -0.236958624274924  LUMO = 58.4861012783137
  mo_energy =
[-1.20297542e+02 -1.22699888e+01 -6.65893208e+00 -6.65893208e+00
 -6.65893208e+00 -1.16458280e+00 -2.36958624e-01 -2.36958624e-01
 -2.36958624e-01  5.84861013e+01  4.27952722e+02  2.19217724e+03
  1.17459017e+04  4.46624687e+04  1.31593304e+05]
E1 = -706.6086863045263  E_coul = 198.8845611147634
cycle= 4 E= -507.724125189763  delta_E= -1.68e-10  |g|= 8.21e-07  |ddm|= 9.98e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6086863045263  E_coul = 198.8845611147634
  HOMO = -0.236958570797598  LUMO = 58.4861019515638
  mo_energy =
[-1.20297540e+02 -1.22699885e+01 -6.65893160e+00 -6.65893160e+00
 -6.65893160e+00 -1.16458278e+00 -2.36958571e-01 -2.36958571e-01
 -2.36958571e-01  5.84861020e+01  4.27952724e+02  2.19217724e+03
  1.17459017e+04  4.46624687e+04  1.31593304e+05]
E1 = -706.6086864284875  E_coul = 198.88456123872504
Extra cycle  E= -507.724125189763  delta_E= 3.41e-13  |g|= 1.65e-08  |ddm|= 6.01e-08
    CPU time for scf_cycle      1.02 sec, wall time      0.21 sec
exp = [3.67552453e+04 7.33292648e+03 1.83771979e+04 1.24183840e+03
 2.92903480e+02 8.71403604e+01 3.05608552e+01 4.68155267e+00
 3.90843543e-01 8.59704685e+00 4.90996270e-01]
E = -507.7241251897625
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:14 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2452613        1
[INPUT] 0    0    [1    /1   ]  7332.92647791        1
[INPUT] 0    0    [1    /1   ]  18377.197908         1
[INPUT] 0    0    [1    /1   ]  1241.83839516        1
[INPUT] 0    0    [1    /1   ]  292.903479702        1
[INPUT] 0    0    [1    /1   ]  87.1403603934        1
[INPUT] 0    0    [1    /1   ]  30.5608551769        1
[INPUT] 0    0    [1    /1   ]  4.68155267446        1
[INPUT] 0    0    [1    /1   ]  0.39084354279        1
[INPUT] 1    0    [1    /1   ]  8.59704684554        1
[INPUT] 1    0    [1    /1   ]  0.490996270184       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.24526126542, 1.0]], [0, [7332.926477914878, 1.0]], [0, [18377.197907992744, 1.0]], [0, [1241.8383951648632, 1.0]], [0, [292.90347970165567, 1.0]], [0, [87.14036039341482, 1.0]], [0, [30.56085517685858, 1.0]], [0, [4.681552674462468, 1.0]], [0, [0.39084354279048256, 1.0]], [1, [8.597046845538035, 1.0]], [1, [0.49099627018423275, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.24526127]
bas 1, expnt(s) = [7332.92647791]
bas 2, expnt(s) = [18377.19790799]
bas 3, expnt(s) = [1241.83839516]
bas 4, expnt(s) = [292.9034797]
bas 5, expnt(s) = [87.14036039]
bas 6, expnt(s) = [30.56085518]
bas 7, expnt(s) = [4.68155267]
bas 8, expnt(s) = [0.39084354]
bas 9, expnt(s) = [8.59704685]
bas 10, expnt(s) = [0.49099627]
CPU time:       594.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552453e+04 6.70663264e+03 7.33292648e+03 2.00204125e+03
 1.83771979e+04 3.98771850e+03 1.24183840e+03 5.28522933e+02
 2.92903480e+02 1.78878615e+02 8.71403604e+01 7.20575577e+01
 3.05608552e+01 3.28389416e+01 4.68155267e+00 8.04095182e+00
 3.90843543e-01 1.24886999e+00 8.59704685e+00 4.29458308e+01
 4.90996270e-01 1.19903575e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.321045037013125
cond(S) = 191.30742050443553
E1 = -689.1698327701266  E_coul = 184.88179329655497
init E= -504.288039473572
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680514066160703  LUMO = 57.2029842372262
  mo_energy =
[-1.21685652e+02 -1.32960115e+01 -7.62523148e+00 -7.62523148e+00
 -7.62523148e+00 -1.65000156e+00 -6.80514066e-01 -6.80514066e-01
 -6.80514066e-01  5.72029842e+01  4.26577009e+02  2.19087804e+03
  1.17447451e+04  4.46613938e+04  1.31592280e+05]
E1 = -706.6634749716559  E_coul = 198.94011033194676
cycle= 1 E= -507.723364639709  delta_E= -3.44  |g|= 0.345  |ddm|= 0.299
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484483
diis-c [-0.23472377  1.        ]
  HOMO = -0.236611817769224  LUMO = 58.49089525512
  mo_energy =
[-1.20283697e+02 -1.22676961e+01 -6.65543975e+00 -6.65543975e+00
 -6.65543975e+00 -1.16445304e+00 -2.36611818e-01 -2.36611818e-01
 -2.36611818e-01  5.84908953e+01  4.27966952e+02  2.19219835e+03
  1.17459277e+04  4.46624965e+04  1.31593333e+05]
E1 = -706.6096552940662  E_coul = 198.88553038332148
cycle= 2 E= -507.724124910745  delta_E= -0.00076  |g|= 0.00638  |ddm|= 0.026
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682009
diis-c [-4.58860371e-05  1.63263653e-03  9.98367363e-01]
  HOMO = -0.236952526243059  LUMO = 58.4861924286137
  mo_energy =
[-1.20297280e+02 -1.22699465e+01 -6.65886263e+00 -6.65886263e+00
 -6.65886263e+00 -1.16458086e+00 -2.36952526e-01 -2.36952526e-01
 -2.36952526e-01  5.84861924e+01  4.27952976e+02  2.19217757e+03
  1.17459021e+04  4.46624691e+04  1.31593305e+05]
E1 = -706.608707742752  E_coul = 198.88458255315706
cycle= 3 E= -507.724125189595  delta_E= -2.79e-07  |g|= 0.000164  |ddm|= 0.000444
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000219199
diis-c [-1.20939829e-09  2.91106205e-05 -3.24874004e-02  1.03245829e+00]
  HOMO = -0.236958624274924  LUMO = 58.4861012783137
  mo_energy =
[-1.20297542e+02 -1.22699888e+01 -6.65893208e+00 -6.65893208e+00
 -6.65893208e+00 -1.16458280e+00 -2.36958624e-01 -2.36958624e-01
 -2.36958624e-01  5.84861013e+01  4.27952722e+02  2.19217724e+03
  1.17459017e+04  4.46624687e+04  1.31593304e+05]
E1 = -706.6086863045263  E_coul = 198.8845611147634
cycle= 4 E= -507.724125189763  delta_E= -1.68e-10  |g|= 8.21e-07  |ddm|= 9.98e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6086863045263  E_coul = 198.8845611147634
  HOMO = -0.236958570797598  LUMO = 58.4861019515638
  mo_energy =
[-1.20297540e+02 -1.22699885e+01 -6.65893160e+00 -6.65893160e+00
 -6.65893160e+00 -1.16458278e+00 -2.36958571e-01 -2.36958571e-01
 -2.36958571e-01  5.84861020e+01  4.27952724e+02  2.19217724e+03
  1.17459017e+04  4.46624687e+04  1.31593304e+05]
E1 = -706.6086864284875  E_coul = 198.88456123872504
Extra cycle  E= -507.724125189763  delta_E= 3.41e-13  |g|= 1.65e-08  |ddm|= 6.01e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 191.30742050443553
E1 = -706.6086864284875  E_coul = 198.88456123872504
init E= -507.724125189763
    CPU time for initialize scf      2.15 sec, wall time      0.14 sec
  HOMO = -0.236958570020723  LUMO = 58.4861019622789
  mo_energy =
[-1.20297540e+02 -1.22699885e+01 -6.65893159e+00 -6.65893159e+00
 -6.65893159e+00 -1.16458278e+00 -2.36958570e-01 -2.36958570e-01
 -2.36958570e-01  5.84861020e+01  4.27952724e+02  2.19217724e+03
  1.17459017e+04  4.46624687e+04  1.31593304e+05]
E1 = -706.6086864307906  E_coul = 198.8845612410279
cycle= 1 E= -507.724125189763  delta_E= -2.27e-13  |g|= 3.89e-10  |ddm|= 1.08e-09
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6086864307906  E_coul = 198.8845612410279
  HOMO = -0.236958570007868  LUMO = 58.4861019624769
  mo_energy =
[-1.20297540e+02 -1.22699885e+01 -6.65893159e+00 -6.65893159e+00
 -6.65893159e+00 -1.16458278e+00 -2.36958570e-01 -2.36958570e-01
 -2.36958570e-01  5.84861020e+01  4.27952724e+02  2.19217724e+03
  1.17459017e+04  4.46624687e+04  1.31593304e+05]
E1 = -706.6086864308388  E_coul = 198.88456124107577
Extra cycle  E= -507.724125189763  delta_E= -3.41e-13  |g|= 1.96e-11  |ddm|= 2.23e-11
    CPU time for scf_cycle      2.66 sec, wall time      0.30 sec
exp = [3.67552453e+04 7.33292648e+03 1.83771979e+04 1.24183840e+03
 2.92903480e+02 8.71403604e+01 3.05608552e+01 4.68155267e+00
 3.90843543e-01 8.59704685e+00 4.90996270e-01]
grad_E = [-3.02663872e-08  8.20308015e-06  2.60885521e-07  5.74812681e-05
 -3.30139579e-04  2.26099767e-04  5.59455256e-04  1.96894643e-03
 -3.53680641e-03 -1.28909529e-03 -7.67407181e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2904919        1
[INPUT] 0    0    [1    /1   ]  7332.1667631         1
[INPUT] 0    0    [1    /1   ]  18377.189157         1
[INPUT] 0    0    [1    /1   ]  1228.2004773         1
[INPUT] 0    0    [1    /1   ]  293.751154118        1
[INPUT] 0    0    [1    /1   ]  87.1956161538        1
[INPUT] 0    0    [1    /1   ]  30.4238307325        1
[INPUT] 0    0    [1    /1   ]  4.67877316128        1
[INPUT] 0    0    [1    /1   ]  0.390978201167       1
[INPUT] 1    0    [1    /1   ]  8.59804622966        1
[INPUT] 1    0    [1    /1   ]  0.491037095395       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.29049191939, 1.0]], [0, [7332.166763102361, 1.0]], [0, [18377.189157020493, 1.0]], [0, [1228.2004773017745, 1.0]], [0, [293.7511541182828, 1.0]], [0, [87.19561615383734, 1.0]], [0, [30.423830732474205, 1.0]], [0, [4.678773161275395, 1.0]], [0, [0.3909782011671973, 1.0]], [1, [8.598046229656337, 1.0]], [1, [0.491037095394875, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.29049192]
bas 1, expnt(s) = [7332.1667631]
bas 2, expnt(s) = [18377.18915702]
bas 3, expnt(s) = [1228.2004773]
bas 4, expnt(s) = [293.75115412]
bas 5, expnt(s) = [87.19561615]
bas 6, expnt(s) = [30.42383073]
bas 7, expnt(s) = [4.67877316]
bas 8, expnt(s) = [0.3909782]
bas 9, expnt(s) = [8.59804623]
bas 10, expnt(s) = [0.4910371]
CPU time:       605.06
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552905e+04 6.70663883e+03 7.33216676e+03 2.00188569e+03
 1.83771892e+04 3.98771708e+03 1.22820048e+03 5.24163735e+02
 2.93751154e+02 1.79266736e+02 8.71956162e+01 7.20918238e+01
 3.04238307e+01 3.27284506e+01 4.67877316e+00 8.03737102e+00
 3.90978201e-01 1.24919268e+00 8.59804623e+00 4.29520714e+01
 4.91037095e-01 1.19916038e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32101487727094
cond(S) = 190.68971906383373
E1 = -689.1655087785593  E_coul = 184.88669324450194
init E= -504.278815534057
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680423359821256  LUMO = 56.9533928654381
  mo_energy =
[-1.21685310e+02 -1.32953964e+01 -7.62497228e+00 -7.62497228e+00
 -7.62497228e+00 -1.64985290e+00 -6.80423360e-01 -6.80423360e-01
 -6.80423360e-01  5.69533929e+01  4.26750033e+02  2.18011047e+03
  1.17058777e+04  4.46144022e+04  1.31544339e+05]
E1 = -706.6669023994131  E_coul = 198.9428873214631
cycle= 1 E= -507.72401507795  delta_E= -3.45  |g|= 0.346  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.484702
diis-c [-0.23493565  1.        ]
  HOMO = -0.236503182570753  LUMO = 58.2405262784832
  mo_energy =
[-1.20284002e+02 -1.22672049e+01 -6.65531107e+00 -6.65531107e+00
 -6.65531107e+00 -1.16429122e+00 -2.36503183e-01 -2.36503183e-01
 -2.36503183e-01  5.82405263e+01  4.28139163e+02  2.18143043e+03
  1.17070598e+04  4.46155042e+04  1.31545391e+05]
E1 = -706.6126895712576  E_coul = 198.88790759409108
cycle= 2 E= -507.724781977167  delta_E= -0.000767  |g|= 0.00641  |ddm|= 0.0261
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00687305
diis-c [-4.66044040e-05  1.64078562e-03  9.98359214e-01]
  HOMO = -0.236846719050295  LUMO = 58.2357980698265
  mo_energy =
[-1.20297675e+02 -1.22694729e+01 -6.65876126e+00 -6.65876126e+00
 -6.65876126e+00 -1.16442012e+00 -2.36846719e-01 -2.36846719e-01
 -2.36846719e-01  5.82357981e+01  4.28125088e+02  2.18140954e+03
  1.17070340e+04  4.46154767e+04  1.31545363e+05]
E1 = -706.6117332077313  E_coul = 198.8869509482095
cycle= 3 E= -507.724782259522  delta_E= -2.82e-07  |g|= 0.000165  |ddm|= 0.000446
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000221137
diis-c [-1.23322616e-09  2.87029198e-05 -3.25310042e-02  1.03250230e+00]
  HOMO = -0.236852882925725  LUMO = 58.2357062068786
  mo_energy =
[-1.20297940e+02 -1.22695157e+01 -6.65883143e+00 -6.65883143e+00
 -6.65883143e+00 -1.16442208e+00 -2.36852883e-01 -2.36852883e-01
 -2.36852883e-01  5.82357062e+01  4.28124832e+02  2.18140921e+03
  1.17070336e+04  4.46154763e+04  1.31545362e+05]
E1 = -706.611711522974  E_coul = 198.88692926328164
cycle= 4 E= -507.724782259692  delta_E= -1.71e-10  |g|= 8.28e-07  |ddm|= 1.01e-05
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.611711522974  E_coul = 198.88692926328164
  HOMO = -0.236852828717329  LUMO = 58.2357068867079
  mo_energy =
[-1.20297938e+02 -1.22695153e+01 -6.65883093e+00 -6.65883093e+00
 -6.65883093e+00 -1.16442206e+00 -2.36852829e-01 -2.36852829e-01
 -2.36852829e-01  5.82357069e+01  4.28124834e+02  2.18140921e+03
  1.17070336e+04  4.46154763e+04  1.31545362e+05]
E1 = -706.6117116486159  E_coul = 198.88692938892387
Extra cycle  E= -507.724782259692  delta_E= 2.84e-13  |g|= 1.66e-08  |ddm|= 6.07e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67552905e+04 7.33216676e+03 1.83771892e+04 1.22820048e+03
 2.93751154e+02 8.71956162e+01 3.04238307e+01 4.67877316e+00
 3.90978201e-01 8.59804623e+00 4.91037095e-01]
E = -507.72478225969206
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:21 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2904919        1
[INPUT] 0    0    [1    /1   ]  7332.1667631         1
[INPUT] 0    0    [1    /1   ]  18377.189157         1
[INPUT] 0    0    [1    /1   ]  1228.2004773         1
[INPUT] 0    0    [1    /1   ]  293.751154118        1
[INPUT] 0    0    [1    /1   ]  87.1956161538        1
[INPUT] 0    0    [1    /1   ]  30.4238307325        1
[INPUT] 0    0    [1    /1   ]  4.67877316128        1
[INPUT] 0    0    [1    /1   ]  0.390978201167       1
[INPUT] 1    0    [1    /1   ]  8.59804622966        1
[INPUT] 1    0    [1    /1   ]  0.491037095395       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.29049191939, 1.0]], [0, [7332.166763102361, 1.0]], [0, [18377.189157020493, 1.0]], [0, [1228.2004773017745, 1.0]], [0, [293.7511541182828, 1.0]], [0, [87.19561615383734, 1.0]], [0, [30.423830732474205, 1.0]], [0, [4.678773161275395, 1.0]], [0, [0.3909782011671973, 1.0]], [1, [8.598046229656337, 1.0]], [1, [0.491037095394875, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.29049192]
bas 1, expnt(s) = [7332.1667631]
bas 2, expnt(s) = [18377.18915702]
bas 3, expnt(s) = [1228.2004773]
bas 4, expnt(s) = [293.75115412]
bas 5, expnt(s) = [87.19561615]
bas 6, expnt(s) = [30.42383073]
bas 7, expnt(s) = [4.67877316]
bas 8, expnt(s) = [0.3909782]
bas 9, expnt(s) = [8.59804623]
bas 10, expnt(s) = [0.4910371]
CPU time:       606.40
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552905e+04 6.70663883e+03 7.33216676e+03 2.00188569e+03
 1.83771892e+04 3.98771708e+03 1.22820048e+03 5.24163735e+02
 2.93751154e+02 1.79266736e+02 8.71956162e+01 7.20918238e+01
 3.04238307e+01 3.27284506e+01 4.67877316e+00 8.03737102e+00
 3.90978201e-01 1.24919268e+00 8.59804623e+00 4.29520714e+01
 4.91037095e-01 1.19916038e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32101487727094
cond(S) = 190.68971906383373
E1 = -689.1655087785593  E_coul = 184.88669324450194
init E= -504.278815534057
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680423359821256  LUMO = 56.9533928654381
  mo_energy =
[-1.21685310e+02 -1.32953964e+01 -7.62497228e+00 -7.62497228e+00
 -7.62497228e+00 -1.64985290e+00 -6.80423360e-01 -6.80423360e-01
 -6.80423360e-01  5.69533929e+01  4.26750033e+02  2.18011047e+03
  1.17058777e+04  4.46144022e+04  1.31544339e+05]
E1 = -706.6669023994131  E_coul = 198.9428873214631
cycle= 1 E= -507.72401507795  delta_E= -3.45  |g|= 0.346  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.484702
diis-c [-0.23493565  1.        ]
  HOMO = -0.236503182570753  LUMO = 58.2405262784832
  mo_energy =
[-1.20284002e+02 -1.22672049e+01 -6.65531107e+00 -6.65531107e+00
 -6.65531107e+00 -1.16429122e+00 -2.36503183e-01 -2.36503183e-01
 -2.36503183e-01  5.82405263e+01  4.28139163e+02  2.18143043e+03
  1.17070598e+04  4.46155042e+04  1.31545391e+05]
E1 = -706.6126895712576  E_coul = 198.88790759409108
cycle= 2 E= -507.724781977167  delta_E= -0.000767  |g|= 0.00641  |ddm|= 0.0261
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00687305
diis-c [-4.66044040e-05  1.64078562e-03  9.98359214e-01]
  HOMO = -0.236846719050295  LUMO = 58.2357980698265
  mo_energy =
[-1.20297675e+02 -1.22694729e+01 -6.65876126e+00 -6.65876126e+00
 -6.65876126e+00 -1.16442012e+00 -2.36846719e-01 -2.36846719e-01
 -2.36846719e-01  5.82357981e+01  4.28125088e+02  2.18140954e+03
  1.17070340e+04  4.46154767e+04  1.31545363e+05]
E1 = -706.6117332077313  E_coul = 198.8869509482095
cycle= 3 E= -507.724782259522  delta_E= -2.82e-07  |g|= 0.000165  |ddm|= 0.000446
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000221137
diis-c [-1.23322616e-09  2.87029198e-05 -3.25310042e-02  1.03250230e+00]
  HOMO = -0.236852882925725  LUMO = 58.2357062068786
  mo_energy =
[-1.20297940e+02 -1.22695157e+01 -6.65883143e+00 -6.65883143e+00
 -6.65883143e+00 -1.16442208e+00 -2.36852883e-01 -2.36852883e-01
 -2.36852883e-01  5.82357062e+01  4.28124832e+02  2.18140921e+03
  1.17070336e+04  4.46154763e+04  1.31545362e+05]
E1 = -706.611711522974  E_coul = 198.88692926328164
cycle= 4 E= -507.724782259692  delta_E= -1.71e-10  |g|= 8.28e-07  |ddm|= 1.01e-05
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.611711522974  E_coul = 198.88692926328164
  HOMO = -0.236852828717329  LUMO = 58.2357068867079
  mo_energy =
[-1.20297938e+02 -1.22695153e+01 -6.65883093e+00 -6.65883093e+00
 -6.65883093e+00 -1.16442206e+00 -2.36852829e-01 -2.36852829e-01
 -2.36852829e-01  5.82357069e+01  4.28124834e+02  2.18140921e+03
  1.17070336e+04  4.46154763e+04  1.31545362e+05]
E1 = -706.6117116486159  E_coul = 198.88692938892387
Extra cycle  E= -507.724782259692  delta_E= 2.84e-13  |g|= 1.66e-08  |ddm|= 6.07e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 190.68971906383373
E1 = -706.6117116486159  E_coul = 198.88692938892387
init E= -507.724782259692
    CPU time for initialize scf      2.06 sec, wall time      0.13 sec
  HOMO = -0.236852827928223  LUMO = 58.2357068975442
  mo_energy =
[-1.20297938e+02 -1.22695153e+01 -6.65883093e+00 -6.65883093e+00
 -6.65883093e+00 -1.16442206e+00 -2.36852828e-01 -2.36852828e-01
 -2.36852828e-01  5.82357069e+01  4.28124834e+02  2.18140921e+03
  1.17070336e+04  4.46154763e+04  1.31545362e+05]
E1 = -706.6117116509539  E_coul = 198.8869293912619
cycle= 1 E= -507.724782259692  delta_E= 5.68e-14  |g|= 3.91e-10  |ddm|= 1.09e-09
    CPU time for cycle= 1      0.36 sec, wall time      0.02 sec
E1 = -706.6117116509539  E_coul = 198.8869293912619
  HOMO = -0.236852827915152  LUMO = 58.235706897744
  mo_energy =
[-1.20297938e+02 -1.22695153e+01 -6.65883093e+00 -6.65883093e+00
 -6.65883093e+00 -1.16442206e+00 -2.36852828e-01 -2.36852828e-01
 -2.36852828e-01  5.82357069e+01  4.28124834e+02  2.18140921e+03
  1.17070336e+04  4.46154763e+04  1.31545362e+05]
E1 = -706.6117116510028  E_coul = 198.8869293913107
Extra cycle  E= -507.724782259692  delta_E= -1.14e-13  |g|= 1.92e-11  |ddm|= 2.26e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67552905e+04 7.33216676e+03 1.83771892e+04 1.22820048e+03
 2.93751154e+02 8.71956162e+01 3.04238307e+01 4.67877316e+00
 3.90978201e-01 8.59804623e+00 4.91037095e-01]
grad_E = [ 1.01290443e-08  9.73330412e-06  3.35309953e-07  5.05883160e-06
 -4.57814374e-05 -8.23760801e-05  3.72466947e-04 -2.44395611e-04
 -8.61518505e-04 -6.59983725e-04 -3.01401602e-04]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:28 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2506322        1
[INPUT] 0    0    [1    /1   ]  7332.87674972        1
[INPUT] 0    0    [1    /1   ]  18377.1978197        1
[INPUT] 0    0    [1    /1   ]  1239.29433958        1
[INPUT] 0    0    [1    /1   ]  297.645655162        1
[INPUT] 0    0    [1    /1   ]  88.2176938318        1
[INPUT] 0    0    [1    /1   ]  30.6085287479        1
[INPUT] 0    0    [1    /1   ]  4.68186658297        1
[INPUT] 0    0    [1    /1   ]  0.391018301739       1
[INPUT] 1    0    [1    /1   ]  8.59883621994        1
[INPUT] 1    0    [1    /1   ]  0.491054325474       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.2506322, 1.0]], [0, [7332.876749718356, 1.0]], [0, [18377.197819746376, 1.0]], [0, [1239.294339580891, 1.0]], [0, [297.645655162323, 1.0]], [0, [88.2176938317936, 1.0]], [0, [30.60852874792551, 1.0]], [0, [4.681866582971908, 1.0]], [0, [0.39101830173924185, 1.0]], [1, [8.598836219943124, 1.0]], [1, [0.4910543254738162, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.2506322]
bas 1, expnt(s) = [7332.87674972]
bas 2, expnt(s) = [18377.19781975]
bas 3, expnt(s) = [1239.29433958]
bas 4, expnt(s) = [297.64565516]
bas 5, expnt(s) = [88.21769383]
bas 6, expnt(s) = [30.60852875]
bas 7, expnt(s) = [4.68186658]
bas 8, expnt(s) = [0.3910183]
bas 9, expnt(s) = [8.59883622]
bas 10, expnt(s) = [0.49105433]
CPU time:       616.49
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552506e+04 6.70663337e+03 7.33287675e+03 2.00203107e+03
 1.83771978e+04 3.98771849e+03 1.23929434e+03 5.27710668e+02
 2.97645655e+02 1.81046313e+02 8.82176938e+01 7.27246767e+01
 3.06085287e+01 3.28773546e+01 4.68186658e+00 8.04135619e+00
 3.91018302e-01 1.24928878e+00 8.59883622e+00 4.29570045e+01
 4.91054325e-01 1.19921297e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320937405049747
cond(S) = 191.66426434584486
E1 = -689.1704388600126  E_coul = 184.8921693643495
init E= -504.278269495663
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680407312315568  LUMO = 57.6531328867644
  mo_energy =
[-1.21685143e+02 -1.32941774e+01 -7.62455623e+00 -7.62455623e+00
 -7.62455623e+00 -1.64982539e+00 -6.80407312e-01 -6.80407312e-01
 -6.80407312e-01  5.76531329e+01  4.32824199e+02  2.20620143e+03
  1.17573424e+04  4.46717071e+04  1.31601713e+05]
E1 = -706.6709903882344  E_coul = 198.9468977586243
cycle= 1 E= -507.72409262961  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484139
diis-c [-0.23439013  1.        ]
  HOMO = -0.236429425982176  LUMO = 58.9418159738878
  mo_energy =
[-1.20284570e+02 -1.22660197e+01 -6.65497480e+00 -6.65497480e+00
 -6.65497480e+00 -1.16416527e+00 -2.36429426e-01 -2.36429426e-01
 -2.36429426e-01  5.89418160e+01  4.34212645e+02  2.20751982e+03
  1.17585236e+04  4.46728083e+04  1.31602765e+05]
E1 = -706.6175945420238  E_coul = 198.89274741251378
cycle= 2 E= -507.72484712951  delta_E= -0.000754  |g|= 0.00636  |ddm|= 0.0256
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00683204
diis-c [-4.60671264e-05  1.61025424e-03  9.98389746e-01]
  HOMO = -0.236766383309816  LUMO = 58.937122135608
  mo_energy =
[-1.20298076e+02 -1.22682457e+01 -6.65836454e+00 -6.65836454e+00
 -6.65836454e+00 -1.16429157e+00 -2.36766383e-01 -2.36766383e-01
 -2.36766383e-01  5.89371221e+01  4.34198676e+02  2.20749911e+03
  1.17584981e+04  4.46727811e+04  1.31602737e+05]
E1 = -706.6166588055361  E_coul = 198.89181140107326
cycle= 3 E= -507.724847404463  delta_E= -2.75e-07  |g|= 0.000162  |ddm|= 0.000436
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218613
diis-c [-1.20130933e-09  2.85505253e-05 -3.23498610e-02  1.03232131e+00]
  HOMO = -0.236772383844426  LUMO = 58.9370317535017
  mo_energy =
[-1.20298335e+02 -1.22682874e+01 -6.65843299e+00 -6.65843299e+00
 -6.65843299e+00 -1.16429348e+00 -2.36772384e-01 -2.36772384e-01
 -2.36772384e-01  5.89370318e+01  4.34198424e+02  2.20749878e+03
  1.17584977e+04  4.46727807e+04  1.31602736e+05]
E1 = -706.6166377320576  E_coul = 198.89179032743084
cycle= 4 E= -507.724847404627  delta_E= -1.64e-10  |g|= 8.13e-07  |ddm|= 9.77e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6166377320576  E_coul = 198.89179032743084
  HOMO = -0.236772331334384  LUMO = 58.9370324222362
  mo_energy =
[-1.20298333e+02 -1.22682871e+01 -6.65843251e+00 -6.65843251e+00
 -6.65843251e+00 -1.16429346e+00 -2.36772331e-01 -2.36772331e-01
 -2.36772331e-01  5.89370324e+01  4.34198426e+02  2.20749878e+03
  1.17584977e+04  4.46727807e+04  1.31602736e+05]
E1 = -706.6166378537586  E_coul = 198.89179044913172
Extra cycle  E= -507.724847404627  delta_E= -1.14e-13  |g|= 1.63e-08  |ddm|= 5.86e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67552506e+04 7.33287675e+03 1.83771978e+04 1.23929434e+03
 2.97645655e+02 8.82176938e+01 3.06085287e+01 4.68186658e+00
 3.91018302e-01 8.59883622e+00 4.91054325e-01]
E = -507.72484740462687
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:29 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2506322        1
[INPUT] 0    0    [1    /1   ]  7332.87674972        1
[INPUT] 0    0    [1    /1   ]  18377.1978197        1
[INPUT] 0    0    [1    /1   ]  1239.29433958        1
[INPUT] 0    0    [1    /1   ]  297.645655162        1
[INPUT] 0    0    [1    /1   ]  88.2176938318        1
[INPUT] 0    0    [1    /1   ]  30.6085287479        1
[INPUT] 0    0    [1    /1   ]  4.68186658297        1
[INPUT] 0    0    [1    /1   ]  0.391018301739       1
[INPUT] 1    0    [1    /1   ]  8.59883621994        1
[INPUT] 1    0    [1    /1   ]  0.491054325474       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.2506322, 1.0]], [0, [7332.876749718356, 1.0]], [0, [18377.197819746376, 1.0]], [0, [1239.294339580891, 1.0]], [0, [297.645655162323, 1.0]], [0, [88.2176938317936, 1.0]], [0, [30.60852874792551, 1.0]], [0, [4.681866582971908, 1.0]], [0, [0.39101830173924185, 1.0]], [1, [8.598836219943124, 1.0]], [1, [0.4910543254738162, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.2506322]
bas 1, expnt(s) = [7332.87674972]
bas 2, expnt(s) = [18377.19781975]
bas 3, expnt(s) = [1239.29433958]
bas 4, expnt(s) = [297.64565516]
bas 5, expnt(s) = [88.21769383]
bas 6, expnt(s) = [30.60852875]
bas 7, expnt(s) = [4.68186658]
bas 8, expnt(s) = [0.3910183]
bas 9, expnt(s) = [8.59883622]
bas 10, expnt(s) = [0.49105433]
CPU time:       617.89
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552506e+04 6.70663337e+03 7.33287675e+03 2.00203107e+03
 1.83771978e+04 3.98771849e+03 1.23929434e+03 5.27710668e+02
 2.97645655e+02 1.81046313e+02 8.82176938e+01 7.27246767e+01
 3.06085287e+01 3.28773546e+01 4.68186658e+00 8.04135619e+00
 3.91018302e-01 1.24928878e+00 8.59883622e+00 4.29570045e+01
 4.91054325e-01 1.19921297e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.320937405049747
cond(S) = 191.66426434584486
E1 = -689.1704388600126  E_coul = 184.8921693643495
init E= -504.278269495663
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680407312315568  LUMO = 57.6531328867644
  mo_energy =
[-1.21685143e+02 -1.32941774e+01 -7.62455623e+00 -7.62455623e+00
 -7.62455623e+00 -1.64982539e+00 -6.80407312e-01 -6.80407312e-01
 -6.80407312e-01  5.76531329e+01  4.32824199e+02  2.20620143e+03
  1.17573424e+04  4.46717071e+04  1.31601713e+05]
E1 = -706.6709903882344  E_coul = 198.9468977586243
cycle= 1 E= -507.72409262961  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.484139
diis-c [-0.23439013  1.        ]
  HOMO = -0.236429425982176  LUMO = 58.9418159738878
  mo_energy =
[-1.20284570e+02 -1.22660197e+01 -6.65497480e+00 -6.65497480e+00
 -6.65497480e+00 -1.16416527e+00 -2.36429426e-01 -2.36429426e-01
 -2.36429426e-01  5.89418160e+01  4.34212645e+02  2.20751982e+03
  1.17585236e+04  4.46728083e+04  1.31602765e+05]
E1 = -706.6175945420238  E_coul = 198.89274741251378
cycle= 2 E= -507.72484712951  delta_E= -0.000754  |g|= 0.00636  |ddm|= 0.0256
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00683204
diis-c [-4.60671264e-05  1.61025424e-03  9.98389746e-01]
  HOMO = -0.236766383309816  LUMO = 58.937122135608
  mo_energy =
[-1.20298076e+02 -1.22682457e+01 -6.65836454e+00 -6.65836454e+00
 -6.65836454e+00 -1.16429157e+00 -2.36766383e-01 -2.36766383e-01
 -2.36766383e-01  5.89371221e+01  4.34198676e+02  2.20749911e+03
  1.17584981e+04  4.46727811e+04  1.31602737e+05]
E1 = -706.6166588055361  E_coul = 198.89181140107326
cycle= 3 E= -507.724847404463  delta_E= -2.75e-07  |g|= 0.000162  |ddm|= 0.000436
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218613
diis-c [-1.20130933e-09  2.85505253e-05 -3.23498610e-02  1.03232131e+00]
  HOMO = -0.236772383844426  LUMO = 58.9370317535017
  mo_energy =
[-1.20298335e+02 -1.22682874e+01 -6.65843299e+00 -6.65843299e+00
 -6.65843299e+00 -1.16429348e+00 -2.36772384e-01 -2.36772384e-01
 -2.36772384e-01  5.89370318e+01  4.34198424e+02  2.20749878e+03
  1.17584977e+04  4.46727807e+04  1.31602736e+05]
E1 = -706.6166377320576  E_coul = 198.89179032743084
cycle= 4 E= -507.724847404627  delta_E= -1.64e-10  |g|= 8.13e-07  |ddm|= 9.77e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6166377320576  E_coul = 198.89179032743084
  HOMO = -0.236772331334384  LUMO = 58.9370324222362
  mo_energy =
[-1.20298333e+02 -1.22682871e+01 -6.65843251e+00 -6.65843251e+00
 -6.65843251e+00 -1.16429346e+00 -2.36772331e-01 -2.36772331e-01
 -2.36772331e-01  5.89370324e+01  4.34198426e+02  2.20749878e+03
  1.17584977e+04  4.46727807e+04  1.31602736e+05]
E1 = -706.6166378537586  E_coul = 198.89179044913172
Extra cycle  E= -507.724847404627  delta_E= -1.14e-13  |g|= 1.63e-08  |ddm|= 5.86e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 191.66426434584486
E1 = -706.6166378537586  E_coul = 198.89179044913172
init E= -507.724847404627
    CPU time for initialize scf      2.07 sec, wall time      0.13 sec
  HOMO = -0.236772330575095  LUMO = 58.9370324328193
  mo_energy =
[-1.20298333e+02 -1.22682871e+01 -6.65843250e+00 -6.65843250e+00
 -6.65843250e+00 -1.16429346e+00 -2.36772331e-01 -2.36772331e-01
 -2.36772331e-01  5.89370324e+01  4.34198426e+02  2.20749878e+03
  1.17584977e+04  4.46727807e+04  1.31602736e+05]
E1 = -706.616637856011  E_coul = 198.89179045138397
cycle= 1 E= -507.724847404627  delta_E= -2.27e-13  |g|= 3.82e-10  |ddm|= 1.05e-09
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.616637856011  E_coul = 198.89179045138397
  HOMO = -0.236772330562572  LUMO = 58.9370324330129
  mo_energy =
[-1.20298333e+02 -1.22682871e+01 -6.65843250e+00 -6.65843250e+00
 -6.65843250e+00 -1.16429346e+00 -2.36772331e-01 -2.36772331e-01
 -2.36772331e-01  5.89370324e+01  4.34198426e+02  2.20749878e+03
  1.17584977e+04  4.46727807e+04  1.31602736e+05]
E1 = -706.6166378560575  E_coul = 198.8917904514308
Extra cycle  E= -507.724847404627  delta_E= 3.41e-13  |g|= 2.17e-11  |ddm|= 2.17e-11
    CPU time for scf_cycle      2.58 sec, wall time      0.29 sec
exp = [3.67552506e+04 7.33287675e+03 1.83771978e+04 1.23929434e+03
 2.97645655e+02 8.82176938e+01 3.06085287e+01 4.68186658e+00
 3.91018302e-01 8.59883622e+00 4.91054325e-01]
grad_E = [-1.10678453e-09  9.34936003e-06  3.14230984e-07  1.49894404e-06
 -7.82651014e-06  1.60396496e-05 -3.74832333e-05 -6.58806770e-04
  1.94648458e-04 -1.01898528e-04 -5.28748982e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2539303        1
[INPUT] 0    0    [1    /1   ]  7332.8203136         1
[INPUT] 0    0    [1    /1   ]  18377.1971572        1
[INPUT] 0    0    [1    /1   ]  1238.32368008        1
[INPUT] 0    0    [1    /1   ]  297.580872673        1
[INPUT] 0    0    [1    /1   ]  88.2212998254        1
[INPUT] 0    0    [1    /1   ]  30.6115448652        1
[INPUT] 0    0    [1    /1   ]  4.68262893195        1
[INPUT] 0    0    [1    /1   ]  0.391002744611       1
[INPUT] 1    0    [1    /1   ]  8.59892027334        1
[INPUT] 1    0    [1    /1   ]  0.491055206441       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.253930335486, 1.0]], [0, [7332.820313603886, 1.0]], [0, [18377.197157197406, 1.0]], [0, [1238.3236800806476, 1.0]], [0, [297.5808726733195, 1.0]], [0, [88.22129982536532, 1.0]], [0, [30.61154486517147, 1.0]], [0, [4.682628931951139, 1.0]], [0, [0.39100274461096524, 1.0]], [1, [8.598920273340001, 1.0]], [1, [0.49105520644139133, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25393034]
bas 1, expnt(s) = [7332.8203136]
bas 2, expnt(s) = [18377.1971572]
bas 3, expnt(s) = [1238.32368008]
bas 4, expnt(s) = [297.58087267]
bas 5, expnt(s) = [88.22129983]
bas 6, expnt(s) = [30.61154487]
bas 7, expnt(s) = [4.68262893]
bas 8, expnt(s) = [0.39100274]
bas 9, expnt(s) = [8.59892027]
bas 10, expnt(s) = [0.49105521]
CPU time:       628.04
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552539e+04 6.70663382e+03 7.33282031e+03 2.00201951e+03
 1.83771972e+04 3.98771838e+03 1.23832368e+03 5.27400646e+02
 2.97580873e+02 1.81016759e+02 8.82212998e+01 7.27269063e+01
 3.06115449e+01 3.28797843e+01 4.68262893e+00 8.04233820e+00
 3.91002745e-01 1.24925150e+00 8.59892027e+00 4.29575293e+01
 4.91055206e-01 1.19921566e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092768998368
cond(S) = 191.621206402979
E1 = -689.1709949247038  E_coul = 184.8929776315388
init E= -504.278017293165
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680412539830265  LUMO = 57.6619439257381
  mo_energy =
[-1.21684991e+02 -1.32941279e+01 -7.62448349e+00 -7.62448349e+00
 -7.62448349e+00 -1.64984334e+00 -6.80412540e-01 -6.80412540e-01
 -6.80412540e-01  5.76619439e+01  4.32797008e+02  2.20512302e+03
  1.17541827e+04  4.46679767e+04  1.31597927e+05]
E1 = -706.672889332475  E_coul = 198.94879507673494
cycle= 1 E= -507.72409425574  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.484196
diis-c [-0.23444558  1.        ]
  HOMO = -0.23642060018785  LUMO = 58.9507471234196
  mo_energy =
[-1.20284206e+02 -1.22659062e+01 -6.65482644e+00 -6.65482644e+00
 -6.65482644e+00 -1.16416694e+00 -2.36420600e-01 -2.36420600e-01
 -2.36420600e-01  5.89507471e+01  4.34185674e+02  2.20644173e+03
  1.17553642e+04  4.46690782e+04  1.31598979e+05]
E1 = -706.6195167944488  E_coul = 198.89466856738537
cycle= 2 E= -507.724848227063  delta_E= -0.000754  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682887
diis-c [-4.60241683e-05  1.60960912e-03  9.98390391e-01]
  HOMO = -0.236757421683898  LUMO = 58.9460552315287
  mo_energy =
[-1.20297706e+02 -1.22681314e+01 -6.65821455e+00 -6.65821455e+00
 -6.65821455e+00 -1.16429319e+00 -2.36757422e-01 -2.36757422e-01
 -2.36757422e-01  5.89460552e+01  4.34171711e+02  2.20642103e+03
  1.17553387e+04  4.46690510e+04  1.31598951e+05]
E1 = -706.6185815504299  E_coul = 198.89373304866638
cycle= 3 E= -507.724848501764  delta_E= -2.75e-07  |g|= 0.000162  |ddm|= 0.000436
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218508
diis-c [-1.20060927e-09  2.85617896e-05 -3.23487955e-02  1.03232023e+00]
  HOMO = -0.236763419080514  LUMO = 58.9459648972532
  mo_energy =
[-1.20297965e+02 -1.22681730e+01 -6.65828296e+00 -6.65828296e+00
 -6.65828296e+00 -1.16429510e+00 -2.36763419e-01 -2.36763419e-01
 -2.36763419e-01  5.89459649e+01  4.34171459e+02  2.20642070e+03
  1.17553383e+04  4.46690506e+04  1.31598951e+05]
E1 = -706.6185604899614  E_coul = 198.89371198803366
cycle= 4 E= -507.724848501928  delta_E= -1.64e-10  |g|= 8.13e-07  |ddm|= 9.77e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6185604899614  E_coul = 198.89371198803366
  HOMO = -0.236763366596107  LUMO = 58.9459655656661
  mo_energy =
[-1.20297963e+02 -1.22681727e+01 -6.65828248e+00 -6.65828248e+00
 -6.65828248e+00 -1.16429508e+00 -2.36763367e-01 -2.36763367e-01
 -2.36763367e-01  5.89459656e+01  4.34171461e+02  2.20642070e+03
  1.17553383e+04  4.46690506e+04  1.31598951e+05]
E1 = -706.6185606115939  E_coul = 198.89371210966618
Extra cycle  E= -507.724848501928  delta_E=    0  |g|= 1.63e-08  |ddm|= 5.86e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
exp = [3.67552539e+04 7.33282031e+03 1.83771972e+04 1.23832368e+03
 2.97580873e+02 8.82212998e+01 3.06115449e+01 4.68262893e+00
 3.91002745e-01 8.59892027e+00 4.91055206e-01]
E = -507.72484850192774
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:36 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2539303        1
[INPUT] 0    0    [1    /1   ]  7332.8203136         1
[INPUT] 0    0    [1    /1   ]  18377.1971572        1
[INPUT] 0    0    [1    /1   ]  1238.32368008        1
[INPUT] 0    0    [1    /1   ]  297.580872673        1
[INPUT] 0    0    [1    /1   ]  88.2212998254        1
[INPUT] 0    0    [1    /1   ]  30.6115448652        1
[INPUT] 0    0    [1    /1   ]  4.68262893195        1
[INPUT] 0    0    [1    /1   ]  0.391002744611       1
[INPUT] 1    0    [1    /1   ]  8.59892027334        1
[INPUT] 1    0    [1    /1   ]  0.491055206441       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.253930335486, 1.0]], [0, [7332.820313603886, 1.0]], [0, [18377.197157197406, 1.0]], [0, [1238.3236800806476, 1.0]], [0, [297.5808726733195, 1.0]], [0, [88.22129982536532, 1.0]], [0, [30.61154486517147, 1.0]], [0, [4.682628931951139, 1.0]], [0, [0.39100274461096524, 1.0]], [1, [8.598920273340001, 1.0]], [1, [0.49105520644139133, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25393034]
bas 1, expnt(s) = [7332.8203136]
bas 2, expnt(s) = [18377.1971572]
bas 3, expnt(s) = [1238.32368008]
bas 4, expnt(s) = [297.58087267]
bas 5, expnt(s) = [88.22129983]
bas 6, expnt(s) = [30.61154487]
bas 7, expnt(s) = [4.68262893]
bas 8, expnt(s) = [0.39100274]
bas 9, expnt(s) = [8.59892027]
bas 10, expnt(s) = [0.49105521]
CPU time:       629.42
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552539e+04 6.70663382e+03 7.33282031e+03 2.00201951e+03
 1.83771972e+04 3.98771838e+03 1.23832368e+03 5.27400646e+02
 2.97580873e+02 1.81016759e+02 8.82212998e+01 7.27269063e+01
 3.06115449e+01 3.28797843e+01 4.68262893e+00 8.04233820e+00
 3.91002745e-01 1.24925150e+00 8.59892027e+00 4.29575293e+01
 4.91055206e-01 1.19921566e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092768998368
cond(S) = 191.621206402979
E1 = -689.1709949247038  E_coul = 184.8929776315388
init E= -504.278017293165
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680412539830265  LUMO = 57.6619439257381
  mo_energy =
[-1.21684991e+02 -1.32941279e+01 -7.62448349e+00 -7.62448349e+00
 -7.62448349e+00 -1.64984334e+00 -6.80412540e-01 -6.80412540e-01
 -6.80412540e-01  5.76619439e+01  4.32797008e+02  2.20512302e+03
  1.17541827e+04  4.46679767e+04  1.31597927e+05]
E1 = -706.672889332475  E_coul = 198.94879507673494
cycle= 1 E= -507.72409425574  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
diis-norm(errvec)=0.484196
diis-c [-0.23444558  1.        ]
  HOMO = -0.23642060018785  LUMO = 58.9507471234196
  mo_energy =
[-1.20284206e+02 -1.22659062e+01 -6.65482644e+00 -6.65482644e+00
 -6.65482644e+00 -1.16416694e+00 -2.36420600e-01 -2.36420600e-01
 -2.36420600e-01  5.89507471e+01  4.34185674e+02  2.20644173e+03
  1.17553642e+04  4.46690782e+04  1.31598979e+05]
E1 = -706.6195167944488  E_coul = 198.89466856738537
cycle= 2 E= -507.724848227063  delta_E= -0.000754  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.20 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682887
diis-c [-4.60241683e-05  1.60960912e-03  9.98390391e-01]
  HOMO = -0.236757421683898  LUMO = 58.9460552315287
  mo_energy =
[-1.20297706e+02 -1.22681314e+01 -6.65821455e+00 -6.65821455e+00
 -6.65821455e+00 -1.16429319e+00 -2.36757422e-01 -2.36757422e-01
 -2.36757422e-01  5.89460552e+01  4.34171711e+02  2.20642103e+03
  1.17553387e+04  4.46690510e+04  1.31598951e+05]
E1 = -706.6185815504299  E_coul = 198.89373304866638
cycle= 3 E= -507.724848501764  delta_E= -2.75e-07  |g|= 0.000162  |ddm|= 0.000436
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218508
diis-c [-1.20060927e-09  2.85617896e-05 -3.23487955e-02  1.03232023e+00]
  HOMO = -0.236763419080514  LUMO = 58.9459648972532
  mo_energy =
[-1.20297965e+02 -1.22681730e+01 -6.65828296e+00 -6.65828296e+00
 -6.65828296e+00 -1.16429510e+00 -2.36763419e-01 -2.36763419e-01
 -2.36763419e-01  5.89459649e+01  4.34171459e+02  2.20642070e+03
  1.17553383e+04  4.46690506e+04  1.31598951e+05]
E1 = -706.6185604899614  E_coul = 198.89371198803366
cycle= 4 E= -507.724848501928  delta_E= -1.64e-10  |g|= 8.13e-07  |ddm|= 9.77e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6185604899614  E_coul = 198.89371198803366
  HOMO = -0.236763366596107  LUMO = 58.9459655656661
  mo_energy =
[-1.20297963e+02 -1.22681727e+01 -6.65828248e+00 -6.65828248e+00
 -6.65828248e+00 -1.16429508e+00 -2.36763367e-01 -2.36763367e-01
 -2.36763367e-01  5.89459656e+01  4.34171461e+02  2.20642070e+03
  1.17553383e+04  4.46690506e+04  1.31598951e+05]
E1 = -706.6185606115939  E_coul = 198.89371210966618
Extra cycle  E= -507.724848501928  delta_E=    0  |g|= 1.63e-08  |ddm|= 5.86e-08
    CPU time for scf_cycle      0.99 sec, wall time      0.19 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 191.621206402979
E1 = -706.6185606115939  E_coul = 198.89371210966618
init E= -507.724848501928
    CPU time for initialize scf      2.10 sec, wall time      0.13 sec
  HOMO = -0.236763365837246  LUMO = 58.945965576244
  mo_energy =
[-1.20297963e+02 -1.22681727e+01 -6.65828247e+00 -6.65828247e+00
 -6.65828247e+00 -1.16429508e+00 -2.36763366e-01 -2.36763366e-01
 -2.36763366e-01  5.89459656e+01  4.34171461e+02  2.20642070e+03
  1.17553383e+04  4.46690506e+04  1.31598951e+05]
E1 = -706.6185606138449  E_coul = 198.8937121119171
cycle= 1 E= -507.724848501928  delta_E= -5.68e-14  |g|= 3.81e-10  |ddm|= 1.05e-09
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6185606138449  E_coul = 198.8937121119171
  HOMO = -0.236763365824728  LUMO = 58.9459655764383
  mo_energy =
[-1.20297963e+02 -1.22681727e+01 -6.65828247e+00 -6.65828247e+00
 -6.65828247e+00 -1.16429508e+00 -2.36763366e-01 -2.36763366e-01
 -2.36763366e-01  5.89459656e+01  4.34171461e+02  2.20642070e+03
  1.17553383e+04  4.46690506e+04  1.31598951e+05]
E1 = -706.6185606138912  E_coul = 198.8937121119635
Extra cycle  E= -507.724848501928  delta_E= 1.14e-13  |g|= 1.84e-11  |ddm|= 2.16e-11
    CPU time for scf_cycle      2.61 sec, wall time      0.30 sec
exp = [3.67552539e+04 7.33282031e+03 1.83771972e+04 1.23832368e+03
 2.97580873e+02 8.82212998e+01 3.06115449e+01 4.68262893e+00
 3.91002745e-01 8.59892027e+00 4.91055206e-01]
grad_E = [ 9.75515030e-10  9.42656084e-06  3.18123062e-07 -4.12910052e-07
 -1.35074211e-06  8.26527250e-06 -2.80446615e-05 -6.77770381e-05
 -7.17411613e-05  6.90912810e-06 -3.01713054e-05]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:43 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2533749        1
[INPUT] 0    0    [1    /1   ]  7332.83033498        1
[INPUT] 0    0    [1    /1   ]  18377.1972808        1
[INPUT] 0    0    [1    /1   ]  1238.47524137        1
[INPUT] 0    0    [1    /1   ]  297.647820806        1
[INPUT] 0    0    [1    /1   ]  88.2482590182        1
[INPUT] 0    0    [1    /1   ]  30.6224928411        1
[INPUT] 0    0    [1    /1   ]  4.68281887463        1
[INPUT] 0    0    [1    /1   ]  0.391005763017       1
[INPUT] 1    0    [1    /1   ]  8.59891062534        1
[INPUT] 1    0    [1    /1   ]  0.491054623284       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.25337485423, 1.0]], [0, [7332.830334977336, 1.0]], [0, [18377.197280818764, 1.0]], [0, [1238.4752413651945, 1.0]], [0, [297.6478208056276, 1.0]], [0, [88.24825901819685, 1.0]], [0, [30.622492841145675, 1.0]], [0, [4.682818874628582, 1.0]], [0, [0.3910057630172193, 1.0]], [1, [8.598910625341531, 1.0]], [1, [0.4910546232844273, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25337485]
bas 1, expnt(s) = [7332.83033498]
bas 2, expnt(s) = [18377.19728082]
bas 3, expnt(s) = [1238.47524137]
bas 4, expnt(s) = [297.64782081]
bas 5, expnt(s) = [88.24825902]
bas 6, expnt(s) = [30.62249284]
bas 7, expnt(s) = [4.68281887]
bas 8, expnt(s) = [0.39100576]
bas 9, expnt(s) = [8.59891063]
bas 10, expnt(s) = [0.49105462]
CPU time:       639.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552534e+04 6.70663375e+03 7.33283033e+03 2.00202157e+03
 1.83771973e+04 3.98771840e+03 1.23847524e+03 5.27449058e+02
 2.97647821e+02 1.81047301e+02 8.82482590e+01 7.27435739e+01
 3.06224928e+01 3.28886033e+01 4.68281887e+00 8.04258287e+00
 3.91005763e-01 1.24925873e+00 8.59891063e+00 4.29574691e+01
 4.91054623e-01 1.19921388e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092527868619
cond(S) = 191.64224335896137
E1 = -689.1710428905294  E_coul = 184.89310152537607
init E= -504.277941365153
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680411746887759  LUMO = 57.6914113147402
  mo_energy =
[-1.21684982e+02 -1.32941161e+01 -7.62446942e+00 -7.62446942e+00
 -7.62446942e+00 -1.64984865e+00 -6.80411747e-01 -6.80411747e-01
 -6.80411747e-01  5.76914113e+01  4.32954144e+02  2.20559748e+03
  1.17550044e+04  4.46688719e+04  1.31598818e+05]
E1 = -706.6731518736511  E_coul = 198.94905689838527
cycle= 1 E= -507.724094975266  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484198
diis-c [-0.23444814  1.        ]
  HOMO = -0.236417252546802  LUMO = 58.9802987063525
  mo_energy =
[-1.20284177e+02 -1.22658852e+01 -6.65480284e+00 -6.65480284e+00
 -6.65480284e+00 -1.16416622e+00 -2.36417253e-01 -2.36417253e-01
 -2.36417253e-01  5.89802987e+01  4.34342840e+02  2.20691621e+03
  1.17561860e+04  4.46699734e+04  1.31599870e+05]
E1 = -706.6198174904611  E_coul = 198.89496915293716
cycle= 2 E= -507.724848337524  delta_E= -0.000753  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682593
diis-c [-4.59855160e-05  1.60766701e-03  9.98392333e-01]
  HOMO = -0.236753783267172  LUMO = 58.9756088408065
  mo_energy =
[-1.20297669e+02 -1.22681085e+01 -6.65818821e+00 -6.65818821e+00
 -6.65818821e+00 -1.16429236e+00 -2.36753783e-01 -2.36753783e-01
 -2.36753783e-01  5.89756088e+01  4.34328884e+02  2.20689553e+03
  1.17561605e+04  4.46699462e+04  1.31599842e+05]
E1 = -706.6188831538936  E_coul = 198.89403454200644
cycle= 3 E= -507.724848611887  delta_E= -2.74e-07  |g|= 0.000162  |ddm|= 0.000435
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218367
diis-c [-1.19894645e-09  2.85695511e-05 -3.23414802e-02  1.03231291e+00]
  HOMO = -0.236759773429334  LUMO = 58.975518579654
  mo_energy =
[-1.20297928e+02 -1.22681500e+01 -6.65825654e+00 -6.65825654e+00
 -6.65825654e+00 -1.16429427e+00 -2.36759773e-01 -2.36759773e-01
 -2.36759773e-01  5.89755186e+01  4.34328633e+02  2.20689520e+03
  1.17561601e+04  4.46699458e+04  1.31599842e+05]
E1 = -706.6188621202961  E_coul = 198.89401350824508
cycle= 4 E= -507.724848612051  delta_E= -1.64e-10  |g|= 8.12e-07  |ddm|= 9.76e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6188621202961  E_coul = 198.89401350824508
  HOMO = -0.236759721017028  LUMO = 58.9755192475248
  mo_energy =
[-1.20297926e+02 -1.22681497e+01 -6.65825606e+00 -6.65825606e+00
 -6.65825606e+00 -1.16429425e+00 -2.36759721e-01 -2.36759721e-01
 -2.36759721e-01  5.89755192e+01  4.34328635e+02  2.20689520e+03
  1.17561601e+04  4.46699458e+04  1.31599842e+05]
E1 = -706.6188622417644  E_coul = 198.89401362971319
Extra cycle  E= -507.724848612051  delta_E= -2.27e-13  |g|= 1.62e-08  |ddm|= 5.85e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67552534e+04 7.33283033e+03 1.83771973e+04 1.23847524e+03
 2.97647821e+02 8.82482590e+01 3.06224928e+01 4.68281887e+00
 3.91005763e-01 8.59891063e+00 4.91054623e-01]
E = -507.72484861205123
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:44 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2533749        1
[INPUT] 0    0    [1    /1   ]  7332.83033498        1
[INPUT] 0    0    [1    /1   ]  18377.1972808        1
[INPUT] 0    0    [1    /1   ]  1238.47524137        1
[INPUT] 0    0    [1    /1   ]  297.647820806        1
[INPUT] 0    0    [1    /1   ]  88.2482590182        1
[INPUT] 0    0    [1    /1   ]  30.6224928411        1
[INPUT] 0    0    [1    /1   ]  4.68281887463        1
[INPUT] 0    0    [1    /1   ]  0.391005763017       1
[INPUT] 1    0    [1    /1   ]  8.59891062534        1
[INPUT] 1    0    [1    /1   ]  0.491054623284       1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.25337485423, 1.0]], [0, [7332.830334977336, 1.0]], [0, [18377.197280818764, 1.0]], [0, [1238.4752413651945, 1.0]], [0, [297.6478208056276, 1.0]], [0, [88.24825901819685, 1.0]], [0, [30.622492841145675, 1.0]], [0, [4.682818874628582, 1.0]], [0, [0.3910057630172193, 1.0]], [1, [8.598910625341531, 1.0]], [1, [0.4910546232844273, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25337485]
bas 1, expnt(s) = [7332.83033498]
bas 2, expnt(s) = [18377.19728082]
bas 3, expnt(s) = [1238.47524137]
bas 4, expnt(s) = [297.64782081]
bas 5, expnt(s) = [88.24825902]
bas 6, expnt(s) = [30.62249284]
bas 7, expnt(s) = [4.68281887]
bas 8, expnt(s) = [0.39100576]
bas 9, expnt(s) = [8.59891063]
bas 10, expnt(s) = [0.49105462]
CPU time:       640.95
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552534e+04 6.70663375e+03 7.33283033e+03 2.00202157e+03
 1.83771973e+04 3.98771840e+03 1.23847524e+03 5.27449058e+02
 2.97647821e+02 1.81047301e+02 8.82482590e+01 7.27435739e+01
 3.06224928e+01 3.28886033e+01 4.68281887e+00 8.04258287e+00
 3.91005763e-01 1.24925873e+00 8.59891063e+00 4.29574691e+01
 4.91054623e-01 1.19921388e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092527868619
cond(S) = 191.64224335896137
E1 = -689.1710428905294  E_coul = 184.89310152537607
init E= -504.277941365153
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680411746887759  LUMO = 57.6914113147402
  mo_energy =
[-1.21684982e+02 -1.32941161e+01 -7.62446942e+00 -7.62446942e+00
 -7.62446942e+00 -1.64984865e+00 -6.80411747e-01 -6.80411747e-01
 -6.80411747e-01  5.76914113e+01  4.32954144e+02  2.20559748e+03
  1.17550044e+04  4.46688719e+04  1.31598818e+05]
E1 = -706.6731518736511  E_coul = 198.94905689838527
cycle= 1 E= -507.724094975266  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484198
diis-c [-0.23444814  1.        ]
  HOMO = -0.236417252546802  LUMO = 58.9802987063525
  mo_energy =
[-1.20284177e+02 -1.22658852e+01 -6.65480284e+00 -6.65480284e+00
 -6.65480284e+00 -1.16416622e+00 -2.36417253e-01 -2.36417253e-01
 -2.36417253e-01  5.89802987e+01  4.34342840e+02  2.20691621e+03
  1.17561860e+04  4.46699734e+04  1.31599870e+05]
E1 = -706.6198174904611  E_coul = 198.89496915293716
cycle= 2 E= -507.724848337524  delta_E= -0.000753  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682593
diis-c [-4.59855160e-05  1.60766701e-03  9.98392333e-01]
  HOMO = -0.236753783267172  LUMO = 58.9756088408065
  mo_energy =
[-1.20297669e+02 -1.22681085e+01 -6.65818821e+00 -6.65818821e+00
 -6.65818821e+00 -1.16429236e+00 -2.36753783e-01 -2.36753783e-01
 -2.36753783e-01  5.89756088e+01  4.34328884e+02  2.20689553e+03
  1.17561605e+04  4.46699462e+04  1.31599842e+05]
E1 = -706.6188831538936  E_coul = 198.89403454200644
cycle= 3 E= -507.724848611887  delta_E= -2.74e-07  |g|= 0.000162  |ddm|= 0.000435
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218367
diis-c [-1.19894645e-09  2.85695511e-05 -3.23414802e-02  1.03231291e+00]
  HOMO = -0.236759773429334  LUMO = 58.975518579654
  mo_energy =
[-1.20297928e+02 -1.22681500e+01 -6.65825654e+00 -6.65825654e+00
 -6.65825654e+00 -1.16429427e+00 -2.36759773e-01 -2.36759773e-01
 -2.36759773e-01  5.89755186e+01  4.34328633e+02  2.20689520e+03
  1.17561601e+04  4.46699458e+04  1.31599842e+05]
E1 = -706.6188621202961  E_coul = 198.89401350824508
cycle= 4 E= -507.724848612051  delta_E= -1.64e-10  |g|= 8.12e-07  |ddm|= 9.76e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6188621202961  E_coul = 198.89401350824508
  HOMO = -0.236759721017028  LUMO = 58.9755192475248
  mo_energy =
[-1.20297926e+02 -1.22681497e+01 -6.65825606e+00 -6.65825606e+00
 -6.65825606e+00 -1.16429425e+00 -2.36759721e-01 -2.36759721e-01
 -2.36759721e-01  5.89755192e+01  4.34328635e+02  2.20689520e+03
  1.17561601e+04  4.46699458e+04  1.31599842e+05]
E1 = -706.6188622417644  E_coul = 198.89401362971319
Extra cycle  E= -507.724848612051  delta_E= -2.27e-13  |g|= 1.62e-08  |ddm|= 5.85e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 191.64224335896137
E1 = -706.6188622417644  E_coul = 198.89401362971319
init E= -507.724848612051
    CPU time for initialize scf      2.10 sec, wall time      0.13 sec
  HOMO = -0.23675972025938  LUMO = 58.9755192580906
  mo_energy =
[-1.20297926e+02 -1.22681497e+01 -6.65825605e+00 -6.65825605e+00
 -6.65825605e+00 -1.16429425e+00 -2.36759720e-01 -2.36759720e-01
 -2.36759720e-01  5.89755193e+01  4.34328635e+02  2.20689520e+03
  1.17561601e+04  4.46699458e+04  1.31599842e+05]
E1 = -706.618862244012  E_coul = 198.89401363196058
cycle= 1 E= -507.724848612051  delta_E= -2.27e-13  |g|= 3.8e-10  |ddm|= 1.05e-09
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.618862244012  E_coul = 198.89401363196058
  HOMO = -0.236759720246892  LUMO = 58.9755192582842
  mo_energy =
[-1.20297926e+02 -1.22681497e+01 -6.65825605e+00 -6.65825605e+00
 -6.65825605e+00 -1.16429425e+00 -2.36759720e-01 -2.36759720e-01
 -2.36759720e-01  5.89755193e+01  4.34328635e+02  2.20689520e+03
  1.17561601e+04  4.46699458e+04  1.31599842e+05]
E1 = -706.6188622440582  E_coul = 198.8940136320072
Extra cycle  E= -507.724848612051  delta_E= 4.55e-13  |g|= 1.93e-11  |ddm|= 2.16e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.30 sec
exp = [3.67552534e+04 7.33283033e+03 1.83771973e+04 1.23847524e+03
 2.97647821e+02 8.82482590e+01 3.06224928e+01 4.68281887e+00
 3.91005763e-01 8.59891063e+00 4.91054623e-01]
grad_E = [ 8.59776152e-10  9.42281126e-06  3.17907893e-07 -5.25186689e-07
 -4.94852319e-07  3.06177952e-06 -1.20516778e-05  1.83564154e-05
 -3.61890799e-05  6.98725868e-06 -7.15761303e-06]
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:51 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2527796        1
[INPUT] 0    0    [1    /1   ]  7332.8409615         1
[INPUT] 0    0    [1    /1   ]  18377.1974106        1
[INPUT] 0    0    [1    /1   ]  1238.64008743        1
[INPUT] 0    0    [1    /1   ]  297.708066876        1
[INPUT] 0    0    [1    /1   ]  88.2720042615        1
[INPUT] 0    0    [1    /1   ]  30.6318710139        1
[INPUT] 0    0    [1    /1   ]  4.68287456778        1
[INPUT] 0    0    [1    /1   ]  0.391008985818       1
[INPUT] 1    0    [1    /1   ]  8.59889946574        1
[INPUT] 1    0    [1    /1   ]  0.49105418528        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.25277956687, 1.0]], [0, [7332.840961495372, 1.0]], [0, [18377.1974105808, 1.0]], [0, [1238.640087433073, 1.0]], [0, [297.70806687602374, 1.0]], [0, [88.2720042615425, 1.0]], [0, [30.631871013865855, 1.0]], [0, [4.6828745677825925, 1.0]], [0, [0.3910089858179676, 1.0]], [1, [8.598899465742026, 1.0]], [1, [0.49105418528035344, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25277957]
bas 1, expnt(s) = [7332.8409615]
bas 2, expnt(s) = [18377.19741058]
bas 3, expnt(s) = [1238.64008743]
bas 4, expnt(s) = [297.70806688]
bas 5, expnt(s) = [88.27200426]
bas 6, expnt(s) = [30.63187101]
bas 7, expnt(s) = [4.68287457]
bas 8, expnt(s) = [0.39100899]
bas 9, expnt(s) = [8.59889947]
bas 10, expnt(s) = [0.49105419]
CPU time:       651.15
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552528e+04 6.70663367e+03 7.33284096e+03 2.00202374e+03
 1.83771974e+04 3.98771842e+03 1.23864009e+03 5.27501711e+02
 2.97708067e+02 1.81074784e+02 8.82720043e+01 7.27582534e+01
 3.06318710e+01 3.28961572e+01 4.68287457e+00 8.04265461e+00
 3.91008986e-01 1.24926645e+00 8.59889947e+00 4.29573994e+01
 4.91054185e-01 1.19921255e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092447350281
cond(S) = 191.66195820768704
E1 = -689.170984867991  E_coul = 184.8931163668648
init E= -504.277868501126
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680410936469531  LUMO = 57.716449817916
  mo_energy =
[-1.21684991e+02 -1.32941103e+01 -7.62446633e+00 -7.62446633e+00
 -7.62446633e+00 -1.64985029e+00 -6.80410936e-01 -6.80410936e-01
 -6.80410936e-01  5.77164498e+01  4.33092177e+02  2.20604739e+03
  1.17558270e+04  4.46697777e+04  1.31599723e+05]
E1 = -706.6731257088396  E_coul = 198.94903024382992
cycle= 1 E= -507.72409546501  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484197
diis-c [-0.23444709  1.        ]
  HOMO = -0.236416100435932  LUMO = 59.0053944110151
  mo_energy =
[-1.20284200e+02 -1.22658807e+01 -6.65480259e+00 -6.65480259e+00
 -6.65480259e+00 -1.16416549e+00 -2.36416100e-01 -2.36416100e-01
 -2.36416100e-01  5.90053944e+01  4.34480866e+02  2.20736610e+03
  1.17570086e+04  4.46708792e+04  1.31600775e+05]
E1 = -706.6198218060714  E_coul = 198.89497344009393
cycle= 2 E= -507.724848365977  delta_E= -0.000753  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682383
diis-c [-4.59581304e-05  1.60592452e-03  9.98394075e-01]
  HOMO = -0.236752393096132  LUMO = 59.0007060566312
  mo_energy =
[-1.20297686e+02 -1.22681025e+01 -6.65818576e+00 -6.65818576e+00
 -6.65818576e+00 -1.16429153e+00 -2.36752393e-01 -2.36752393e-01
 -2.36752393e-01  5.90007061e+01  4.34466915e+02  2.20734542e+03
  1.17569831e+04  4.46708520e+04  1.31600747e+05]
E1 = -706.6188882046409  E_coul = 198.89403956456223
cycle= 3 E= -507.724848640079  delta_E= -2.74e-07  |g|= 0.000162  |ddm|= 0.000435
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218257
diis-c [-1.19758423e-09  2.85746588e-05 -3.23349693e-02  1.03230639e+00]
  HOMO = -0.236758377250599  LUMO = 59.0006158540137
  mo_energy =
[-1.20297944e+02 -1.22681440e+01 -6.65825403e+00 -6.65825403e+00
 -6.65825403e+00 -1.16429344e+00 -2.36758377e-01 -2.36758377e-01
 -2.36758377e-01  5.90006159e+01  4.34466664e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188671931646  E_coul = 198.89401855292215
cycle= 4 E= -507.724848640242  delta_E= -1.64e-10  |g|= 8.11e-07  |ddm|= 9.75e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6188671931646  E_coul = 198.89401855292215
  HOMO = -0.236758324898695  LUMO = 59.0006165214476
  mo_energy =
[-1.20297942e+02 -1.22681437e+01 -6.65825355e+00 -6.65825355e+00
 -6.65825355e+00 -1.16429342e+00 -2.36758325e-01 -2.36758325e-01
 -2.36758325e-01  5.90006165e+01  4.34466666e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188673144954  E_coul = 198.89401867425343
Extra cycle  E= -507.724848640242  delta_E= 4.55e-13  |g|= 1.62e-08  |ddm|= 5.84e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67552528e+04 7.33284096e+03 1.83771974e+04 1.23864009e+03
 2.97708067e+02 8.82720043e+01 3.06318710e+01 4.68287457e+00
 3.91008986e-01 8.59889947e+00 4.91054185e-01]
E = -507.72484864024204
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:52 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2527796        1
[INPUT] 0    0    [1    /1   ]  7332.8409615         1
[INPUT] 0    0    [1    /1   ]  18377.1974106        1
[INPUT] 0    0    [1    /1   ]  1238.64008743        1
[INPUT] 0    0    [1    /1   ]  297.708066876        1
[INPUT] 0    0    [1    /1   ]  88.2720042615        1
[INPUT] 0    0    [1    /1   ]  30.6318710139        1
[INPUT] 0    0    [1    /1   ]  4.68287456778        1
[INPUT] 0    0    [1    /1   ]  0.391008985818       1
[INPUT] 1    0    [1    /1   ]  8.59889946574        1
[INPUT] 1    0    [1    /1   ]  0.49105418528        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.25277956687, 1.0]], [0, [7332.840961495372, 1.0]], [0, [18377.1974105808, 1.0]], [0, [1238.640087433073, 1.0]], [0, [297.70806687602374, 1.0]], [0, [88.2720042615425, 1.0]], [0, [30.631871013865855, 1.0]], [0, [4.6828745677825925, 1.0]], [0, [0.3910089858179676, 1.0]], [1, [8.598899465742026, 1.0]], [1, [0.49105418528035344, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25277957]
bas 1, expnt(s) = [7332.8409615]
bas 2, expnt(s) = [18377.19741058]
bas 3, expnt(s) = [1238.64008743]
bas 4, expnt(s) = [297.70806688]
bas 5, expnt(s) = [88.27200426]
bas 6, expnt(s) = [30.63187101]
bas 7, expnt(s) = [4.68287457]
bas 8, expnt(s) = [0.39100899]
bas 9, expnt(s) = [8.59889947]
bas 10, expnt(s) = [0.49105419]
CPU time:       652.56
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552528e+04 6.70663367e+03 7.33284096e+03 2.00202374e+03
 1.83771974e+04 3.98771842e+03 1.23864009e+03 5.27501711e+02
 2.97708067e+02 1.81074784e+02 8.82720043e+01 7.27582534e+01
 3.06318710e+01 3.28961572e+01 4.68287457e+00 8.04265461e+00
 3.91008986e-01 1.24926645e+00 8.59889947e+00 4.29573994e+01
 4.91054185e-01 1.19921255e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092447350281
cond(S) = 191.66195820768704
E1 = -689.170984867991  E_coul = 184.8931163668648
init E= -504.277868501126
    CPU time for initialize scf      0.34 sec, wall time      0.06 sec
  HOMO = -0.680410936469531  LUMO = 57.716449817916
  mo_energy =
[-1.21684991e+02 -1.32941103e+01 -7.62446633e+00 -7.62446633e+00
 -7.62446633e+00 -1.64985029e+00 -6.80410936e-01 -6.80410936e-01
 -6.80410936e-01  5.77164498e+01  4.33092177e+02  2.20604739e+03
  1.17558270e+04  4.46697777e+04  1.31599723e+05]
E1 = -706.6731257088396  E_coul = 198.94903024382992
cycle= 1 E= -507.72409546501  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484197
diis-c [-0.23444709  1.        ]
  HOMO = -0.236416100435932  LUMO = 59.0053944110151
  mo_energy =
[-1.20284200e+02 -1.22658807e+01 -6.65480259e+00 -6.65480259e+00
 -6.65480259e+00 -1.16416549e+00 -2.36416100e-01 -2.36416100e-01
 -2.36416100e-01  5.90053944e+01  4.34480866e+02  2.20736610e+03
  1.17570086e+04  4.46708792e+04  1.31600775e+05]
E1 = -706.6198218060714  E_coul = 198.89497344009393
cycle= 2 E= -507.724848365977  delta_E= -0.000753  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682383
diis-c [-4.59581304e-05  1.60592452e-03  9.98394075e-01]
  HOMO = -0.236752393096132  LUMO = 59.0007060566312
  mo_energy =
[-1.20297686e+02 -1.22681025e+01 -6.65818576e+00 -6.65818576e+00
 -6.65818576e+00 -1.16429153e+00 -2.36752393e-01 -2.36752393e-01
 -2.36752393e-01  5.90007061e+01  4.34466915e+02  2.20734542e+03
  1.17569831e+04  4.46708520e+04  1.31600747e+05]
E1 = -706.6188882046409  E_coul = 198.89403956456223
cycle= 3 E= -507.724848640079  delta_E= -2.74e-07  |g|= 0.000162  |ddm|= 0.000435
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218257
diis-c [-1.19758423e-09  2.85746588e-05 -3.23349693e-02  1.03230639e+00]
  HOMO = -0.236758377250599  LUMO = 59.0006158540137
  mo_energy =
[-1.20297944e+02 -1.22681440e+01 -6.65825403e+00 -6.65825403e+00
 -6.65825403e+00 -1.16429344e+00 -2.36758377e-01 -2.36758377e-01
 -2.36758377e-01  5.90006159e+01  4.34466664e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188671931646  E_coul = 198.89401855292215
cycle= 4 E= -507.724848640242  delta_E= -1.64e-10  |g|= 8.11e-07  |ddm|= 9.75e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6188671931646  E_coul = 198.89401855292215
  HOMO = -0.236758324898695  LUMO = 59.0006165214476
  mo_energy =
[-1.20297942e+02 -1.22681437e+01 -6.65825355e+00 -6.65825355e+00
 -6.65825355e+00 -1.16429342e+00 -2.36758325e-01 -2.36758325e-01
 -2.36758325e-01  5.90006165e+01  4.34466666e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188673144954  E_coul = 198.89401867425343
Extra cycle  E= -507.724848640242  delta_E= 4.55e-13  |g|= 1.62e-08  |ddm|= 5.84e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
Set gradient conv threshold to 3.16228e-05
cond(S) = 191.66195820768704
E1 = -706.6188673144954  E_coul = 198.89401867425343
init E= -507.724848640242
    CPU time for initialize scf      2.09 sec, wall time      0.13 sec
  HOMO = -0.236758324142095  LUMO = 59.0006165320044
  mo_energy =
[-1.20297942e+02 -1.22681437e+01 -6.65825354e+00 -6.65825354e+00
 -6.65825354e+00 -1.16429342e+00 -2.36758324e-01 -2.36758324e-01
 -2.36758324e-01  5.90006165e+01  4.34466666e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188673167403  E_coul = 198.894018676498
cycle= 1 E= -507.724848640242  delta_E= -2.27e-13  |g|= 3.81e-10  |ddm|= 1.05e-09
    CPU time for cycle= 1      0.37 sec, wall time      0.02 sec
E1 = -706.6188673167403  E_coul = 198.894018676498
  HOMO = -0.236758324129618  LUMO = 59.0006165321985
  mo_energy =
[-1.20297942e+02 -1.22681437e+01 -6.65825354e+00 -6.65825354e+00
 -6.65825354e+00 -1.16429342e+00 -2.36758324e-01 -2.36758324e-01
 -2.36758324e-01  5.90006165e+01  4.34466666e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188673167868  E_coul = 198.89401867654445
Extra cycle  E= -507.724848640242  delta_E= -1.14e-13  |g|= 1.94e-11  |ddm|= 2.15e-11
    CPU time for scf_cycle      2.60 sec, wall time      0.29 sec
exp = [3.67552528e+04 7.33284096e+03 1.83771974e+04 1.23864009e+03
 2.97708067e+02 8.82720043e+01 3.06318710e+01 4.68287457e+00
 3.91008986e-01 8.59889947e+00 4.91054185e-01]
grad_E = [ 6.80612958e-10  9.41660452e-06  3.17573872e-07 -5.37466207e-07
 -2.35657844e-07  2.31713681e-07 -4.14533847e-07  6.89883648e-06
  8.31260407e-06 -1.30930565e-06  3.05741708e-06]
 message: Optimization terminated successfully
 success: True
  status: 0
     fun: -507.72484864024204
       x: [ 3.676e+04  7.333e+03  1.838e+04  1.239e+03  2.977e+02
            8.827e+01  3.063e+01  4.683e+00  3.910e-01  8.599e+00
            4.911e-01]
     nit: 56
     jac: [ 6.806e-10  9.417e-06  3.176e-07 -5.375e-07 -2.357e-07
            2.317e-07 -4.145e-07  6.899e-06  8.313e-06 -1.309e-06
            3.057e-06]
    nfev: 59
    njev: 56
#INFO: **** input file is /home/nike/basis-set-optimization/018_Ar/input.py ****
#!/usr/bin/env python

import pyscf
from pyscfad import gto, scf
import numpy as np
import re

from scipy import optimize

VERBOSITY = 9

def parse_basis_str(slug):
    numbers_and_letters = re.findall(r'[A-Za-z]+|\d+', slug)
    numbers_with_letters = [
        [int(numbers_and_letters[i]), numbers_and_letters[i+1].capitalize()]
        for i in range(0, len(numbers_and_letters), 2)
    ]
    return numbers_with_letters

def decaying_nums(n):
    return np.array([0.5 * (n - i) for i in range(n)])

def get_basis_substring(exponent, orbital):
    substring = f'''
    Ar  {orbital}
        {exponent}              1.0'''
    return substring

def get_basis_string(basis_str, exponents, exp_array=None):
    basis_set = parse_basis_str(basis_str)
    basis_nums = [num for [num, _] in basis_set]
    basis_cum_nums = np.cumsum(basis_nums)

    if exp_array is None:
        exp_array = np.zeros((exponents.size, 2))

    exp_array[np.where(exp_array[:, 1] == 0), 0] = exponents[np.where(exp_array[:, 1] == 0)]

    basis_string = ''.join([''.join([
        get_basis_substring(exp_array[i, 0], orbital) if j == 0 else
        get_basis_substring(exp_array[i + basis_cum_nums[j-1], 0], orbital)
        for i in range(num)
    ]) for j, [num, orbital] in enumerate(basis_set)])

    return basis_string

def atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}

    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    e = mf.kernel()

    print(f"exp = {exponents}")
    print(f"E = {e}")

    return e

def grad_atomic_energy(exponents, basis_str, exp_array=None):
    mol = gto.Mole()
    mol.atom = 'Ar 0 0 0'  # in Angstrom

    basis_string = get_basis_string(basis_str, exponents, exp_array)
    mol.basis = {'Ar': pyscf.gto.basis.parse(basis_string)}
    
    mol.verbose = VERBOSITY
    mol.build()

    mf = scf.RHF(mol)
    mf.kernel()
    jac = mf.energy_grad()

    print(f"exp = {exponents}")
    print(f"grad_E = {jac.exp}")

    grad_E = np.array(jac.exp)

    return grad_E

def minimize_energy(basis_str, exp_array=None):
    x0 = exp_array[:, 0]
    bnds = ((1e-9, None) for _ in range(exp_array.shape[0]))

    res = optimize.minimize(
        atomic_energy,
        x0,
        args=(basis_str, exp_array),
        method="SLSQP",
        jac=grad_atomic_energy,
        hess=None,
        hessp=None,
        bounds=bnds,
        tol=1e-9,
        callback=None,
        options={"maxfev": 10000, "ftol": 1e-9},
    )
    
    print(res)
    print(f"E = {atomic_energy(res.x, basis_str)}")
    print(f"exp = [{','.join(['{:.16e}'.format(x) for x in res.x])}]")
    
exps = np.zeros((11, 2))
#exps[:, 0] = decaying_nums(5)
exps_old = np.array([7.3434048430985667e+03,1.8377323914102573e+04,1.4118365138480469e+03,3.3286641093852631e+02,9.7106731989509825e+01,3.2811638314040472e+01,4.7064342197545095e+00,3.9098298955915772e-01,8.5990340665191276e+00,4.9099229757730323e-01]
)
exps[1:, 0] = exps_old[:]
exps[0, 0] = np.max(exps_old) * 2

basis = "9s2p"

minimize_energy(basis, exps)
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='bc12048.int.ets1.calculquebec.ca', release='3.10.0-1160.76.1.el7.x86_64', version='#1 SMP Wed Aug 10 16:21:17 UTC 2022', machine='x86_64')  Threads 16
Python 3.10.2 (main, Feb  4 2022, 19:11:32) [GCC 9.3.0]
numpy 1.24.2  scipy 1.10.1
Date: Fri Mar 17 00:34:59 2023
PySCF version 2.1.1+ad
PySCF path  /localscratch/nike.35630413.0/ENV/lib/python3.10/site-packages/pyscf

[ENV] PYSCF_MAX_MEMORY 16000
[ENV] PYSCF_CONFIG_FILE /home/nike/.pyscfad_conf.py
[CONFIG] DEBUG = False
[CONFIG] MAX_MEMORY = 16000
[CONFIG] TMPDIR = /tmp
[CONFIG] UNIT = angstrom
[CONFIG] VERBOSE = 3
[CONFIG] conf_file = /home/nike/.pyscfad_conf.py
[CONFIG] pyscf_numpy_backend = jax
[CONFIG] pyscf_scipy_backend = jax
[CONFIG] pyscf_scipy_linalg_backend = pyscfad
[CONFIG] pyscfad = True
[CONFIG] pyscfad_ccsd_implicit_diff = True
[CONFIG] pyscfad_scf_implicit_diff = True
[INPUT] verbose = 9
[INPUT] max_memory = 16000 
[INPUT] num. atoms = 1
[INPUT] num. electrons = 18
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ar     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT] ---------------- BASIS SET ---------------- 
[INPUT] l, kappa, [nprim/nctr], expnt,             c_1 c_2 ...
[INPUT] Ar
[INPUT] 0    0    [1    /1   ]  36755.2527796        1
[INPUT] 0    0    [1    /1   ]  7332.8409615         1
[INPUT] 0    0    [1    /1   ]  18377.1974106        1
[INPUT] 0    0    [1    /1   ]  1238.64008743        1
[INPUT] 0    0    [1    /1   ]  297.708066876        1
[INPUT] 0    0    [1    /1   ]  88.2720042615        1
[INPUT] 0    0    [1    /1   ]  30.6318710139        1
[INPUT] 0    0    [1    /1   ]  4.68287456778        1
[INPUT] 0    0    [1    /1   ]  0.391008985818       1
[INPUT] 1    0    [1    /1   ]  8.59889946574        1
[INPUT] 1    0    [1    /1   ]  0.49105418528        1

nuclear repulsion = 0
number of shells = 11
number of NR pGTOs = 15
number of NR cGTOs = 15
basis = {'Ar': [[0, [36755.25277956687, 1.0]], [0, [7332.840961495372, 1.0]], [0, [18377.1974105808, 1.0]], [0, [1238.640087433073, 1.0]], [0, [297.70806687602374, 1.0]], [0, [88.2720042615425, 1.0]], [0, [30.631871013865855, 1.0]], [0, [4.6828745677825925, 1.0]], [0, [0.3910089858179676, 1.0]], [1, [8.598899465742026, 1.0]], [1, [0.49105418528035344, 1.0]]]}
ecp = {}
bas 0, expnt(s) = [36755.25277957]
bas 1, expnt(s) = [7332.8409615]
bas 2, expnt(s) = [18377.19741058]
bas 3, expnt(s) = [1238.64008743]
bas 4, expnt(s) = [297.70806688]
bas 5, expnt(s) = [88.27200426]
bas 6, expnt(s) = [30.63187101]
bas 7, expnt(s) = [4.68287457]
bas 8, expnt(s) = [0.39100899]
bas 9, expnt(s) = [8.59889947]
bas 10, expnt(s) = [0.49105419]
CPU time:       662.86
arg.atm = [[18 20  1 23  0  0]]
arg.bas = [[ 0  0  1  1  0 24 25  0]
 [ 0  0  1  1  0 26 27  0]
 [ 0  0  1  1  0 28 29  0]
 [ 0  0  1  1  0 30 31  0]
 [ 0  0  1  1  0 32 33  0]
 [ 0  0  1  1  0 34 35  0]
 [ 0  0  1  1  0 36 37  0]
 [ 0  0  1  1  0 38 39  0]
 [ 0  0  1  1  0 40 41  0]
 [ 0  1  1  1  0 42 43  0]
 [ 0  1  1  1  0 44 45  0]]
arg.env = [0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 0.00000000e+00 0.00000000e+00 0.00000000e+00 0.00000000e+00
 3.67552528e+04 6.70663367e+03 7.33284096e+03 2.00202374e+03
 1.83771974e+04 3.98771842e+03 1.23864009e+03 5.27501711e+02
 2.97708067e+02 1.81074784e+02 8.82720043e+01 7.27582534e+01
 3.06318710e+01 3.28961572e+01 4.68287457e+00 8.04265461e+00
 3.91008986e-01 1.24926645e+00 8.59889947e+00 4.29573994e+01
 4.91054185e-01 1.19921255e+00]
ecpbas  = []
Set gradient conv threshold to 3.16228e-05
Nelec from initial guess = 17.32092447350281
cond(S) = 191.66195820768704
E1 = -689.170984867991  E_coul = 184.8931163668648
init E= -504.277868501126
    CPU time for initialize scf      0.35 sec, wall time      0.06 sec
  HOMO = -0.680410936469531  LUMO = 57.716449817916
  mo_energy =
[-1.21684991e+02 -1.32941103e+01 -7.62446633e+00 -7.62446633e+00
 -7.62446633e+00 -1.64985029e+00 -6.80410936e-01 -6.80410936e-01
 -6.80410936e-01  5.77164498e+01  4.33092177e+02  2.20604739e+03
  1.17558270e+04  4.46697777e+04  1.31599723e+05]
E1 = -706.6731257088396  E_coul = 198.94903024382992
cycle= 1 E= -507.72409546501  delta_E= -3.45  |g|= 0.345  |ddm|=  0.3
    CPU time for cycle= 1      0.38 sec, wall time      0.02 sec
diis-norm(errvec)=0.484197
diis-c [-0.23444709  1.        ]
  HOMO = -0.236416100435932  LUMO = 59.0053944110151
  mo_energy =
[-1.20284200e+02 -1.22658807e+01 -6.65480259e+00 -6.65480259e+00
 -6.65480259e+00 -1.16416549e+00 -2.36416100e-01 -2.36416100e-01
 -2.36416100e-01  5.90053944e+01  4.34480866e+02  2.20736610e+03
  1.17570086e+04  4.46708792e+04  1.31600775e+05]
E1 = -706.6198218060714  E_coul = 198.89497344009393
cycle= 2 E= -507.724848365977  delta_E= -0.000753  |g|= 0.00635  |ddm|= 0.0256
    CPU time for cycle= 2      0.19 sec, wall time      0.03 sec
diis-norm(errvec)=0.00682383
diis-c [-4.59581304e-05  1.60592452e-03  9.98394075e-01]
  HOMO = -0.236752393096132  LUMO = 59.0007060566312
  mo_energy =
[-1.20297686e+02 -1.22681025e+01 -6.65818576e+00 -6.65818576e+00
 -6.65818576e+00 -1.16429153e+00 -2.36752393e-01 -2.36752393e-01
 -2.36752393e-01  5.90007061e+01  4.34466915e+02  2.20734542e+03
  1.17569831e+04  4.46708520e+04  1.31600747e+05]
E1 = -706.6188882046409  E_coul = 198.89403956456223
cycle= 3 E= -507.724848640079  delta_E= -2.74e-07  |g|= 0.000162  |ddm|= 0.000435
    CPU time for cycle= 3      0.03 sec, wall time      0.03 sec
diis-norm(errvec)=0.000218257
diis-c [-1.19758423e-09  2.85746588e-05 -3.23349693e-02  1.03230639e+00]
  HOMO = -0.236758377250599  LUMO = 59.0006158540137
  mo_energy =
[-1.20297944e+02 -1.22681440e+01 -6.65825403e+00 -6.65825403e+00
 -6.65825403e+00 -1.16429344e+00 -2.36758377e-01 -2.36758377e-01
 -2.36758377e-01  5.90006159e+01  4.34466664e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188671931646  E_coul = 198.89401855292215
cycle= 4 E= -507.724848640242  delta_E= -1.64e-10  |g|= 8.11e-07  |ddm|= 9.75e-06
    CPU time for cycle= 4      0.03 sec, wall time      0.03 sec
E1 = -706.6188671931646  E_coul = 198.89401855292215
  HOMO = -0.236758324898695  LUMO = 59.0006165214476
  mo_energy =
[-1.20297942e+02 -1.22681437e+01 -6.65825355e+00 -6.65825355e+00
 -6.65825355e+00 -1.16429342e+00 -2.36758325e-01 -2.36758325e-01
 -2.36758325e-01  5.90006165e+01  4.34466666e+02  2.20734510e+03
  1.17569827e+04  4.46708517e+04  1.31600747e+05]
E1 = -706.6188673144954  E_coul = 198.89401867425343
Extra cycle  E= -507.724848640242  delta_E= 4.55e-13  |g|= 1.62e-08  |ddm|= 5.84e-08
    CPU time for scf_cycle      1.00 sec, wall time      0.20 sec
exp = [3.67552528e+04 7.33284096e+03 1.83771974e+04 1.23864009e+03
 2.97708067e+02 8.82720043e+01 3.06318710e+01 4.68287457e+00
 3.91008986e-01 8.59889947e+00 4.91054185e-01]
E = -507.72484864024204
E = -507.72484864024204
exp = [3.6755252779566872e+04,7.3328409614953716e+03,1.8377197410580800e+04,1.2386400874330729e+03,2.9770806687602374e+02,8.8272004261542506e+01,3.0631871013865855e+01,4.6828745677825925e+00,3.9100898581796761e-01,8.5988994657420257e+00,4.9105418528035344e-01]
